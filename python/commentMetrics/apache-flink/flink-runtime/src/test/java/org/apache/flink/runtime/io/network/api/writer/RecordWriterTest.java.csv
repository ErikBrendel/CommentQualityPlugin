# id;timestamp;commentText;codeText;commentWords;codeWords
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1477582418;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L)___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1477937801;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L)___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1483975430;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L)___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1487871589;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forFullCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,full,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1489060856;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forFullCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,full,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1489149058;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forFullCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,full,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1489589988;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forFullCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,full,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1509118643;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1511516912;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1513094459;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1513102147;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1515408360;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(0)).requestBufferBlocking()___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,verify,buffer,provider,times,0,request,buffer,blocking,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1515408360;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1515408360;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1516285455;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1516285456;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1516285878;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (Queue<BufferOrEvent> queue : queues) {_			assertEquals(1, queue.size())__			BufferOrEvent boe = queue.remove()__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,queue,buffer,or,event,queue,queues,assert,equals,1,queue,size,buffer,or,event,boe,queue,remove,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1516291500;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1516291532;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpoint())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1517489695;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1517489696;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1519039275;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1519039287;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1519039301;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1519308961;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1519718834;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1523449296;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1537529044;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1541772956;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,num,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,num,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1543403062;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numberOfChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,number,of,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,number,of,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1543403062;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numberOfChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,number,of,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,number,of,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> @Test 	public void testBroadcastEventNoRecords() throws Exception;1548853005;Tests broadcasting events when no records have been emitted yet.;@Test_	public void testBroadcastEventNoRecords() throws Exception {_		int numberOfChannels = 4__		int bufferSize = 32___		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter)__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		writer.broadcastEvent(barrier)___		assertEquals(0, bufferProvider.getNumberOfCreatedBuffers())___		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(1, queues[i].size())__			BufferOrEvent boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__			assertEquals(0, queues[i].size())__		}_	};tests,broadcasting,events,when,no,records,have,been,emitted,yet;test,public,void,test,broadcast,event,no,records,throws,exception,int,number,of,channels,4,int,buffer,size,32,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,919192l,integer,18828228l,checkpoint,options,for,checkpoint,with,default,location,writer,broadcast,event,barrier,assert,equals,0,buffer,provider,get,number,of,created,buffers,for,int,i,0,i,number,of,channels,i,assert,equals,1,queues,i,size,buffer,or,event,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event,assert,equals,0,queues,i,size
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider);1516291500;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider);1516291532;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider);1517489695;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider);1517489696;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider);1519039275;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<Buffer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1477582418;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__				queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				AbstractEvent event = (AbstractEvent) invocationOnMock.getArguments()[0]__				Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__				queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				return null__			}_		}).when(partitionWriter).writeEvent(any(AbstractEvent.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,abstract,event,event,abstract,event,invocation,on,mock,get,arguments,0,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,event,any,abstract,event,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1477937801;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__				queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				AbstractEvent event = (AbstractEvent) invocationOnMock.getArguments()[0]__				Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__				queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				return null__			}_		}).when(partitionWriter).writeEvent(any(AbstractEvent.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,abstract,event,event,abstract,event,invocation,on,mock,get,arguments,0,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,event,any,abstract,event,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1483975430;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1487871589;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1489060856;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1489149058;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1489589988;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1509118643;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1511516912;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1513094459;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfOutputChannels()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,output,channels,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1513102147;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1515408360;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1515408360;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1515408360;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1516285455;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1516285456;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycle()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> private ResultPartitionWriter createCollectingPartitionWriter( 			final Queue<BufferOrEvent>[] queues, 			BufferProvider bufferProvider) throws IOException;1516285878;Creates a mock partition writer that collects the added buffers/events.__<p>This much mocking should not be necessary with better designed_interfaces. Refactoring this will take too much time now though, hence_the mocking. Ideally, we will refactor all of this mess in order to make_our lives easier and test it better.;private ResultPartitionWriter createCollectingPartitionWriter(_			final Queue<BufferOrEvent>[] queues,_			BufferProvider bufferProvider) throws IOException {__		int numChannels = queues.length___		ResultPartitionWriter partitionWriter = mock(ResultPartitionWriter.class)__		when(partitionWriter.getBufferProvider()).thenReturn(checkNotNull(bufferProvider))__		when(partitionWriter.getNumberOfSubpartitions()).thenReturn(numChannels)___		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocationOnMock) throws Throwable {_				Buffer buffer = (Buffer) invocationOnMock.getArguments()[0]__				if (buffer.isBuffer()) {_					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(buffer, targetChannel))__				} else {_					_					AbstractEvent event = EventSerializer.fromBuffer(buffer, getClass().getClassLoader())__					buffer.recycleBuffer()_ _					Integer targetChannel = (Integer) invocationOnMock.getArguments()[1]__					queues[targetChannel].add(new BufferOrEvent(event, targetChannel))__				}_				return null__			}_		}).when(partitionWriter).writeBuffer(any(Buffer.class), anyInt())___		return partitionWriter__	};creates,a,mock,partition,writer,that,collects,the,added,buffers,events,p,this,much,mocking,should,not,be,necessary,with,better,designed,interfaces,refactoring,this,will,take,too,much,time,now,though,hence,the,mocking,ideally,we,will,refactor,all,of,this,mess,in,order,to,make,our,lives,easier,and,test,it,better;private,result,partition,writer,create,collecting,partition,writer,final,queue,buffer,or,event,queues,buffer,provider,buffer,provider,throws,ioexception,int,num,channels,queues,length,result,partition,writer,partition,writer,mock,result,partition,writer,class,when,partition,writer,get,buffer,provider,then,return,check,not,null,buffer,provider,when,partition,writer,get,number,of,subpartitions,then,return,num,channels,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,buffer,buffer,invocation,on,mock,get,arguments,0,if,buffer,is,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,buffer,target,channel,else,abstract,event,event,event,serializer,from,buffer,buffer,get,class,get,class,loader,buffer,recycle,buffer,integer,target,channel,integer,invocation,on,mock,get,arguments,1,queues,target,channel,add,new,buffer,or,event,event,target,channel,return,null,when,partition,writer,write,buffer,any,buffer,class,any,int,return,partition,writer
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1516291532;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1517489695;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1517489696;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1519039275;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1519039287;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1519039301;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flush()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1519308961;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1519718834;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1523449296;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1537529044;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1541772956;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1543403062;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1543403062;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEmitBufferIndependence() throws Exception;1548853005;Tests that broadcasted records' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEmitBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<IntValue> writer = new RecordWriter<>(partition)___		writer.broadcastEmit(new IntValue(0))__		writer.flushAll()___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,records,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,emit,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,int,value,writer,new,record,writer,partition,writer,broadcast,emit,new,int,value,0,writer,flush,all,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1432760698;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1432896699;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1440576612;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1441738685;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1465991918;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1477582418;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1477591529;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1477937801;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1483975430;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1487871589;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1489060856;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1489149058;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1489589988;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1509118643;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1511516912;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1513094459;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1513102147;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1515408360;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1515408360;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final Buffer buffer = spy(TestBufferFactory.createBuffer(4))___			_			Answer<Buffer> request = new Answer<Buffer>() {_				@Override_				public Buffer answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return buffer__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertTrue("Buffer not recycled.", buffer.isRecycled())__			verify(buffer, times(1)).recycle()__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,buffer,buffer,spy,test,buffer,factory,create,buffer,4,answer,buffer,request,new,answer,buffer,override,public,buffer,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,buffer,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,true,buffer,not,recycled,buffer,is,recycled,verify,buffer,times,1,recycle,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1515408360;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1516285455;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1516285456;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1516285878;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = createResultPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,create,result,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1516291500;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = spy(new RecyclingPartitionWriter(bufferProvider))___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,spy,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1516291532;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = spy(new RecyclingPartitionWriter(bufferProvider))___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,spy,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1517489695;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = spy(new RecyclingPartitionWriter(bufferProvider))___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,spy,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1517489696;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = spy(new RecyclingPartitionWriter(bufferProvider))___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()__			verify(partitionWriter, times(1)).writeBuffer(any(Buffer.class), anyInt())___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,spy,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,verify,partition,writer,times,1,write,buffer,any,buffer,class,any,int,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1519039275;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1519039287;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1519039301;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flush()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1519308961;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1519718834;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1523449296;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1537529044;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1541772956;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1543403062;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1543403062;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception;1548853005;Tests a fix for FLINK-2089.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>;@Test_	public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {_		ExecutorService executor = null___		try {_			executor = Executors.newSingleThreadExecutor()___			final CountDownLatch sync = new CountDownLatch(2)___			final TrackingBufferRecycler recycler = new TrackingBufferRecycler()___			final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4)___			_			Answer<BufferBuilder> request = new Answer<BufferBuilder>() {_				@Override_				public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {_					sync.countDown()___					if (sync.getCount() == 1) {_						return new BufferBuilder(memorySegment, recycler)__					}__					final Object o = new Object()__					synchronized (o) {_						while (true) {_							o.wait()__						}_					}_				}_			}___			BufferProvider bufferProvider = mock(BufferProvider.class)__			when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request)___			ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider)___			final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter)___			Future<?> result = executor.submit(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					IntValue val = new IntValue(0)___					try {_						recordWriter.emit(val)__						recordWriter.flushAll()___						recordWriter.emit(val)__					}_					catch (InterruptedException e) {_						recordWriter.clearBuffers()__					}__					return null__				}_			})___			sync.await()___			_			_			_			_			_			result.cancel(true)___			recordWriter.clearBuffers()___			_			verify(bufferProvider, times(2)).requestBufferBuilderBlocking()___			_			_			assertEquals(1, recycler.getRecycledMemorySegments().size())__			assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0))__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}_		}_	};tests,a,fix,for,flink,2089,see,a,href,https,issues,apache,org,jira,browse,flink,2089,flink,2089,a;test,public,void,test,clear,buffers,after,interrupt,during,blocking,buffer,request,throws,exception,executor,service,executor,null,try,executor,executors,new,single,thread,executor,final,count,down,latch,sync,new,count,down,latch,2,final,tracking,buffer,recycler,recycler,new,tracking,buffer,recycler,final,memory,segment,memory,segment,memory,segment,factory,allocate,unpooled,segment,4,answer,buffer,builder,request,new,answer,buffer,builder,override,public,buffer,builder,answer,invocation,on,mock,invocation,throws,throwable,sync,count,down,if,sync,get,count,1,return,new,buffer,builder,memory,segment,recycler,final,object,o,new,object,synchronized,o,while,true,o,wait,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,builder,blocking,then,answer,request,result,partition,writer,partition,writer,new,recycling,partition,writer,buffer,provider,final,record,writer,int,value,record,writer,new,record,writer,int,value,partition,writer,future,result,executor,submit,new,callable,void,override,public,void,call,throws,exception,int,value,val,new,int,value,0,try,record,writer,emit,val,record,writer,flush,all,record,writer,emit,val,catch,interrupted,exception,e,record,writer,clear,buffers,return,null,sync,await,result,cancel,true,record,writer,clear,buffers,verify,buffer,provider,times,2,request,buffer,builder,blocking,assert,equals,1,recycler,get,recycled,memory,segments,size,assert,equals,memory,segment,recycler,get,recycled,memory,segments,get,0,finally,if,executor,null,executor,shutdown
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1483975430;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1487871589;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1489060856;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1489149058;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1489589988;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1509118643;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1511516912;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1513094459;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1513102147;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues,_				new TestInfiniteBufferProvider())__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,infinite,buffer,provider,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1515408360;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1515408360;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1515408360;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1516285455;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1516285456;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1516285878;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<BufferOrEvent>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			createCollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,or,event,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,create,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1516291500;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1516291532;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1517489695;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.__@throws Exception;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels,throws,exception;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1517489696;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1519039275;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		_		PowerMockito_			.stub(PowerMockito.method(EventSerializer.class, "toBuffer"))_			.toReturn(buffer)___		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,power,mockito,stub,power,mockito,method,event,serializer,class,to,buffer,to,return,buffer,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1519039287;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		BufferConsumer bufferConsumer = writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,buffer,consumer,buffer,consumer,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1519039301;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		BufferConsumer bufferConsumer = writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,buffer,consumer,buffer,consumer,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1519308961;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		BufferConsumer bufferConsumer = writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,buffer,consumer,buffer,consumer,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1519718834;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		BufferConsumer bufferConsumer = writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,buffer,consumer,buffer,consumer,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1523449296;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1537529044;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1541772956;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1543403062;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1543403062;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> @Test 	public void testBroadcastEventBufferReferenceCounting() throws Exception;1548853005;Tests that event buffers are properly recycled when broadcasting events_to multiple channels.;@Test_	public void testBroadcastEventBufferReferenceCounting() throws Exception {__		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		BufferConsumer bufferConsumer1 = queues[0].getFirst()__		BufferConsumer bufferConsumer2 = queues[1].getFirst()___		_		for (int i = 0_ i < queues.length_ i++) {_			assertTrue(parseBuffer(queues[i].remove(), i).isEvent())__		}__		assertTrue(bufferConsumer1.isRecycled())__		assertTrue(bufferConsumer2.isRecycled())__	};tests,that,event,buffers,are,properly,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,reference,counting,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,consumer,buffer,consumer1,queues,0,get,first,buffer,consumer,buffer,consumer2,queues,1,get,first,for,int,i,0,i,queues,length,i,assert,true,parse,buffer,queues,i,remove,i,is,event,assert,true,buffer,consumer1,is,recycled,assert,true,buffer,consumer2,is,recycled
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1519039287;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1519039301;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1519308961;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1519718834;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1523449296;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1537529044;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1541772956;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1543403062;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1543403062;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> CollectingPartitionWriter -> private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider);1548853005;Create the partition writer.__@param queues one queue per outgoing channel_@param bufferProvider buffer provider;private CollectingPartitionWriter(Queue<BufferConsumer>[] queues, BufferProvider bufferProvider) {_			this.queues = queues__			this.bufferProvider = bufferProvider__		};create,the,partition,writer,param,queues,one,queue,per,outgoing,channel,param,buffer,provider,buffer,provider;private,collecting,partition,writer,queue,buffer,consumer,queues,buffer,provider,buffer,provider,this,queues,queues,this,buffer,provider,buffer,provider
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1477582418;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L)___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1477937801;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L)___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1483975430;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L)___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1487871589;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forFullCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,full,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1489060856;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forFullCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,full,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1489149058;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forFullCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,full,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1489589988;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forFullCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,full,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1509118643;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1511516912;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1513094459;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1513102147;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1515408360;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		BufferProvider bufferProvider = createBufferProvider(bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		verify(bufferProvider, times(4)).requestBufferBlocking()___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,buffer,provider,buffer,provider,create,buffer,provider,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,verify,buffer,provider,times,4,request,buffer,blocking,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1515408360;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1515408360;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1516285455;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1516285456;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1516285878;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferOrEvent>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = createCollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		assertEquals(2, queues[0].size())_ _		assertEquals(3, queues[1].size())_ _		assertEquals(2, queues[2].size())_ _		assertEquals(1, queues[3].size())_ _	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,or,event,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,create,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,assert,equals,2,queues,0,size,assert,equals,3,queues,1,size,assert,equals,2,queues,2,size,assert,equals,1,queues,3,size
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1516291500;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1516291532;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpoint())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1517489695;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1517489696;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1519039275;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<Buffer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1519039287;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1519039301;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1519308961;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1519718834;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1523449296;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1537529044;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobin<ByteArrayIO>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,byte,array,io,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1541772956;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,num,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,num,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1543403062;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numberOfChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numberOfChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,number,of,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,number,of,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1543403062;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numberOfChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter, new RoundRobinChannelSelector<>())__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numberOfChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,number,of,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,new,round,robin,channel,selector,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,number,of,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventMixedRecords() throws Exception;1548853005;Tests broadcasting events when records have been emitted. The emitted_records cover all three {@link SerializationResult} types.;@Test_	public void testBroadcastEventMixedRecords() throws Exception {_		Random rand = new XORShiftRandom()__		int numberOfChannels = 4__		int bufferSize = 32__		int lenBytes = 4_ __		@SuppressWarnings("unchecked")_		Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)___		ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter)__		CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation())___		_		_		__		_		byte[] bytes = new byte[bufferSize / 2]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize + 1]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		_		bytes = new byte[bufferSize - lenBytes]__		rand.nextBytes(bytes)___		writer.emit(new ByteArrayIO(bytes))___		__		_		writer.broadcastEvent(barrier)___		assertEquals(4, bufferProvider.getNumberOfCreatedBuffers())___		BufferOrEvent boe__		assertEquals(2, queues[0].size())_ _		assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer())__		assertEquals(3, queues[1].size())_ _		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer())__		assertEquals(2, queues[2].size())_ _		assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer())__		assertEquals(1, queues[3].size())_ __		_		for (int i = 0_ i < numberOfChannels_ i++) {_			boe = parseBuffer(queues[i].remove(), i)__			assertTrue(boe.isEvent())__			assertEquals(barrier, boe.getEvent())__		}_	};tests,broadcasting,events,when,records,have,been,emitted,the,emitted,records,cover,all,three,link,serialization,result,types;test,public,void,test,broadcast,event,mixed,records,throws,exception,random,rand,new,xorshift,random,int,number,of,channels,4,int,buffer,size,32,int,len,bytes,4,suppress,warnings,unchecked,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,record,writer,byte,array,io,writer,new,record,writer,partition,writer,checkpoint,barrier,barrier,new,checkpoint,barrier,integer,1292l,integer,199l,checkpoint,options,for,checkpoint,with,default,location,byte,bytes,new,byte,buffer,size,2,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,1,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,bytes,new,byte,buffer,size,len,bytes,rand,next,bytes,bytes,writer,emit,new,byte,array,io,bytes,writer,broadcast,event,barrier,assert,equals,4,buffer,provider,get,number,of,created,buffers,buffer,or,event,boe,assert,equals,2,queues,0,size,assert,true,parse,buffer,queues,0,remove,0,is,buffer,assert,equals,3,queues,1,size,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,true,parse,buffer,queues,1,remove,1,is,buffer,assert,equals,2,queues,2,size,assert,true,parse,buffer,queues,2,remove,2,is,buffer,assert,equals,1,queues,3,size,for,int,i,0,i,number,of,channels,i,boe,parse,buffer,queues,i,remove,i,assert,true,boe,is,event,assert,equals,barrier,boe,get,event
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1516291532;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1517489695;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1517489696;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1519039275;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<Buffer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = queues[0].remove()__		Buffer buffer2 = queues[1].remove()__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,queues,0,remove,buffer,buffer2,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1519039287;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1519039301;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1519308961;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1519718834;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1523449296;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1537529044;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1541772956;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1543403062;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1543403062;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> @Test 	public void testBroadcastEventBufferIndependence() throws Exception;1548853005;Tests that broadcasted events' buffers are independent (in their (reader) indices) once they_are put into the queue for Netty when broadcasting events to multiple channels.;@Test_	public void testBroadcastEventBufferIndependence() throws Exception {_		@SuppressWarnings("unchecked")_		ArrayDeque<BufferConsumer>[] queues =_			new ArrayDeque[]{new ArrayDeque(), new ArrayDeque()}___		ResultPartitionWriter partition =_			new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE))__		RecordWriter<?> writer = new RecordWriter<>(partition)___		writer.broadcastEvent(EndOfPartitionEvent.INSTANCE)___		_		assertEquals(1, queues[0].size())__		assertEquals(1, queues[1].size())___		_		Buffer buffer1 = buildSingleBuffer(queues[0].remove())__		Buffer buffer2 = buildSingleBuffer(queues[1].remove())__		assertEquals(0, buffer1.getReaderIndex())__		assertEquals(0, buffer2.getReaderIndex())__		buffer1.setReaderIndex(1)__		assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex())__	};tests,that,broadcasted,events,buffers,are,independent,in,their,reader,indices,once,they,are,put,into,the,queue,for,netty,when,broadcasting,events,to,multiple,channels;test,public,void,test,broadcast,event,buffer,independence,throws,exception,suppress,warnings,unchecked,array,deque,buffer,consumer,queues,new,array,deque,new,array,deque,new,array,deque,result,partition,writer,partition,new,collecting,partition,writer,queues,new,test,pooled,buffer,provider,integer,record,writer,writer,new,record,writer,partition,writer,broadcast,event,end,of,partition,event,instance,assert,equals,1,queues,0,size,assert,equals,1,queues,1,size,buffer,buffer1,build,single,buffer,queues,0,remove,buffer,buffer2,build,single,buffer,queues,1,remove,assert,equals,0,buffer1,get,reader,index,assert,equals,0,buffer2,get,reader,index,buffer1,set,reader,index,1,assert,equals,buffer,2,shares,the,same,reader,index,as,buffer,1,0,buffer2,get,reader,index
RecordWriterTest -> private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception;1537529044;The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,_that is all the target channels can receive the whole outputs.__@param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not;private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {_		final int numChannels = 4__		final int bufferSize = 32__		final int numValues = 8__		final int serializationLength = 4___		@SuppressWarnings("unchecked")_		final Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)__		final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		final RecordWriter<SerializationTestType> writer = isBroadcastEmit ?_			new RecordWriter<>(partitionWriter) :_			new RecordWriter<>(partitionWriter, new Broadcast<>())__		final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(_			new String[]{ tempFolder.getRoot().getAbsolutePath() })___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()__		final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT)__		for (SerializationTestType record : records) {_			serializedRecords.add(record)___			if (isBroadcastEmit) {_				writer.broadcastEmit(record)__			} else {_				writer.emit(record)__			}_		}__		final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength))__		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(requiredBuffers, queues[i].size())___			final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone()__			int assertRecords = 0__			for (int j = 0_ j < requiredBuffers_ j++) {_				Buffer buffer = buildSingleBuffer(queues[i].remove())__				deserializer.setNextBuffer(buffer)___				assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer)__			}_			Assert.assertEquals(numValues, assertRecords)__		}_	};the,results,of,emitting,records,via,broadcast,partitioner,or,broadcasting,records,directly,are,the,same,that,is,all,the,target,channels,can,receive,the,whole,outputs,param,is,broadcast,emit,whether,using,link,record,writer,broadcast,emit,ioreadable,writable,or,not;private,void,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,boolean,is,broadcast,emit,throws,exception,final,int,num,channels,4,final,int,buffer,size,32,final,int,num,values,8,final,int,serialization,length,4,suppress,warnings,unchecked,final,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,final,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,final,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,final,record,writer,serialization,test,type,writer,is,broadcast,emit,new,record,writer,partition,writer,new,record,writer,partition,writer,new,broadcast,final,record,deserializer,serialization,test,type,deserializer,new,spilling,adaptive,spanning,record,deserializer,new,string,temp,folder,get,root,get,absolute,path,final,array,deque,serialization,test,type,serialized,records,new,array,deque,final,iterable,serialization,test,type,records,util,random,records,num,values,serialization,test,type,factory,int,for,serialization,test,type,record,records,serialized,records,add,record,if,is,broadcast,emit,writer,broadcast,emit,record,else,writer,emit,record,final,int,required,buffers,num,values,buffer,size,4,serialization,length,for,int,i,0,i,num,channels,i,assert,equals,required,buffers,queues,i,size,final,array,deque,serialization,test,type,expected,records,serialized,records,clone,int,assert,records,0,for,int,j,0,j,required,buffers,j,buffer,buffer,build,single,buffer,queues,i,remove,deserializer,set,next,buffer,buffer,assert,records,deserialization,utils,deserialize,records,expected,records,deserializer,assert,assert,equals,num,values,assert,records
RecordWriterTest -> private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception;1541772956;The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,_that is all the target channels can receive the whole outputs.__@param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not;private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {_		final int numChannels = 4__		final int bufferSize = 32__		final int numValues = 8__		final int serializationLength = 4___		@SuppressWarnings("unchecked")_		final Queue<BufferConsumer>[] queues = new Queue[numChannels]__		for (int i = 0_ i < numChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)__		final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		final RecordWriter<SerializationTestType> writer = isBroadcastEmit ?_			new RecordWriter<>(partitionWriter) :_			new RecordWriter<>(partitionWriter, new Broadcast<>())__		final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(_			new String[]{ tempFolder.getRoot().getAbsolutePath() })___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()__		final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT)__		for (SerializationTestType record : records) {_			serializedRecords.add(record)___			if (isBroadcastEmit) {_				writer.broadcastEmit(record)__			} else {_				writer.emit(record)__			}_		}__		final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength))__		for (int i = 0_ i < numChannels_ i++) {_			assertEquals(requiredBuffers, queues[i].size())___			final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone()__			int assertRecords = 0__			for (int j = 0_ j < requiredBuffers_ j++) {_				Buffer buffer = buildSingleBuffer(queues[i].remove())__				deserializer.setNextBuffer(buffer)___				assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer)__			}_			Assert.assertEquals(numValues, assertRecords)__		}_	};the,results,of,emitting,records,via,broadcast,partitioner,or,broadcasting,records,directly,are,the,same,that,is,all,the,target,channels,can,receive,the,whole,outputs,param,is,broadcast,emit,whether,using,link,record,writer,broadcast,emit,ioreadable,writable,or,not;private,void,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,boolean,is,broadcast,emit,throws,exception,final,int,num,channels,4,final,int,buffer,size,32,final,int,num,values,8,final,int,serialization,length,4,suppress,warnings,unchecked,final,queue,buffer,consumer,queues,new,queue,num,channels,for,int,i,0,i,num,channels,i,queues,i,new,array,deque,final,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,final,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,final,record,writer,serialization,test,type,writer,is,broadcast,emit,new,record,writer,partition,writer,new,record,writer,partition,writer,new,broadcast,final,record,deserializer,serialization,test,type,deserializer,new,spilling,adaptive,spanning,record,deserializer,new,string,temp,folder,get,root,get,absolute,path,final,array,deque,serialization,test,type,serialized,records,new,array,deque,final,iterable,serialization,test,type,records,util,random,records,num,values,serialization,test,type,factory,int,for,serialization,test,type,record,records,serialized,records,add,record,if,is,broadcast,emit,writer,broadcast,emit,record,else,writer,emit,record,final,int,required,buffers,num,values,buffer,size,4,serialization,length,for,int,i,0,i,num,channels,i,assert,equals,required,buffers,queues,i,size,final,array,deque,serialization,test,type,expected,records,serialized,records,clone,int,assert,records,0,for,int,j,0,j,required,buffers,j,buffer,buffer,build,single,buffer,queues,i,remove,deserializer,set,next,buffer,buffer,assert,records,deserialization,utils,deserialize,records,expected,records,deserializer,assert,assert,equals,num,values,assert,records
RecordWriterTest -> private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception;1543403062;The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,_that is all the target channels can receive the whole outputs.__@param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not;private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {_		final int numberOfChannels = 4__		final int bufferSize = 32__		final int numValues = 8__		final int serializationLength = 4___		@SuppressWarnings("unchecked")_		final Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)__		final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		final RecordWriter<SerializationTestType> writer = isBroadcastEmit ?_			new RecordWriter<>(partitionWriter) :_			new RecordWriter<>(partitionWriter, new Broadcast<>())__		final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(_			new String[]{ tempFolder.getRoot().getAbsolutePath() })___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()__		final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT)__		for (SerializationTestType record : records) {_			serializedRecords.add(record)___			if (isBroadcastEmit) {_				writer.broadcastEmit(record)__			} else {_				writer.emit(record)__			}_		}__		final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength))__		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(requiredBuffers, queues[i].size())___			final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone()__			int assertRecords = 0__			for (int j = 0_ j < requiredBuffers_ j++) {_				Buffer buffer = buildSingleBuffer(queues[i].remove())__				deserializer.setNextBuffer(buffer)___				assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer)__			}_			Assert.assertEquals(numValues, assertRecords)__		}_	};the,results,of,emitting,records,via,broadcast,partitioner,or,broadcasting,records,directly,are,the,same,that,is,all,the,target,channels,can,receive,the,whole,outputs,param,is,broadcast,emit,whether,using,link,record,writer,broadcast,emit,ioreadable,writable,or,not;private,void,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,boolean,is,broadcast,emit,throws,exception,final,int,number,of,channels,4,final,int,buffer,size,32,final,int,num,values,8,final,int,serialization,length,4,suppress,warnings,unchecked,final,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,final,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,final,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,final,record,writer,serialization,test,type,writer,is,broadcast,emit,new,record,writer,partition,writer,new,record,writer,partition,writer,new,broadcast,final,record,deserializer,serialization,test,type,deserializer,new,spilling,adaptive,spanning,record,deserializer,new,string,temp,folder,get,root,get,absolute,path,final,array,deque,serialization,test,type,serialized,records,new,array,deque,final,iterable,serialization,test,type,records,util,random,records,num,values,serialization,test,type,factory,int,for,serialization,test,type,record,records,serialized,records,add,record,if,is,broadcast,emit,writer,broadcast,emit,record,else,writer,emit,record,final,int,required,buffers,num,values,buffer,size,4,serialization,length,for,int,i,0,i,number,of,channels,i,assert,equals,required,buffers,queues,i,size,final,array,deque,serialization,test,type,expected,records,serialized,records,clone,int,assert,records,0,for,int,j,0,j,required,buffers,j,buffer,buffer,build,single,buffer,queues,i,remove,deserializer,set,next,buffer,buffer,assert,records,deserialization,utils,deserialize,records,expected,records,deserializer,assert,assert,equals,num,values,assert,records
RecordWriterTest -> private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception;1543403062;The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,_that is all the target channels can receive the whole outputs.__@param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not;private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {_		final int numberOfChannels = 4__		final int bufferSize = 32__		final int numValues = 8__		final int serializationLength = 4___		@SuppressWarnings("unchecked")_		final Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)__		final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		final ChannelSelector selector = new Broadcast<>()__		final RecordWriter<SerializationTestType> writer = isBroadcastEmit ?_			new RecordWriter<>(partitionWriter) : new RecordWriter<>(partitionWriter, selector)__		final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(_			new String[]{ tempFolder.getRoot().getAbsolutePath() })___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()__		final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT)__		for (SerializationTestType record : records) {_			serializedRecords.add(record)___			if (isBroadcastEmit) {_				writer.broadcastEmit(record)__			} else {_				writer.emit(record)__			}_		}__		final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength))__		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(requiredBuffers, queues[i].size())___			final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone()__			int assertRecords = 0__			for (int j = 0_ j < requiredBuffers_ j++) {_				Buffer buffer = buildSingleBuffer(queues[i].remove())__				deserializer.setNextBuffer(buffer)___				assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer)__			}_			Assert.assertEquals(numValues, assertRecords)__		}_	};the,results,of,emitting,records,via,broadcast,partitioner,or,broadcasting,records,directly,are,the,same,that,is,all,the,target,channels,can,receive,the,whole,outputs,param,is,broadcast,emit,whether,using,link,record,writer,broadcast,emit,ioreadable,writable,or,not;private,void,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,boolean,is,broadcast,emit,throws,exception,final,int,number,of,channels,4,final,int,buffer,size,32,final,int,num,values,8,final,int,serialization,length,4,suppress,warnings,unchecked,final,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,final,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,final,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,final,channel,selector,selector,new,broadcast,final,record,writer,serialization,test,type,writer,is,broadcast,emit,new,record,writer,partition,writer,new,record,writer,partition,writer,selector,final,record,deserializer,serialization,test,type,deserializer,new,spilling,adaptive,spanning,record,deserializer,new,string,temp,folder,get,root,get,absolute,path,final,array,deque,serialization,test,type,serialized,records,new,array,deque,final,iterable,serialization,test,type,records,util,random,records,num,values,serialization,test,type,factory,int,for,serialization,test,type,record,records,serialized,records,add,record,if,is,broadcast,emit,writer,broadcast,emit,record,else,writer,emit,record,final,int,required,buffers,num,values,buffer,size,4,serialization,length,for,int,i,0,i,number,of,channels,i,assert,equals,required,buffers,queues,i,size,final,array,deque,serialization,test,type,expected,records,serialized,records,clone,int,assert,records,0,for,int,j,0,j,required,buffers,j,buffer,buffer,build,single,buffer,queues,i,remove,deserializer,set,next,buffer,buffer,assert,records,deserialization,utils,deserialize,records,expected,records,deserializer,assert,assert,equals,num,values,assert,records
RecordWriterTest -> private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception;1548853005;The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,_that is all the target channels can receive the whole outputs.__@param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not;private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {_		final int numberOfChannels = 4__		final int bufferSize = 32__		final int numValues = 8__		final int serializationLength = 4___		@SuppressWarnings("unchecked")_		final Queue<BufferConsumer>[] queues = new Queue[numberOfChannels]__		for (int i = 0_ i < numberOfChannels_ i++) {_			queues[i] = new ArrayDeque<>()__		}__		final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize)__		final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider)__		final ChannelSelector selector = new OutputEmitter(ShipStrategyType.BROADCAST, 0)__		final RecordWriter<SerializationTestType> writer = RecordWriter.createRecordWriter(partitionWriter, selector, 0, "test")__		final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(_			new String[]{ tempFolder.getRoot().getAbsolutePath() })___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()__		final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT)__		for (SerializationTestType record : records) {_			serializedRecords.add(record)___			if (isBroadcastEmit) {_				writer.broadcastEmit(record)__			} else {_				writer.emit(record)__			}_		}__		final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength))__		for (int i = 0_ i < numberOfChannels_ i++) {_			assertEquals(requiredBuffers, queues[i].size())___			final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone()__			int assertRecords = 0__			for (int j = 0_ j < requiredBuffers_ j++) {_				Buffer buffer = buildSingleBuffer(queues[i].remove())__				deserializer.setNextBuffer(buffer)___				assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer)__			}_			Assert.assertEquals(numValues, assertRecords)__		}_	};the,results,of,emitting,records,via,broadcast,partitioner,or,broadcasting,records,directly,are,the,same,that,is,all,the,target,channels,can,receive,the,whole,outputs,param,is,broadcast,emit,whether,using,link,record,writer,broadcast,emit,ioreadable,writable,or,not;private,void,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,boolean,is,broadcast,emit,throws,exception,final,int,number,of,channels,4,final,int,buffer,size,32,final,int,num,values,8,final,int,serialization,length,4,suppress,warnings,unchecked,final,queue,buffer,consumer,queues,new,queue,number,of,channels,for,int,i,0,i,number,of,channels,i,queues,i,new,array,deque,final,test,pooled,buffer,provider,buffer,provider,new,test,pooled,buffer,provider,integer,buffer,size,final,result,partition,writer,partition,writer,new,collecting,partition,writer,queues,buffer,provider,final,channel,selector,selector,new,output,emitter,ship,strategy,type,broadcast,0,final,record,writer,serialization,test,type,writer,record,writer,create,record,writer,partition,writer,selector,0,test,final,record,deserializer,serialization,test,type,deserializer,new,spilling,adaptive,spanning,record,deserializer,new,string,temp,folder,get,root,get,absolute,path,final,array,deque,serialization,test,type,serialized,records,new,array,deque,final,iterable,serialization,test,type,records,util,random,records,num,values,serialization,test,type,factory,int,for,serialization,test,type,record,records,serialized,records,add,record,if,is,broadcast,emit,writer,broadcast,emit,record,else,writer,emit,record,final,int,required,buffers,num,values,buffer,size,4,serialization,length,for,int,i,0,i,number,of,channels,i,assert,equals,required,buffers,queues,i,size,final,array,deque,serialization,test,type,expected,records,serialized,records,clone,int,assert,records,0,for,int,j,0,j,required,buffers,j,buffer,buffer,build,single,buffer,queues,i,remove,deserializer,set,next,buffer,buffer,assert,records,deserialization,utils,deserialize,records,expected,records,deserializer,assert,assert,equals,num,values,assert,records
RecordWriterTest -> @Test 	public void testBroadcastEmitRecord() throws Exception;1537529044;Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.;@Test_	public void testBroadcastEmitRecord() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true)__	};tests,that,records,are,broadcast,via,link,record,writer,broadcast,emit,ioreadable,writable;test,public,void,test,broadcast,emit,record,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,true
RecordWriterTest -> @Test 	public void testBroadcastEmitRecord() throws Exception;1541772956;Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.;@Test_	public void testBroadcastEmitRecord() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true)__	};tests,that,records,are,broadcast,via,link,record,writer,broadcast,emit,ioreadable,writable;test,public,void,test,broadcast,emit,record,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,true
RecordWriterTest -> @Test 	public void testBroadcastEmitRecord() throws Exception;1543403062;Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.;@Test_	public void testBroadcastEmitRecord() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true)__	};tests,that,records,are,broadcast,via,link,record,writer,broadcast,emit,ioreadable,writable;test,public,void,test,broadcast,emit,record,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,true
RecordWriterTest -> @Test 	public void testBroadcastEmitRecord() throws Exception;1543403062;Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.;@Test_	public void testBroadcastEmitRecord() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true)__	};tests,that,records,are,broadcast,via,link,record,writer,broadcast,emit,ioreadable,writable;test,public,void,test,broadcast,emit,record,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,true
RecordWriterTest -> @Test 	public void testBroadcastEmitRecord() throws Exception;1548853005;Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.;@Test_	public void testBroadcastEmitRecord() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true)__	};tests,that,records,are,broadcast,via,link,record,writer,broadcast,emit,ioreadable,writable;test,public,void,test,broadcast,emit,record,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,true
RecordWriterTest -> @Test 	public void testEmitRecordWithBroadcastPartitioner() throws Exception;1537529044;Tests that records are broadcast via {@link ChannelSelector} and_{@link RecordWriter#emit(IOReadableWritable)}.;@Test_	public void testEmitRecordWithBroadcastPartitioner() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false)__	};tests,that,records,are,broadcast,via,link,channel,selector,and,link,record,writer,emit,ioreadable,writable;test,public,void,test,emit,record,with,broadcast,partitioner,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,false
RecordWriterTest -> @Test 	public void testEmitRecordWithBroadcastPartitioner() throws Exception;1541772956;Tests that records are broadcast via {@link ChannelSelector} and_{@link RecordWriter#emit(IOReadableWritable)}.;@Test_	public void testEmitRecordWithBroadcastPartitioner() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false)__	};tests,that,records,are,broadcast,via,link,channel,selector,and,link,record,writer,emit,ioreadable,writable;test,public,void,test,emit,record,with,broadcast,partitioner,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,false
RecordWriterTest -> @Test 	public void testEmitRecordWithBroadcastPartitioner() throws Exception;1543403062;Tests that records are broadcast via {@link ChannelSelector} and_{@link RecordWriter#emit(IOReadableWritable)}.;@Test_	public void testEmitRecordWithBroadcastPartitioner() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false)__	};tests,that,records,are,broadcast,via,link,channel,selector,and,link,record,writer,emit,ioreadable,writable;test,public,void,test,emit,record,with,broadcast,partitioner,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,false
RecordWriterTest -> @Test 	public void testEmitRecordWithBroadcastPartitioner() throws Exception;1543403062;Tests that records are broadcast via {@link ChannelSelector} and_{@link RecordWriter#emit(IOReadableWritable)}.;@Test_	public void testEmitRecordWithBroadcastPartitioner() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false)__	};tests,that,records,are,broadcast,via,link,channel,selector,and,link,record,writer,emit,ioreadable,writable;test,public,void,test,emit,record,with,broadcast,partitioner,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,false
RecordWriterTest -> @Test 	public void testEmitRecordWithBroadcastPartitioner() throws Exception;1548853005;Tests that records are broadcast via {@link ChannelSelector} and_{@link RecordWriter#emit(IOReadableWritable)}.;@Test_	public void testEmitRecordWithBroadcastPartitioner() throws Exception {_		emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false)__	};tests,that,records,are,broadcast,via,link,channel,selector,and,link,record,writer,emit,ioreadable,writable;test,public,void,test,emit,record,with,broadcast,partitioner,throws,exception,emit,record,with,broadcast,partitioner,or,broadcast,emit,record,false
