commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {     BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2].     return sources[num++].createReadView(channel). }
true;public,static;1;20;/**  * Creates a result partition manager that ignores all IDs, and simply returns the given  * subpartitions in sequence.  */ ;/**  * Creates a result partition manager that ignores all IDs, and simply returns the given  * subpartitions in sequence.  */ public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {     final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {          private int num = 0.          @Override         public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {             BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2].             return sources[num++].createReadView(channel).         }     }.     ResultPartitionManager manager = mock(ResultPartitionManager.class).     when(manager.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class))).thenAnswer(viewCreator).     return manager. }
false;public,static;0;8;;public static ConnectionManager createDummyConnectionManager() throws Exception {     final PartitionRequestClient mockClient = mock(PartitionRequestClient.class).     final ConnectionManager connManager = mock(ConnectionManager.class).     when(connManager.createPartitionRequestClient(any(ConnectionID.class))).thenReturn(mockClient).     return connManager. }
