# id;timestamp;commentText;codeText;commentWords;codeWords
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1445293011;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "JobManager JVM Requires at least 80 MBs of memory.")__		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,job,manager,jvm,requires,at,least,80,mbs,of,memory,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1451153271;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "JobManager JVM Requires at least 80 MBs of memory.")__		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,job,manager,jvm,requires,at,least,80,mbs,of,memory,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1455923558;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "JobManager JVM Requires at least 80 MBs of memory.")__		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,job,manager,jvm,requires,at,least,80,mbs,of,memory,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1465991918;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "JobManager JVM Requires at least 80 MBs of memory.")__		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,job,manager,jvm,requires,at,least,80,mbs,of,memory,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1474308053;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "Process JVM Requires at least 80 MBs of memory.")__		checkState(process == null, "Cannot set memory after process was started")___		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,process,jvm,requires,at,least,80,mbs,of,memory,check,state,process,null,cannot,set,memory,after,process,was,started,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1486740511;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "Process JVM Requires at least 80 MBs of memory.")__		checkState(process == null, "Cannot set memory after process was started")___		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,process,jvm,requires,at,least,80,mbs,of,memory,check,state,process,null,cannot,set,memory,after,process,was,started,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void setJVMMemory(int jvmMemoryInMb);1519567828;Sets the memory for the process (<code>-Xms</code> and <code>-Xmx</code> flags) (>= 80).__@param jvmMemoryInMb Amount of memory in Megabytes for the JVM (>= 80).;public void setJVMMemory(int jvmMemoryInMb) {_		checkArgument(jvmMemoryInMb >= 80, "Process JVM Requires at least 80 MBs of memory.")__		checkState(process == null, "Cannot set memory after process was started")___		this.jvmMemoryInMb = jvmMemoryInMb__	};sets,the,memory,for,the,process,code,xms,code,and,code,xmx,code,flags,80,param,jvm,memory,in,mb,amount,of,memory,in,megabytes,for,the,jvm,80;public,void,set,jvmmemory,int,jvm,memory,in,mb,check,argument,jvm,memory,in,mb,80,process,jvm,requires,at,least,80,mbs,of,memory,check,state,process,null,cannot,set,memory,after,process,was,started,this,jvm,memory,in,mb,jvm,memory,in,mb
TestJvmProcess -> public void createAndStart() throws IOException;1445293011;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void createAndStart() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			if (process == null) {_				LOG.debug("Running command '{}'.", Arrays.toString(cmd))__				this.process = new ProcessBuilder(cmd).start()___				_				this.processOutput = new StringWriter()__				new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___				try {_					_					Runtime.getRuntime().addShutdownHook(shutdownHook)__				}_				catch (IllegalStateException ignored) {_					_				}_				catch (Throwable t) {_					LOG.error("Cannot register process cleanup shutdown hook.", t)__				}_			}_			else {_				throw new IllegalStateException("Already running.")__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,create,and,start,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,if,process,null,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t,else,throw,new,illegal,state,exception,already,running
TestJvmProcess -> public void createAndStart() throws IOException;1451153271;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void createAndStart() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			if (process == null) {_				LOG.debug("Running command '{}'.", Arrays.toString(cmd))__				this.process = new ProcessBuilder(cmd).start()___				_				this.processOutput = new StringWriter()__				new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___				try {_					_					Runtime.getRuntime().addShutdownHook(shutdownHook)__				}_				catch (IllegalStateException ignored) {_					_				}_				catch (Throwable t) {_					LOG.error("Cannot register process cleanup shutdown hook.", t)__				}_			}_			else {_				throw new IllegalStateException("Already running.")__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,create,and,start,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,if,process,null,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t,else,throw,new,illegal,state,exception,already,running
TestJvmProcess -> public abstract String[] getJvmArgs()_;1445293011;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1451153271;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1455923558;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1465991918;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1474308053;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1486740511;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String[] getJvmArgs()_;1519567828;Returns the arguments to the JVM.__<p>These can be parsed by the main method of the entry point class.;public abstract String[] getJvmArgs()_;returns,the,arguments,to,the,jvm,p,these,can,be,parsed,by,the,main,method,of,the,entry,point,class;public,abstract,string,get,jvm,args
TestJvmProcess -> public abstract String getEntryPointClassName()_;1445293011;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1451153271;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1455923558;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1465991918;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1474308053;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1486740511;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getEntryPointClassName()_;1519567828;Returns the name of the class to run.__<p>Arguments to the main method can be specified via {@link #getJvmArgs()}.;public abstract String getEntryPointClassName()_;returns,the,name,of,the,class,to,run,p,arguments,to,the,main,method,can,be,specified,via,link,get,jvm,args;public,abstract,string,get,entry,point,class,name
TestJvmProcess -> public abstract String getName()_;1445293011;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1451153271;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1455923558;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1465991918;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1474308053;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1486740511;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public abstract String getName()_;1519567828;Returns the name of the process.;public abstract String getName()_;returns,the,name,of,the,process;public,abstract,string,get,name
TestJvmProcess -> public long getProcessId();1474308053;Gets the process ID, if possible. This method currently only work on UNIX-based_operating systems. On others, it returns {@code -1}.__@return The process ID, or -1, if the ID cannot be determined.;public long getProcessId() {_		checkState(process != null, "process not started")___		try {_			Class<? extends Process> clazz = process.getClass()__			if (clazz.getName().equals("java.lang.UNIXProcess")) {_				Field pidField = clazz.getDeclaredField("pid")__				pidField.setAccessible(true)__				return pidField.getLong(process)__			} else {_				return -1__			}_		}_		catch (Throwable ignored) {_			return -1__		}_	};gets,the,process,id,if,possible,this,method,currently,only,work,on,unix,based,operating,systems,on,others,it,returns,code,1,return,the,process,id,or,1,if,the,id,cannot,be,determined;public,long,get,process,id,check,state,process,null,process,not,started,try,class,extends,process,clazz,process,get,class,if,clazz,get,name,equals,java,lang,unixprocess,field,pid,field,clazz,get,declared,field,pid,pid,field,set,accessible,true,return,pid,field,get,long,process,else,return,1,catch,throwable,ignored,return,1
TestJvmProcess -> public long getProcessId();1486740511;Gets the process ID, if possible. This method currently only work on UNIX-based_operating systems. On others, it returns {@code -1}.__@return The process ID, or -1, if the ID cannot be determined.;public long getProcessId() {_		checkState(process != null, "process not started")___		try {_			Class<? extends Process> clazz = process.getClass()__			if (clazz.getName().equals("java.lang.UNIXProcess")) {_				Field pidField = clazz.getDeclaredField("pid")__				pidField.setAccessible(true)__				return pidField.getLong(process)__			} else {_				return -1__			}_		}_		catch (Throwable ignored) {_			return -1__		}_	};gets,the,process,id,if,possible,this,method,currently,only,work,on,unix,based,operating,systems,on,others,it,returns,code,1,return,the,process,id,or,1,if,the,id,cannot,be,determined;public,long,get,process,id,check,state,process,null,process,not,started,try,class,extends,process,clazz,process,get,class,if,clazz,get,name,equals,java,lang,unixprocess,field,pid,field,clazz,get,declared,field,pid,pid,field,set,accessible,true,return,pid,field,get,long,process,else,return,1,catch,throwable,ignored,return,1
TestJvmProcess -> public long getProcessId();1519567828;Gets the process ID, if possible. This method currently only work on UNIX-based_operating systems. On others, it returns {@code -1}.__@return The process ID, or -1, if the ID cannot be determined.;public long getProcessId() {_		checkState(process != null, "process not started")___		try {_			Class<? extends Process> clazz = process.getClass()__			if (clazz.getName().equals("java.lang.UNIXProcess")) {_				Field pidField = clazz.getDeclaredField("pid")__				pidField.setAccessible(true)__				return pidField.getLong(process)__			} else {_				return -1__			}_		}_		catch (Throwable ignored) {_			return -1__		}_	};gets,the,process,id,if,possible,this,method,currently,only,work,on,unix,based,operating,systems,on,others,it,returns,code,1,return,the,process,id,or,1,if,the,id,cannot,be,determined;public,long,get,process,id,check,state,process,null,process,not,started,try,class,extends,process,clazz,process,get,class,if,clazz,get,name,equals,java,lang,unixprocess,field,pid,field,clazz,get,declared,field,pid,pid,field,set,accessible,true,return,pid,field,get,long,process,else,return,1,catch,throwable,ignored,return,1
TestJvmProcess -> public void startProcess() throws IOException;1455923558;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void startProcess() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			if (process == null) {_				LOG.debug("Running command '{}'.", Arrays.toString(cmd))__				this.process = new ProcessBuilder(cmd).start()___				_				this.processOutput = new StringWriter()__				new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___				try {_					_					Runtime.getRuntime().addShutdownHook(shutdownHook)__				}_				catch (IllegalStateException ignored) {_					_				}_				catch (Throwable t) {_					LOG.error("Cannot register process cleanup shutdown hook.", t)__				}_			}_			else {_				throw new IllegalStateException("Already running.")__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,start,process,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,if,process,null,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t,else,throw,new,illegal,state,exception,already,running
TestJvmProcess -> public void startProcess() throws IOException;1465991918;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void startProcess() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			if (process == null) {_				LOG.debug("Running command '{}'.", Arrays.toString(cmd))__				this.process = new ProcessBuilder(cmd).start()___				_				this.processOutput = new StringWriter()__				new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___				try {_					_					Runtime.getRuntime().addShutdownHook(shutdownHook)__				}_				catch (IllegalStateException ignored) {_					_				}_				catch (Throwable t) {_					LOG.error("Cannot register process cleanup shutdown hook.", t)__				}_			}_			else {_				throw new IllegalStateException("Already running.")__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,start,process,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,if,process,null,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t,else,throw,new,illegal,state,exception,already,running
TestJvmProcess -> public void startProcess() throws IOException;1474308053;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void startProcess() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			checkState(process == null, "process already started")___			LOG.debug("Running command '{}'.", Arrays.toString(cmd))__			this.process = new ProcessBuilder(cmd).start()___			_			this.processOutput = new StringWriter()__			new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___			try {_				_				Runtime.getRuntime().addShutdownHook(shutdownHook)__			}_			catch (IllegalStateException ignored) {_				_			}_			catch (Throwable t) {_				LOG.error("Cannot register process cleanup shutdown hook.", t)__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,start,process,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,check,state,process,null,process,already,started,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t
TestJvmProcess -> public void startProcess() throws IOException;1486740511;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void startProcess() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			checkState(process == null, "process already started")___			LOG.debug("Running command '{}'.", Arrays.toString(cmd))__			this.process = new ProcessBuilder(cmd).start()___			_			this.processOutput = new StringWriter()__			new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___			try {_				_				Runtime.getRuntime().addShutdownHook(shutdownHook)__			}_			catch (IllegalStateException ignored) {_				_			}_			catch (Throwable t) {_				LOG.error("Cannot register process cleanup shutdown hook.", t)__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,start,process,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,check,state,process,null,process,already,started,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t
TestJvmProcess -> public void startProcess() throws IOException;1519567828;Creates and starts the {@link Process}.__<strong>Important:</strong> Don't forget to call {@link #destroy()} to prevent_resource leaks. The created process will be child process and is not guaranteed to_terminate when the parent process terminates.;public void startProcess() throws IOException {_		String[] cmd = new String[] {_				javaCommandPath,_				"-Dlog.level=DEBUG",_				"-Dlog4j.configuration=file:" + log4jConfigFilePath,_				"-Xms" + jvmMemoryInMb + "m",_				"-Xmx" + jvmMemoryInMb + "m",_				"-classpath", getCurrentClasspath(),_				getEntryPointClassName() }___		String[] jvmArgs = getJvmArgs()___		if (jvmArgs != null && jvmArgs.length > 0) {_			cmd = ArrayUtils.addAll(cmd, jvmArgs)__		}__		synchronized (createDestroyLock) {_			checkState(process == null, "process already started")___			LOG.debug("Running command '{}'.", Arrays.toString(cmd))__			this.process = new ProcessBuilder(cmd).start()___			_			this.processOutput = new StringWriter()__			new CommonTestUtils.PipeForwarder(process.getErrorStream(), processOutput)___			try {_				_				Runtime.getRuntime().addShutdownHook(shutdownHook)__			}_			catch (IllegalStateException ignored) {_				_			}_			catch (Throwable t) {_				LOG.error("Cannot register process cleanup shutdown hook.", t)__			}_		}_	};creates,and,starts,the,link,process,strong,important,strong,don,t,forget,to,call,link,destroy,to,prevent,resource,leaks,the,created,process,will,be,child,process,and,is,not,guaranteed,to,terminate,when,the,parent,process,terminates;public,void,start,process,throws,ioexception,string,cmd,new,string,java,command,path,dlog,level,debug,dlog4j,configuration,file,log4j,config,file,path,xms,jvm,memory,in,mb,m,xmx,jvm,memory,in,mb,m,classpath,get,current,classpath,get,entry,point,class,name,string,jvm,args,get,jvm,args,if,jvm,args,null,jvm,args,length,0,cmd,array,utils,add,all,cmd,jvm,args,synchronized,create,destroy,lock,check,state,process,null,process,already,started,log,debug,running,command,arrays,to,string,cmd,this,process,new,process,builder,cmd,start,this,process,output,new,string,writer,new,common,test,utils,pipe,forwarder,process,get,error,stream,process,output,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,catch,illegal,state,exception,ignored,catch,throwable,t,log,error,cannot,register,process,cleanup,shutdown,hook,t
