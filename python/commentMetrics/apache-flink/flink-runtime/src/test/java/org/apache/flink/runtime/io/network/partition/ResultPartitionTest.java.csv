# id;timestamp;commentText;codeText;commentWords;codeWords
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1487548883;Tests {@link ResultPartition#add} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.add(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,add,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1513102147;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1515161905;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1515510696;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1516285456;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1516285878;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycleBuffer()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,buffer,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039278;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039285;Tests {@link ResultPartition#writeBuffer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.writeBuffer(buffer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,write,buffer,buffer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039287;Tests {@link ResultPartition#addBufferConsumer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.addBufferConsumer(bufferConsumer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__				Assert.fail("bufferConsumer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,buffer,consumer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,add,buffer,consumer,buffer,consumer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,assert,fail,buffer,consumer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnFinishedPartition(final ResultPartitionType pipelined) 		throws Exception;1540301082;Tests {@link ResultPartition#addBufferConsumer} on a partition which has already finished.__@param pipelined the result partition type to set up;protected void testAddOnFinishedPartition(final ResultPartitionType pipelined)_		throws Exception {_		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.finish()__			reset(notifier)__			_			partition.addBufferConsumer(bufferConsumer, 0)__			Assert.fail("exception expected")__		} catch (IllegalStateException e) {_			_		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__				Assert.fail("bufferConsumer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,buffer,consumer,on,a,partition,which,has,already,finished,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,finished,partition,final,result,partition,type,pipelined,throws,exception,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,finish,reset,notifier,partition,add,buffer,consumer,buffer,consumer,0,assert,fail,exception,expected,catch,illegal,state,exception,e,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,assert,fail,buffer,consumer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1515161905;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer()__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1515510696;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer()__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1516285456;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1516285878;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,buffer,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1519039278;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,buffer,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1519039285;Tests {@link ResultPartition#writeBuffer(Buffer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		try {_			_			partition.writeBuffer(buffer, 0)__			assertFalse("buffer should not be recycled (still in the queue)", buffer.isRecycled())__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,write,buffer,buffer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,partition,write,buffer,buffer,0,assert,false,buffer,should,not,be,recycled,still,in,the,queue,buffer,is,recycled,finally,if,buffer,is,recycled,buffer,recycle,buffer,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1519039287;Tests {@link ResultPartition#addBufferConsumer(BufferConsumer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		try {_			_			partition.addBufferConsumer(bufferConsumer, 0)__			assertFalse("bufferConsumer should not be recycled (still in the queue)", bufferConsumer.isRecycled())__		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,add,buffer,consumer,buffer,consumer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,try,partition,add,buffer,consumer,buffer,consumer,0,assert,false,buffer,consumer,should,not,be,recycled,still,in,the,queue,buffer,consumer,is,recycled,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> protected void testAddOnPartition(final ResultPartitionType pipelined) 		throws Exception;1540301082;Tests {@link ResultPartition#addBufferConsumer(BufferConsumer, int)} on a working partition.__@param pipelined the result partition type to set up;protected void testAddOnPartition(final ResultPartitionType pipelined)_		throws Exception {_		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		ResultPartition partition = createPartition(notifier, pipelined, true)__		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		try {_			_			partition.addBufferConsumer(bufferConsumer, 0)__			assertFalse("bufferConsumer should not be recycled (still in the queue)", bufferConsumer.isRecycled())__		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__			}_			_			if (pipelined.isPipelined()) {_				verify(notifier, times(1))_					.notifyPartitionConsumable(_						eq(partition.getJobId()),_						eq(partition.getPartitionId()),_						any(TaskActions.class))__			}_		}_	};tests,link,result,partition,add,buffer,consumer,buffer,consumer,int,on,a,working,partition,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,partition,final,result,partition,type,pipelined,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,pipelined,true,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,try,partition,add,buffer,consumer,buffer,consumer,0,assert,false,buffer,consumer,should,not,be,recycled,still,in,the,queue,buffer,consumer,is,recycled,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,if,pipelined,is,pipelined,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1513102147;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		assertEquals(2, partition.getTotalNumberOfBuffers())__		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,assert,equals,2,partition,get,total,number,of,buffers,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1515161905;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		assertEquals(2, partition.getTotalNumberOfBuffers())__		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,assert,equals,2,partition,get,total,number,of,buffers,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1515510696;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1516285456;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1516285878;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception;1519039278;Tests that event buffers are properly added and recycled when broadcasting events_to multiple channels.;@Test_	public void testWriteBufferToAllSubpartitionsReferenceCounting() throws Exception {_		Buffer buffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE)___		ResultPartition partition = new ResultPartition(_			"TestTask",_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			2,_			2,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)___		partition.writeBufferToAllSubpartitions(buffer)___		_		partition.release()___		assertTrue(buffer.isRecycled())__	};tests,that,event,buffers,are,properly,added,and,recycled,when,broadcasting,events,to,multiple,channels;test,public,void,test,write,buffer,to,all,subpartitions,reference,counting,throws,exception,buffer,buffer,event,serializer,to,buffer,end,of,partition,event,instance,result,partition,partition,new,result,partition,test,task,mock,task,actions,class,new,job,id,new,result,partition,id,result,partition,type,pipelined,2,2,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false,partition,write,buffer,to,all,subpartitions,buffer,partition,release,assert,true,buffer,is,recycled
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1478815615;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1)).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1480624969;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1)).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1485269495;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1)).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1487548883;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1)).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.add(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1513102147;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1)).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1515161905;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1515510696;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1516285456;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1516285878;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1519039278;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1519039285;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.writeBuffer(TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,write,buffer,test,buffer,factory,create,buffer,test,buffer,factory,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1519039287;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> @Test 	public void testSendScheduleOrUpdateConsumersMessage() throws Exception;1540301082;Tests the schedule or update consumers message sending behaviour depending on the relevant flags.;@Test_	public void testSendScheduleOrUpdateConsumersMessage() throws Exception {_		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, true)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, times(1))_				.notifyPartitionConsumable(_					eq(partition.getJobId()),_					eq(partition.getPartitionId()),_					any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.PIPELINED, false)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, true)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}__		{_			_			ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__			ResultPartition partition = createPartition(notifier, ResultPartitionType.BLOCKING, false)__			partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE), 0)__			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,the,schedule,or,update,consumers,message,sending,behaviour,depending,on,the,relevant,flags;test,public,void,test,send,schedule,or,update,consumers,message,throws,exception,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,true,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,times,1,notify,partition,consumable,eq,partition,get,job,id,eq,partition,get,partition,id,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,pipelined,false,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,true,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,result,partition,partition,create,partition,notifier,result,partition,type,blocking,false,partition,add,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,0,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1487548883;Tests {@link ResultPartition#add} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.add(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,add,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1513102147;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1515161905;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1515510696;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer()__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1516285456;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycle()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1516285878;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				Assert.fail("buffer not recycled")__				buffer.recycleBuffer()__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,assert,fail,buffer,not,recycled,buffer,recycle,buffer,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039278;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039285;Tests {@link ResultPartition#writeBuffer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.writeBuffer(buffer, 0)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,write,buffer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,write,buffer,buffer,0,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1519039287;Tests {@link ResultPartition#addBufferConsumer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.addBufferConsumer(bufferConsumer, 0)__		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__				Assert.fail("bufferConsumer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,buffer,consumer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,add,buffer,consumer,buffer,consumer,0,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,assert,fail,buffer,consumer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
ResultPartitionTest -> protected void testAddOnReleasedPartition(final ResultPartitionType pipelined) 		throws Exception;1540301082;Tests {@link ResultPartition#addBufferConsumer} on a partition which has already been released.__@param pipelined the result partition type to set up;protected void testAddOnReleasedPartition(final ResultPartitionType pipelined)_		throws Exception {_		BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE)__		ResultPartitionConsumableNotifier notifier = mock(ResultPartitionConsumableNotifier.class)__		try {_			ResultPartition partition = createPartition(notifier, pipelined, true)__			partition.release()__			_			partition.addBufferConsumer(bufferConsumer, 0)__		} finally {_			if (!bufferConsumer.isRecycled()) {_				bufferConsumer.close()__				Assert.fail("bufferConsumer not recycled")__			}_			_			verify(notifier, never()).notifyPartitionConsumable(any(JobID.class), any(ResultPartitionID.class), any(TaskActions.class))__		}_	};tests,link,result,partition,add,buffer,consumer,on,a,partition,which,has,already,been,released,param,pipelined,the,result,partition,type,to,set,up;protected,void,test,add,on,released,partition,final,result,partition,type,pipelined,throws,exception,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,builder,test,utils,result,partition,consumable,notifier,notifier,mock,result,partition,consumable,notifier,class,try,result,partition,partition,create,partition,notifier,pipelined,true,partition,release,partition,add,buffer,consumer,buffer,consumer,0,finally,if,buffer,consumer,is,recycled,buffer,consumer,close,assert,fail,buffer,consumer,not,recycled,verify,notifier,never,notify,partition,consumable,any,job,id,class,any,result,partition,id,class,any,task,actions,class
