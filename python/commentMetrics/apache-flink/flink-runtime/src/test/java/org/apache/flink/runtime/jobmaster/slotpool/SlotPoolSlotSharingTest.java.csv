commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Test public void testSingleQueuedSharedSlotScheduling() throws Exception {     final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>().     final TestingResourceManagerGateway testingResourceManagerGateway = slotPoolResource.getTestingResourceManagerGateway().     testingResourceManagerGateway.setRequestSlotConsumer((SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId())).     LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation().     final SlotPoolImpl slotPool = slotPoolResource.getSlotPool().     slotPool.registerTaskManager(taskManagerLocation.getResourceID()).     SlotSharingGroupId slotSharingGroupId = new SlotSharingGroupId().     final SlotProvider slotProvider = slotPoolResource.getSlotProvider().     CompletableFuture<LogicalSlot> logicalSlotFuture = slotProvider.allocateSlot(new ScheduledUnit(new JobVertexID(), slotSharingGroupId, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     assertFalse(logicalSlotFuture.isDone()).     final AllocationID allocationId = allocationIdFuture.get().     boolean booleanCompletableFuture = slotPool.offerSlot(taskManagerLocation, new SimpleAckingTaskManagerGateway(), new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)).     assertTrue(booleanCompletableFuture).     final LogicalSlot logicalSlot = logicalSlotFuture.get().     assertEquals(slotSharingGroupId, logicalSlot.getSlotSharingGroupId()). }
true;public;0;30;/**  * Tests that returned slot futures are failed if the allocation request is failed.  */ ;/**  * Tests that returned slot futures are failed if the allocation request is failed.  */ @Test public void testFailingQueuedSharedSlotScheduling() throws Exception {     final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>().     final TestingResourceManagerGateway testingResourceManagerGateway = slotPoolResource.getTestingResourceManagerGateway().     testingResourceManagerGateway.setRequestSlotConsumer((SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId())).     final SlotProvider slotProvider = slotPoolResource.getSlotProvider().     CompletableFuture<LogicalSlot> logicalSlotFuture = slotProvider.allocateSlot(new ScheduledUnit(new JobVertexID(), new SlotSharingGroupId(), null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     final AllocationID allocationId = allocationIdFuture.get().     // this should fail the returned logical slot future     final SlotPool slotPoolGateway = slotPoolResource.getSlotPool().     slotPoolGateway.failAllocation(allocationId, new FlinkException("Testing Exception")).     try {         logicalSlotFuture.get().         fail("The slot future should have failed.").     } catch (ExecutionException ee) {         assertTrue(ExceptionUtils.findThrowable(ee, FlinkException.class).isPresent()).     } }
true;public;0;95;/**  * Tests queued slot scheduling with a single slot sharing group  */ ;/**  * Tests queued slot scheduling with a single slot sharing group  */ @Test public void testQueuedSharedSlotScheduling() throws Exception {     final BlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2).     final TestingResourceManagerGateway testingResourceManagerGateway = slotPoolResource.getTestingResourceManagerGateway().     testingResourceManagerGateway.setRequestSlotConsumer((SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId())).     final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation().     final SlotPoolImpl slotPool = slotPoolResource.getSlotPool().     slotPool.registerTaskManager(taskManagerLocation.getResourceID()).     final SlotSharingGroupId slotSharingGroupId = new SlotSharingGroupId().     final JobVertexID jobVertexId1 = new JobVertexID().     final JobVertexID jobVertexId2 = new JobVertexID().     final SlotProvider slotProvider = slotPoolResource.getSlotProvider().     CompletableFuture<LogicalSlot> logicalSlotFuture1 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1, slotSharingGroupId, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture2 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2, slotSharingGroupId, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     assertFalse(logicalSlotFuture1.isDone()).     assertFalse(logicalSlotFuture2.isDone()).     final AllocationID allocationId1 = allocationIds.take().     CompletableFuture<LogicalSlot> logicalSlotFuture3 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1, slotSharingGroupId, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture4 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2, slotSharingGroupId, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     assertFalse(logicalSlotFuture3.isDone()).     assertFalse(logicalSlotFuture4.isDone()).     allocationIds.take().     // this should fulfill the first two slot futures     boolean offerFuture = slotPool.offerSlot(taskManagerLocation, new SimpleAckingTaskManagerGateway(), new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)).     assertTrue(offerFuture).     LogicalSlot logicalSlot1 = logicalSlotFuture1.get().     LogicalSlot logicalSlot2 = logicalSlotFuture2.get().     assertEquals(logicalSlot1.getTaskManagerLocation(), logicalSlot2.getTaskManagerLocation()).     assertEquals(allocationId1, logicalSlot1.getAllocationId()).     assertEquals(allocationId1, logicalSlot2.getAllocationId()).     assertFalse(logicalSlotFuture3.isDone()).     assertFalse(logicalSlotFuture4.isDone()).     // release the shared slot by releasing the individual tasks     logicalSlot1.releaseSlot(null).     logicalSlot2.releaseSlot(null).     LogicalSlot logicalSlot3 = logicalSlotFuture3.get().     LogicalSlot logicalSlot4 = logicalSlotFuture4.get().     assertEquals(logicalSlot3.getTaskManagerLocation(), logicalSlot4.getTaskManagerLocation()).     assertEquals(allocationId1, logicalSlot3.getAllocationId()).     assertEquals(allocationId1, logicalSlot4.getAllocationId()). }
true;public;0;95;/**  * Tests queued slot scheduling with multiple slot sharing groups.  */ ;/**  * Tests queued slot scheduling with multiple slot sharing groups.  */ @Test public void testQueuedMultipleSlotSharingGroups() throws Exception {     final BlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(4).     final TestingResourceManagerGateway testingResourceManagerGateway = slotPoolResource.getTestingResourceManagerGateway().     testingResourceManagerGateway.setRequestSlotConsumer((SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId())).     final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation().     final SlotSharingGroupId slotSharingGroupId1 = new SlotSharingGroupId().     final SlotSharingGroupId slotSharingGroupId2 = new SlotSharingGroupId().     final JobVertexID jobVertexId1 = new JobVertexID().     final JobVertexID jobVertexId2 = new JobVertexID().     final JobVertexID jobVertexId3 = new JobVertexID().     final JobVertexID jobVertexId4 = new JobVertexID().     final SlotPoolImpl slotPool = slotPoolResource.getSlotPool().     slotPool.registerTaskManager(taskManagerLocation.getResourceID()).     final SlotProvider slotProvider = slotPoolResource.getSlotProvider().     CompletableFuture<LogicalSlot> logicalSlotFuture1 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1, slotSharingGroupId1, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture2 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2, slotSharingGroupId1, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture3 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId3, slotSharingGroupId2, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture4 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId4, slotSharingGroupId2, null), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     assertFalse(logicalSlotFuture1.isDone()).     assertFalse(logicalSlotFuture2.isDone()).     assertFalse(logicalSlotFuture3.isDone()).     assertFalse(logicalSlotFuture4.isDone()).     // we expect two slot requests     final AllocationID allocationId1 = allocationIds.take().     final AllocationID allocationId2 = allocationIds.take().     boolean offerFuture1 = slotPool.offerSlot(taskManagerLocation, new SimpleAckingTaskManagerGateway(), new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN)).     boolean offerFuture2 = slotPool.offerSlot(taskManagerLocation, new SimpleAckingTaskManagerGateway(), new SlotOffer(allocationId2, 0, ResourceProfile.UNKNOWN)).     assertTrue(offerFuture1).     assertTrue(offerFuture2).     LogicalSlot logicalSlot1 = logicalSlotFuture1.get().     LogicalSlot logicalSlot2 = logicalSlotFuture2.get().     LogicalSlot logicalSlot3 = logicalSlotFuture3.get().     LogicalSlot logicalSlot4 = logicalSlotFuture4.get().     assertEquals(logicalSlot1.getTaskManagerLocation(), logicalSlot2.getTaskManagerLocation()).     assertEquals(logicalSlot3.getTaskManagerLocation(), logicalSlot4.getTaskManagerLocation()).     assertEquals(allocationId1, logicalSlot1.getAllocationId()).     assertEquals(allocationId2, logicalSlot3.getAllocationId()). }
