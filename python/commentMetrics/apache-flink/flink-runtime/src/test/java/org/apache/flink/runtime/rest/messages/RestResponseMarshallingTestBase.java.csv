commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Returns the class of the test response.  *  * @return class of the test response type  */ ;/**  * Returns the class of the test response.  *  * @return class of the test response type  */ protected abstract Class<R> getTestResponseClass().
false;protected;0;3;;protected Collection<Class<?>> getTypeParameters() {     return Collections.emptyList(). }
true;protected,abstract;0;1;/**  * Returns an instance of a response to be tested.  *  * @return instance of the expected test response  */ ;/**  * Returns an instance of a response to be tested.  *  * @return instance of the expected test response  */ protected abstract R getTestResponseInstance() throws Exception.
true;public;0;21;/**  * Tests that we can marshal and unmarshal the response.  */ ;/**  * Tests that we can marshal and unmarshal the response.  */ @Test public void testJsonMarshalling() throws Exception {     final R expected = getTestResponseInstance().     ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper().     final String marshalled = objectMapper.writeValueAsString(expected).     final Collection<Class<?>> typeParameters = getTypeParameters().     final JavaType type.     if (typeParameters.isEmpty()) {         type = objectMapper.getTypeFactory().constructType(getTestResponseClass()).     } else {         type = objectMapper.getTypeFactory().constructParametricType(getTestResponseClass(), typeParameters.toArray(new Class<?>[typeParameters.size()])).     }     final R unmarshalled = objectMapper.readValue(marshalled, type).     assertOriginalEqualsToUnmarshalled(expected, unmarshalled). }
true;protected;2;3;/**  * Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.  *  * @param expected expected value  * @param actual   the value to check against expected  */ ;/**  * Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.  *  * @param expected expected value  * @param actual   the value to check against expected  */ protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {     Assert.assertEquals(expected, actual). }
