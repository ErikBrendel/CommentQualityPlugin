commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void registerPartitionTwice() throws Exception {     ResultPartitionID partitionId = new ResultPartitionID().     TaskEventDispatcher ted = new TaskEventDispatcher().     ted.registerPartition(partitionId).     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage("already registered at task event dispatcher").     ted.registerPartition(partitionId). }
false;public;0;9;;@Test public void subscribeToEventNotRegistered() throws Exception {     TaskEventDispatcher ted = new TaskEventDispatcher().     expectedException.expect(IllegalStateException.class).     expectedException.expectMessage("not registered at task event dispatcher").     ted.subscribeToEvent(new ResultPartitionID(), new ZeroShotEventListener(), TaskEvent.class). }
true;public;0;33;/**  * Tests {@link TaskEventDispatcher#publish(ResultPartitionID, TaskEvent)} and {@link TaskEventDispatcher#subscribeToEvent(ResultPartitionID, EventListener, Class)} methods.  */ ;/**  * Tests {@link TaskEventDispatcher#publish(ResultPartitionID, TaskEvent)} and {@link TaskEventDispatcher#subscribeToEvent(ResultPartitionID, EventListener, Class)} methods.  */ @Test public void publishSubscribe() throws Exception {     ResultPartitionID partitionId1 = new ResultPartitionID().     ResultPartitionID partitionId2 = new ResultPartitionID().     TaskEventDispatcher ted = new TaskEventDispatcher().     AllWorkersDoneEvent event1 = new AllWorkersDoneEvent().     TerminationEvent event2 = new TerminationEvent().     assertFalse(ted.publish(partitionId1, event1)).     ted.registerPartition(partitionId1).     ted.registerPartition(partitionId2).     // no event listener subscribed yet, but the event is forwarded to a TaskEventHandler     assertTrue(ted.publish(partitionId1, event1)).     OneShotEventListener eventListener1a = new OneShotEventListener(event1).     ZeroShotEventListener eventListener1b = new ZeroShotEventListener().     ZeroShotEventListener eventListener2 = new ZeroShotEventListener().     OneShotEventListener eventListener3 = new OneShotEventListener(event2).     ted.subscribeToEvent(partitionId1, eventListener1a, AllWorkersDoneEvent.class).     ted.subscribeToEvent(partitionId2, eventListener1b, AllWorkersDoneEvent.class).     ted.subscribeToEvent(partitionId1, eventListener2, TaskEvent.class).     ted.subscribeToEvent(partitionId1, eventListener3, TerminationEvent.class).     assertTrue(ted.publish(partitionId1, event1)).     assertTrue("listener should have fired for AllWorkersDoneEvent", eventListener1a.fired).     assertFalse("listener should not have fired for AllWorkersDoneEvent", eventListener3.fired).     // publish another event, verify that only the right subscriber is called     assertTrue(ted.publish(partitionId1, event2)).     assertTrue("listener should have fired for TerminationEvent", eventListener3.fired). }
false;public;0;29;;@Test public void unregisterPartition() throws Exception {     ResultPartitionID partitionId1 = new ResultPartitionID().     ResultPartitionID partitionId2 = new ResultPartitionID().     TaskEventDispatcher ted = new TaskEventDispatcher().     AllWorkersDoneEvent event = new AllWorkersDoneEvent().     assertFalse(ted.publish(partitionId1, event)).     ted.registerPartition(partitionId1).     ted.registerPartition(partitionId2).     OneShotEventListener eventListener1a = new OneShotEventListener(event).     ZeroShotEventListener eventListener1b = new ZeroShotEventListener().     OneShotEventListener eventListener2 = new OneShotEventListener(event).     ted.subscribeToEvent(partitionId1, eventListener1a, AllWorkersDoneEvent.class).     ted.subscribeToEvent(partitionId2, eventListener1b, AllWorkersDoneEvent.class).     ted.subscribeToEvent(partitionId1, eventListener2, AllWorkersDoneEvent.class).     ted.unregisterPartition(partitionId2).     // publish something for partitionId1 triggering all according listeners     assertTrue(ted.publish(partitionId1, event)).     assertTrue("listener should have fired for AllWorkersDoneEvent", eventListener1a.fired).     assertTrue("listener should have fired for AllWorkersDoneEvent", eventListener2.fired).     // now publish something for partitionId2 which should not trigger any listeners     assertFalse(ted.publish(partitionId2, event)). }
false;public;0;14;;@Test public void clearAll() throws Exception {     ResultPartitionID partitionId = new ResultPartitionID().     TaskEventDispatcher ted = new TaskEventDispatcher().     ted.registerPartition(partitionId).     // noinspection unchecked     ZeroShotEventListener eventListener1 = new ZeroShotEventListener().     ted.subscribeToEvent(partitionId, eventListener1, AllWorkersDoneEvent.class).     ted.clearAll().     assertFalse(ted.publish(partitionId, new AllWorkersDoneEvent())). }
false;public;1;6;;public void onEvent(TaskEvent actual) {     checkState(!fired, "Should only fire once").     fired = true.     checkArgument(actual == expected, "Fired on unexpected event: %s (expected: %s)", actual, expected). }
false;public;1;3;;public void onEvent(TaskEvent actual) {     throw new IllegalStateException("Should never fire"). }
