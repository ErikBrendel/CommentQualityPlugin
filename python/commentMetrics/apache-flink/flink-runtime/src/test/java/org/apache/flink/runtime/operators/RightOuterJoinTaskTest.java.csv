commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected DriverStrategy getSortDriverStrategy() {     return DriverStrategy.RIGHT_OUTER_MERGE. }
false;protected;4;4;;@Override protected int calculateExpectedCount(int keyCnt1, int valCnt1, int keyCnt2, int valCnt2) {     return valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2) + (keyCnt2 > keyCnt1 ? (keyCnt2 - keyCnt1) * valCnt2 : 0). }
false;protected;0;4;;@Override protected AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> getOuterJoinDriver() {     return new RightOuterJoinDriver<>(). }
false;public;0;10;;@Test public void testHash1RightOuterJoinTask() throws Exception {     final int keyCnt1 = 20.     final int valCnt1 = 1.     final int keyCnt2 = 10.     final int valCnt2 = 2.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testHash2RightOuterJoinTask() throws Exception {     final int keyCnt1 = 20.     final int valCnt1 = 1.     final int keyCnt2 = 20.     final int valCnt2 = 1.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testHash3RightOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 20.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testHash4RightOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 1.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testHash5RightOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testHash6RightOuterJoinTask() throws Exception {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 2.     testHashRightOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;private;4;23;;private void testHashRightOuterJoinTask(int keyCnt1, int valCnt1, int keyCnt2, int valCnt2) throws Exception {     setOutput(this.outList, this.serializer).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(DriverStrategy.RIGHT_HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(keyCnt1, valCnt1, false), this.serializer).     addInput(new UniformIntTupleGenerator(keyCnt2, valCnt2, false), this.serializer).     testDriver(testTask, MockJoinStub.class).     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;23;;@Test(expected = ExpectedTestException.class) public void testFailingHashRightOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(DriverStrategy.RIGHT_HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(this.hash_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(keyCnt1, valCnt1, true), this.serializer).     addInput(new UniformIntTupleGenerator(keyCnt2, valCnt2, true), this.serializer).     testDriver(testTask, MockFailingJoinStub.class). }
false;public;0;8;;@Override public void run() {     try {         testDriver(testTask, MockJoinStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;40;;@Test public void testCancelRightOuterJoinTaskWhileBuilding() throws Exception {     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(DriverStrategy.RIGHT_HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(this.hash_frac).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer).     addInput(new UniformIntTupleGenerator(100, 100, true), this.serializer).     final AtomicReference<Throwable> error = new AtomicReference<>().     final Thread taskRunner = new Thread("Task runner for testCancelOuterJoinTaskWhileSort1()") {          @Override         public void run() {             try {                 testDriver(testTask, MockJoinStub.class).             } catch (Throwable t) {                 error.set(t).             }         }     }.     taskRunner.start().     Thread.sleep(1000).     cancel().     taskRunner.join(60000).     assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).     final Throwable taskError = error.get().     if (taskError != null) {         fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError)).     } }
false;public;0;8;;@Override public void run() {     try {         testDriver(testTask, MockJoinStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;40;;@Test public void testCancelRightOuterJoinTaskWhileProbing() throws Exception {     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(DriverStrategy.RIGHT_HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(this.hash_frac).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(1, 1, true), this.serializer).     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer).     final AtomicReference<Throwable> error = new AtomicReference<>().     final Thread taskRunner = new Thread("Task runner for testCancelOuterJoinTaskWhileSort1()") {          @Override         public void run() {             try {                 testDriver(testTask, MockJoinStub.class).             } catch (Throwable t) {                 error.set(t).             }         }     }.     taskRunner.start().     Thread.sleep(1000).     cancel().     taskRunner.join(60000).     assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).     final Throwable taskError = error.get().     if (taskError != null) {         fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError)).     } }
