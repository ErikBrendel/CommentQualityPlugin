commented;modifiers;parameterAmount;loc;comment;code
false;;0;12;;@Override void initTestValues() {     emptyValue = Collections.emptySet().     updateEmpty = mapOf(Tuple2.of(3, "3"), Tuple2.of(5, "5"), Tuple2.of(23, null), Tuple2.of(10, "10")).     updateUnexpired = mapOf(Tuple2.of(12, "12"), Tuple2.of(24, null), Tuple2.of(7, "7")).     updateExpired = mapOf(Tuple2.of(15, "15"), Tuple2.of(25, null), Tuple2.of(4, "4")).     getUpdateEmpty = updateEmpty.entrySet().     getUnexpired = updateUnexpired.entrySet().     getUpdateExpired = updateExpired.entrySet(). }
false;private,static;1;6;;@SafeVarargs private static <UK, UV> Map<UK, UV> mapOf(Tuple2<UK, UV>... entries) {     Map<UK, UV> map = new HashMap<>().     Arrays.stream(entries).forEach(t -> map.put(t.f0, t.f1)).     return map. }
false;public;1;4;;@Override public void update(Map<Integer, String> map) throws Exception {     ttlState.putAll(map). }
false;public;0;4;;@Override public Set<Map.Entry<Integer, String>> get() throws Exception {     return StreamSupport.stream(ttlState.entries().spliterator(), false).collect(Collectors.toSet()). }
false;public;0;4;;@Override public Object getOriginal() throws Exception {     return ttlState.original.entries() == null ? Collections.emptySet() : ttlState.original.entries(). }
