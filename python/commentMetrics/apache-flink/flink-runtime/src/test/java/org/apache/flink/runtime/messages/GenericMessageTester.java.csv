commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static void testMessageInstance(Serializable instance) throws Exception {     Serializable copy = CommonTestUtils.createCopySerializable(instance).     // test equals, hash code, toString     assertTrue(instance.equals(copy)).     assertTrue(copy.equals(instance)).     assertTrue(instance.hashCode() == copy.hashCode()).     assertTrue(instance.toString().equals(copy.toString())). }
false;public,static;2;13;;public static void testMessageInstances(Serializable instance1, Serializable instance2) throws Exception {     // test equals, hash code, toString     assertTrue(instance1.equals(instance2)).     assertTrue(instance2.equals(instance1)).     assertTrue(instance1.hashCode() == instance2.hashCode()).     assertTrue(instance1.toString().equals(instance2.toString())).     // test serializability     Serializable copy = CommonTestUtils.createCopySerializable(instance1).     assertTrue(instance1.equals(copy)).     assertTrue(copy.equals(instance1)).     assertTrue(instance1.hashCode() == copy.hashCode()). }
false;public,static;3;48;;// ------------------------------------------------------------------------ // Random Generators // ------------------------------------------------------------------------ @SuppressWarnings("unchecked") public static <T> T instantiateGeneric(Class<T> messageClass, Random rnd, Instantiator<?>... extraInstantiators) {     try {         // build the map of extra instantiators         Map<Class<?>, Instantiator<?>> extraInsts = new HashMap<>().         for (Instantiator<?> inst : extraInstantiators) {             Class<?> type = (Class<?>) ((ParameterizedType) inst.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0].             assertNotNull("Cannot get type for extra instantiator", type).             extraInsts.put(type, inst).         }         Constructor<?>[] constructors = messageClass.getConstructors().         Class<?> missingType = null.         outer: for (Constructor<?> constructor : constructors) {             Class<?>[] paramTypes = constructor.getParameterTypes().             Object[] params = new Object[paramTypes.length].             for (int i = 0. i < paramTypes.length. i++) {                 Instantiator<?> inst = extraInsts.get(paramTypes[i]).                 if (inst == null) {                     inst = INSTANTIATORS.get(paramTypes[i]).                 }                 if (inst == null) {                     missingType = paramTypes[i].                     continue outer.                 }                 params[i] = inst.instantiate(rnd).             }             return (T) constructor.newInstance(params).         }         // noinspection ConstantConditions         fail("No instantiator available for type " + missingType.getCanonicalName()).         throw new RuntimeException().     } catch (Exception e) {         e.printStackTrace().         fail("Could not perform reflective tests: " + e.getMessage()).         throw new RuntimeException().     } }
false;public,static;1;8;;public static String randomString(Random rnd) {     int len = rnd.nextInt(64 + 1).     char[] chars = new char[len].     for (int i = 0. i < len. i++) {         chars[i] = (char) rnd.nextInt().     }     return new String(chars). }
false;public,static;1;3;;public static JobID randomJobId(Random rnd) {     return new JobID(rnd.nextLong(), rnd.nextLong()). }
false;public,static;1;3;;public static JobStatus randomJobStatus(Random rnd) {     return JobStatus.values()[rnd.nextInt(JobStatus.values().length)]. }
false;;1;1;;T instantiate(Random rnd).
false;public;1;5;;@Override public Byte instantiate(Random rnd) {     int i = rnd.nextInt(100).     return (byte) i. }
false;public;1;4;;@Override public Short instantiate(Random rnd) {     return (short) rnd.nextInt(30000). }
false;public;1;4;;@Override public Integer instantiate(Random rnd) {     return rnd.nextInt(Integer.MAX_VALUE). }
false;public;1;4;;@Override public Long instantiate(Random rnd) {     return (long) rnd.nextInt(Integer.MAX_VALUE). }
false;public;1;4;;@Override public Float instantiate(Random rnd) {     return rnd.nextFloat(). }
false;public;1;4;;@Override public Double instantiate(Random rnd) {     return rnd.nextDouble(). }
false;public;1;4;;@Override public Boolean instantiate(Random rnd) {     return rnd.nextBoolean(). }
false;public;1;4;;@Override public Character instantiate(Random rnd) {     return (char) rnd.nextInt(30000). }
false;public;1;4;;@Override public String instantiate(Random rnd) {     return randomString(rnd). }
false;public;1;4;;@Override public JobID instantiate(Random rnd) {     return randomJobId(rnd). }
false;public;1;4;;@Override public JobStatus instantiate(Random rnd) {     return randomJobStatus(rnd). }
