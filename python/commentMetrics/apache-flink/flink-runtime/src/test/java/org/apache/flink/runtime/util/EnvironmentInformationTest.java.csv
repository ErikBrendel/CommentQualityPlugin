commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testJavaMemory() {     try {         long fullHeap = EnvironmentInformation.getMaxJvmHeapMemory().         long freeWithGC = EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag().         assertTrue(fullHeap > 0).         assertTrue(freeWithGC >= 0).         try {             long free = EnvironmentInformation.getSizeOfFreeHeapMemory().             assertTrue(free >= 0).         } catch (RuntimeException e) {             // this may only occur if the Xmx is not set             assertEquals(Long.MAX_VALUE, EnvironmentInformation.getMaxJvmHeapMemory()).         }     // we cannot make these assumptions, because the test JVM may grow / shrink during the GC     // assertTrue(free <= fullHeap).     // assertTrue(freeWithGC <= fullHeap).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;17;;@Test public void testEnvironmentMethods() {     try {         assertNotNull(EnvironmentInformation.getJvmStartupOptions()).         assertNotNull(EnvironmentInformation.getJvmStartupOptionsArray()).         assertNotNull(EnvironmentInformation.getJvmVersion()).         assertNotNull(EnvironmentInformation.getRevisionInformation()).         assertNotNull(EnvironmentInformation.getVersion()).         EnvironmentInformation.getHadoopVersionString().         assertNotNull(EnvironmentInformation.getHadoopUser()).         assertTrue(EnvironmentInformation.getOpenFileHandlesLimit() >= -1).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;12;;@Test public void testLogEnvironmentInformation() {     try {         Logger mockLogger = Mockito.mock(Logger.class).         EnvironmentInformation.logEnvironmentInfo(mockLogger, "test", new String[0]).         EnvironmentInformation.logEnvironmentInfo(mockLogger, "test", null).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
