commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<SubtasksAllAccumulatorsInfo> getTestResponseClass() {     return SubtasksAllAccumulatorsInfo.class. }
false;protected;0;22;;@Override protected SubtasksAllAccumulatorsInfo getTestResponseInstance() throws Exception {     List<SubtasksAllAccumulatorsInfo.SubtaskAccumulatorsInfo> subtaskAccumulatorsInfos = new ArrayList<>(3).     List<UserAccumulator> userAccumulators = new ArrayList<>(2).     userAccumulators.add(new UserAccumulator("test name1", "test type1", "test value1")).     userAccumulators.add(new UserAccumulator("test name2", "test type2", "test value2")).     for (int i = 0. i < 3. ++i) {         subtaskAccumulatorsInfos.add(new SubtasksAllAccumulatorsInfo.SubtaskAccumulatorsInfo(i, i, "host-" + String.valueOf(i), userAccumulators)).     }     return new SubtasksAllAccumulatorsInfo(new JobVertexID(), 4, subtaskAccumulatorsInfos). }
