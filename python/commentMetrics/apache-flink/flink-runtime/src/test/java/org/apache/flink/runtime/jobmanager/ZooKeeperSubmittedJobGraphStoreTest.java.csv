commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     configuration = new Configuration().     configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString()). }
true;public;0;33;/**  * Tests that we fail with an exception if the job cannot be removed from the  * ZooKeeperSubmittedJobGraphStore.  *  * <p>Tests that a close ZooKeeperSubmittedJobGraphStore no longer holds any locks.  */ ;/**  * Tests that we fail with an exception if the job cannot be removed from the  * ZooKeeperSubmittedJobGraphStore.  *  * <p>Tests that a close ZooKeeperSubmittedJobGraphStore no longer holds any locks.  */ @Test public void testJobGraphRemovalFailureAndLockRelease() throws Exception {     try (final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)) {         final TestingRetrievableStateStorageHelper<SubmittedJobGraph> stateStorage = new TestingRetrievableStateStorageHelper<>().         final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage).         submittedJobGraphStore.start(null).         final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = createSubmittedJobGraphStore(client, stateStorage).         otherSubmittedJobGraphStore.start(null).         final SubmittedJobGraph jobGraph = new SubmittedJobGraph(new JobGraph()).         submittedJobGraphStore.putJobGraph(jobGraph).         final SubmittedJobGraph recoveredJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobGraph.getJobId()).         assertThat(recoveredJobGraph, is(notNullValue())).         try {             otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId()).             fail("It should not be possible to remove the JobGraph since the first store still has a lock on it.").         } catch (Exception ignored) {         // expected         }         submittedJobGraphStore.stop().         // now we should be able to delete the job graph         otherSubmittedJobGraphStore.removeJobGraph(recoveredJobGraph.getJobId()).         assertThat(otherSubmittedJobGraphStore.recoverJobGraph(recoveredJobGraph.getJobId()), is(nullValue())).         otherSubmittedJobGraphStore.stop().     } }
false;public;2;7;;@Nonnull public ZooKeeperSubmittedJobGraphStore createSubmittedJobGraphStore(CuratorFramework client, TestingRetrievableStateStorageHelper<SubmittedJobGraph> stateStorage) throws Exception {     return new ZooKeeperSubmittedJobGraphStore(client.getNamespace(), new ZooKeeperStateHandleStore<>(client, stateStorage), new PathChildrenCache(client, "/", false)). }
