commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public TestInputChannel read(Buffer buffer) throws IOException, InterruptedException {     return read(buffer, true). }
false;public;2;5;;public TestInputChannel read(Buffer buffer, boolean moreAvailable) throws IOException, InterruptedException {     addBufferAndAvailability(new BufferAndAvailability(buffer, moreAvailable, 0)).     return this. }
false;;0;3;;TestInputChannel readBuffer() throws IOException, InterruptedException {     return readBuffer(true). }
false;;1;6;;TestInputChannel readBuffer(boolean moreAvailable) throws IOException, InterruptedException {     final Buffer buffer = mock(Buffer.class).     when(buffer.isBuffer()).thenReturn(true).     return read(buffer, moreAvailable). }
false;;0;11;;TestInputChannel readEndOfPartitionEvent() throws InterruptedException {     addBufferAndAvailability(() -> {         setReleased().         return Optional.of(new BufferAndAvailability(EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE), false, 0)).     }).     return this. }
false;;1;3;;void addBufferAndAvailability(BufferAndAvailability bufferAndAvailability) {     buffers.add(() -> Optional.of(bufferAndAvailability)). }
false;;1;3;;void addBufferAndAvailability(BufferAndAvailabilityProvider bufferAndAvailability) {     buffers.add(bufferAndAvailability). }
true;static;2;14;/**  * Creates test input channels and attaches them to the specified input gate.  *  * @return The created test input channels.  */ ;// ------------------------------------------------------------------------ /**  * Creates test input channels and attaches them to the specified input gate.  *  * @return The created test input channels.  */ static TestInputChannel[] createInputChannels(SingleInputGate inputGate, int numberOfInputChannels) {     checkNotNull(inputGate).     checkArgument(numberOfInputChannels > 0).     TestInputChannel[] mocks = new TestInputChannel[numberOfInputChannels].     for (int i = 0. i < numberOfInputChannels. i++) {         mocks[i] = new TestInputChannel(inputGate, i).         inputGate.setInputChannel(new IntermediateResultPartitionID(), mocks[i]).     }     return mocks. }
false;;1;4;;@Override void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException { }
false;;0;13;;@Override Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException {     BufferAndAvailabilityProvider provider = buffers.poll().     if (provider != null) {         lastProvider = provider.         return provider.getBufferAvailability().     } else if (lastProvider != null) {         return lastProvider.getBufferAvailability().     } else {         return Optional.empty().     } }
false;;1;4;;@Override void sendTaskEvent(TaskEvent event) throws IOException { }
false;;0;4;;@Override boolean isReleased() {     return isReleased. }
false;;0;3;;void setReleased() {     this.isReleased = true. }
false;;0;4;;@Override void notifySubpartitionConsumed() throws IOException { }
false;;0;4;;@Override void releaseAllResources() throws IOException { }
false;protected;0;4;;@Override protected void notifyChannelNonEmpty() { }
false;;0;1;;Optional<BufferAndAvailability> getBufferAvailability() throws IOException, InterruptedException.
