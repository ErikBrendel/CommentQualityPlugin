commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public ArchivedExecutionGraphBuilder setJobID(JobID jobID) {     this.jobID = jobID.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setJobName(String jobName) {     this.jobName = jobName.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setTasks(Map<JobVertexID, ArchivedExecutionJobVertex> tasks) {     this.tasks = tasks.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setVerticesInCreationOrder(List<ArchivedExecutionJobVertex> verticesInCreationOrder) {     this.verticesInCreationOrder = verticesInCreationOrder.     return this. }
false;public;1;5;;public ArchivedExecutionGraphBuilder setStateTimestamps(long[] stateTimestamps) {     Preconditions.checkArgument(stateTimestamps.length == JobStatus.values().length).     this.stateTimestamps = stateTimestamps.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setState(JobStatus state) {     this.state = state.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setFailureCause(ErrorInfo failureCause) {     this.failureCause = failureCause.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setJsonPlan(String jsonPlan) {     this.jsonPlan = jsonPlan.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setArchivedUserAccumulators(StringifiedAccumulatorResult[] archivedUserAccumulators) {     this.archivedUserAccumulators = archivedUserAccumulators.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setArchivedExecutionConfig(ArchivedExecutionConfig archivedExecutionConfig) {     this.archivedExecutionConfig = archivedExecutionConfig.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setStoppable(boolean stoppable) {     isStoppable = stoppable.     return this. }
false;public;1;4;;public ArchivedExecutionGraphBuilder setSerializedUserAccumulators(Map<String, SerializedValue<OptionalFailure<Object>>> serializedUserAccumulators) {     this.serializedUserAccumulators = serializedUserAccumulators.     return this. }
false;public;0;25;;public ArchivedExecutionGraph build() {     JobID jobID = this.jobID != null ? this.jobID : new JobID().     String jobName = this.jobName != null ? this.jobName : "job_" + RANDOM.nextInt().     if (tasks == null) {         tasks = Collections.emptyMap().     }     return new ArchivedExecutionGraph(jobID, jobName, tasks, verticesInCreationOrder != null ? verticesInCreationOrder : new ArrayList<>(tasks.values()), stateTimestamps != null ? stateTimestamps : new long[JobStatus.values().length], state != null ? state : JobStatus.FINISHED, failureCause, jsonPlan != null ? jsonPlan : "{\"jobid\":\"" + jobID + "\", \"name\":\"" + jobName + "\", \"nodes\":[]}", archivedUserAccumulators != null ? archivedUserAccumulators : new StringifiedAccumulatorResult[0], serializedUserAccumulators != null ? serializedUserAccumulators : Collections.emptyMap(), archivedExecutionConfig != null ? archivedExecutionConfig : new ArchivedExecutionConfigBuilder().build(), isStoppable, null, null). }
