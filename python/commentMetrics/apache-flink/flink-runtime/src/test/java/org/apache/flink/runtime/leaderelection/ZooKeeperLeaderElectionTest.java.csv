# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1441011751;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1441725024;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1442999318;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1443099371;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1466167799;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1467189690;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1472033364;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1472033371;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1476095826;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1493975155;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1493975167;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1498896127;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1505979050;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout.toMillis())___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,to,millis,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperLeaderElectionRetrieval() throws Exception;1528982883;Tests that the ZooKeeperLeaderElection/RetrievalService return both the correct URL.;@Test_	public void testZooKeeperLeaderElectionRetrieval() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			TestingContender contender = new TestingContender(TEST_URL, leaderElectionService)__			TestingListener listener = new TestingListener()___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			contender.waitForLeader(timeout)___			assertTrue(contender.isLeader())__			assertEquals(leaderElectionService.getLeaderSessionID(), contender.getLeaderSessionID())___			listener.waitForNewLeader(timeout)___			assertEquals(TEST_URL, listener.getAddress())__			assertEquals(leaderElectionService.getLeaderSessionID(), listener.getLeaderSessionID())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,zoo,keeper,leader,election,retrieval,service,return,both,the,correct,url;test,public,void,test,zoo,keeper,leader,election,retrieval,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,contender,new,testing,contender,leader,election,service,testing,listener,listener,new,testing,listener,leader,election,service,start,contender,leader,retrieval,service,start,listener,contender,wait,for,leader,timeout,assert,true,contender,is,leader,assert,equals,leader,election,service,get,leader,session,id,contender,get,leader,session,id,listener,wait,for,new,leader,timeout,assert,equals,listener,get,address,assert,equals,leader,election,service,get,leader,session,id,listener,get,leader,session,id,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1441011751;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1441725024;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1442999318;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1443099371;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1466167799;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1467189690;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1472033364;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1472033371;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1476095826;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1493975155;Tests that there is no information left in the ZooKeeper cluster after all JobManagers_have terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		NodeCache cache = null___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			client = ZooKeeperUtils.startCuratorFramework(configuration)__			final String leaderPath = configuration.getString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client != null) {_				client.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,all,job,managers,have,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,node,cache,cache,null,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,client,zoo,keeper,utils,start,curator,framework,configuration,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client,null,client,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1493975167;Tests that there is no information left in the ZooKeeper cluster after the ZooKeeper client_has terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		CuratorFramework client2 = null__		NodeCache cache = null___		try {_			client = ZooKeeperUtils.startCuratorFramework(configuration)__			client2 = ZooKeeperUtils.startCuratorFramework(configuration)___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client2, configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			final String leaderPath = configuration.getString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH,_					ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client2, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			_			client.close()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000L)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client2 != null) {_				client2.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,the,zoo,keeper,client,has,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,curator,framework,client2,null,node,cache,cache,null,try,client,zoo,keeper,utils,start,curator,framework,configuration,client2,zoo,keeper,utils,start,curator,framework,configuration,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client2,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,final,string,leader,path,configuration,get,string,config,constants,config,constants,cache,new,node,cache,client2,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,client,close,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000l,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client2,null,client2,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1498896127;Tests that there is no information left in the ZooKeeper cluster after the ZooKeeper client_has terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		CuratorFramework client2 = null__		NodeCache cache = null___		try {_			client = ZooKeeperUtils.startCuratorFramework(configuration)__			client2 = ZooKeeperUtils.startCuratorFramework(configuration)___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client2, configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			final String leaderPath = configuration.getString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client2, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			_			client.close()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000L)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client2 != null) {_				client2.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,the,zoo,keeper,client,has,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,curator,framework,client2,null,node,cache,cache,null,try,client,zoo,keeper,utils,start,curator,framework,configuration,client2,zoo,keeper,utils,start,curator,framework,configuration,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client2,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,final,string,leader,path,configuration,get,string,high,availability,options,cache,new,node,cache,client2,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,client,close,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000l,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client2,null,client2,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1505979050;Tests that there is no information left in the ZooKeeper cluster after the ZooKeeper client_has terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		CuratorFramework client2 = null__		NodeCache cache = null___		try {_			client = ZooKeeperUtils.startCuratorFramework(configuration)__			client2 = ZooKeeperUtils.startCuratorFramework(configuration)___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client2, configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			final String leaderPath = configuration.getString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client2, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout.toMillis())___			Future<Boolean> existsFuture = existsListener.nodeExists()___			Await.result(existsFuture, timeout)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			_			client.close()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			Await.result(deletedFuture, timeout)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000L)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client2 != null) {_				client2.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,the,zoo,keeper,client,has,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,curator,framework,client2,null,node,cache,cache,null,try,client,zoo,keeper,utils,start,curator,framework,configuration,client2,zoo,keeper,utils,start,curator,framework,configuration,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client2,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,final,string,leader,path,configuration,get,string,high,availability,options,cache,new,node,cache,client2,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,to,millis,future,boolean,exists,future,exists,listener,node,exists,await,result,exists,future,timeout,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,client,close,future,boolean,deleted,future,deleted,cache,listener,node,deleted,await,result,deleted,future,timeout,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000l,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client2,null,client2,close
ZooKeeperLeaderElectionTest -> @Test 	public void testEphemeralZooKeeperNodes() throws Exception;1528982883;Tests that there is no information left in the ZooKeeper cluster after the ZooKeeper client_has terminated. In other words, checks that the ZooKeeperLeaderElection service uses_ephemeral nodes.;@Test_	public void testEphemeralZooKeeperNodes() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingContender testingContender__		TestingListener listener___		CuratorFramework client = null__		CuratorFramework client2 = null__		NodeCache cache = null___		try {_			client = ZooKeeperUtils.startCuratorFramework(configuration)__			client2 = ZooKeeperUtils.startCuratorFramework(configuration)___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client2, configuration)__			testingContender = new TestingContender(TEST_URL, leaderElectionService)__			listener = new TestingListener()___			final String leaderPath = configuration.getString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH)__			cache = new NodeCache(client2, leaderPath)___			ExistsCacheListener existsListener = new ExistsCacheListener(cache)__			DeletedCacheListener deletedCacheListener = new DeletedCacheListener(cache)___			cache.getListenable().addListener(existsListener)__			cache.start()___			leaderElectionService.start(testingContender)___			testingContender.waitForLeader(timeout)___			Future<Boolean> existsFuture = existsListener.nodeExists()___			existsFuture.get(timeout, TimeUnit.MILLISECONDS)___			cache.getListenable().addListener(deletedCacheListener)___			leaderElectionService.stop()___			_			client.close()___			Future<Boolean> deletedFuture = deletedCacheListener.nodeDeleted()___			_			deletedFuture.get(timeout, TimeUnit.MILLISECONDS)___			leaderRetrievalService.start(listener)___			try {_				listener.waitForNewLeader(1000L)___				fail("TimeoutException was expected because there is no leader registered and " +_						"thus there shouldn't be any leader information in ZooKeeper.")__			} catch (TimeoutException e) {_				_			}_		} finally {_			if(leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (cache != null) {_				cache.close()__			}__			if (client2 != null) {_				client2.close()__			}_		}_	};tests,that,there,is,no,information,left,in,the,zoo,keeper,cluster,after,the,zoo,keeper,client,has,terminated,in,other,words,checks,that,the,zoo,keeper,leader,election,service,uses,ephemeral,nodes;test,public,void,test,ephemeral,zoo,keeper,nodes,throws,exception,zoo,keeper,leader,election,service,leader,election,service,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,contender,testing,contender,testing,listener,listener,curator,framework,client,null,curator,framework,client2,null,node,cache,cache,null,try,client,zoo,keeper,utils,start,curator,framework,configuration,client2,zoo,keeper,utils,start,curator,framework,configuration,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client2,configuration,testing,contender,new,testing,contender,leader,election,service,listener,new,testing,listener,final,string,leader,path,configuration,get,string,high,availability,options,cache,new,node,cache,client2,leader,path,exists,cache,listener,exists,listener,new,exists,cache,listener,cache,deleted,cache,listener,deleted,cache,listener,new,deleted,cache,listener,cache,cache,get,listenable,add,listener,exists,listener,cache,start,leader,election,service,start,testing,contender,testing,contender,wait,for,leader,timeout,future,boolean,exists,future,exists,listener,node,exists,exists,future,get,timeout,time,unit,milliseconds,cache,get,listenable,add,listener,deleted,cache,listener,leader,election,service,stop,client,close,future,boolean,deleted,future,deleted,cache,listener,node,deleted,deleted,future,get,timeout,time,unit,milliseconds,leader,retrieval,service,start,listener,try,listener,wait,for,new,leader,1000l,fail,timeout,exception,was,expected,because,there,is,no,leader,registered,and,thus,there,shouldn,t,be,any,leader,information,in,zoo,keeper,catch,timeout,exception,e,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,cache,null,cache,close,if,client2,null,client2,close
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1441011751;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					listener.clear()___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,listener,clear,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1441725024;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					listener.clear()___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,listener,clear,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1442999318;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					listener.clear()___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,listener,clear,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1443099371;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1466167799;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1467189690;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1472033364;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1472033371;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1476095826;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1493975155;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1493975167;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1498896127;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1505979050;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelectionWithReplacement() throws Exception;1528982883;Tests the repeated reelection of {@link LeaderContender} once the current leader dies._Furthermore, it tests that new LeaderElectionServices can be started later on and that they_successfully register at ZooKeeper and take part in the leader election.;@Test_	public void testZooKeeperReelectionWithReplacement() throws Exception {_		int num = 3__		int numTries = 30___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i + "_0", leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)" + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < numTries_ i++) {_				listener.waitForNewLeader(timeout)___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))__					int lastTry = Integer.parseInt(m.group(2))___					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())___					_					leaderElectionService[index].stop()__					_					leaderElectionService[index] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__					contenders[index] = new TestingContender(_							TEST_URL + "_" + index + "_" + (lastTry + 1),_							leaderElectionService[index])___					leaderElectionService[index].start(contenders[index])__				} else {_					throw new Exception("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,the,repeated,reelection,of,link,leader,contender,once,the,current,leader,dies,furthermore,it,tests,that,new,leader,election,services,can,be,started,later,on,and,that,they,successfully,register,at,zoo,keeper,and,take,part,in,the,leader,election;test,public,void,test,zoo,keeper,reelection,with,replacement,throws,exception,int,num,3,int,num,tries,30,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,tries,i,listener,wait,for,new,leader,timeout,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,int,last,try,integer,parse,int,m,group,2,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,leader,election,service,index,stop,leader,election,service,index,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,index,new,testing,contender,index,last,try,1,leader,election,service,index,leader,election,service,index,start,contenders,index,else,throw,new,exception,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1441011751;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 100___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < num_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					_					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())__					assertEquals(TEST_URL + "_" + index, listener.getAddress())___					_					leaderElectionService[index].stop()__					leaderElectionService[index] = null__				} else {_					fail("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,100,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,assert,equals,index,listener,get,address,leader,election,service,index,stop,leader,election,service,index,null,else,fail,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1441725024;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 100___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < num_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					_					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())__					assertEquals(TEST_URL + "_" + index, listener.getAddress())___					_					leaderElectionService[index].stop()__					leaderElectionService[index] = null__				} else {_					fail("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,100,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,assert,equals,index,listener,get,address,leader,election,service,index,stop,leader,election,service,index,null,else,fail,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1442999318;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 50___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < num_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					_					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())__					assertEquals(TEST_URL + "_" + index, listener.getAddress())___					_					leaderElectionService[index].stop()__					leaderElectionService[index] = null__				} else {_					fail("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,50,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,assert,equals,index,listener,get,address,leader,election,service,index,stop,leader,election,service,index,null,else,fail,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1443099371;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		int num = 50___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			for (int i = 0_ i < num_ i++) {_				listener.waitForNewLeader(timeout.toMillis())___				String address = listener.getAddress()___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					_					assertEquals(listener.getLeaderSessionID(), contenders[index].getLeaderSessionID())__					assertEquals(TEST_URL + "_" + index, listener.getAddress())___					_					leaderElectionService[index].stop()__					leaderElectionService[index] = null__				} else {_					fail("Did not find the leader's index.")__				}_			}__		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,int,num,50,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,for,int,i,0,i,num,i,listener,wait,for,new,leader,timeout,to,millis,string,address,listener,get,address,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,assert,equals,listener,get,leader,session,id,contenders,index,get,leader,session,id,assert,equals,index,listener,get,address,leader,election,service,index,stop,leader,election,service,index,null,else,fail,did,not,find,the,leader,s,index,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1466167799;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		Deadline deadline = new FiniteDuration(3, TimeUnit.MINUTES).fromNow()___		int num = 25___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse(deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,deadline,deadline,new,finite,duration,3,time,unit,minutes,from,now,int,num,25,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1467189690;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 20___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse(deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,20,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1472033364;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")___		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 20___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse(deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,20,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1472033371;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")___		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 20___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse(deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,20,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1476095826;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 20___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse(deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,20,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1493975155;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 10___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse("Did not complete the leader reelection in time.", deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,10,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,did,not,complete,the,leader,reelection,in,time,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1493975167;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 10___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse("Did not complete the leader reelection in time.", deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,10,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,did,not,complete,the,leader,reelection,in,time,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1498896127;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 10___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse("Did not complete the leader reelection in time.", deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,10,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,did,not,complete,the,leader,reelection,in,time,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1505979050;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Deadline deadline = new FiniteDuration(5, TimeUnit.MINUTES).fromNow()___		int num = 10___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse("Did not complete the leader reelection in time.", deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,deadline,deadline,new,finite,duration,5,time,unit,minutes,from,now,int,num,10,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,did,not,complete,the,leader,reelection,in,time,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testZooKeeperReelection() throws Exception;1528982883;Tests repeatedly the reelection of still available LeaderContender. After a contender has_been elected as the leader, it is removed. This forces the ZooKeeperLeaderElectionService_to elect a new leader.;@Test_	public void testZooKeeperReelection() throws Exception {_		Deadline deadline = Deadline.fromNow(Duration.ofMinutes(5L))___		int num = 10___		ZooKeeperLeaderElectionService[] leaderElectionService = new ZooKeeperLeaderElectionService[num]__		TestingContender[] contenders = new TestingContender[num]__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null___		TestingListener listener = new TestingListener()___		try {_			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			LOG.debug("Start leader retrieval service for the TestingListener.")___			leaderRetrievalService.start(listener)___			for (int i = 0_ i < num_ i++) {_				leaderElectionService[i] = ZooKeeperUtils.createLeaderElectionService(client, configuration)__				contenders[i] = new TestingContender(TEST_URL + "_" + i, leaderElectionService[i])___				LOG.debug("Start leader election service for contender #{}.", i)___				leaderElectionService[i].start(contenders[i])__			}__			String pattern = TEST_URL + "_" + "(\\d+)"__			Pattern regex = Pattern.compile(pattern)___			int numberSeenLeaders = 0___			while (deadline.hasTimeLeft() && numberSeenLeaders < num) {_				LOG.debug("Wait for new leader #{}.", numberSeenLeaders)__				String address = listener.waitForNewLeader(deadline.timeLeft().toMillis())___				Matcher m = regex.matcher(address)___				if (m.find()) {_					int index = Integer.parseInt(m.group(1))___					TestingContender contender = contenders[index]___					_					if (address.equals(contender.getAddress()) && listener.getLeaderSessionID().equals(contender.getLeaderSessionID())) {_						_						LOG.debug("Stop leader election service of contender #{}.", numberSeenLeaders)__						leaderElectionService[index].stop()__						leaderElectionService[index] = null___						numberSeenLeaders++__					}_				} else {_					fail("Did not find the leader's index.")__				}_			}__			assertFalse("Did not complete the leader reelection in time.", deadline.isOverdue())__			assertEquals(num, numberSeenLeaders)___		} finally {_			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			for (ZooKeeperLeaderElectionService electionService : leaderElectionService) {_				if (electionService != null) {_					electionService.stop()__				}_			}_		}_	};tests,repeatedly,the,reelection,of,still,available,leader,contender,after,a,contender,has,been,elected,as,the,leader,it,is,removed,this,forces,the,zoo,keeper,leader,election,service,to,elect,a,new,leader;test,public,void,test,zoo,keeper,reelection,throws,exception,deadline,deadline,deadline,from,now,duration,of,minutes,5l,int,num,10,zoo,keeper,leader,election,service,leader,election,service,new,zoo,keeper,leader,election,service,num,testing,contender,contenders,new,testing,contender,num,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,try,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,log,debug,start,leader,retrieval,service,for,the,testing,listener,leader,retrieval,service,start,listener,for,int,i,0,i,num,i,leader,election,service,i,zoo,keeper,utils,create,leader,election,service,client,configuration,contenders,i,new,testing,contender,i,leader,election,service,i,log,debug,start,leader,election,service,for,contender,i,leader,election,service,i,start,contenders,i,string,pattern,d,pattern,regex,pattern,compile,pattern,int,number,seen,leaders,0,while,deadline,has,time,left,number,seen,leaders,num,log,debug,wait,for,new,leader,number,seen,leaders,string,address,listener,wait,for,new,leader,deadline,time,left,to,millis,matcher,m,regex,matcher,address,if,m,find,int,index,integer,parse,int,m,group,1,testing,contender,contender,contenders,index,if,address,equals,contender,get,address,listener,get,leader,session,id,equals,contender,get,leader,session,id,log,debug,stop,leader,election,service,of,contender,number,seen,leaders,leader,election,service,index,stop,leader,election,service,index,null,number,seen,leaders,else,fail,did,not,find,the,leader,s,index,assert,false,did,not,complete,the,leader,reelection,in,time,deadline,is,overdue,assert,equals,num,number,seen,leaders,finally,if,leader,retrieval,service,null,leader,retrieval,service,stop,for,zoo,keeper,leader,election,service,election,service,leader,election,service,if,election,service,null,election,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1441011751;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			listener.clear()___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			listener.waitForLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener.getAddress())) {_				listener.clear()__				listener.waitForLeader(timeout.toMillis())__			}__			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,listener,clear,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,listener,wait,for,leader,timeout,to,millis,if,equals,listener,get,address,listener,clear,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1441725024;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			listener.clear()___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			listener.waitForLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener.getAddress())) {_				listener.clear()__				listener.waitForLeader(timeout.toMillis())__			}__			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,listener,clear,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,listener,wait,for,leader,timeout,to,millis,if,equals,listener,get,address,listener,clear,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1442999318;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			listener.clear()___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			listener.waitForLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener.getAddress())) {_				listener.clear()__				listener.waitForLeader(timeout.toMillis())__			}__			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,listener,clear,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,listener,wait,for,leader,timeout,to,millis,if,equals,listener,get,address,listener,clear,listener,wait,for,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1443099371;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1466167799;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1467189690;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		configuration.setString(ConfigConstants.ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1472033364;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1472033371;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1476095826;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1493975155;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1493975167;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		configuration.setString(ConfigConstants.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,set,string,config,constants,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1498896127;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,set,string,high,availability,options,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1505979050;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout.toMillis())___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout.toMillis())___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout.toMillis())__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,set,string,high,availability,options,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,to,millis,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,to,millis,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,to,millis,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testMultipleLeaders() throws Exception;1528982883;Tests that the current leader is notified when his leader connection information in ZooKeeper_are overwritten. The leader must re-establish the correct leader connection information in_ZooKeeper.;@Test_	public void testMultipleLeaders() throws Exception {_		final String FAULTY_CONTENDER_URL = "faultyContender"__		final String leaderPath = "/leader"___		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH, leaderPath)___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService2 = null__		TestingListener listener = new TestingListener()__		TestingListener listener2 = new TestingListener()__		TestingContender contender___		try {_			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client, configuration)__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)__			leaderRetrievalService2 = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			contender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(contender)__			leaderRetrievalService.start(listener)___			listener.waitForNewLeader(timeout)___			assertEquals(listener.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(TEST_URL, listener.getAddress())___			CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)___			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(FAULTY_CONTENDER_URL)__			oos.writeObject(null)___			oos.close()___			_			boolean dataWritten = false___			while(!dataWritten) {_				client.delete().forPath(leaderPath)___				try {_					client.create().forPath(leaderPath, baos.toByteArray())___					dataWritten = true__				} catch (KeeperException.NodeExistsException e) {_					_				}_			}__			leaderRetrievalService2.start(listener2)___			listener2.waitForNewLeader(timeout)___			if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {_				listener2.waitForNewLeader(timeout)__			}__			assertEquals(listener2.getLeaderSessionID(), contender.getLeaderSessionID())__			assertEquals(listener2.getAddress(), contender.getAddress())___		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}__			if (leaderRetrievalService2 != null) {_				leaderRetrievalService2.stop()__			}_		}_	};tests,that,the,current,leader,is,notified,when,his,leader,connection,information,in,zoo,keeper,are,overwritten,the,leader,must,re,establish,the,correct,leader,connection,information,in,zoo,keeper;test,public,void,test,multiple,leaders,throws,exception,final,string,faulty,contender,final,string,leader,path,leader,configuration,set,string,high,availability,options,leader,path,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service2,null,testing,listener,listener,new,testing,listener,testing,listener,listener2,new,testing,listener,testing,contender,contender,try,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,configuration,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,leader,retrieval,service2,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,contender,new,testing,contender,leader,election,service,leader,election,service,start,contender,leader,retrieval,service,start,listener,listener,wait,for,new,leader,timeout,assert,equals,listener,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener,get,address,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,oos,write,object,null,oos,close,boolean,data,written,false,while,data,written,client,delete,for,path,leader,path,try,client,create,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,e,leader,retrieval,service2,start,listener2,listener2,wait,for,new,leader,timeout,if,equals,listener2,get,address,listener2,wait,for,new,leader,timeout,assert,equals,listener2,get,leader,session,id,contender,get,leader,session,id,assert,equals,listener2,get,address,contender,get,address,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop,if,leader,retrieval,service2,null,leader,retrieval,service2,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1441011751;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1441725024;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,cluster,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1442999318;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1443099371;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1466167799;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1467189690;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1472033364;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1472033371;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())__		configuration.setString(ConfigConstants.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,config,constants,testing,server,get,connect,string,configuration,set,string,config,constants,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1476095826;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1493975155;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())__		configuration.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")___		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class)__		final ProtectACLCreateModePathAndBytesable<String> mockCreateParentsIfNeeded = mock (ProtectACLCreateModePathAndBytesable.class)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(mockCreateBuilder.creatingParentsIfNeeded()).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.withMode(Matchers.any(CreateMode.class))).thenReturn(mockCreateParentsIfNeeded)__			when(mockCreateParentsIfNeeded.forPath(Matchers.any(String.class),  Matchers.any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,testing,server,get,connect,string,configuration,set,string,high,availability,options,zookeeper,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,final,protect,aclcreate,mode,path,and,bytesable,string,mock,create,parents,if,needed,mock,protect,aclcreate,mode,path,and,bytesable,class,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,with,mode,matchers,any,create,mode,class,then,return,mock,create,parents,if,needed,when,mock,create,parents,if,needed,for,path,matchers,any,string,class,matchers,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1493975167;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class, Mockito.RETURNS_DEEP_STUBS)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(_				mockCreateBuilder_				.creatingParentsIfNeeded()_				.withMode(Matchers.any(CreateMode.class))_				.forPath(anyString(), any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,mockito,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,with,mode,matchers,any,create,mode,class,for,path,any,string,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1498896127;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class, Mockito.RETURNS_DEEP_STUBS)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(_				mockCreateBuilder_				.creatingParentsIfNeeded()_				.withMode(Matchers.any(CreateMode.class))_				.forPath(anyString(), any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,mockito,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,with,mode,matchers,any,create,mode,class,for,path,any,string,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1505979050;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class, Mockito.RETURNS_DEEP_STUBS)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(_				mockCreateBuilder_				.creatingParentsIfNeeded()_				.withMode(Matchers.any(CreateMode.class))_				.forPath(anyString(), any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout.toMillis())___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,mockito,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,with,mode,matchers,any,create,mode,class,for,path,any,string,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,to,millis,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
ZooKeeperLeaderElectionTest -> @Test 	public void testExceptionForwarding() throws Exception;1528982883;Test that errors in the {@link LeaderElectionService} are correctly forwarded to the_{@link LeaderContender}.;@Test_	public void testExceptionForwarding() throws Exception {_		ZooKeeperLeaderElectionService leaderElectionService = null__		ZooKeeperLeaderRetrievalService leaderRetrievalService = null__		TestingListener listener = new TestingListener()__		TestingContender testingContender___		CuratorFramework client__		final CreateBuilder mockCreateBuilder = mock(CreateBuilder.class, Mockito.RETURNS_DEEP_STUBS)__		final Exception testException = new Exception("Test exception")___		try {_			client = spy(ZooKeeperUtils.startCuratorFramework(configuration))___			Answer<CreateBuilder> answer = new Answer<CreateBuilder>() {_				private int counter = 0___				@Override_				public CreateBuilder answer(InvocationOnMock invocation) throws Throwable {_					counter++___					_					if (counter < 2) {_						return (CreateBuilder) invocation.callRealMethod()__					} else {_						return mockCreateBuilder__					}_				}_			}___			doAnswer(answer).when(client).create()___			when(_				mockCreateBuilder_				.creatingParentsIfNeeded()_				.withMode(Matchers.any(CreateMode.class))_				.forPath(anyString(), any(byte[].class))).thenThrow(testException)___			leaderElectionService = new ZooKeeperLeaderElectionService(client, "/latch", "/leader")__			leaderRetrievalService = ZooKeeperUtils.createLeaderRetrievalService(client, configuration)___			testingContender = new TestingContender(TEST_URL, leaderElectionService)___			leaderElectionService.start(testingContender)__			leaderRetrievalService.start(listener)___			testingContender.waitForError(timeout)___			assertNotNull(testingContender.getError())__			assertEquals(testException, testingContender.getError().getCause())__		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (leaderRetrievalService != null) {_				leaderRetrievalService.stop()__			}_		}_	};test,that,errors,in,the,link,leader,election,service,are,correctly,forwarded,to,the,link,leader,contender;test,public,void,test,exception,forwarding,throws,exception,zoo,keeper,leader,election,service,leader,election,service,null,zoo,keeper,leader,retrieval,service,leader,retrieval,service,null,testing,listener,listener,new,testing,listener,testing,contender,testing,contender,curator,framework,client,final,create,builder,mock,create,builder,mock,create,builder,class,mockito,final,exception,test,exception,new,exception,test,exception,try,client,spy,zoo,keeper,utils,start,curator,framework,configuration,answer,create,builder,answer,new,answer,create,builder,private,int,counter,0,override,public,create,builder,answer,invocation,on,mock,invocation,throws,throwable,counter,if,counter,2,return,create,builder,invocation,call,real,method,else,return,mock,create,builder,do,answer,answer,when,client,create,when,mock,create,builder,creating,parents,if,needed,with,mode,matchers,any,create,mode,class,for,path,any,string,any,byte,class,then,throw,test,exception,leader,election,service,new,zoo,keeper,leader,election,service,client,latch,leader,leader,retrieval,service,zoo,keeper,utils,create,leader,retrieval,service,client,configuration,testing,contender,new,testing,contender,leader,election,service,leader,election,service,start,testing,contender,leader,retrieval,service,start,listener,testing,contender,wait,for,error,timeout,assert,not,null,testing,contender,get,error,assert,equals,test,exception,testing,contender,get,error,get,cause,finally,if,leader,election,service,null,leader,election,service,stop,if,leader,retrieval,service,null,leader,retrieval,service,stop
