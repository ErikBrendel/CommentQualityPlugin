# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is suspended.;@Test_	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.suspend(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,suspended;test,public,void,test,shutdown,checkpoint,coordinator,on,suspend,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,suspend,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is suspended.;@Test_	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.suspend(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.SUSPENDED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.SUSPENDED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,suspended;test,public,void,test,shutdown,checkpoint,coordinator,on,suspend,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,suspend,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,suspended,assert,that,store,shutdown,future,get,is,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception;1549365080;Tests that the checkpoint coordinator is shut down if the execution graph_is suspended.;@Test_	public void testShutdownCheckpointCoordinatorOnSuspend() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.suspend(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.SUSPENDED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.SUSPENDED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,suspended;test,public,void,test,shutdown,checkpoint,coordinator,on,suspend,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,suspend,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,suspended,assert,that,store,shutdown,future,get,is,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is finished.;@Test_	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.scheduleForExecution()___		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			final Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()__			graph.updateState(new TaskExecutionState(graph.getJobID(), currentExecutionAttempt.getAttemptId(), ExecutionState.FINISHED))__		}__		assertThat(graph.getTerminationFuture().get(), is(JobStatus.FINISHED))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		verify(counter, times(1)).shutdown(eq(JobStatus.FINISHED))__		verify(store, times(1)).shutdown(eq(JobStatus.FINISHED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,finished;test,public,void,test,shutdown,checkpoint,coordinator,on,finished,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,schedule,for,execution,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,final,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,graph,update,state,new,task,execution,state,graph,get,job,id,current,execution,attempt,get,attempt,id,execution,state,finished,assert,that,graph,get,termination,future,get,is,job,status,finished,assert,that,checkpoint,coordinator,is,shutdown,is,true,verify,counter,times,1,shutdown,eq,job,status,finished,verify,store,times,1,shutdown,eq,job,status,finished
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is finished.;@Test_	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.scheduleForExecution()___		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			final Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()__			graph.updateState(new TaskExecutionState(graph.getJobID(), currentExecutionAttempt.getAttemptId(), ExecutionState.FINISHED))__		}__		assertThat(graph.getTerminationFuture().get(), is(JobStatus.FINISHED))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.FINISHED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.FINISHED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,finished;test,public,void,test,shutdown,checkpoint,coordinator,on,finished,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,schedule,for,execution,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,final,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,graph,update,state,new,task,execution,state,graph,get,job,id,current,execution,attempt,get,attempt,id,execution,state,finished,assert,that,graph,get,termination,future,get,is,job,status,finished,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,finished,assert,that,store,shutdown,future,get,is,job,status,finished
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception;1549365080;Tests that the checkpoint coordinator is shut down if the execution graph_is finished.;@Test_	public void testShutdownCheckpointCoordinatorOnFinished() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.scheduleForExecution()___		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			final Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()__			graph.updateState(new TaskExecutionState(graph.getJobID(), currentExecutionAttempt.getAttemptId(), ExecutionState.FINISHED))__		}__		assertThat(graph.getTerminationFuture().get(), is(JobStatus.FINISHED))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.FINISHED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.FINISHED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,finished;test,public,void,test,shutdown,checkpoint,coordinator,on,finished,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,schedule,for,execution,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,final,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,graph,update,state,new,task,execution,state,graph,get,job,id,current,execution,attempt,get,attempt,id,execution,state,finished,assert,that,graph,get,termination,future,get,is,job,status,finished,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,finished,assert,that,store,shutdown,future,get,is,job,status,finished
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1469190400;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		_		verify(counter, times(2)).shutdown()__		verify(store, times(1)).shutdown()__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,2,shutdown,verify,store,times,1,shutdown
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1469525443;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		_		verify(counter, times(2)).shutdown()__		verify(store, times(1)).shutdown()__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,2,shutdown,verify,store,times,1,shutdown
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1471454287;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown()__		verify(store, times(1)).shutdown()__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,verify,store,times,1,shutdown
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1472066344;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown()__		verify(store, times(1)).shutdown()__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,verify,store,times,1,shutdown
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1472663071;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown()__		verify(store, times(1)).shutdown()__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,verify,store,times,1,shutdown
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1476432306;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1477989375;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1478800024;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1479852017;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1484038132;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1486647395;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1488304933;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1488453790;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1490800309;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1490800309;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(JobStatus.FAILED)__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1492867556;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED), any(SharedStateRegistry.class))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed,any,shared,state,registry,class
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1492867556;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1493236605;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.fail(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1493831843;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1506618381;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1507212387;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1508861310;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1508861311;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1508861311;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1516295283;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1516295283;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinator() throws Exception;1518680774;Tests that a shut down checkpoint coordinator calls shutdown on_the store and counter.;@Test_	public void testShutdownCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.failGlobal(new Exception("Test Exception"))___		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,a,shut,down,checkpoint,coordinator,calls,shutdown,on,the,store,and,counter;test,public,void,test,shutdown,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,fail,global,new,exception,test,exception,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1469190400;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(0)).shutdown()__		verify(store, times(0)).shutdown()___		_		verify(counter, times(2)).suspend()__		verify(store, times(1)).suspend()__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,0,shutdown,verify,store,times,0,shutdown,verify,counter,times,2,suspend,verify,store,times,1,suspend
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1469525443;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(0)).shutdown()__		verify(store, times(0)).shutdown()___		_		verify(counter, times(2)).suspend()__		verify(store, times(1)).suspend()__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,0,shutdown,verify,store,times,0,shutdown,verify,counter,times,2,suspend,verify,store,times,1,suspend
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1471454287;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(0)).shutdown()__		verify(store, times(0)).shutdown()___		verify(counter, times(1)).suspend()__		verify(store, times(1)).suspend()__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,0,shutdown,verify,store,times,0,shutdown,verify,counter,times,1,suspend,verify,store,times,1,suspend
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1472066344;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(0)).shutdown()__		verify(store, times(0)).shutdown()___		verify(counter, times(1)).suspend()__		verify(store, times(1)).suspend()__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,0,shutdown,verify,store,times,0,shutdown,verify,counter,times,1,suspend,verify,store,times,1,suspend
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1472663071;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(0)).shutdown()__		verify(store, times(0)).shutdown()___		verify(counter, times(1)).suspend()__		verify(store, times(1)).suspend()__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,0,shutdown,verify,store,times,0,shutdown,verify,counter,times,1,suspend,verify,store,times,1,suspend
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1476432306;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1477989375;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1478800024;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1479852017;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1484038132;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1486647395;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1488304933;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1488453790;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1490800309;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1490800309;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(Matchers.eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,matchers,eq,job,status,suspended,verify,store,times,1,shutdown,matchers,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1492867556;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED), any(SharedStateRegistry.class))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended,any,shared,state,registry,class
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1492867556;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1493236605;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1493831843;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1506618381;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1507212387;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1508861310;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1508861311;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1508861311;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1516295283;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1516295283;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testSuspendCheckpointCoordinator() throws Exception;1518680774;Tests that a suspended checkpoint coordinator calls suspend on_the store and counter.;@Test_	public void testSuspendCheckpointCoordinator() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		graph.suspend(new Exception("Test Exception"))___		_		verify(counter, times(1)).shutdown(eq(JobStatus.SUSPENDED))__		verify(store, times(1)).shutdown(eq(JobStatus.SUSPENDED))__	};tests,that,a,suspended,checkpoint,coordinator,calls,suspend,on,the,store,and,counter;test,public,void,test,suspend,checkpoint,coordinator,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,graph,suspend,new,exception,test,exception,verify,counter,times,1,shutdown,eq,job,status,suspended,verify,store,times,1,shutdown,eq,job,status,suspended
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is failed.;@Test_	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception {_		CheckpointIDCounter counter = mock(CheckpointIDCounter.class)__		CompletedCheckpointStore store = mock(CompletedCheckpointStore.class)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.failGlobal(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		verify(counter, times(1)).shutdown(JobStatus.FAILED)__		verify(store, times(1)).shutdown(eq(JobStatus.FAILED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,failed;test,public,void,test,shutdown,checkpoint,coordinator,on,failure,throws,exception,checkpoint,idcounter,counter,mock,checkpoint,idcounter,class,completed,checkpoint,store,store,mock,completed,checkpoint,store,class,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,fail,global,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,verify,counter,times,1,shutdown,job,status,failed,verify,store,times,1,shutdown,eq,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception;1547743113;Tests that the checkpoint coordinator is shut down if the execution graph_is failed.;@Test_	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.failGlobal(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.FAILED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.FAILED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,failed;test,public,void,test,shutdown,checkpoint,coordinator,on,failure,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,fail,global,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,failed,assert,that,store,shutdown,future,get,is,job,status,failed
ExecutionGraphCheckpointCoordinatorTest -> @Test 	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception;1549365080;Tests that the checkpoint coordinator is shut down if the execution graph_is failed.;@Test_	public void testShutdownCheckpointCoordinatorOnFailure() throws Exception {_		final CompletableFuture<JobStatus> counterShutdownFuture = new CompletableFuture<>()__		CheckpointIDCounter counter = new TestingCheckpointIDCounter(counterShutdownFuture)___		final CompletableFuture<JobStatus> storeShutdownFuture = new CompletableFuture<>()__		CompletedCheckpointStore store = new TestingCompletedCheckpointStore(storeShutdownFuture)___		ExecutionGraph graph = createExecutionGraphAndEnableCheckpointing(counter, store)__		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		assertThat(checkpointCoordinator, Matchers.notNullValue())__		assertThat(checkpointCoordinator.isShutdown(), is(false))___		graph.failGlobal(new Exception("Test Exception"))___		assertThat(checkpointCoordinator.isShutdown(), is(true))__		assertThat(counterShutdownFuture.get(), is(JobStatus.FAILED))__		assertThat(storeShutdownFuture.get(), is(JobStatus.FAILED))__	};tests,that,the,checkpoint,coordinator,is,shut,down,if,the,execution,graph,is,failed;test,public,void,test,shutdown,checkpoint,coordinator,on,failure,throws,exception,final,completable,future,job,status,counter,shutdown,future,new,completable,future,checkpoint,idcounter,counter,new,testing,checkpoint,idcounter,counter,shutdown,future,final,completable,future,job,status,store,shutdown,future,new,completable,future,completed,checkpoint,store,store,new,testing,completed,checkpoint,store,store,shutdown,future,execution,graph,graph,create,execution,graph,and,enable,checkpointing,counter,store,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,assert,that,checkpoint,coordinator,matchers,not,null,value,assert,that,checkpoint,coordinator,is,shutdown,is,false,graph,fail,global,new,exception,test,exception,assert,that,checkpoint,coordinator,is,shutdown,is,true,assert,that,counter,shutdown,future,get,is,job,status,failed,assert,that,store,shutdown,future,get,is,job,status,failed
