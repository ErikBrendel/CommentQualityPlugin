commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setSubmitConsumer(Consumer<TaskDeploymentDescriptor> predicate) {     submitConsumer = predicate. }
false;public;1;3;;public void setCancelConsumer(Consumer<ExecutionAttemptID> predicate) {     cancelConsumer = predicate. }
false;public;1;3;;public void setFreeSlotFunction(BiFunction<AllocationID, Throwable, CompletableFuture<Acknowledge>> freeSlotFunction) {     this.freeSlotFunction = freeSlotFunction. }
false;public;0;4;;@Override public String getAddress() {     return address. }
false;public;6;10;;@Override public CompletableFuture<StackTraceSampleResponse> requestStackTraceSample(ExecutionAttemptID executionAttemptID, int sampleId, int numSamples, Time delayBetweenSamples, int maxStackTraceDepth, Time timeout) {     return FutureUtils.completedExceptionally(new UnsupportedOperationException()). }
false;public;2;5;;@Override public CompletableFuture<Acknowledge> submitTask(TaskDeploymentDescriptor tdd, Time timeout) {     submitConsumer.accept(tdd).     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> stopTask(ExecutionAttemptID executionAttemptID, Time timeout) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;2;5;;@Override public CompletableFuture<Acknowledge> cancelTask(ExecutionAttemptID executionAttemptID, Time timeout) {     cancelConsumer.accept(executionAttemptID).     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> updatePartitions(ExecutionAttemptID executionAttemptID, Iterable<PartitionInfo> partitionInfos, Time timeout) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;1;2;;@Override public void failPartition(ExecutionAttemptID executionAttemptID) { }
false;public;4;6;;@Override public void notifyCheckpointComplete(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp) { }
false;public;5;7;;@Override public void triggerCheckpoint(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp, CheckpointOptions checkpointOptions) { }
false;public;3;10;;@Override public CompletableFuture<Acknowledge> freeSlot(AllocationID allocationId, Throwable cause, Time timeout) {     final BiFunction<AllocationID, Throwable, CompletableFuture<Acknowledge>> currentFreeSlotFunction = freeSlotFunction.     if (currentFreeSlotFunction != null) {         return currentFreeSlotFunction.apply(allocationId, cause).     } else {         return CompletableFuture.completedFuture(Acknowledge.get()).     } }
