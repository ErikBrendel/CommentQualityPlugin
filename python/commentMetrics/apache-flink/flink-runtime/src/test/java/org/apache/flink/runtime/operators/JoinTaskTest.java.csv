commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;@Test public void testSortBoth1MatchTask() {     final int keyCnt1 = 20.     final int valCnt1 = 1.     final int keyCnt2 = 10.     final int valCnt2 = 2.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortBoth2MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 1.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortBoth3MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortBoth4MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 1.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortBoth5MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortFirstMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInput(new UniformRecordGenerator(keyCnt2, valCnt2, true)).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testSortSecondMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInput(new UniformRecordGenerator(keyCnt1, valCnt1, true)).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;35;;@Test public void testMergeMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, true)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, true)).     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;31;;@Test public void testFailingMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(new NirvanaOutputList()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, true)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, true)).     try {         testDriver(testTask, MockFailingMatchStub.class).         Assert.fail("Driver did not forward Exception.").     } catch (ExpectedTestException e) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;59;;@Test public void testCancelMatchTaskWhileSort1() {     final int keyCnt = 20.     final int valCnt = 20.     try {         setOutput(new NirvanaOutputList()).         addDriverComparator(this.comparator1).         addDriverComparator(this.comparator2).         getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).         getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).         getTaskConfig().setRelativeMemoryDriver(bnljn_frac).         setNumFileHandlesForSort(4).         final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().         try {             addInputSorted(new DelayingInfinitiveInputIterator(100), this.comparator1.duplicate()).             addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).         } catch (Exception e) {             e.printStackTrace().             Assert.fail("The test caused an exception.").         }         final AtomicReference<Throwable> error = new AtomicReference<>().         Thread taskRunner = new Thread("Task runner for testCancelMatchTaskWhileSort1()") {              @Override             public void run() {                 try {                     testDriver(testTask, MockMatchStub.class).                 } catch (Throwable t) {                     error.set(t).                 }             }         }.         taskRunner.start().         Thread.sleep(1000).         cancel().         taskRunner.interrupt().         taskRunner.join(60000).         assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).         Throwable taskError = error.get().         if (taskError != null) {             taskError.printStackTrace().             fail("Error in task while canceling: " + taskError.getMessage()).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;59;;@Test public void testCancelMatchTaskWhileSort2() {     final int keyCnt = 20.     final int valCnt = 20.     try {         setOutput(new NirvanaOutputList()).         addDriverComparator(this.comparator1).         addDriverComparator(this.comparator2).         getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).         getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).         getTaskConfig().setRelativeMemoryDriver(bnljn_frac).         setNumFileHandlesForSort(4).         final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().         try {             addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).             addInputSorted(new DelayingInfinitiveInputIterator(100), this.comparator1.duplicate()).         } catch (Exception e) {             e.printStackTrace().             Assert.fail("The test caused an exception.").         }         final AtomicReference<Throwable> error = new AtomicReference<>().         Thread taskRunner = new Thread("Task runner for testCancelMatchTaskWhileSort2()") {              @Override             public void run() {                 try {                     testDriver(testTask, MockMatchStub.class).                 } catch (Throwable t) {                     error.set(t).                 }             }         }.         taskRunner.start().         Thread.sleep(1000).         cancel().         taskRunner.interrupt().         taskRunner.join(60000).         assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).         Throwable taskError = error.get().         if (taskError != null) {             taskError.printStackTrace().             fail("Error in task while canceling: " + taskError.getMessage()).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockDelayingMatchStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;54;;@Test public void testCancelMatchTaskWhileMatching() {     final int keyCnt = 20.     final int valCnt = 20.     try {         setOutput(new NirvanaOutputList()).         addDriverComparator(this.comparator1).         addDriverComparator(this.comparator2).         getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).         getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).         getTaskConfig().setRelativeMemoryDriver(bnljn_frac).         setNumFileHandlesForSort(4).         final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().         addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).         addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).         final AtomicReference<Throwable> error = new AtomicReference<>().         Thread taskRunner = new Thread("Task runner for testCancelMatchTaskWhileMatching()") {              @Override             public void run() {                 try {                     testDriver(testTask, MockDelayingMatchStub.class).                 } catch (Throwable t) {                     error.set(t).                 }             }         }.         taskRunner.start().         Thread.sleep(1000).         cancel().         taskRunner.interrupt().         taskRunner.join(60000).         assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).         Throwable taskError = error.get().         if (taskError != null) {             taskError.printStackTrace().             fail("Error in task while canceling: " + taskError.getMessage()).         }     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;30;;@Test public void testHash1MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 10.     int valCnt2 = 2.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash2MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 1.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash3MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash4MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 1.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash5MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;29;;@Test public void testFailingHashFirstMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockFailingMatchStub.class).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     } }
false;public;0;29;;@Test public void testFailingHashSecondMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockFailingMatchStub.class).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;53;;@Test public void testCancelHashMatchTaskWhileBuildFirst() {     final int keyCnt = 20.     final int valCnt = 20.     try {         addInput(new DelayingInfinitiveInputIterator(100)).         addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).         addDriverComparator(this.comparator1).         addDriverComparator(this.comparator2).         getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).         setOutput(new NirvanaOutputList()).         getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).         getTaskConfig().setRelativeMemoryDriver(hash_frac).         final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().         final AtomicBoolean success = new AtomicBoolean(false).         Thread taskRunner = new Thread() {              @Override             public void run() {                 try {                     testDriver(testTask, MockMatchStub.class).                     success.set(true).                 } catch (Exception ie) {                     ie.printStackTrace().                 }             }         }.         taskRunner.start().         Thread.sleep(1000).         cancel().         try {             taskRunner.join().         } catch (InterruptedException ie) {             Assert.fail("Joining threads failed").         }         Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()).     } catch (Exception e) {         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;53;;@Test public void testHashCancelMatchTaskWhileBuildSecond() {     final int keyCnt = 20.     final int valCnt = 20.     try {         addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).         addInput(new DelayingInfinitiveInputIterator(100)).         addDriverComparator(this.comparator1).         addDriverComparator(this.comparator2).         getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).         setOutput(new NirvanaOutputList()).         getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).         getTaskConfig().setRelativeMemoryDriver(hash_frac).         final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().         final AtomicBoolean success = new AtomicBoolean(false).         Thread taskRunner = new Thread() {              @Override             public void run() {                 try {                     testDriver(testTask, MockMatchStub.class).                     success.set(true).                 } catch (Exception ie) {                     ie.printStackTrace().                 }             }         }.         taskRunner.start().         Thread.sleep(1000).         cancel().         try {             taskRunner.join().         } catch (InterruptedException ie) {             Assert.fail("Joining threads failed").         }         Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()).     } catch (Exception e) {         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;43;;@Test public void testHashFirstCancelMatchTaskWhileMatching() {     int keyCnt = 20.     int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;43;;@Test public void testHashSecondCancelMatchTaskWhileMatching() {     int keyCnt = 20.     int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;3;4;;@Override public void join(Record record1, Record record2, Collector<Record> out) throws Exception {     out.collect(record1). }
false;public;3;7;;@Override public void join(Record record1, Record record2, Collector<Record> out) throws Exception {     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     out.collect(record1). }
false;public;3;7;;@Override public void join(Record record1, Record record2, Collector<Record> out) throws Exception {     try {         Thread.sleep(100).     } catch (InterruptedException e) {     } }
