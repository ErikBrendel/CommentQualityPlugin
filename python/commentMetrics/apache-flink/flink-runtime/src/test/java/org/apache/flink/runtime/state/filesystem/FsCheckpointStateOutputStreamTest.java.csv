# id;timestamp;commentText;codeText;commentWords;codeWords
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenClosingStream() throws IOException;1485189169;Tests that the underlying stream file is deleted upon calling close.;@Test_	public void testCleanupWhenClosingStream() throws IOException {__		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), anyBoolean())).thenReturn(outputStream)___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), anyBoolean())___		stream.close()___		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,upon,calling,close;test,public,void,test,cleanup,when,closing,stream,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,boolean,then,return,output,stream,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,boolean,stream,close,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenClosingStream() throws IOException;1489060855;Tests that the underlying stream file is deleted upon calling close.;@Test_	public void testCleanupWhenClosingStream() throws IOException {__		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), anyBoolean())).thenReturn(outputStream)___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), anyBoolean())___		stream.close()___		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,upon,calling,close;test,public,void,test,cleanup,when,closing,stream,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,boolean,then,return,output,stream,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,boolean,stream,close,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenClosingStream() throws IOException;1498220069;Tests that the underlying stream file is deleted upon calling close.;@Test_	public void testCleanupWhenClosingStream() throws IOException {__		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		stream.close()___		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,upon,calling,close;test,public,void,test,cleanup,when,closing,stream,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,stream,close,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenClosingStream() throws IOException;1517489695;Tests that the underlying stream file is deleted upon calling close.;@Test_	public void testCleanupWhenClosingStream() throws IOException {__		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			Path.fromLocalFile(tempDir.newFolder()),_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		stream.close()___		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,upon,calling,close;test,public,void,test,cleanup,when,closing,stream,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,path,from,local,file,temp,dir,new,folder,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,stream,close,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenClosingStream() throws IOException;1517489697;Tests that the underlying stream file is deleted upon calling close.;@Test_	public void testCleanupWhenClosingStream() throws IOException {__		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path> pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			Path.fromLocalFile(tempDir.newFolder()),_			fs,_			4,_			0)___		_		stream.write(new byte[] {1, 2, 3, 4, 5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		stream.close()___		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,upon,calling,close;test,public,void,test,cleanup,when,closing,stream,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,path,from,local,file,temp,dir,new,folder,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,stream,close,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException;1485189169;Tests that the underlying stream file is deleted if the closeAndGetHandle method fails.;@Test_	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException {_		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path>  pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), anyBoolean())).thenReturn(outputStream)__		doThrow(new IOException("Test IOException.")).when(outputStream).close()___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), anyBoolean())___		try {_			stream.closeAndGetHandle()__			fail("Expected IOException")__		} catch (IOException ioE) {_			_		}__		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,if,the,close,and,get,handle,method,fails;test,public,void,test,cleanup,when,failing,close,and,get,handle,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,boolean,then,return,output,stream,do,throw,new,ioexception,test,ioexception,when,output,stream,close,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,boolean,try,stream,close,and,get,handle,fail,expected,ioexception,catch,ioexception,io,e,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException;1489060855;Tests that the underlying stream file is deleted if the closeAndGetHandle method fails.;@Test_	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException {_		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path>  pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), anyBoolean())).thenReturn(outputStream)__		doThrow(new IOException("Test IOException.")).when(outputStream).close()___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), anyBoolean())___		try {_			stream.closeAndGetHandle()__			fail("Expected IOException")__		} catch (IOException ioE) {_			_		}__		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,if,the,close,and,get,handle,method,fails;test,public,void,test,cleanup,when,failing,close,and,get,handle,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,boolean,then,return,output,stream,do,throw,new,ioexception,test,ioexception,when,output,stream,close,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,boolean,try,stream,close,and,get,handle,fail,expected,ioexception,catch,ioexception,io,e,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException;1498220069;Tests that the underlying stream file is deleted if the closeAndGetHandle method fails.;@Test_	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException {_		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path>  pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)__		doThrow(new IOException("Test IOException.")).when(outputStream).close()___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			TEMP_DIR_PATH,_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		try {_			stream.closeAndGetHandle()__			fail("Expected IOException")__		} catch (IOException ioE) {_			_		}__		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,if,the,close,and,get,handle,method,fails;test,public,void,test,cleanup,when,failing,close,and,get,handle,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,do,throw,new,ioexception,test,ioexception,when,output,stream,close,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,try,stream,close,and,get,handle,fail,expected,ioexception,catch,ioexception,io,e,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException;1517489695;Tests that the underlying stream file is deleted if the closeAndGetHandle method fails.;@Test_	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException {_		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path>  pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)__		doThrow(new IOException("Test IOException.")).when(outputStream).close()___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			Path.fromLocalFile(tempDir.newFolder()),_			fs,_			4,_			0)___		_		stream.write(new byte[]{1,2,3,4,5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		try {_			stream.closeAndGetHandle()__			fail("Expected IOException")__		} catch (IOException ioE) {_			_		}__		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,if,the,close,and,get,handle,method,fails;test,public,void,test,cleanup,when,failing,close,and,get,handle,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,do,throw,new,ioexception,test,ioexception,when,output,stream,close,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,path,from,local,file,temp,dir,new,folder,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,try,stream,close,and,get,handle,fail,expected,ioexception,catch,ioexception,io,e,verify,fs,delete,eq,path,captor,get,value,any,boolean
FsCheckpointStateOutputStreamTest -> @Test 	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException;1517489697;Tests that the underlying stream file is deleted if the closeAndGetHandle method fails.;@Test_	public void testCleanupWhenFailingCloseAndGetHandle() throws IOException {_		final FileSystem fs = mock(FileSystem.class)__		final FSDataOutputStream outputStream = mock(FSDataOutputStream.class)___		final ArgumentCaptor<Path>  pathCaptor = ArgumentCaptor.forClass(Path.class)___		when(fs.create(pathCaptor.capture(), any(FileSystem.WriteMode.class))).thenReturn(outputStream)__		doThrow(new IOException("Test IOException.")).when(outputStream).close()___		CheckpointStreamFactory.CheckpointStateOutputStream stream = new FsCheckpointStreamFactory.FsCheckpointStateOutputStream(_			Path.fromLocalFile(tempDir.newFolder()),_			fs,_			4,_			0)___		_		stream.write(new byte[] {1, 2, 3, 4, 5})___		verify(fs).create(any(Path.class), any(FileSystem.WriteMode.class))___		try {_			stream.closeAndGetHandle()__			fail("Expected IOException")__		} catch (IOException ioE) {_			_		}__		verify(fs).delete(eq(pathCaptor.getValue()), anyBoolean())__	};tests,that,the,underlying,stream,file,is,deleted,if,the,close,and,get,handle,method,fails;test,public,void,test,cleanup,when,failing,close,and,get,handle,throws,ioexception,final,file,system,fs,mock,file,system,class,final,fsdata,output,stream,output,stream,mock,fsdata,output,stream,class,final,argument,captor,path,path,captor,argument,captor,for,class,path,class,when,fs,create,path,captor,capture,any,file,system,write,mode,class,then,return,output,stream,do,throw,new,ioexception,test,ioexception,when,output,stream,close,checkpoint,stream,factory,checkpoint,state,output,stream,stream,new,fs,checkpoint,stream,factory,fs,checkpoint,state,output,stream,path,from,local,file,temp,dir,new,folder,fs,4,0,stream,write,new,byte,1,2,3,4,5,verify,fs,create,any,path,class,any,file,system,write,mode,class,try,stream,close,and,get,handle,fail,expected,ioexception,catch,ioexception,io,e,verify,fs,delete,eq,path,captor,get,value,any,boolean
