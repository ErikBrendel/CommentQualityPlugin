# id;timestamp;commentText;codeText;commentWords;codeWords
JobMasterTest -> @Test 	public void testJobMasterAggregatesValuesCorrectly() throws Exception;1550366933;Tests the updateGlobalAggregate functionality;@Test_	public void testJobMasterAggregatesValuesCorrectly() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Object> updateAggregateFuture___			AggregateFunction<Integer, Integer, Integer> aggregateFunction = createAggregateFunction()___			ClosureCleaner.clean(aggregateFunction, true)__			byte[] serializedAggregateFunction = InstantiationUtil.serializeObject(aggregateFunction)___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 1, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(1))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 2, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(3))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 3, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(6))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 4, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(10))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg2", 10, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(10))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg2", 23, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(33))___		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,update,global,aggregate,functionality;test,public,void,test,job,master,aggregates,values,correctly,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,completable,future,object,update,aggregate,future,aggregate,function,integer,integer,integer,aggregate,function,create,aggregate,function,closure,cleaner,clean,aggregate,function,true,byte,serialized,aggregate,function,instantiation,util,serialize,object,aggregate,function,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,1,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,1,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,2,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,3,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,3,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,6,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,4,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,10,update,aggregate,future,job,master,gateway,update,global,aggregate,agg2,10,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,10,update,aggregate,future,job,master,gateway,update,global,aggregate,agg2,23,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,33,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testJobMasterAggregatesValuesCorrectly() throws Exception;1550683188;Tests the updateGlobalAggregate functionality;@Test_	public void testJobMasterAggregatesValuesCorrectly() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			CompletableFuture<Object> updateAggregateFuture___			AggregateFunction<Integer, Integer, Integer> aggregateFunction = createAggregateFunction()___			ClosureCleaner.clean(aggregateFunction, true)__			byte[] serializedAggregateFunction = InstantiationUtil.serializeObject(aggregateFunction)___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 1, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(1))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 2, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(3))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 3, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(6))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg1", 4, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(10))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg2", 10, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(10))___			updateAggregateFuture = jobMasterGateway.updateGlobalAggregate("agg2", 23, serializedAggregateFunction)__			assertThat(updateAggregateFuture.get(), equalTo(33))___		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,update,global,aggregate,functionality;test,public,void,test,job,master,aggregates,values,correctly,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,completable,future,object,update,aggregate,future,aggregate,function,integer,integer,integer,aggregate,function,create,aggregate,function,closure,cleaner,clean,aggregate,function,true,byte,serialized,aggregate,function,instantiation,util,serialize,object,aggregate,function,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,1,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,1,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,2,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,3,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,3,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,6,update,aggregate,future,job,master,gateway,update,global,aggregate,agg1,4,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,10,update,aggregate,future,job,master,gateway,update,global,aggregate,agg2,10,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,10,update,aggregate,future,job,master,gateway,update,global,aggregate,agg2,23,serialized,aggregate,function,assert,that,update,aggregate,future,get,equal,to,33,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1518945175;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1519638690;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1521379500;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1522249271;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(JobMasterId.generate(), testingTimeout).get()___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,generate,testing,timeout,get,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1522249271;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1522249272;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1522339662;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1522681180;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1526336590;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1526387042;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1526494919;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1526579384;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1527029937;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1527029937;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1530104611;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1531499577;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1532290976;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1533307380;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1534259438;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1536327554;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1536327554;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1536327554;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1537192317;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1538904927;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1538904928;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1538904928;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1542127564;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1542270382;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1548326020;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1548350146;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1548688235;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1549365080;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1550069788;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1550220073;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1550366933;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringFromSavepoint() throws Exception;1550683188;Tests that a JobMaster will restore the given JobGraph from its savepoint upon_initial submission.;@Test_	public void testRestoringFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,restore,the,given,job,graph,from,its,savepoint,upon,initial,submission;test,public,void,test,restoring,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1527029937;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_                    tddFuture.complete(taskDeploymentDescriptor)__                    return CompletableFuture.completedFuture(Acknowledge.get())__                })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1530104611;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_                    tddFuture.complete(taskDeploymentDescriptor)__                    return CompletableFuture.completedFuture(Acknowledge.get())__                })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1531499577;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_                    tddFuture.complete(taskDeploymentDescriptor)__                    return CompletableFuture.completedFuture(Acknowledge.get())__                })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1532290976;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_                    tddFuture.complete(taskDeploymentDescriptor)__                    return CompletableFuture.completedFuture(Acknowledge.get())__                })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1533307380;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_                    tddFuture.complete(taskDeploymentDescriptor)__                    return CompletableFuture.completedFuture(Acknowledge.get())__                })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1534259438;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					  tddFuture.complete(taskDeploymentDescriptor)__					  return CompletableFuture.completedFuture(Acknowledge.get())__				  })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1536327554;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					  tddFuture.complete(taskDeploymentDescriptor)__					  return CompletableFuture.completedFuture(Acknowledge.get())__				  })_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1536327554;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1536327554;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1537192317;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId))___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1538904927;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1538904928;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1538904928;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1542127564;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1542270382;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1548326020;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1548350146;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1548688235;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1549365080;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1550069788;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1550220073;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1550366933;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()__			testingResourceManagerGateway.setRequestSlotConsumer(slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()__			rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final AllocationID allocationId = allocationIdFuture.get()___			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)___			final Collection<SlotOffer> slotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()___			assertThat(slotOffers, hasSize(1))__			assertThat(slotOffers, contains(slotOffer))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,allocation,id,allocation,id,allocation,id,future,get,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,collection,slot,offer,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,get,assert,that,slot,offers,has,size,1,assert,that,slot,offers,contains,slot,offer,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRequestPartitionState() throws Exception;1550683188;Tests the {@link JobMaster#requestPartitionState(IntermediateDataSetID, ResultPartitionID)}_call for a finished result partition.;@Test_	public void testRequestPartitionState() throws Exception {_		final JobGraph producerConsumerJobGraph = producerConsumerJobGraph()__		final JobMaster jobMaster = createJobMaster(_			configuration,_			producerConsumerJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final CompletableFuture<TaskDeploymentDescriptor> tddFuture = new CompletableFuture<>()__			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((taskDeploymentDescriptor, jobMasterId) -> {_					tddFuture.complete(taskDeploymentDescriptor)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final Collection<SlotOffer> slotOffers = registerSlotsAtJobMaster(1, jobMasterGateway, testingTaskExecutorGateway)___			assertThat(slotOffers, hasSize(1))___			_			final TaskDeploymentDescriptor tdd = tddFuture.get()___			assertThat(tdd.getProducedPartitions(), hasSize(1))__			final ResultPartitionDeploymentDescriptor partition = tdd.getProducedPartitions().iterator().next()___			final ExecutionAttemptID executionAttemptId = tdd.getExecutionAttemptId()__			final ExecutionAttemptID copiedExecutionAttemptId = new ExecutionAttemptID(executionAttemptId.getLowerPart(), executionAttemptId.getUpperPart())___			_			jobMasterGateway.updateTaskExecutionState(new TaskExecutionState(producerConsumerJobGraph.getJobID(), executionAttemptId, ExecutionState.FINISHED)).get()___			_			final ResultPartitionID partitionId = new ResultPartitionID(partition.getPartitionId(), copiedExecutionAttemptId)__			CompletableFuture<ExecutionState> partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), partitionId)___			assertThat(partitionStateFuture.get(), equalTo(ExecutionState.FINISHED))___			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID())___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(new IntermediateDataSetID(), partitionId)___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, IllegalArgumentException.class).isPresent(), is(true))__			}__			_			partitionStateFuture = jobMasterGateway.requestPartitionState(partition.getResultId(), new ResultPartitionID(partition.getPartitionId(), new ExecutionAttemptID()))___			try {_				partitionStateFuture.get()__				fail("Expected failure.")__			} catch (ExecutionException e) {_				assertThat(ExceptionUtils.findThrowable(e, PartitionProducerDisposedException.class).isPresent(), is(true))__			}_		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,the,link,job,master,request,partition,state,intermediate,data,set,id,result,partition,id,call,for,a,finished,result,partition;test,public,void,test,request,partition,state,throws,exception,final,job,graph,producer,consumer,job,graph,producer,consumer,job,graph,final,job,master,job,master,create,job,master,configuration,producer,consumer,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,completable,future,task,deployment,descriptor,tdd,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,task,deployment,descriptor,job,master,id,tdd,future,complete,task,deployment,descriptor,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,collection,slot,offer,slot,offers,register,slots,at,job,master,1,job,master,gateway,testing,task,executor,gateway,assert,that,slot,offers,has,size,1,final,task,deployment,descriptor,tdd,tdd,future,get,assert,that,tdd,get,produced,partitions,has,size,1,final,result,partition,deployment,descriptor,partition,tdd,get,produced,partitions,iterator,next,final,execution,attempt,id,execution,attempt,id,tdd,get,execution,attempt,id,final,execution,attempt,id,copied,execution,attempt,id,new,execution,attempt,id,execution,attempt,id,get,lower,part,execution,attempt,id,get,upper,part,job,master,gateway,update,task,execution,state,new,task,execution,state,producer,consumer,job,graph,get,job,id,execution,attempt,id,execution,state,finished,get,final,result,partition,id,partition,id,new,result,partition,id,partition,get,partition,id,copied,execution,attempt,id,completable,future,execution,state,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,partition,id,assert,that,partition,state,future,get,equal,to,execution,state,finished,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,new,intermediate,data,set,id,partition,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,illegal,argument,exception,class,is,present,is,true,partition,state,future,job,master,gateway,request,partition,state,partition,get,result,id,new,result,partition,id,partition,get,partition,id,new,execution,attempt,id,try,partition,state,future,get,fail,expected,failure,catch,execution,exception,e,assert,that,exception,utils,find,throwable,e,partition,producer,disposed,exception,class,is,present,is,true,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1526387042;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1526494919;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1526579384;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1527029937;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1527029937;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1530104611;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1531499577;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1532290976;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end-start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1533307380;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1534259438;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1536327554;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1536327554;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1536327554;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1537192317;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1538904927;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1538904928;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1538904928;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1542127564;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1542270382;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1548326020;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1548350146;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate(), testingTimeout).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,testing,timeout,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1548688235;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1549365080;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			rpcService.registerGateway(resourceManagerGateway.getAddress(), resourceManagerGateway)__			rmLeaderRetrievalService.notifyListener(resourceManagerGateway.getAddress(), resourceManagerGateway.getFencingToken().toUUID())___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,new,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,rpc,service,register,gateway,resource,manager,gateway,get,address,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,gateway,get,address,resource,manager,gateway,get,fencing,token,to,uuid,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1550069788;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			notifyResourceManagerLeaderListeners(resourceManagerGateway)___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,notify,resource,manager,leader,listeners,resource,manager,gateway,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1550220073;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			notifyResourceManagerLeaderListeners(resourceManagerGateway)___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,notify,resource,manager,leader,listeners,resource,manager,gateway,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1550366933;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			notifyResourceManagerLeaderListeners(resourceManagerGateway)___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,notify,resource,manager,leader,listeners,resource,manager,gateway,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception;1550683188;Tests that the JobMaster retries the scheduling of a job_in case of a missing slot offering from a registered TaskExecutor.;@Test_	public void testSlotRequestTimeoutWhenNoSlotOffering() throws Exception {_		final JobGraph restartingJobGraph = createSingleVertexJobWithRestartStrategy()___		final long slotRequestTimeout = 10L__		configuration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, slotRequestTimeout)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			restartingJobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices)___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		try {_			final long start = System.nanoTime()__			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway resourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final ArrayBlockingQueue<SlotRequest> blockingQueue = new ArrayBlockingQueue<>(2)__			resourceManagerGateway.setRequestSlotConsumer(blockingQueue::offer)___			notifyResourceManagerLeaderListeners(resourceManagerGateway)___			_			blockingQueue.take()___			final CompletableFuture<TaskDeploymentDescriptor> submittedTaskFuture = new CompletableFuture<>()__			final LocalTaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__			final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setSubmitTaskConsumer((tdd, ignored) -> {_					submittedTaskFuture.complete(tdd)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			_			final SlotRequest slotRequest = blockingQueue.take()__			final long end = System.nanoTime()___			_			assertThat((end - start) / 1_000_000L, Matchers.greaterThanOrEqualTo(slotRequestTimeout))___			assertThat(submittedTaskFuture.isDone(), is(false))___			final SlotOffer slotOffer = new SlotOffer(slotRequest.getAllocationId(), 0, ResourceProfile.UNKNOWN)___			final CompletableFuture<Collection<SlotOffer>> acceptedSlotsFuture = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> acceptedSlots = acceptedSlotsFuture.get()___			assertThat(acceptedSlots, hasSize(1))__			final SlotOffer acceptedSlot = acceptedSlots.iterator().next()___			assertThat(acceptedSlot.getAllocationId(), equalTo(slotRequest.getAllocationId()))___			_			final TaskDeploymentDescriptor taskDeploymentDescriptor = submittedTaskFuture.get()___			assertThat(taskDeploymentDescriptor.getAllocationId(), equalTo(slotRequest.getAllocationId()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,job,master,retries,the,scheduling,of,a,job,in,case,of,a,missing,slot,offering,from,a,registered,task,executor;test,public,void,test,slot,request,timeout,when,no,slot,offering,throws,exception,final,job,graph,restarting,job,graph,create,single,vertex,job,with,restart,strategy,final,long,slot,request,timeout,10l,configuration,set,long,job,manager,options,slot,request,timeout,final,job,master,job,master,create,job,master,configuration,restarting,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,heartbeat,services,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,try,final,long,start,system,nano,time,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,array,blocking,queue,slot,request,blocking,queue,new,array,blocking,queue,2,resource,manager,gateway,set,request,slot,consumer,blocking,queue,offer,notify,resource,manager,leader,listeners,resource,manager,gateway,blocking,queue,take,final,completable,future,task,deployment,descriptor,submitted,task,future,new,completable,future,final,local,task,manager,location,task,manager,location,new,local,task,manager,location,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,submit,task,consumer,tdd,ignored,submitted,task,future,complete,tdd,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,job,master,gateway,register,task,manager,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,request,slot,request,blocking,queue,take,final,long,end,system,nano,time,assert,that,end,start,matchers,greater,than,or,equal,to,slot,request,timeout,assert,that,submitted,task,future,is,done,is,false,final,slot,offer,slot,offer,new,slot,offer,slot,request,get,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slots,future,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,accepted,slots,accepted,slots,future,get,assert,that,accepted,slots,has,size,1,final,slot,offer,accepted,slot,accepted,slots,iterator,next,assert,that,accepted,slot,get,allocation,id,equal,to,slot,request,get,allocation,id,final,task,deployment,descriptor,task,deployment,descriptor,submitted,task,future,get,assert,that,task,deployment,descriptor,get,allocation,id,equal,to,slot,request,get,allocation,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception;1550069788;Tests that the job execution is failed if the TaskExecutor disconnects from the_JobMaster.;@Test_	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception {_		runJobFailureWhenTaskExecutorTerminatesTest(_			heartbeatServices,_			(localTaskManagerLocation, jobMasterGateway) -> jobMasterGateway.disconnectTaskManager(_				localTaskManagerLocation.getResourceID(),_				new FlinkException("Test disconnectTaskManager exception.")),_			(jobMasterGateway, resourceID) -> ignored -> {})__	};tests,that,the,job,execution,is,failed,if,the,task,executor,disconnects,from,the,job,master;test,public,void,test,job,failure,when,graceful,task,executor,termination,throws,exception,run,job,failure,when,task,executor,terminates,test,heartbeat,services,local,task,manager,location,job,master,gateway,job,master,gateway,disconnect,task,manager,local,task,manager,location,get,resource,id,new,flink,exception,test,disconnect,task,manager,exception,job,master,gateway,resource,id,ignored
JobMasterTest -> @Test 	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception;1550220073;Tests that the job execution is failed if the TaskExecutor disconnects from the_JobMaster.;@Test_	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception {_		runJobFailureWhenTaskExecutorTerminatesTest(_			heartbeatServices,_			(localTaskManagerLocation, jobMasterGateway) -> jobMasterGateway.disconnectTaskManager(_				localTaskManagerLocation.getResourceID(),_				new FlinkException("Test disconnectTaskManager exception.")),_			(jobMasterGateway, resourceID) -> ignored -> {})__	};tests,that,the,job,execution,is,failed,if,the,task,executor,disconnects,from,the,job,master;test,public,void,test,job,failure,when,graceful,task,executor,termination,throws,exception,run,job,failure,when,task,executor,terminates,test,heartbeat,services,local,task,manager,location,job,master,gateway,job,master,gateway,disconnect,task,manager,local,task,manager,location,get,resource,id,new,flink,exception,test,disconnect,task,manager,exception,job,master,gateway,resource,id,ignored
JobMasterTest -> @Test 	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception;1550366933;Tests that the job execution is failed if the TaskExecutor disconnects from the_JobMaster.;@Test_	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception {_		runJobFailureWhenTaskExecutorTerminatesTest(_			heartbeatServices,_			(localTaskManagerLocation, jobMasterGateway) -> jobMasterGateway.disconnectTaskManager(_				localTaskManagerLocation.getResourceID(),_				new FlinkException("Test disconnectTaskManager exception.")),_			(jobMasterGateway, resourceID) -> ignored -> {})__	};tests,that,the,job,execution,is,failed,if,the,task,executor,disconnects,from,the,job,master;test,public,void,test,job,failure,when,graceful,task,executor,termination,throws,exception,run,job,failure,when,task,executor,terminates,test,heartbeat,services,local,task,manager,location,job,master,gateway,job,master,gateway,disconnect,task,manager,local,task,manager,location,get,resource,id,new,flink,exception,test,disconnect,task,manager,exception,job,master,gateway,resource,id,ignored
JobMasterTest -> @Test 	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception;1550683188;Tests that the job execution is failed if the TaskExecutor disconnects from the_JobMaster.;@Test_	public void testJobFailureWhenGracefulTaskExecutorTermination() throws Exception {_		runJobFailureWhenTaskExecutorTerminatesTest(_			heartbeatServices,_			(localTaskManagerLocation, jobMasterGateway) -> jobMasterGateway.disconnectTaskManager(_				localTaskManagerLocation.getResourceID(),_				new FlinkException("Test disconnectTaskManager exception.")),_			(jobMasterGateway, resourceID) -> ignored -> {})__	};tests,that,the,job,execution,is,failed,if,the,task,executor,disconnects,from,the,job,master;test,public,void,test,job,failure,when,graceful,task,executor,termination,throws,exception,run,job,failure,when,task,executor,terminates,test,heartbeat,services,local,task,manager,location,job,master,gateway,job,master,gateway,disconnect,task,manager,local,task,manager,location,get,resource,id,new,flink,exception,test,disconnect,task,manager,exception,job,master,gateway,resource,id,ignored
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1536327554;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1536327554;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1536327554;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1537192317;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1538904927;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1538904928;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1538904928;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1542127564;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1542270382;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1548326020;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			blobServer,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,blob,server,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1548350146;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1548688235;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1549365080;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1550069788;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration, rpcService),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,rpc,service,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1550220073;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration),_			DefaultSchedulerFactory.fromConfiguration(configuration),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,default,scheduler,factory,from,configuration,configuration,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1550366933;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration),_			DefaultSchedulerFactory.fromConfiguration(configuration),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new NoOpOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,default,scheduler,factory,from,configuration,configuration,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,no,op,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testTriggerSavepointTimeout() throws Exception;1550683188;Tests that the timeout in {@link JobMasterGateway#triggerSavepoint(String, boolean, Time)}_is respected.;@Test_	public void testTriggerSavepointTimeout() throws Exception {_		final JobMaster jobMaster = new JobMaster(_			rpcService,_			JobMasterConfiguration.fromConfiguration(configuration),_			jmResourceId,_			jobGraph,_			haServices,_			DefaultSlotPoolFactory.fromConfiguration(configuration),_			DefaultSchedulerFactory.fromConfiguration(configuration),_			new TestingJobManagerSharedServicesBuilder().build(),_			heartbeatServices,_			UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,_			new TestingOnCompletionActions(),_			testingFatalErrorHandler,_			JobMasterTest.class.getClassLoader()) {__			@Override_			public CompletableFuture<String> triggerSavepoint(_					@Nullable final String targetDirectory,_					final boolean cancelJob,_					final Time timeout) {_				return new CompletableFuture<>()__			}_		}___		try {_			final CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)__			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)__			final CompletableFuture<String> savepointFutureLowTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, Time.milliseconds(1))__			final CompletableFuture<String> savepointFutureHighTimeout = jobMasterGateway.triggerSavepoint("/tmp", false, RpcUtils.INF_TIMEOUT)___			try {_				savepointFutureLowTimeout.get(testingTimeout.getSize(), testingTimeout.getUnit())__				fail()__			} catch (final ExecutionException e) {_				final Throwable cause = ExceptionUtils.stripExecutionException(e)__				assertThat(cause, instanceOf(TimeoutException.class))__			}__			assertThat(savepointFutureHighTimeout.isDone(), is(equalTo(false)))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,timeout,in,link,job,master,gateway,trigger,savepoint,string,boolean,time,is,respected;test,public,void,test,trigger,savepoint,timeout,throws,exception,final,job,master,job,master,new,job,master,rpc,service,job,master,configuration,from,configuration,configuration,jm,resource,id,job,graph,ha,services,default,slot,pool,factory,from,configuration,configuration,default,scheduler,factory,from,configuration,configuration,new,testing,job,manager,shared,services,builder,build,heartbeat,services,unregistered,job,manager,job,metric,group,factory,instance,new,testing,on,completion,actions,testing,fatal,error,handler,job,master,test,class,get,class,loader,override,public,completable,future,string,trigger,savepoint,nullable,final,string,target,directory,final,boolean,cancel,job,final,time,timeout,return,new,completable,future,try,final,completable,future,acknowledge,start,future,job,master,start,job,master,id,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,completable,future,string,savepoint,future,low,timeout,job,master,gateway,trigger,savepoint,tmp,false,time,milliseconds,1,final,completable,future,string,savepoint,future,high,timeout,job,master,gateway,trigger,savepoint,tmp,false,rpc,utils,try,savepoint,future,low,timeout,get,testing,timeout,get,size,testing,timeout,get,unit,fail,catch,final,execution,exception,e,final,throwable,cause,exception,utils,strip,execution,exception,e,assert,that,cause,instance,of,timeout,exception,class,assert,that,savepoint,future,high,timeout,is,done,is,equal,to,false,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1527029937;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1527029937;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1530104611;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1531499577;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1532290976;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1533307380;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1534259438;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1536327554;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1536327554;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1536327554;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1537192317;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1538904927;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1538904928;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1538904928;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1542127564;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1542270382;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1548326020;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1548350146;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception."), testingTimeout).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2, testingTimeout).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,testing,timeout,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,testing,timeout,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1548688235;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1549365080;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final String resourceManagerAddress = testingResourceManagerGateway.getAddress()__			rpcService.registerGateway(resourceManagerAddress, testingResourceManagerGateway)___			rmLeaderRetrievalService.notifyListener(resourceManagerAddress, testingResourceManagerGateway.getFencingToken().toUUID())___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,string,resource,manager,address,testing,resource,manager,gateway,get,address,rpc,service,register,gateway,resource,manager,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,resource,manager,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1550069788;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1550220073;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1550366933;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception;1550683188;Tests that the a JM connects to the leading RM after regaining leadership.;@Test_	public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final BlockingQueue<JobMasterId> registrationQueue = new ArrayBlockingQueue<>(1)__			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			final JobMasterId firstRegistrationAttempt = registrationQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			jobMaster.suspend(new FlinkException("Test exception.")).get()___			final JobMasterId jobMasterId2 = JobMasterId.generate()___			jobMaster.start(jobMasterId2).get()___			final JobMasterId secondRegistrationAttempt = registrationQueue.take()___			assertThat(secondRegistrationAttempt, equalTo(jobMasterId2))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,a,jm,connects,to,the,leading,rm,after,regaining,leadership;test,public,void,test,resource,manager,connection,after,regaining,leadership,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registration,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registration,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registration,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,job,master,suspend,new,flink,exception,test,exception,get,final,job,master,id,job,master,id2,job,master,id,generate,job,master,start,job,master,id2,get,final,job,master,id,second,registration,attempt,registration,queue,take,assert,that,second,registration,attempt,equal,to,job,master,id2,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1527029937;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1527029937;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1530104611;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1531499577;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1532290976;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		jobMaster.start(jobMasterId, testingTimeout)___		try {_			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,job,master,start,job,master,id,testing,timeout,try,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1533307380;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1534259438;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1536327554;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1536327554;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1536327554;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1537192317;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1538904927;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1538904928;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1538904928;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1542127564;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1542270382;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1548326020;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1548350146;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId, testingTimeout)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,testing,timeout,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1548688235;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1549365080;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			rmLeaderRetrievalService.notifyListener(_				testingResourceManagerGateway.getAddress(),_				resourceManagerId.toUUID())___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,resource,manager,id,to,uuid,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1550069788;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1550220073;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1550366933;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReconnectionAfterDisconnect() throws Exception;1550683188;Tests that we continue reconnecting to the latest known RM after a disconnection_message.;@Test_	public void testReconnectionAfterDisconnect() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___		CompletableFuture<Acknowledge> startFuture = jobMaster.start(jobMasterId)___		try {_			_			startFuture.get(testingTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final BlockingQueue<JobMasterId> registrationsQueue = new ArrayBlockingQueue<>(1)___			testingResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> registrationsQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0))___			final ResourceManagerId resourceManagerId = testingResourceManagerGateway.getFencingToken()__			notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___			_			final JobMasterId firstRegistrationAttempt = registrationsQueue.take()___			assertThat(firstRegistrationAttempt, equalTo(jobMasterId))___			assertThat(registrationsQueue.isEmpty(), is(true))__			jobMasterGateway.disconnectResourceManager(resourceManagerId, new FlinkException("Test exception"))___			_			assertThat(registrationsQueue.take(), equalTo(jobMasterId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,continue,reconnecting,to,the,latest,known,rm,after,a,disconnection,message;test,public,void,test,reconnection,after,disconnect,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,completable,future,acknowledge,start,future,job,master,start,job,master,id,try,start,future,get,testing,timeout,to,milliseconds,time,unit,milliseconds,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,blocking,queue,job,master,id,registrations,queue,new,array,blocking,queue,1,testing,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,registrations,queue,offer,job,master,id,resource,idstring,job,idtuple4,f0,final,resource,manager,id,resource,manager,id,testing,resource,manager,gateway,get,fencing,token,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,job,master,id,first,registration,attempt,registrations,queue,take,assert,that,first,registration,attempt,equal,to,job,master,id,assert,that,registrations,queue,is,empty,is,true,job,master,gateway,disconnect,resource,manager,resource,manager,id,new,flink,exception,test,exception,assert,that,registrations,queue,take,equal,to,job,master,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1537192317;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1538904927;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1538904928;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1538904928;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1542127564;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1542270382;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1548326020;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1548350146;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId, testingTimeout).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,testing,timeout,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1548688235;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1549365080;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = new TestingResourceManagerGateway()__		rpcService.registerGateway(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway)__		rmLeaderRetrievalService.notifyListener(testingResourceManagerGateway.getAddress(), testingResourceManagerGateway.getFencingToken().toUUID())___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,rm,leader,retrieval,service,notify,listener,testing,resource,manager,gateway,get,address,testing,resource,manager,gateway,get,fencing,token,to,uuid,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1550069788;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__		notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1550220073;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__		notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1550366933;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final TestingResourceManagerGateway testingResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__		notifyResourceManagerLeaderListeners(testingResourceManagerGateway)___		final CompletableFuture<AllocationID> allocationIdFuture = new CompletableFuture<>()___		testingResourceManagerGateway.setRequestSlotConsumer(_			slotRequest -> allocationIdFuture.complete(slotRequest.getAllocationId()))___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()__		final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation()__		rpcService.registerGateway(testingTaskExecutorGateway.getAddress(), testingTaskExecutorGateway)___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final AllocationID allocationId = allocationIdFuture.get()___			jobMasterGateway.registerTaskManager(testingTaskExecutorGateway.getAddress(), taskManagerLocation, testingTimeout).get()___			final SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.UNKNOWN)__			final CompletableFuture<Collection<SlotOffer>> acceptedSlotOffers = jobMasterGateway.offerSlots(taskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout)___			final Collection<SlotOffer> slotOffers = acceptedSlotOffers.get()___			_			assertThat(slotOffers, hasSize(1))___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,testing,resource,manager,gateway,testing,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,notify,resource,manager,leader,listeners,testing,resource,manager,gateway,final,completable,future,allocation,id,allocation,id,future,new,completable,future,testing,resource,manager,gateway,set,request,slot,consumer,slot,request,allocation,id,future,complete,slot,request,get,allocation,id,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,final,task,manager,location,task,manager,location,new,local,task,manager,location,rpc,service,register,gateway,testing,task,executor,gateway,get,address,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,allocation,id,allocation,id,allocation,id,future,get,job,master,gateway,register,task,manager,testing,task,executor,gateway,get,address,task,manager,location,testing,timeout,get,final,slot,offer,slot,offer,new,slot,offer,allocation,id,0,resource,profile,unknown,final,completable,future,collection,slot,offer,accepted,slot,offers,job,master,gateway,offer,slots,task,manager,location,get,resource,id,collections,singleton,slot,offer,testing,timeout,final,collection,slot,offer,slot,offers,accepted,slot,offers,get,assert,that,slot,offers,has,size,1,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception;1550683188;Tests that the TaskExecutor is released if all of its slots have been freed.;@Test_	public void testReleasingTaskExecutorIfNoMoreSlotsRegistered() throws Exception {_		final JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build()___		final JobGraph jobGraph = createSingleVertexJobWithRestartStrategy()___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			jobManagerSharedServices,_			heartbeatServices)___		final CompletableFuture<JobID> disconnectTaskExecutorFuture = new CompletableFuture<>()__		final CompletableFuture<AllocationID> freedSlotFuture = new CompletableFuture<>()__		final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setFreeSlotFunction(_				(allocationID, throwable) -> {_					freedSlotFuture.complete(allocationID)__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_			.setDisconnectJobManagerConsumer((jobID, throwable) -> disconnectTaskExecutorFuture.complete(jobID))_			.createTestingTaskExecutorGateway()___		try {_			jobMaster.start(jobMasterId).get()___			final JobMasterGateway jobMasterGateway = jobMaster.getSelfGateway(JobMasterGateway.class)___			final Collection<SlotOffer> slotOffers = registerSlotsAtJobMaster(1, jobMasterGateway, testingTaskExecutorGateway)___			_			assertThat(slotOffers, hasSize(1))__			final AllocationID allocationId = slotOffers.iterator().next().getAllocationId()___			_			jobMasterGateway.notifyAllocationFailure(allocationId, new FlinkException("Fail alloction test exception"))___			_			assertThat(freedSlotFuture.get(), equalTo(allocationId))__			assertThat(disconnectTaskExecutorFuture.get(), equalTo(jobGraph.getJobID()))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,the,task,executor,is,released,if,all,of,its,slots,have,been,freed;test,public,void,test,releasing,task,executor,if,no,more,slots,registered,throws,exception,final,job,manager,shared,services,job,manager,shared,services,new,testing,job,manager,shared,services,builder,build,final,job,graph,job,graph,create,single,vertex,job,with,restart,strategy,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,job,manager,shared,services,heartbeat,services,final,completable,future,job,id,disconnect,task,executor,future,new,completable,future,final,completable,future,allocation,id,freed,slot,future,new,completable,future,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,free,slot,function,allocation,id,throwable,freed,slot,future,complete,allocation,id,return,completable,future,completed,future,acknowledge,get,set,disconnect,job,manager,consumer,job,id,throwable,disconnect,task,executor,future,complete,job,id,create,testing,task,executor,gateway,try,job,master,start,job,master,id,get,final,job,master,gateway,job,master,gateway,job,master,get,self,gateway,job,master,gateway,class,final,collection,slot,offer,slot,offers,register,slots,at,job,master,1,job,master,gateway,testing,task,executor,gateway,assert,that,slot,offers,has,size,1,final,allocation,id,allocation,id,slot,offers,iterator,next,get,allocation,id,job,master,gateway,notify,allocation,failure,allocation,id,new,flink,exception,fail,alloction,test,exception,assert,that,freed,slot,future,get,equal,to,allocation,id,assert,that,disconnect,task,executor,future,get,equal,to,job,graph,get,job,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1531499577;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1532290976;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1533307380;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1534259438;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1536327554;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1536327554;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1536327554;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1537192317;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1538904927;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1538904928;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1538904928;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1542127564;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1542270382;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1548326020;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1548350146;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1548688235;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1549365080;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1550069788;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1550220073;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1550366933;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testAutomaticRestartingWhenCheckpointing() throws Exception;1550683188;Tests that in a streaming use case where checkpointing is enabled, a_fixed delay with Integer.MAX_VALUE retries is instantiated if no other restart_strategy has been specified.;@Test_	public void testAutomaticRestartingWhenCheckpointing() throws Exception {_		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(_			completedCheckpointStore,_			new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			new Configuration(),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder()_				.setRestartStrategyFactory(RestartStrategyFactory.createRestartStrategyFactory(configuration))_				.build())___		RestartStrategy restartStrategy = jobMaster.getRestartStrategy()___		assertNotNull(restartStrategy)__		assertTrue(restartStrategy instanceof FixedDelayRestartStrategy)__	};tests,that,in,a,streaming,use,case,where,checkpointing,is,enabled,a,fixed,delay,with,integer,retries,is,instantiated,if,no,other,restart,strategy,has,been,specified;test,public,void,test,automatic,restarting,when,checkpointing,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,new,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,set,restart,strategy,factory,restart,strategy,factory,create,restart,strategy,factory,configuration,build,restart,strategy,restart,strategy,job,master,get,restart,strategy,assert,not,null,restart,strategy,assert,true,restart,strategy,instanceof,fixed,delay,restart,strategy
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1526336590;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1526387042;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1526494919;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1526579384;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1527029937;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1527029937;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1530104611;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1531499577;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1532290976;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1533307380;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1534259438;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1536327554;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1536327554;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1536327554;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1537192317;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1538904927;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1538904928;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1538904928;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1542127564;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1542270382;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1548326020;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1548350146;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate(), testingTimeout).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,testing,timeout,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1548688235;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1549365080;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()__			final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__			final String firstResourceManagerAddress = "address1"__			final String secondResourceManagerAddress = "address2"___			final TestingResourceManagerGateway firstResourceManagerGateway = new TestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = new TestingResourceManagerGateway()___			rpcService.registerGateway(firstResourceManagerAddress, firstResourceManagerGateway)__			rpcService.registerGateway(secondResourceManagerAddress, secondResourceManagerGateway)___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress, resourceManagerId.toUUID())___			_			firstJobManagerRegistration.await()___			_			rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress, resourceManagerId.toUUID())___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,string,first,resource,manager,address,address1,final,string,second,resource,manager,address,address2,final,testing,resource,manager,gateway,first,resource,manager,gateway,new,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,new,testing,resource,manager,gateway,rpc,service,register,gateway,first,resource,manager,address,first,resource,manager,gateway,rpc,service,register,gateway,second,resource,manager,address,second,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,rm,leader,retrieval,service,notify,listener,first,resource,manager,address,resource,manager,id,to,uuid,first,job,manager,registration,await,rm,leader,retrieval,service,notify,listener,second,resource,manager,address,resource,manager,id,to,uuid,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1550069788;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway firstResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			notifyResourceManagerLeaderListeners(firstResourceManagerGateway)___			_			firstJobManagerRegistration.await()___			_			notifyResourceManagerLeaderListeners(secondResourceManagerGateway)___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,first,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,notify,resource,manager,leader,listeners,first,resource,manager,gateway,first,job,manager,registration,await,notify,resource,manager,leader,listeners,second,resource,manager,gateway,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1550220073;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway firstResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			notifyResourceManagerLeaderListeners(firstResourceManagerGateway)___			_			firstJobManagerRegistration.await()___			_			notifyResourceManagerLeaderListeners(secondResourceManagerGateway)___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,first,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,notify,resource,manager,leader,listeners,first,resource,manager,gateway,first,job,manager,registration,await,notify,resource,manager,leader,listeners,second,resource,manager,gateway,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1550366933;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway firstResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			notifyResourceManagerLeaderListeners(firstResourceManagerGateway)___			_			firstJobManagerRegistration.await()___			_			notifyResourceManagerLeaderListeners(secondResourceManagerGateway)___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,first,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,notify,resource,manager,leader,listeners,first,resource,manager,gateway,first,job,manager,registration,await,notify,resource,manager,leader,listeners,second,resource,manager,gateway,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCloseUnestablishedResourceManagerConnection() throws Exception;1550683188;Tests that we can close an unestablished ResourceManager connection.;@Test_	public void testCloseUnestablishedResourceManagerConnection() throws Exception {_		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			jobMaster.start(JobMasterId.generate()).get()___			final TestingResourceManagerGateway firstResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()__			final TestingResourceManagerGateway secondResourceManagerGateway = createAndRegisterTestingResourceManagerGateway()___			final OneShotLatch firstJobManagerRegistration = new OneShotLatch()__			final OneShotLatch secondJobManagerRegistration = new OneShotLatch()___			firstResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger())___			secondResourceManagerGateway.setRegisterJobManagerConsumer(_				jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger())___			notifyResourceManagerLeaderListeners(firstResourceManagerGateway)___			_			firstJobManagerRegistration.await()___			_			notifyResourceManagerLeaderListeners(secondResourceManagerGateway)___			_			secondJobManagerRegistration.await()__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,we,can,close,an,unestablished,resource,manager,connection;test,public,void,test,close,unestablished,resource,manager,connection,throws,exception,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,job,master,start,job,master,id,generate,get,final,testing,resource,manager,gateway,first,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,testing,resource,manager,gateway,second,resource,manager,gateway,create,and,register,testing,resource,manager,gateway,final,one,shot,latch,first,job,manager,registration,new,one,shot,latch,final,one,shot,latch,second,job,manager,registration,new,one,shot,latch,first,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,first,job,manager,registration,trigger,second,resource,manager,gateway,set,register,job,manager,consumer,job,master,id,resource,idstring,job,idtuple4,second,job,manager,registration,trigger,notify,resource,manager,leader,listeners,first,resource,manager,gateway,first,job,manager,registration,await,notify,resource,manager,leader,listeners,second,resource,manager,gateway,second,job,manager,registration,await,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1518945175;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1519638690;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1521379500;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1522249271;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1522249271;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1522249272;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1522339662;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1522681180;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1526336590;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), Matchers.is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,matchers,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1526387042;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1526494919;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1526579384;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1527029937;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1527029937;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)__		final JobMaster jobMaster = createJobMaster(_			JobMasterConfiguration.fromConfiguration(configuration),_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,job,master,configuration,from,configuration,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1530104611;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1531499577;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1532290976;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1533307380;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1534259438;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1536327554;Tests that an existing checkpoint will have precedence over an savepoint;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1536327554;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1536327554;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1537192317;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1538904927;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1538904928;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1538904928;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1542127564;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1542270382;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1548326020;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1548350146;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1548688235;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1549365080;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1550069788;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1550220073;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1550366933;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testCheckpointPrecedesSavepointRecovery() throws Exception;1550683188;Tests that an existing checkpoint will have precedence over an savepoint.;@Test_	public void testCheckpointPrecedesSavepointRecovery() throws Exception {__		_		final long savepointId = 42L__		final File savepointFile = createSavepoint(savepointId)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath("" +_				savepointFile.getAbsolutePath(),_			true)__		final JobGraph jobGraph = createJobGraphWithCheckpointing(savepointRestoreSettings)___		final long checkpointId = 1L___		final CompletedCheckpoint completedCheckpoint = new CompletedCheckpoint(_			jobGraph.getJobID(),_			checkpointId,_			1L,_			1L,_			Collections.emptyMap(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new DummyCheckpointStorageLocation())___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		completedCheckpointStore.addCheckpoint(completedCheckpoint)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraph,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(checkpointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,an,existing,checkpoint,will,have,precedence,over,an,savepoint;test,public,void,test,checkpoint,precedes,savepoint,recovery,throws,exception,final,long,savepoint,id,42l,final,file,savepoint,file,create,savepoint,savepoint,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,graph,job,graph,create,job,graph,with,checkpointing,savepoint,restore,settings,final,long,checkpoint,id,1l,final,completed,checkpoint,completed,checkpoint,new,completed,checkpoint,job,graph,get,job,id,checkpoint,id,1l,1l,collections,empty,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,dummy,checkpoint,storage,location,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,completed,checkpoint,store,add,checkpoint,completed,checkpoint,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,final,job,master,job,master,create,job,master,configuration,job,graph,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,checkpoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1538904928;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1542127564;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1542270382;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1548326020;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1548350146;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1548688235;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1549365080;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1550069788;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1550220073;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1550366933;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
JobMasterTest -> @Test 	public void testRestoringModifiedJobFromSavepoint() throws Exception;1550683188;Tests that a JobMaster will only restore a modified JobGraph if non_restored state is allowed.;@Test_	public void testRestoringModifiedJobFromSavepoint() throws Exception {__		_		final long savepointId = 42L__		final OperatorID operatorID = new OperatorID()__		final File savepointFile = createSavepointWithOperatorState(savepointId, operatorID)___		_		final SavepointRestoreSettings savepointRestoreSettings = SavepointRestoreSettings.forPath(_			savepointFile.getAbsolutePath(),_			false)___		_		final JobVertex jobVertex = new JobVertex("New operator")__		jobVertex.setInvokableClass(NoOpInvokable.class)__		final JobGraph jobGraphWithNewOperator = createJobGraphFromJobVerticesWithCheckpointing(savepointRestoreSettings, jobVertex)___		final StandaloneCompletedCheckpointStore completedCheckpointStore = new StandaloneCompletedCheckpointStore(1)__		final TestingCheckpointRecoveryFactory testingCheckpointRecoveryFactory = new TestingCheckpointRecoveryFactory(completedCheckpointStore, new StandaloneCheckpointIDCounter())__		haServices.setCheckpointRecoveryFactory(testingCheckpointRecoveryFactory)___		try {_			createJobMaster(_				configuration,_				jobGraphWithNewOperator,_				haServices,_				new TestingJobManagerSharedServicesBuilder().build())__			fail("Should fail because we cannot resume the changed JobGraph from the savepoint.")__		} catch (IllegalStateException expected) {_			_		}__		_		jobGraphWithNewOperator.setSavepointRestoreSettings(_			SavepointRestoreSettings.forPath(_				savepointFile.getAbsolutePath(),_				true))___		final JobMaster jobMaster = createJobMaster(_			configuration,_			jobGraphWithNewOperator,_			haServices,_			new TestingJobManagerSharedServicesBuilder().build())___		try {_			_			final CompletedCheckpoint savepointCheckpoint = completedCheckpointStore.getLatestCheckpoint()___			assertThat(savepointCheckpoint, Matchers.notNullValue())___			assertThat(savepointCheckpoint.getCheckpointID(), is(savepointId))__		} finally {_			RpcUtils.terminateRpcEndpoint(jobMaster, testingTimeout)__		}_	};tests,that,a,job,master,will,only,restore,a,modified,job,graph,if,non,restored,state,is,allowed;test,public,void,test,restoring,modified,job,from,savepoint,throws,exception,final,long,savepoint,id,42l,final,operator,id,operator,id,new,operator,id,final,file,savepoint,file,create,savepoint,with,operator,state,savepoint,id,operator,id,final,savepoint,restore,settings,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,false,final,job,vertex,job,vertex,new,job,vertex,new,operator,job,vertex,set,invokable,class,no,op,invokable,class,final,job,graph,job,graph,with,new,operator,create,job,graph,from,job,vertices,with,checkpointing,savepoint,restore,settings,job,vertex,final,standalone,completed,checkpoint,store,completed,checkpoint,store,new,standalone,completed,checkpoint,store,1,final,testing,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,new,testing,checkpoint,recovery,factory,completed,checkpoint,store,new,standalone,checkpoint,idcounter,ha,services,set,checkpoint,recovery,factory,testing,checkpoint,recovery,factory,try,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,fail,should,fail,because,we,cannot,resume,the,changed,job,graph,from,the,savepoint,catch,illegal,state,exception,expected,job,graph,with,new,operator,set,savepoint,restore,settings,savepoint,restore,settings,for,path,savepoint,file,get,absolute,path,true,final,job,master,job,master,create,job,master,configuration,job,graph,with,new,operator,ha,services,new,testing,job,manager,shared,services,builder,build,try,final,completed,checkpoint,savepoint,checkpoint,completed,checkpoint,store,get,latest,checkpoint,assert,that,savepoint,checkpoint,matchers,not,null,value,assert,that,savepoint,checkpoint,get,checkpoint,id,is,savepoint,id,finally,rpc,utils,terminate,rpc,endpoint,job,master,testing,timeout
