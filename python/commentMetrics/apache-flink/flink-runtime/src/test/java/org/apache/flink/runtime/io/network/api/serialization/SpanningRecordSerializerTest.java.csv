# id;timestamp;commentText;codeText;commentWords;codeWords
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1421050512;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()__		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), Mockito.mock(BufferRecycler.class))___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		for (SerializationTestType record : records) {_			SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBuffer(buffer)__				numBytes = 0__			} else {_				Assert.assertEquals(SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,mockito,mock,buffer,recycler,class,serializer,set,next,buffer,buffer,int,num,bytes,0,for,serialization,test,type,record,records,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,serialization,result,result,serializer,set,next,buffer,buffer,num,bytes,0,else,assert,assert,equals,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,buffer
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1421838095;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()__		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), Mockito.mock(BufferRecycler.class))___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		for (SerializationTestType record : records) {_			SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBuffer(buffer)__				numBytes = 0__			} else {_				Assert.assertEquals(SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,mockito,mock,buffer,recycler,class,serializer,set,next,buffer,buffer,int,num,bytes,0,for,serialization,test,type,record,records,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,serialization,result,result,serializer,set,next,buffer,buffer,num,bytes,0,else,assert,assert,equals,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,buffer
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1421838119;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()__		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), mock(BufferRecycler.class))___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBuffer(buffer)__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,mock,buffer,recycler,class,serializer,set,next,buffer,buffer,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,buffer,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,buffer
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1441738685;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()__		final Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(segmentSize), mock(BufferRecycler.class))___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBuffer(buffer)__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,final,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,segment,size,mock,buffer,recycler,class,serializer,set,next,buffer,buffer,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,buffer,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,buffer
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1509646806;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()__		final Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(segmentSize), mock(BufferRecycler.class))___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBuffer(buffer)__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBuffer(buffer)__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,final,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,segment,size,mock,buffer,recycler,class,serializer,set,next,buffer,buffer,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,buffer,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,buffer
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1515408360;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int SERIALIZATION_OVERHEAD = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize___					result = serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serialization,test,type,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1517489696;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int serializationOverhead = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + serializationOverhead___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize___					result = serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,serialization,overhead,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,serialization,overhead,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1519039269;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int serializationOverhead = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + serializationOverhead___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize___					result = serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,serialization,overhead,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,serialization,overhead,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1519039270;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int serializationOverhead = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + serializationOverhead___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,serialization,overhead,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,serialization,overhead,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,set,next,buffer,builder,create,buffer,builder,segment,size
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1519049134;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int serializationOverhead = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>()___		__		serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		for (SerializationTestType record : records) {_			RecordSerializer.SerializationResult result = serializer.addRecord(record)__			numBytes += record.length() + serializationOverhead___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize))__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					result = serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize))__				}_			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,serialization,overhead,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,serializer,continue,writing,with,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,record,serializer,serialization,result,result,serializer,add,record,record,num,bytes,record,length,serialization,overhead,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,serializer,continue,writing,with,next,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,result,serializer,continue,writing,with,next,buffer,builder,create,buffer,builder,segment,size
SpanningRecordSerializerTest -> private void test(Util.MockRecords records, int segmentSize) throws Exception;1537529044;Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected_{@link RecordSerializer.SerializationResult} values.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize) throws Exception {_		final int serializationOverhead = 4_ __		final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>()___		__		BufferBuilder bufferBuilder = createBufferBuilder(segmentSize)__		int numBytes = 0__		for (SerializationTestType record : records) {_			serializer.serializeRecord(record)__			RecordSerializer.SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder)__			numBytes += record.length() + serializationOverhead___			if (numBytes < segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result)__			} else if (numBytes == segmentSize) {_				Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result)__				bufferBuilder = createBufferBuilder(segmentSize)__				numBytes = 0__			} else {_				Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result)___				while (result.isFullBuffer()) {_					numBytes -= segmentSize__					bufferBuilder = createBufferBuilder(segmentSize)__					result = serializer.copyToBufferBuilder(bufferBuilder)__				}__				Assert.assertTrue(result.isFullRecord())__			}_		}_	};iterates,over,the,provided,records,and,tests,whether,the,link,spanning,record,serializer,returns,the,expected,link,record,serializer,serialization,result,values,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,throws,exception,final,int,serialization,overhead,4,final,spanning,record,serializer,serialization,test,type,serializer,new,spanning,record,serializer,buffer,builder,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,for,serialization,test,type,record,records,serializer,serialize,record,record,record,serializer,serialization,result,result,serializer,copy,to,buffer,builder,buffer,builder,num,bytes,record,length,serialization,overhead,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,else,if,num,bytes,segment,size,assert,assert,equals,record,serializer,serialization,result,result,buffer,builder,create,buffer,builder,segment,size,num,bytes,0,else,assert,assert,equals,record,serializer,serialization,result,result,while,result,is,full,buffer,num,bytes,segment,size,buffer,builder,create,buffer,builder,segment,size,result,serializer,copy,to,buffer,builder,buffer,builder,assert,assert,true,result,is,full,record
