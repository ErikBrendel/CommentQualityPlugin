commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testHasSerializedData() throws IOException {     final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>().     final SerializationTestType randomIntRecord = Util.randomRecord(SerializationTestTypeFactory.INT).     Assert.assertFalse(serializer.hasSerializedData()).     serializer.serializeRecord(randomIntRecord).     Assert.assertTrue(serializer.hasSerializedData()).     final BufferBuilder bufferBuilder1 = createBufferBuilder(16).     serializer.copyToBufferBuilder(bufferBuilder1).     Assert.assertFalse(serializer.hasSerializedData()).     final BufferBuilder bufferBuilder2 = createBufferBuilder(8).     serializer.reset().     serializer.copyToBufferBuilder(bufferBuilder2).     Assert.assertFalse(serializer.hasSerializedData()).     serializer.reset().     serializer.copyToBufferBuilder(bufferBuilder2).     // Buffer builder full!     Assert.assertTrue(serializer.hasSerializedData()). }
false;public;1;4;;@Override public SerializationTestType getRandom(Random rnd) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int length() {     throw new UnsupportedOperationException(). }
false;public;1;2;;@Override public void write(DataOutputView out) { }
false;public;1;2;;@Override public void read(DataInputView in) { }
false;public;0;4;;@Override public int hashCode() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public boolean equals(Object obj) {     throw new UnsupportedOperationException(). }
false;public;0;52;;@Test public void testEmptyRecords() throws IOException {     final int segmentSize = 11.     final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>().     final BufferBuilder bufferBuilder1 = createBufferBuilder(segmentSize).     Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, serializer.copyToBufferBuilder(bufferBuilder1)).     SerializationTestType emptyRecord = new SerializationTestType() {          @Override         public SerializationTestType getRandom(Random rnd) {             throw new UnsupportedOperationException().         }          @Override         public int length() {             throw new UnsupportedOperationException().         }          @Override         public void write(DataOutputView out) {         }          @Override         public void read(DataInputView in) {         }          @Override         public int hashCode() {             throw new UnsupportedOperationException().         }          @Override         public boolean equals(Object obj) {             throw new UnsupportedOperationException().         }     }.     serializer.serializeRecord(emptyRecord).     Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, serializer.copyToBufferBuilder(bufferBuilder1)).     serializer.reset().     Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, serializer.copyToBufferBuilder(bufferBuilder1)).     serializer.reset().     Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, serializer.copyToBufferBuilder(bufferBuilder1)).     final BufferBuilder bufferBuilder2 = createBufferBuilder(segmentSize).     Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, serializer.copyToBufferBuilder(bufferBuilder2)). }
false;public;0;7;;@Test public void testIntRecordsSpanningMultipleSegments() throws Exception {     final int segmentSize = 1.     final int numValues = 10.     test(Util.randomRecords(numValues, SerializationTestTypeFactory.INT), segmentSize). }
false;public;0;7;;@Test public void testIntRecordsWithAlignedSegments() throws Exception {     final int segmentSize = 64.     final int numValues = 64.     test(Util.randomRecords(numValues, SerializationTestTypeFactory.INT), segmentSize). }
false;public;0;7;;@Test public void testIntRecordsWithUnalignedSegments() throws Exception {     final int segmentSize = 31.     // least common multiple => last record should align     final int numValues = 248.     test(Util.randomRecords(numValues, SerializationTestTypeFactory.INT), segmentSize). }
false;public;0;7;;@Test public void testRandomRecords() throws Exception {     final int segmentSize = 127.     final int numValues = 100000.     test(Util.randomRecords(numValues), segmentSize). }
true;private;2;33;/**  * Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected  * {@link RecordSerializer.SerializationResult} values.  *  * <p>Only a single {@link MemorySegment} will be allocated.  *  * @param records records to test  * @param segmentSize size for the {@link MemorySegment}  */ ;// ----------------------------------------------------------------------------------------------------------------- /**  * Iterates over the provided records and tests whether the {@link SpanningRecordSerializer} returns the expected  * {@link RecordSerializer.SerializationResult} values.  *  * <p>Only a single {@link MemorySegment} will be allocated.  *  * @param records records to test  * @param segmentSize size for the {@link MemorySegment}  */ private void test(Util.MockRecords records, int segmentSize) throws Exception {     // length encoding     final int serializationOverhead = 4.     final SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<>().     // -------------------------------------------------------------------------------------------------------------     BufferBuilder bufferBuilder = createBufferBuilder(segmentSize).     int numBytes = 0.     for (SerializationTestType record : records) {         serializer.serializeRecord(record).         RecordSerializer.SerializationResult result = serializer.copyToBufferBuilder(bufferBuilder).         numBytes += record.length() + serializationOverhead.         if (numBytes < segmentSize) {             Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD, result).         } else if (numBytes == segmentSize) {             Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD_MEMORY_SEGMENT_FULL, result).             bufferBuilder = createBufferBuilder(segmentSize).             numBytes = 0.         } else {             Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL, result).             while (result.isFullBuffer()) {                 numBytes -= segmentSize.                 bufferBuilder = createBufferBuilder(segmentSize).                 result = serializer.copyToBufferBuilder(bufferBuilder).             }             Assert.assertTrue(result.isFullRecord()).         }     } }
