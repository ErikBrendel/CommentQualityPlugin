commented;modifiers;parameterAmount;loc;comment;code
true;public;0;27;/**  * Tests simple access via the getters.  */ ;/**  * Tests simple access via the getters.  */ @Test public void testSimpleAccess() throws Exception {     SubtaskStateStats stats = new SubtaskStateStats(0, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L, Integer.MAX_VALUE + 3L, Integer.MAX_VALUE + 4L, Integer.MAX_VALUE + 5L, Integer.MAX_VALUE + 6L).     assertEquals(0, stats.getSubtaskIndex()).     assertEquals(Integer.MAX_VALUE + 1L, stats.getAckTimestamp()).     assertEquals(Integer.MAX_VALUE + 2L, stats.getStateSize()).     assertEquals(Integer.MAX_VALUE + 3L, stats.getSyncCheckpointDuration()).     assertEquals(Integer.MAX_VALUE + 4L, stats.getAsyncCheckpointDuration()).     assertEquals(Integer.MAX_VALUE + 5L, stats.getAlignmentBuffered()).     assertEquals(Integer.MAX_VALUE + 6L, stats.getAlignmentDuration()).     // Check duration helper     long ackTimestamp = stats.getAckTimestamp().     long triggerTimestamp = ackTimestamp - 10123.     assertEquals(10123, stats.getEndToEndDuration(triggerTimestamp)).     // Trigger timestamp < ack timestamp     assertEquals(0, stats.getEndToEndDuration(ackTimestamp + 1)). }
true;public;0;30;/**  * Tests that the snapshot is actually serializable.  */ ;/**  * Tests that the snapshot is actually serializable.  */ @Test public void testIsJavaSerializable() throws Exception {     SubtaskStateStats stats = new SubtaskStateStats(0, Integer.MAX_VALUE + 1L, Integer.MAX_VALUE + 2L, Integer.MAX_VALUE + 3L, Integer.MAX_VALUE + 4L, Integer.MAX_VALUE + 5L, Integer.MAX_VALUE + 6L).     SubtaskStateStats copy = CommonTestUtils.createCopySerializable(stats).     assertEquals(0, copy.getSubtaskIndex()).     assertEquals(Integer.MAX_VALUE + 1L, copy.getAckTimestamp()).     assertEquals(Integer.MAX_VALUE + 2L, copy.getStateSize()).     assertEquals(Integer.MAX_VALUE + 3L, copy.getSyncCheckpointDuration()).     assertEquals(Integer.MAX_VALUE + 4L, copy.getAsyncCheckpointDuration()).     assertEquals(Integer.MAX_VALUE + 5L, copy.getAlignmentBuffered()).     assertEquals(Integer.MAX_VALUE + 6L, copy.getAlignmentDuration()).     // Check duration helper     long ackTimestamp = copy.getAckTimestamp().     long triggerTimestamp = ackTimestamp - 10123.     assertEquals(10123, copy.getEndToEndDuration(triggerTimestamp)).     // Trigger timestamp < ack timestamp     assertEquals(0, copy.getEndToEndDuration(ackTimestamp + 1)). }
