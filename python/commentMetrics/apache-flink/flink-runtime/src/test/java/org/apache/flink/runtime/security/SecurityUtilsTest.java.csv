commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void install() throws SecurityInstallException {     installed = true. }
false;public;0;4;;@Override public void uninstall() throws SecurityInstallException {     installed = false. }
false;public;1;4;;@Override public SecurityModule createModule(SecurityConfiguration securityConfig) {     return new TestSecurityModule(). }
false;public,static;0;4;;@AfterClass public static void afterClass() {     SecurityUtils.uninstall(). }
false;public;0;15;;@Test public void testModuleInstall() throws Exception {     SecurityConfiguration sc = new SecurityConfiguration(new Configuration(), Collections.singletonList(new TestSecurityModule.Factory())).     SecurityUtils.install(sc).     assertEquals(1, SecurityUtils.getInstalledModules().size()).     TestSecurityModule testModule = (TestSecurityModule) SecurityUtils.getInstalledModules().get(0).     assertTrue(testModule.installed).     SecurityUtils.uninstall().     assertNull(SecurityUtils.getInstalledModules()).     assertFalse(testModule.installed). }
false;public;0;12;;@Test public void testSecurityContext() throws Exception {     SecurityConfiguration sc = new SecurityConfiguration(new Configuration(), Collections.singletonList(new TestSecurityModule.Factory())).     SecurityUtils.install(sc).     assertEquals(HadoopSecurityContext.class, SecurityUtils.getInstalledContext().getClass()).     SecurityUtils.uninstall().     assertEquals(NoOpSecurityContext.class, SecurityUtils.getInstalledContext().getClass()). }
false;public;0;53;;@Test public void testKerberosLoginContextParsing() {     List<String> expectedLoginContexts = Arrays.asList("Foo bar", "Client").     Configuration testFlinkConf.     SecurityConfiguration testSecurityConf.     // ------- no whitespaces     testFlinkConf = new Configuration().     testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, "Foo bar,Client").     testSecurityConf = new SecurityConfiguration(testFlinkConf, Collections.singletonList(new TestSecurityModule.Factory())).     assertEquals(expectedLoginContexts, testSecurityConf.getLoginContextNames()).     // ------- with whitespaces surrounding comma     testFlinkConf = new Configuration().     testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, "Foo bar , Client").     testSecurityConf = new SecurityConfiguration(testFlinkConf, Collections.singletonList(new TestSecurityModule.Factory())).     assertEquals(expectedLoginContexts, testSecurityConf.getLoginContextNames()).     // ------- leading / trailing whitespaces at start and end of list     testFlinkConf = new Configuration().     testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, " Foo bar , Client ").     testSecurityConf = new SecurityConfiguration(testFlinkConf, Collections.singletonList(new TestSecurityModule.Factory())).     assertEquals(expectedLoginContexts, testSecurityConf.getLoginContextNames()).     // ------- empty entries     testFlinkConf = new Configuration().     testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, "Foo bar,,Client").     testSecurityConf = new SecurityConfiguration(testFlinkConf, Collections.singletonList(new TestSecurityModule.Factory())).     assertEquals(expectedLoginContexts, testSecurityConf.getLoginContextNames()).     // ------- empty trailing String entries with whitespaces     testFlinkConf = new Configuration().     testFlinkConf.setString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS, "Foo bar, ,, Client,").     testSecurityConf = new SecurityConfiguration(testFlinkConf, Collections.singletonList(new TestSecurityModule.Factory())).     assertEquals(expectedLoginContexts, testSecurityConf.getLoginContextNames()). }
