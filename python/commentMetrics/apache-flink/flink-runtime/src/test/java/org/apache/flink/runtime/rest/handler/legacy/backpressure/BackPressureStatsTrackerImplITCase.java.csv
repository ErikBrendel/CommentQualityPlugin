commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void setUp() throws Exception {     networkBufferPool = new NetworkBufferPool(100, 8192).     testBufferPool = networkBufferPool.createBufferPool(1, Integer.MAX_VALUE).     final Configuration configuration = new Configuration().     configuration.setInteger(WebOptions.BACKPRESSURE_NUM_SAMPLES, BACKPRESSURE_NUM_SAMPLES).     testingMiniCluster = new TestingMiniCluster(new TestingMiniClusterConfiguration.Builder().setNumTaskManagers(JOB_PARALLELISM).setConfiguration(configuration).build()).     testingMiniCluster.start().     dispatcherGateway = testingMiniCluster.getDispatcherGatewayFuture().get(TIMEOUT_SECONDS, TimeUnit.SECONDS). }
false;public;0;16;;@After public void tearDown() throws Exception {     if (testingMiniCluster != null) {         testingMiniCluster.close().     }     if (testBufferPool != null) {         testBufferPool.lazyDestroy().     }     if (networkBufferPool != null) {         networkBufferPool.destroyAllBufferPools().         networkBufferPool.destroy().     } }
true;public;0;15;/**  * Tests a simple fake-back pressured task. Back pressure is assumed when  * sampled stack traces are in blocking buffer requests.  */ ;/**  * Tests a simple fake-back pressured task. Back pressure is assumed when  * sampled stack traces are in blocking buffer requests.  */ @Test public void testBackPressureShouldBeReflectedInStats() throws Exception {     final List<Buffer> buffers = requestAllBuffers().     try {         final JobGraph jobGraph = createJobWithBackPressure().         testingMiniCluster.submitJob(jobGraph).get(TIMEOUT_SECONDS, TimeUnit.SECONDS).         final OperatorBackPressureStats stats = getBackPressureStatsForTestVertex().         assertThat(stats.getNumberOfSubTasks(), is(equalTo(JOB_PARALLELISM))).         assertThat(stats, isFullyBackpressured()).     } finally {         releaseBuffers(buffers).     } }
false;public;0;10;;@Test public void testAbsenceOfBackPressureShouldBeReflectedInStats() throws Exception {     final JobGraph jobGraph = createJobWithoutBackPressure().     testingMiniCluster.submitJob(jobGraph).get(TIMEOUT_SECONDS, TimeUnit.SECONDS).     final OperatorBackPressureStats stats = getBackPressureStatsForTestVertex().     assertThat(stats.getNumberOfSubTasks(), is(equalTo(JOB_PARALLELISM))).     assertThat(stats, isNotBackpressured()). }
false;private,static;0;9;;private static JobGraph createJobWithBackPressure() {     final JobGraph jobGraph = new JobGraph(TEST_JOB_ID, "Test Job").     TEST_JOB_VERTEX.setInvokableClass(BackPressuredTask.class).     TEST_JOB_VERTEX.setParallelism(JOB_PARALLELISM).     jobGraph.addVertex(TEST_JOB_VERTEX).     return jobGraph. }
false;private,static;0;9;;private static JobGraph createJobWithoutBackPressure() {     final JobGraph jobGraph = new JobGraph(TEST_JOB_ID, "Test Job").     TEST_JOB_VERTEX.setInvokableClass(BlockingNoOpInvokable.class).     TEST_JOB_VERTEX.setParallelism(JOB_PARALLELISM).     jobGraph.addVertex(TEST_JOB_VERTEX).     return jobGraph. }
false;private,static;0;12;;private static List<Buffer> requestAllBuffers() throws IOException {     final List<Buffer> buffers = new ArrayList<>().     while (true) {         final Buffer buffer = testBufferPool.requestBuffer().         if (buffer != null) {             buffers.add(buffer).         } else {             break.         }     }     return buffers. }
false;private,static;1;6;;private static void releaseBuffers(final List<Buffer> buffers) {     for (Buffer buffer : buffers) {         buffer.recycleBuffer().         assertTrue(buffer.isRecycled()).     } }
false;private;0;7;;private OperatorBackPressureStats getBackPressureStatsForTestVertex() {     waitUntilBackPressureStatsAvailable().     final Optional<OperatorBackPressureStats> stats = getBackPressureStats().     checkState(stats.isPresent()).     return stats.get(). }
false;private;0;12;;private void waitUntilBackPressureStatsAvailable() {     try {         CommonTestUtils.waitUntilCondition(() -> {             final Optional<OperatorBackPressureStats> stats = getBackPressureStats().             return stats.isPresent().         }, Deadline.fromNow(TIMEOUT)).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;0;9;;private Optional<OperatorBackPressureStats> getBackPressureStats() {     try {         return dispatcherGateway.requestOperatorBackPressureStats(TEST_JOB_ID, TEST_JOB_VERTEX.getID()).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS).getOperatorBackPressureStats().     } catch (InterruptedException | ExecutionException | TimeoutException e) {         throw new RuntimeException(e).     } }
false;public;0;8;;@Override public void invoke() throws Exception {     final BufferBuilder bufferBuilder = testBufferPool.requestBufferBuilderBlocking().     // Got a buffer, yay!     BufferBuilderTestUtils.buildSingleBuffer(bufferBuilder).recycleBuffer().     Thread.currentThread().join(). }
false;private,static;0;3;;private static Matcher<OperatorBackPressureStats> isNotBackpressured() {     return new OperatorBackPressureRatioMatcher(0). }
false;private,static;0;3;;private static Matcher<OperatorBackPressureStats> isFullyBackpressured() {     return new OperatorBackPressureRatioMatcher(1). }
false;protected;2;8;;@Override protected boolean matchesSafely(final OperatorBackPressureStats stats, final Description mismatchDescription) {     if (!isBackPressureRatioCorrect(stats)) {         mismatchDescription.appendText("Not all subtask back pressure ratios in " + getBackPressureRatios(stats) + " are " + expectedBackPressureRatio).         return false.     }     return true. }
false;private,static;1;4;;private static List<Double> getBackPressureRatios(final OperatorBackPressureStats stats) {     return IntStream.range(0, stats.getNumberOfSubTasks()).mapToObj(stats::getBackPressureRatio).collect(Collectors.toList()). }
false;private;1;5;;private boolean isBackPressureRatioCorrect(final OperatorBackPressureStats stats) {     return IntStream.range(0, stats.getNumberOfSubTasks()).mapToObj(stats::getBackPressureRatio).allMatch(backpressureRatio -> backpressureRatio == expectedBackPressureRatio). }
false;public;1;4;;@Override public void describeTo(final Description description) {     description.appendText("All subtask back pressure ratios are " + expectedBackPressureRatio). }
