commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void confirmLeaderSessionID(UUID leaderId) {     leaderSessionIdFuture.complete(leaderId). }
false;public;0;6;;@Override public void revokeLeadership() {     super.revokeLeadership().     runAsyncWithoutFencing(() -> revokedLeaderIdFuture.complete(getFencingToken())). }
false;public;0;75;;@Test public void testGrantAndRevokeLeadership() throws Exception {     ResourceID rmResourceId = ResourceID.generate().     RpcService rpcService = new TestingRpcService().     CompletableFuture<UUID> leaderSessionIdFuture = new CompletableFuture<>().     TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService() {          @Override         public void confirmLeaderSessionID(UUID leaderId) {             leaderSessionIdFuture.complete(leaderId).         }     }.     TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices().     highAvailabilityServices.setResourceManagerLeaderElectionService(leaderElectionService).     TestingHeartbeatServices heartbeatServices = new TestingHeartbeatServices().     ResourceManagerRuntimeServicesConfiguration resourceManagerRuntimeServicesConfiguration = new ResourceManagerRuntimeServicesConfiguration(Time.seconds(5L), new SlotManagerConfiguration(TestingUtils.infiniteTime(), TestingUtils.infiniteTime(), TestingUtils.infiniteTime())).     ResourceManagerRuntimeServices resourceManagerRuntimeServices = ResourceManagerRuntimeServices.fromConfiguration(resourceManagerRuntimeServicesConfiguration, highAvailabilityServices, rpcService.getScheduledExecutor()).     TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler().     CompletableFuture<ResourceManagerId> revokedLeaderIdFuture = new CompletableFuture<>().     final ResourceManager resourceManager = new StandaloneResourceManager(rpcService, ResourceManager.RESOURCE_MANAGER_NAME, rmResourceId, highAvailabilityServices, heartbeatServices, resourceManagerRuntimeServices.getSlotManager(), NoOpMetricRegistry.INSTANCE, resourceManagerRuntimeServices.getJobLeaderIdService(), new ClusterInformation("localhost", 1234), testingFatalErrorHandler, UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup()) {          @Override         public void revokeLeadership() {             super.revokeLeadership().             runAsyncWithoutFencing(() -> revokedLeaderIdFuture.complete(getFencingToken())).         }     }.     try {         resourceManager.start().         Assert.assertNull(resourceManager.getFencingToken()).         final UUID leaderId = UUID.randomUUID().         leaderElectionService.isLeader(leaderId).         // after grant leadership, resourceManager's leaderId has value         Assert.assertEquals(leaderId, leaderSessionIdFuture.get()).         // then revoke leadership, resourceManager's leaderId should be different         leaderElectionService.notLeader().         Assert.assertNotEquals(leaderId, revokedLeaderIdFuture.get()).         if (testingFatalErrorHandler.hasExceptionOccurred()) {             testingFatalErrorHandler.rethrowError().         }     } finally {         rpcService.stopService().get().     } }
