commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupTest() {     highAvailabilityServices = new TestingHighAvailabilityServices(). }
false;public;0;5;;@After public void tearDownTest() throws Exception {     highAvailabilityServices.closeAndCleanupAllData().     highAvailabilityServices = null. }
true;public;0;31;/**  * Tests that the TaskManagerRunner startup fails synchronously when the I/O  * directories are not writable.  */ ;/**  * Tests that the TaskManagerRunner startup fails synchronously when the I/O  * directories are not writable.  */ @Test public void testIODirectoryNotWritable() throws Exception {     File nonWritable = tempFolder.newFolder().     Assume.assumeTrue("Cannot create non-writable temporary file directory. Skipping test.", nonWritable.setWritable(false, false)).     try {         Configuration cfg = new Configuration().         cfg.setString(CoreOptions.TMP_DIRS, nonWritable.getAbsolutePath()).         try {             startTaskManager(cfg, rpcService, highAvailabilityServices).             fail("Should fail synchronously with an IOException").         } catch (IOException e) {         // splendid!         }     } finally {         // noinspection ResultOfMethodCallIgnored         nonWritable.setWritable(true, false).         try {             FileUtils.deleteDirectory(nonWritable).         } catch (IOException e) {         // best effort         }     } }
true;public;0;36;/**  * Tests that the TaskManagerRunner startup fails synchronously when the memory configuration is wrong.  */ ;/**  * Tests that the TaskManagerRunner startup fails synchronously when the memory configuration is wrong.  */ @Test public void testMemoryConfigWrong() throws Exception {     Configuration cfg = new Configuration().     cfg.setBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE, true).     // something invalid     cfg.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, "-42m").     try {         startTaskManager(cfg, rpcService, highAvailabilityServices).         fail("Should fail synchronously with an exception").     } catch (IllegalConfigurationException e) {     // splendid!     }     // something ridiculously high     final long memSize = (((long) Integer.MAX_VALUE - 1) * MemorySize.parse(TaskManagerOptions.MEMORY_SEGMENT_SIZE.defaultValue()).getBytes()) >> 20.     cfg.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, memSize + "m").     try {         startTaskManager(cfg, rpcService, highAvailabilityServices).         fail("Should fail synchronously with an exception").     } catch (Exception e) {         // splendid!         assertTrue(e.getCause() instanceof OutOfMemoryError).     } }
true;public;0;20;/**  * Tests that the TaskManagerRunner startup fails if the network stack cannot be initialized.  */ ;/**  * Tests that the TaskManagerRunner startup fails if the network stack cannot be initialized.  */ @Test public void testStartupWhenNetworkStackFailsToInitialize() throws Exception {     final ServerSocket blocker = new ServerSocket(0, 50, InetAddress.getByName(LOCAL_HOST)).     try {         final Configuration cfg = new Configuration().         cfg.setInteger(TaskManagerOptions.DATA_PORT, blocker.getLocalPort()).         startTaskManager(cfg, rpcService, highAvailabilityServices).         fail("Should throw IOException when the network stack cannot be initialized.").     } catch (IOException e) {     // ignored     } finally {         IOUtils.closeQuietly(blocker).     } }
false;private,static;0;5;;// ----------------------------------------------------------------------------------------------- private static RpcService createRpcService() {     final RpcService rpcService = mock(RpcService.class).     when(rpcService.getAddress()).thenReturn(LOCAL_HOST).     return rpcService. }
false;private,static;3;17;;private static void startTaskManager(Configuration configuration, RpcService rpcService, HighAvailabilityServices highAvailabilityServices) throws Exception {     TaskManagerRunner.startTaskManager(configuration, ResourceID.generate(), rpcService, highAvailabilityServices, mock(HeartbeatServices.class), NoOpMetricRegistry.INSTANCE, mock(BlobCacheService.class), false, error -> {     }). }
