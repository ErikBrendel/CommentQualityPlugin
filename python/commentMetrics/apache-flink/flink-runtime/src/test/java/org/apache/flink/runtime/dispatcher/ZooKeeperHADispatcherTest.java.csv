# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1536763194;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(testingHighAvailabilityServices)___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, Matchers.is(Matchers.notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,matchers,is,matchers,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1536930103;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(_				testingHighAvailabilityServices,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>()))___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, is(notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,is,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1536954663;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(_				testingHighAvailabilityServices,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, is(notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,is,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1548846699;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(_				testingHighAvailabilityServices,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, is(notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,is,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1549360057;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(_				testingHighAvailabilityServices,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, is(notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,is,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testSubmittedJobGraphRelease() throws Exception;1550005040;Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it_lost the leadership.;@Test_	public void testSubmittedJobGraphRelease() throws Exception {_		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration)___		try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {_			testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration))___			final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(_				otherClient,_				configuration)___			otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE)___			final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__			testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService)___			final TestingDispatcher dispatcher = createDispatcher(_				testingHighAvailabilityServices,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			dispatcher.start()___			try {_				final DispatcherId expectedLeaderId = DispatcherId.generate()__				leaderElectionService.isLeader(expectedLeaderId.toUUID()).get()___				final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class)___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT)__				submissionFuture.get()___				Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds()___				final JobID jobId = nonEmptyJobGraph.getJobID()__				assertThat(jobIds, Matchers.contains(jobId))___				leaderElectionService.notLeader()___				_				final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT)__				jobTerminationFuture.get()___				_				final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId)___				assertThat(submittedJobGraph, is(notNullValue()))___				_				_				otherSubmittedJobGraphStore.removeJobGraph(jobId)___				jobIds = otherSubmittedJobGraphStore.getJobIds()___				assertThat(jobIds, Matchers.not(Matchers.contains(jobId)))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT)__				client.close()__				otherClient.close()__			}_		}_	};tests,that,the,link,dispatcher,releases,a,locked,link,submitted,job,graph,if,it,lost,the,leadership;test,public,void,test,submitted,job,graph,release,throws,exception,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,curator,framework,other,client,zoo,keeper,utils,start,curator,framework,configuration,try,final,testing,high,availability,services,testing,high,availability,services,new,testing,high,availability,services,testing,high,availability,services,set,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,client,configuration,final,zoo,keeper,submitted,job,graph,store,other,submitted,job,graph,store,zoo,keeper,utils,create,submitted,job,graphs,other,client,configuration,other,submitted,job,graph,store,start,no,op,submitted,job,graph,listener,instance,final,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,testing,high,availability,services,set,dispatcher,leader,election,service,leader,election,service,final,testing,dispatcher,dispatcher,create,dispatcher,testing,high,availability,services,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,dispatcher,start,try,final,dispatcher,id,expected,leader,id,dispatcher,id,generate,leader,election,service,is,leader,expected,leader,id,to,uuid,get,final,dispatcher,gateway,dispatcher,gateway,dispatcher,get,self,gateway,dispatcher,gateway,class,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,submission,future,get,collection,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,final,job,id,job,id,non,empty,job,graph,get,job,id,assert,that,job,ids,matchers,contains,job,id,leader,election,service,not,leader,final,completable,future,void,job,termination,future,dispatcher,get,job,termination,future,job,id,timeout,job,termination,future,get,final,submitted,job,graph,submitted,job,graph,other,submitted,job,graph,store,recover,job,graph,job,id,assert,that,submitted,job,graph,is,not,null,value,other,submitted,job,graph,store,remove,job,graph,job,id,job,ids,other,submitted,job,graph,store,get,job,ids,assert,that,job,ids,matchers,not,matchers,contains,job,id,finally,rpc,utils,terminate,rpc,endpoint,dispatcher,timeout,client,close,other,client,close
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobExecution() throws Exception;1536930103;Tests that a standby Dispatcher does not interfere with the clean up of a completed_job.;@Test_	public void testStandbyDispatcherJobExecution() throws Exception {_		try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices()__			final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices()__			final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1)__			final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService()__			haServices1.setDispatcherLeaderElectionService(leaderElectionService1)___			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2)__			final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService()__			haServices2.setDispatcherLeaderElectionService(leaderElectionService2)___			final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>()__			final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>()__			final TestingDispatcher dispatcher1 = createDispatcher(_				haServices1,_				new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture))___			final TestingDispatcher dispatcher2 = createDispatcher(_				haServices2,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>()))___			try {_				dispatcher1.start()__				dispatcher2.start()___				leaderElectionService1.isLeader(UUID.randomUUID()).get()__				final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class)___				final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph()___				dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get()___				final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT)___				jobGraphFuture.get()___				_				resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build())___				final JobResult jobResult = jobResultFuture.get()___				assertThat(jobResult.isSuccess(), is(true))___				_				dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get()___				_				leaderElectionService1.notLeader()__				leaderElectionService2.isLeader(UUID.randomUUID()).get()___				_				final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class)__				assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty()))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__			}_		}_	};tests,that,a,standby,dispatcher,does,not,interfere,with,the,clean,up,of,a,completed,job;test,public,void,test,standby,dispatcher,job,execution,throws,exception,try,final,testing,high,availability,services,ha,services1,new,testing,high,availability,services,final,testing,high,availability,services,ha,services2,new,testing,high,availability,services,final,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store1,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services1,set,submitted,job,graph,store,submitted,job,graph,store1,final,testing,leader,election,service,leader,election,service1,new,testing,leader,election,service,ha,services1,set,dispatcher,leader,election,service,leader,election,service1,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store2,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services2,set,submitted,job,graph,store,submitted,job,graph,store2,final,testing,leader,election,service,leader,election,service2,new,testing,leader,election,service,ha,services2,set,dispatcher,leader,election,service,leader,election,service2,final,completable,future,job,graph,job,graph,future,new,completable,future,final,completable,future,archived,execution,graph,result,future,new,completable,future,final,testing,dispatcher,dispatcher1,create,dispatcher,ha,services1,new,testing,job,manager,runner,factory,job,graph,future,result,future,final,testing,dispatcher,dispatcher2,create,dispatcher,ha,services2,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,try,dispatcher1,start,dispatcher2,start,leader,election,service1,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway1,dispatcher1,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway1,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway1,request,job,result,job,graph,get,job,id,timeout,job,graph,future,get,result,future,complete,new,archived,execution,graph,builder,set,job,id,job,graph,get,job,id,set,state,job,status,finished,build,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,true,dispatcher1,get,job,termination,future,job,graph,get,job,id,timeout,get,leader,election,service1,not,leader,leader,election,service2,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway2,dispatcher2,get,self,gateway,dispatcher,gateway,class,assert,that,dispatcher,gateway2,list,jobs,timeout,get,is,empty,finally,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobExecution() throws Exception;1536954663;Tests that a standby Dispatcher does not interfere with the clean up of a completed_job.;@Test_	public void testStandbyDispatcherJobExecution() throws Exception {_		try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices()__			final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices()__			final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1)__			final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService()__			haServices1.setDispatcherLeaderElectionService(leaderElectionService1)___			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2)__			final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService()__			haServices2.setDispatcherLeaderElectionService(leaderElectionService2)___			final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>()__			final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>()__			final TestingDispatcher dispatcher1 = createDispatcher(_				haServices1,_				new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture, CompletableFuture.completedFuture(null)))___			final TestingDispatcher dispatcher2 = createDispatcher(_				haServices2,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			try {_				dispatcher1.start()__				dispatcher2.start()___				leaderElectionService1.isLeader(UUID.randomUUID()).get()__				final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class)___				final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph()___				dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get()___				final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT)___				jobGraphFuture.get()___				_				resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build())___				final JobResult jobResult = jobResultFuture.get()___				assertThat(jobResult.isSuccess(), is(true))___				_				dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get()___				_				leaderElectionService1.notLeader()__				leaderElectionService2.isLeader(UUID.randomUUID()).get()___				_				final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class)__				assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty()))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__			}_		}_	};tests,that,a,standby,dispatcher,does,not,interfere,with,the,clean,up,of,a,completed,job;test,public,void,test,standby,dispatcher,job,execution,throws,exception,try,final,testing,high,availability,services,ha,services1,new,testing,high,availability,services,final,testing,high,availability,services,ha,services2,new,testing,high,availability,services,final,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store1,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services1,set,submitted,job,graph,store,submitted,job,graph,store1,final,testing,leader,election,service,leader,election,service1,new,testing,leader,election,service,ha,services1,set,dispatcher,leader,election,service,leader,election,service1,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store2,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services2,set,submitted,job,graph,store,submitted,job,graph,store2,final,testing,leader,election,service,leader,election,service2,new,testing,leader,election,service,ha,services2,set,dispatcher,leader,election,service,leader,election,service2,final,completable,future,job,graph,job,graph,future,new,completable,future,final,completable,future,archived,execution,graph,result,future,new,completable,future,final,testing,dispatcher,dispatcher1,create,dispatcher,ha,services1,new,testing,job,manager,runner,factory,job,graph,future,result,future,completable,future,completed,future,null,final,testing,dispatcher,dispatcher2,create,dispatcher,ha,services2,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,try,dispatcher1,start,dispatcher2,start,leader,election,service1,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway1,dispatcher1,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway1,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway1,request,job,result,job,graph,get,job,id,timeout,job,graph,future,get,result,future,complete,new,archived,execution,graph,builder,set,job,id,job,graph,get,job,id,set,state,job,status,finished,build,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,true,dispatcher1,get,job,termination,future,job,graph,get,job,id,timeout,get,leader,election,service1,not,leader,leader,election,service2,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway2,dispatcher2,get,self,gateway,dispatcher,gateway,class,assert,that,dispatcher,gateway2,list,jobs,timeout,get,is,empty,finally,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobExecution() throws Exception;1548846699;Tests that a standby Dispatcher does not interfere with the clean up of a completed_job.;@Test_	public void testStandbyDispatcherJobExecution() throws Exception {_		try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices()__			final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices()__			final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1)__			final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService()__			haServices1.setDispatcherLeaderElectionService(leaderElectionService1)___			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2)__			final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService()__			haServices2.setDispatcherLeaderElectionService(leaderElectionService2)___			final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>()__			final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>()__			final TestingDispatcher dispatcher1 = createDispatcher(_				haServices1,_				new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture, CompletableFuture.completedFuture(null)))___			final TestingDispatcher dispatcher2 = createDispatcher(_				haServices2,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			try {_				dispatcher1.start()__				dispatcher2.start()___				leaderElectionService1.isLeader(UUID.randomUUID()).get()__				final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class)___				final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph()___				dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get()___				final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT)___				jobGraphFuture.get()___				_				resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build())___				final JobResult jobResult = jobResultFuture.get()___				assertThat(jobResult.isSuccess(), is(true))___				_				dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get()___				_				leaderElectionService1.notLeader()__				leaderElectionService2.isLeader(UUID.randomUUID()).get()___				_				final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class)__				assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty()))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__			}_		}_	};tests,that,a,standby,dispatcher,does,not,interfere,with,the,clean,up,of,a,completed,job;test,public,void,test,standby,dispatcher,job,execution,throws,exception,try,final,testing,high,availability,services,ha,services1,new,testing,high,availability,services,final,testing,high,availability,services,ha,services2,new,testing,high,availability,services,final,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store1,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services1,set,submitted,job,graph,store,submitted,job,graph,store1,final,testing,leader,election,service,leader,election,service1,new,testing,leader,election,service,ha,services1,set,dispatcher,leader,election,service,leader,election,service1,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store2,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services2,set,submitted,job,graph,store,submitted,job,graph,store2,final,testing,leader,election,service,leader,election,service2,new,testing,leader,election,service,ha,services2,set,dispatcher,leader,election,service,leader,election,service2,final,completable,future,job,graph,job,graph,future,new,completable,future,final,completable,future,archived,execution,graph,result,future,new,completable,future,final,testing,dispatcher,dispatcher1,create,dispatcher,ha,services1,new,testing,job,manager,runner,factory,job,graph,future,result,future,completable,future,completed,future,null,final,testing,dispatcher,dispatcher2,create,dispatcher,ha,services2,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,try,dispatcher1,start,dispatcher2,start,leader,election,service1,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway1,dispatcher1,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway1,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway1,request,job,result,job,graph,get,job,id,timeout,job,graph,future,get,result,future,complete,new,archived,execution,graph,builder,set,job,id,job,graph,get,job,id,set,state,job,status,finished,build,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,true,dispatcher1,get,job,termination,future,job,graph,get,job,id,timeout,get,leader,election,service1,not,leader,leader,election,service2,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway2,dispatcher2,get,self,gateway,dispatcher,gateway,class,assert,that,dispatcher,gateway2,list,jobs,timeout,get,is,empty,finally,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobExecution() throws Exception;1549360057;Tests that a standby Dispatcher does not interfere with the clean up of a completed_job.;@Test_	public void testStandbyDispatcherJobExecution() throws Exception {_		try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices()__			final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices()__			final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1)__			final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService()__			haServices1.setDispatcherLeaderElectionService(leaderElectionService1)___			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2)__			final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService()__			haServices2.setDispatcherLeaderElectionService(leaderElectionService2)___			final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>()__			final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>()__			final TestingDispatcher dispatcher1 = createDispatcher(_				haServices1,_				new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture, CompletableFuture.completedFuture(null)))___			final TestingDispatcher dispatcher2 = createDispatcher(_				haServices2,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			try {_				dispatcher1.start()__				dispatcher2.start()___				leaderElectionService1.isLeader(UUID.randomUUID()).get()__				final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class)___				final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph()___				dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get()___				final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT)___				jobGraphFuture.get()___				_				resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build())___				final JobResult jobResult = jobResultFuture.get()___				assertThat(jobResult.isSuccess(), is(true))___				_				dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get()___				_				leaderElectionService1.notLeader()__				leaderElectionService2.isLeader(UUID.randomUUID()).get()___				_				final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class)__				assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty()))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__			}_		}_	};tests,that,a,standby,dispatcher,does,not,interfere,with,the,clean,up,of,a,completed,job;test,public,void,test,standby,dispatcher,job,execution,throws,exception,try,final,testing,high,availability,services,ha,services1,new,testing,high,availability,services,final,testing,high,availability,services,ha,services2,new,testing,high,availability,services,final,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store1,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services1,set,submitted,job,graph,store,submitted,job,graph,store1,final,testing,leader,election,service,leader,election,service1,new,testing,leader,election,service,ha,services1,set,dispatcher,leader,election,service,leader,election,service1,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store2,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services2,set,submitted,job,graph,store,submitted,job,graph,store2,final,testing,leader,election,service,leader,election,service2,new,testing,leader,election,service,ha,services2,set,dispatcher,leader,election,service,leader,election,service2,final,completable,future,job,graph,job,graph,future,new,completable,future,final,completable,future,archived,execution,graph,result,future,new,completable,future,final,testing,dispatcher,dispatcher1,create,dispatcher,ha,services1,new,testing,job,manager,runner,factory,job,graph,future,result,future,completable,future,completed,future,null,final,testing,dispatcher,dispatcher2,create,dispatcher,ha,services2,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,try,dispatcher1,start,dispatcher2,start,leader,election,service1,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway1,dispatcher1,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway1,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway1,request,job,result,job,graph,get,job,id,timeout,job,graph,future,get,result,future,complete,new,archived,execution,graph,builder,set,job,id,job,graph,get,job,id,set,state,job,status,finished,build,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,true,dispatcher1,get,job,termination,future,job,graph,get,job,id,timeout,get,leader,election,service1,not,leader,leader,election,service2,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway2,dispatcher2,get,self,gateway,dispatcher,gateway,class,assert,that,dispatcher,gateway2,list,jobs,timeout,get,is,empty,finally,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobExecution() throws Exception;1550005040;Tests that a standby Dispatcher does not interfere with the clean up of a completed_job.;@Test_	public void testStandbyDispatcherJobExecution() throws Exception {_		try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices()__			final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices()__			final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1)__			final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService()__			haServices1.setDispatcherLeaderElectionService(leaderElectionService1)___			final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration)__			haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2)__			final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService()__			haServices2.setDispatcherLeaderElectionService(leaderElectionService2)___			final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>()__			final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>()__			final TestingDispatcher dispatcher1 = createDispatcher(_				haServices1,_				new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture, CompletableFuture.completedFuture(null)))___			final TestingDispatcher dispatcher2 = createDispatcher(_				haServices2,_				new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___			try {_				dispatcher1.start()__				dispatcher2.start()___				leaderElectionService1.isLeader(UUID.randomUUID()).get()__				final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class)___				final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph()___				dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get()___				final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT)___				jobGraphFuture.get()___				_				resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build())___				final JobResult jobResult = jobResultFuture.get()___				assertThat(jobResult.isSuccess(), is(true))___				_				dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get()___				_				leaderElectionService1.notLeader()__				leaderElectionService2.isLeader(UUID.randomUUID()).get()___				_				final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class)__				assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty()))__			} finally {_				RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__			}_		}_	};tests,that,a,standby,dispatcher,does,not,interfere,with,the,clean,up,of,a,completed,job;test,public,void,test,standby,dispatcher,job,execution,throws,exception,try,final,testing,high,availability,services,ha,services1,new,testing,high,availability,services,final,testing,high,availability,services,ha,services2,new,testing,high,availability,services,final,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store1,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services1,set,submitted,job,graph,store,submitted,job,graph,store1,final,testing,leader,election,service,leader,election,service1,new,testing,leader,election,service,ha,services1,set,dispatcher,leader,election,service,leader,election,service1,final,zoo,keeper,submitted,job,graph,store,submitted,job,graph,store2,zoo,keeper,utils,create,submitted,job,graphs,curator,framework,configuration,ha,services2,set,submitted,job,graph,store,submitted,job,graph,store2,final,testing,leader,election,service,leader,election,service2,new,testing,leader,election,service,ha,services2,set,dispatcher,leader,election,service,leader,election,service2,final,completable,future,job,graph,job,graph,future,new,completable,future,final,completable,future,archived,execution,graph,result,future,new,completable,future,final,testing,dispatcher,dispatcher1,create,dispatcher,ha,services1,new,testing,job,manager,runner,factory,job,graph,future,result,future,completable,future,completed,future,null,final,testing,dispatcher,dispatcher2,create,dispatcher,ha,services2,new,testing,job,manager,runner,factory,new,completable,future,new,completable,future,completable,future,completed,future,null,try,dispatcher1,start,dispatcher2,start,leader,election,service1,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway1,dispatcher1,get,self,gateway,dispatcher,gateway,class,final,job,graph,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway1,submit,job,job,graph,timeout,get,final,completable,future,job,result,job,result,future,dispatcher,gateway1,request,job,result,job,graph,get,job,id,timeout,job,graph,future,get,result,future,complete,new,archived,execution,graph,builder,set,job,id,job,graph,get,job,id,set,state,job,status,finished,build,final,job,result,job,result,job,result,future,get,assert,that,job,result,is,success,is,true,dispatcher1,get,job,termination,future,job,graph,get,job,id,timeout,get,leader,election,service1,not,leader,leader,election,service2,is,leader,uuid,random,uuid,get,final,dispatcher,gateway,dispatcher,gateway2,dispatcher2,get,self,gateway,dispatcher,gateway,class,assert,that,dispatcher,gateway2,list,jobs,timeout,get,is,empty,finally,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobRecovery() throws Exception;1536930103;Tests that a standby {@link Dispatcher} can recover all submitted jobs.;@Test_	public void testStandbyDispatcherJobRecovery() throws Exception {_		try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			HighAvailabilityServices haServices = null__			Dispatcher dispatcher1 = null__			Dispatcher dispatcher2 = null___			try {_				haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore())___				final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>()__				dispatcher1 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>()))__				final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>()__				dispatcher2 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>()))___				dispatcher1.start()__				dispatcher2.start()___				final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT)___				final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get()___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get()___				if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {_					dispatcher1.shutDown()__					assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				} else {_					dispatcher2.shutDown()__					assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				}_			} finally {_				if (dispatcher1 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				}__				if (dispatcher2 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__				}__				if (haServices != null) {_					haServices.close()__				}_			}_		}_	};tests,that,a,standby,link,dispatcher,can,recover,all,submitted,jobs;test,public,void,test,standby,dispatcher,job,recovery,throws,exception,try,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,high,availability,services,ha,services,null,dispatcher,dispatcher1,null,dispatcher,dispatcher2,null,try,ha,services,new,zoo,keeper,ha,services,curator,framework,rpc,service,get,executor,configuration,new,void,blob,store,final,completable,future,job,graph,job,graph,future1,new,completable,future,dispatcher1,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future1,new,completable,future,final,completable,future,job,graph,job,graph,future2,new,completable,future,dispatcher2,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future2,new,completable,future,dispatcher1,start,dispatcher2,start,final,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,ha,services,get,dispatcher,leader,retriever,timeout,final,dispatcher,gateway,dispatcher,gateway,rpc,service,connect,leader,connection,info,get,address,dispatcher,id,from,uuid,leader,connection,info,get,leader,session,id,dispatcher,gateway,class,get,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,get,if,dispatcher1,get,address,equals,leader,connection,info,get,address,dispatcher1,shut,down,assert,that,job,graph,future2,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,else,dispatcher2,shut,down,assert,that,job,graph,future1,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,finally,if,dispatcher1,null,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,if,dispatcher2,null,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout,if,ha,services,null,ha,services,close
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobRecovery() throws Exception;1536954663;Tests that a standby {@link Dispatcher} can recover all submitted jobs.;@Test_	public void testStandbyDispatcherJobRecovery() throws Exception {_		try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			HighAvailabilityServices haServices = null__			Dispatcher dispatcher1 = null__			Dispatcher dispatcher2 = null___			try {_				haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore())___				final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>()__				dispatcher1 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))__				final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>()__				dispatcher2 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___				dispatcher1.start()__				dispatcher2.start()___				final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT)___				final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get()___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get()___				if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {_					dispatcher1.shutDown()__					assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				} else {_					dispatcher2.shutDown()__					assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				}_			} finally {_				if (dispatcher1 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				}__				if (dispatcher2 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__				}__				if (haServices != null) {_					haServices.close()__				}_			}_		}_	};tests,that,a,standby,link,dispatcher,can,recover,all,submitted,jobs;test,public,void,test,standby,dispatcher,job,recovery,throws,exception,try,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,high,availability,services,ha,services,null,dispatcher,dispatcher1,null,dispatcher,dispatcher2,null,try,ha,services,new,zoo,keeper,ha,services,curator,framework,rpc,service,get,executor,configuration,new,void,blob,store,final,completable,future,job,graph,job,graph,future1,new,completable,future,dispatcher1,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future1,new,completable,future,completable,future,completed,future,null,final,completable,future,job,graph,job,graph,future2,new,completable,future,dispatcher2,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future2,new,completable,future,completable,future,completed,future,null,dispatcher1,start,dispatcher2,start,final,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,ha,services,get,dispatcher,leader,retriever,timeout,final,dispatcher,gateway,dispatcher,gateway,rpc,service,connect,leader,connection,info,get,address,dispatcher,id,from,uuid,leader,connection,info,get,leader,session,id,dispatcher,gateway,class,get,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,get,if,dispatcher1,get,address,equals,leader,connection,info,get,address,dispatcher1,shut,down,assert,that,job,graph,future2,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,else,dispatcher2,shut,down,assert,that,job,graph,future1,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,finally,if,dispatcher1,null,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,if,dispatcher2,null,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout,if,ha,services,null,ha,services,close
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobRecovery() throws Exception;1548846699;Tests that a standby {@link Dispatcher} can recover all submitted jobs.;@Test_	public void testStandbyDispatcherJobRecovery() throws Exception {_		try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			HighAvailabilityServices haServices = null__			Dispatcher dispatcher1 = null__			Dispatcher dispatcher2 = null___			try {_				haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore())___				final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>()__				dispatcher1 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))__				final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>()__				dispatcher2 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___				dispatcher1.start()__				dispatcher2.start()___				final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT)___				final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get()___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get()___				if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {_					dispatcher1.shutDown()__					assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				} else {_					dispatcher2.shutDown()__					assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				}_			} finally {_				if (dispatcher1 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				}__				if (dispatcher2 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__				}__				if (haServices != null) {_					haServices.close()__				}_			}_		}_	};tests,that,a,standby,link,dispatcher,can,recover,all,submitted,jobs;test,public,void,test,standby,dispatcher,job,recovery,throws,exception,try,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,high,availability,services,ha,services,null,dispatcher,dispatcher1,null,dispatcher,dispatcher2,null,try,ha,services,new,zoo,keeper,ha,services,curator,framework,rpc,service,get,executor,configuration,new,void,blob,store,final,completable,future,job,graph,job,graph,future1,new,completable,future,dispatcher1,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future1,new,completable,future,completable,future,completed,future,null,final,completable,future,job,graph,job,graph,future2,new,completable,future,dispatcher2,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future2,new,completable,future,completable,future,completed,future,null,dispatcher1,start,dispatcher2,start,final,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,ha,services,get,dispatcher,leader,retriever,timeout,final,dispatcher,gateway,dispatcher,gateway,rpc,service,connect,leader,connection,info,get,address,dispatcher,id,from,uuid,leader,connection,info,get,leader,session,id,dispatcher,gateway,class,get,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,get,if,dispatcher1,get,address,equals,leader,connection,info,get,address,dispatcher1,shut,down,assert,that,job,graph,future2,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,else,dispatcher2,shut,down,assert,that,job,graph,future1,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,finally,if,dispatcher1,null,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,if,dispatcher2,null,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout,if,ha,services,null,ha,services,close
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobRecovery() throws Exception;1549360057;Tests that a standby {@link Dispatcher} can recover all submitted jobs.;@Test_	public void testStandbyDispatcherJobRecovery() throws Exception {_		try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			HighAvailabilityServices haServices = null__			Dispatcher dispatcher1 = null__			Dispatcher dispatcher2 = null___			try {_				haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore())___				final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>()__				dispatcher1 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))__				final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>()__				dispatcher2 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___				dispatcher1.start()__				dispatcher2.start()___				final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT)___				final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get()___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get()___				if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {_					dispatcher1.shutDown()__					assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				} else {_					dispatcher2.shutDown()__					assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				}_			} finally {_				if (dispatcher1 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				}__				if (dispatcher2 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__				}__				if (haServices != null) {_					haServices.close()__				}_			}_		}_	};tests,that,a,standby,link,dispatcher,can,recover,all,submitted,jobs;test,public,void,test,standby,dispatcher,job,recovery,throws,exception,try,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,high,availability,services,ha,services,null,dispatcher,dispatcher1,null,dispatcher,dispatcher2,null,try,ha,services,new,zoo,keeper,ha,services,curator,framework,rpc,service,get,executor,configuration,new,void,blob,store,final,completable,future,job,graph,job,graph,future1,new,completable,future,dispatcher1,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future1,new,completable,future,completable,future,completed,future,null,final,completable,future,job,graph,job,graph,future2,new,completable,future,dispatcher2,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future2,new,completable,future,completable,future,completed,future,null,dispatcher1,start,dispatcher2,start,final,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,ha,services,get,dispatcher,leader,retriever,timeout,final,dispatcher,gateway,dispatcher,gateway,rpc,service,connect,leader,connection,info,get,address,dispatcher,id,from,uuid,leader,connection,info,get,leader,session,id,dispatcher,gateway,class,get,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,get,if,dispatcher1,get,address,equals,leader,connection,info,get,address,dispatcher1,shut,down,assert,that,job,graph,future2,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,else,dispatcher2,shut,down,assert,that,job,graph,future1,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,finally,if,dispatcher1,null,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,if,dispatcher2,null,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout,if,ha,services,null,ha,services,close
ZooKeeperHADispatcherTest -> @Test 	public void testStandbyDispatcherJobRecovery() throws Exception;1550005040;Tests that a standby {@link Dispatcher} can recover all submitted jobs.;@Test_	public void testStandbyDispatcherJobRecovery() throws Exception {_		try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {__			HighAvailabilityServices haServices = null__			Dispatcher dispatcher1 = null__			Dispatcher dispatcher2 = null___			try {_				haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore())___				final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>()__				dispatcher1 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))__				final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>()__				dispatcher2 = createDispatcher(_					haServices,_					new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>(), CompletableFuture.completedFuture(null)))___				dispatcher1.start()__				dispatcher2.start()___				final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT)___				final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get()___				final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph()__				dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get()___				if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {_					dispatcher1.closeAsync()__					assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				} else {_					dispatcher2.closeAsync()__					assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID())))__				}_			} finally {_				if (dispatcher1 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT)__				}__				if (dispatcher2 != null) {_					RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT)__				}__				if (haServices != null) {_					haServices.close()__				}_			}_		}_	};tests,that,a,standby,link,dispatcher,can,recover,all,submitted,jobs;test,public,void,test,standby,dispatcher,job,recovery,throws,exception,try,curator,framework,curator,framework,zoo,keeper,utils,start,curator,framework,configuration,high,availability,services,ha,services,null,dispatcher,dispatcher1,null,dispatcher,dispatcher2,null,try,ha,services,new,zoo,keeper,ha,services,curator,framework,rpc,service,get,executor,configuration,new,void,blob,store,final,completable,future,job,graph,job,graph,future1,new,completable,future,dispatcher1,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future1,new,completable,future,completable,future,completed,future,null,final,completable,future,job,graph,job,graph,future2,new,completable,future,dispatcher2,create,dispatcher,ha,services,new,testing,job,manager,runner,factory,job,graph,future2,new,completable,future,completable,future,completed,future,null,dispatcher1,start,dispatcher2,start,final,leader,connection,info,leader,connection,info,leader,retrieval,utils,retrieve,leader,connection,info,ha,services,get,dispatcher,leader,retriever,timeout,final,dispatcher,gateway,dispatcher,gateway,rpc,service,connect,leader,connection,info,get,address,dispatcher,id,from,uuid,leader,connection,info,get,leader,session,id,dispatcher,gateway,class,get,final,job,graph,non,empty,job,graph,dispatcher,hatest,create,non,empty,job,graph,dispatcher,gateway,submit,job,non,empty,job,graph,timeout,get,if,dispatcher1,get,address,equals,leader,connection,info,get,address,dispatcher1,close,async,assert,that,job,graph,future2,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,else,dispatcher2,close,async,assert,that,job,graph,future1,get,get,job,id,is,equal,to,non,empty,job,graph,get,job,id,finally,if,dispatcher1,null,rpc,utils,terminate,rpc,endpoint,dispatcher1,timeout,if,dispatcher2,null,rpc,utils,terminate,rpc,endpoint,dispatcher2,timeout,if,ha,services,null,ha,services,close
