commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void setupClass() throws IOException {     configuration = new Configuration().     configuration.setString(HighAvailabilityOptions.HA_STORAGE_PATH, TEMPORARY_FOLDER.newFolder().getAbsolutePath()).     rpcService = new TestingRpcService().     blobServer = new BlobServer(configuration, new VoidBlobStore()). }
false;public;0;5;;@Before public void setup() throws Exception {     configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString()).     testingFatalErrorHandler = new TestingFatalErrorHandler(). }
false;public;0;6;;@After public void teardown() throws Exception {     if (testingFatalErrorHandler != null) {         testingFatalErrorHandler.rethrowError().     } }
false;public,static;0;12;;@AfterClass public static void teardownClass() throws Exception {     if (rpcService != null) {         RpcUtils.terminateRpcService(rpcService, TIMEOUT).         rpcService = null.     }     if (blobServer != null) {         blobServer.close().         blobServer = null.     } }
true;public;0;63;/**  * Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it  * lost the leadership.  */ ;/**  * Tests that the {@link Dispatcher} releases a locked {@link SubmittedJobGraph} if it  * lost the leadership.  */ @Test public void testSubmittedJobGraphRelease() throws Exception {     final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration).     final CuratorFramework otherClient = ZooKeeperUtils.startCuratorFramework(configuration).     try (final TestingHighAvailabilityServices testingHighAvailabilityServices = new TestingHighAvailabilityServices()) {         testingHighAvailabilityServices.setSubmittedJobGraphStore(ZooKeeperUtils.createSubmittedJobGraphs(client, configuration)).         final ZooKeeperSubmittedJobGraphStore otherSubmittedJobGraphStore = ZooKeeperUtils.createSubmittedJobGraphs(otherClient, configuration).         otherSubmittedJobGraphStore.start(NoOpSubmittedJobGraphListener.INSTANCE).         final TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService().         testingHighAvailabilityServices.setDispatcherLeaderElectionService(leaderElectionService).         final TestingDispatcher dispatcher = createDispatcher(testingHighAvailabilityServices, new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null))).         dispatcher.start().         try {             final DispatcherId expectedLeaderId = DispatcherId.generate().             leaderElectionService.isLeader(expectedLeaderId.toUUID()).get().             final DispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class).             final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph().             final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).             submissionFuture.get().             Collection<JobID> jobIds = otherSubmittedJobGraphStore.getJobIds().             final JobID jobId = nonEmptyJobGraph.getJobID().             assertThat(jobIds, Matchers.contains(jobId)).             leaderElectionService.notLeader().             // wait for the job to properly terminate             final CompletableFuture<Void> jobTerminationFuture = dispatcher.getJobTerminationFuture(jobId, TIMEOUT).             jobTerminationFuture.get().             // recover the job             final SubmittedJobGraph submittedJobGraph = otherSubmittedJobGraphStore.recoverJobGraph(jobId).             assertThat(submittedJobGraph, is(notNullValue())).             // check that the other submitted job graph store can remove the job graph after the original leader             // has lost its leadership             otherSubmittedJobGraphStore.removeJobGraph(jobId).             jobIds = otherSubmittedJobGraphStore.getJobIds().             assertThat(jobIds, Matchers.not(Matchers.contains(jobId))).         } finally {             RpcUtils.terminateRpcEndpoint(dispatcher, TIMEOUT).             client.close().             otherClient.close().         }     } }
true;public;0;64;/**  * Tests that a standby Dispatcher does not interfere with the clean up of a completed  * job.  */ ;/**  * Tests that a standby Dispatcher does not interfere with the clean up of a completed  * job.  */ @Test public void testStandbyDispatcherJobExecution() throws Exception {     try (final TestingHighAvailabilityServices haServices1 = new TestingHighAvailabilityServices().         final TestingHighAvailabilityServices haServices2 = new TestingHighAvailabilityServices().         final CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {         final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore1 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration).         haServices1.setSubmittedJobGraphStore(submittedJobGraphStore1).         final TestingLeaderElectionService leaderElectionService1 = new TestingLeaderElectionService().         haServices1.setDispatcherLeaderElectionService(leaderElectionService1).         final ZooKeeperSubmittedJobGraphStore submittedJobGraphStore2 = ZooKeeperUtils.createSubmittedJobGraphs(curatorFramework, configuration).         haServices2.setSubmittedJobGraphStore(submittedJobGraphStore2).         final TestingLeaderElectionService leaderElectionService2 = new TestingLeaderElectionService().         haServices2.setDispatcherLeaderElectionService(leaderElectionService2).         final CompletableFuture<JobGraph> jobGraphFuture = new CompletableFuture<>().         final CompletableFuture<ArchivedExecutionGraph> resultFuture = new CompletableFuture<>().         final TestingDispatcher dispatcher1 = createDispatcher(haServices1, new TestingJobManagerRunnerFactory(jobGraphFuture, resultFuture, CompletableFuture.completedFuture(null))).         final TestingDispatcher dispatcher2 = createDispatcher(haServices2, new TestingJobManagerRunnerFactory(new CompletableFuture<>(), new CompletableFuture<>(), CompletableFuture.completedFuture(null))).         try {             dispatcher1.start().             dispatcher2.start().             leaderElectionService1.isLeader(UUID.randomUUID()).get().             final DispatcherGateway dispatcherGateway1 = dispatcher1.getSelfGateway(DispatcherGateway.class).             final JobGraph jobGraph = DispatcherHATest.createNonEmptyJobGraph().             dispatcherGateway1.submitJob(jobGraph, TIMEOUT).get().             final CompletableFuture<JobResult> jobResultFuture = dispatcherGateway1.requestJobResult(jobGraph.getJobID(), TIMEOUT).             jobGraphFuture.get().             // complete the job             resultFuture.complete(new ArchivedExecutionGraphBuilder().setJobID(jobGraph.getJobID()).setState(JobStatus.FINISHED).build()).             final JobResult jobResult = jobResultFuture.get().             assertThat(jobResult.isSuccess(), is(true)).             // wait for the completion of the job             dispatcher1.getJobTerminationFuture(jobGraph.getJobID(), TIMEOUT).get().             // change leadership             leaderElectionService1.notLeader().             leaderElectionService2.isLeader(UUID.randomUUID()).get().             // Dispatcher 2 should not recover any jobs             final DispatcherGateway dispatcherGateway2 = dispatcher2.getSelfGateway(DispatcherGateway.class).             assertThat(dispatcherGateway2.listJobs(TIMEOUT).get(), is(empty())).         } finally {             RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT).             RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT).         }     } }
true;public;0;52;/**  * Tests that a standby {@link Dispatcher} can recover all submitted jobs.  */ ;/**  * Tests that a standby {@link Dispatcher} can recover all submitted jobs.  */ @Test public void testStandbyDispatcherJobRecovery() throws Exception {     try (CuratorFramework curatorFramework = ZooKeeperUtils.startCuratorFramework(configuration)) {         HighAvailabilityServices haServices = null.         Dispatcher dispatcher1 = null.         Dispatcher dispatcher2 = null.         try {             haServices = new ZooKeeperHaServices(curatorFramework, rpcService.getExecutor(), configuration, new VoidBlobStore()).             final CompletableFuture<JobGraph> jobGraphFuture1 = new CompletableFuture<>().             dispatcher1 = createDispatcher(haServices, new TestingJobManagerRunnerFactory(jobGraphFuture1, new CompletableFuture<>(), CompletableFuture.completedFuture(null))).             final CompletableFuture<JobGraph> jobGraphFuture2 = new CompletableFuture<>().             dispatcher2 = createDispatcher(haServices, new TestingJobManagerRunnerFactory(jobGraphFuture2, new CompletableFuture<>(), CompletableFuture.completedFuture(null))).             dispatcher1.start().             dispatcher2.start().             final LeaderConnectionInfo leaderConnectionInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(haServices.getDispatcherLeaderRetriever(), TIMEOUT).             final DispatcherGateway dispatcherGateway = rpcService.connect(leaderConnectionInfo.getAddress(), DispatcherId.fromUuid(leaderConnectionInfo.getLeaderSessionID()), DispatcherGateway.class).get().             final JobGraph nonEmptyJobGraph = DispatcherHATest.createNonEmptyJobGraph().             dispatcherGateway.submitJob(nonEmptyJobGraph, TIMEOUT).get().             if (dispatcher1.getAddress().equals(leaderConnectionInfo.getAddress())) {                 dispatcher1.closeAsync().                 assertThat(jobGraphFuture2.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID()))).             } else {                 dispatcher2.closeAsync().                 assertThat(jobGraphFuture1.get().getJobID(), is(equalTo(nonEmptyJobGraph.getJobID()))).             }         } finally {             if (dispatcher1 != null) {                 RpcUtils.terminateRpcEndpoint(dispatcher1, TIMEOUT).             }             if (dispatcher2 != null) {                 RpcUtils.terminateRpcEndpoint(dispatcher2, TIMEOUT).             }             if (haServices != null) {                 haServices.close().             }         }     } }
false;private;2;17;;@Nonnull private TestingDispatcher createDispatcher(HighAvailabilityServices highAvailabilityServices, JobManagerRunnerFactory jobManagerRunnerFactory) throws Exception {     TestingResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway().     return new TestingDispatcher(rpcService, Dispatcher.DISPATCHER_NAME + '_' + name.getMethodName() + UUID.randomUUID(), configuration, highAvailabilityServices, () -> CompletableFuture.completedFuture(resourceManagerGateway), blobServer, new HeartbeatServices(1000L, 1000L), UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup(), null, new MemoryArchivedExecutionGraphStore(), jobManagerRunnerFactory, testingFatalErrorHandler). }
