commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public LargeObjectType getRandom(Random rnd) {     int len = rnd.nextInt(MAX_LEN - MIN_LEN) + MIN_LEN.     return new LargeObjectType(len). }
false;public;0;4;;@Override public int length() {     return len + 4. }
false;public;1;10;;@Override public void write(DataOutputView out) throws IOException {     out.writeInt(len).     for (int i = 0. i < len / 8. i++) {         out.writeLong(i).     }     for (int i = 0. i < len % 8. i++) {         out.write(i).     } }
false;public;1;17;;@Override public void read(DataInputView in) throws IOException {     final int len = in.readInt().     this.len = len.     for (int i = 0. i < len / 8. i++) {         if (in.readLong() != i) {             throw new IOException("corrupt serialization").         }     }     for (int i = 0. i < len % 8. i++) {         if (in.readByte() != i) {             throw new IOException("corrupt serialization").         }     } }
false;public;0;4;;@Override public int hashCode() {     return len. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return (obj instanceof LargeObjectType) && ((LargeObjectType) obj).len == this.len. }
false;public;0;4;;@Override public String toString() {     return "Large Object " + len. }
