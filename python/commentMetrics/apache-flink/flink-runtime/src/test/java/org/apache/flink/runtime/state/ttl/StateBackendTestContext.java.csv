commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract StateBackend createStateBackend().
false;private;0;9;;private CheckpointStorageLocation createCheckpointStorageLocation() {     try {         return stateBackend.createCheckpointStorage(new JobID()).initializeLocationForCheckpoint(2L).     } catch (IOException e) {         throw new RuntimeException("unexpected").     } }
false;;1;3;;void createAndRestoreKeyedStateBackend(KeyedStateHandle snapshot) {     createAndRestoreKeyedStateBackend(NUMBER_OF_KEY_GROUPS, snapshot). }
false;;2;18;;void createAndRestoreKeyedStateBackend(int numberOfKeyGroups, KeyedStateHandle snapshot) {     Collection<KeyedStateHandle> stateHandles.     if (snapshot == null) {         stateHandles = Collections.emptyList().     } else {         stateHandles = new ArrayList<>(1).         stateHandles.add(snapshot).     }     Environment env = new DummyEnvironment().     try {         disposeKeyedStateBackend().         keyedStateBackend = stateBackend.createKeyedStateBackend(env, new JobID(), "test", StringSerializer.INSTANCE, numberOfKeyGroups, new KeyGroupRange(0, numberOfKeyGroups - 1), env.getTaskKvStateRegistry(), timeProvider, stateHandles).     } catch (Exception e) {         throw new RuntimeException("unexpected", e).     } }
false;;0;8;;void dispose() throws Exception {     disposeKeyedStateBackend().     for (KeyedStateHandle snapshot : snapshots) {         snapshot.discardState().     }     snapshots.clear().     sharedStateRegistry.close(). }
false;private;0;6;;private void disposeKeyedStateBackend() {     if (keyedStateBackend != null) {         keyedStateBackend.dispose().         keyedStateBackend = null.     } }
false;;0;8;;KeyedStateHandle takeSnapshot() throws Exception {     SnapshotResult<KeyedStateHandle> snapshotResult = triggerSnapshot().get().     KeyedStateHandle jobManagerOwnedSnapshot = snapshotResult.getJobManagerOwnedSnapshot().     if (jobManagerOwnedSnapshot != null) {         jobManagerOwnedSnapshot.registerSharedStates(sharedStateRegistry).     }     return jobManagerOwnedSnapshot. }
false;;0;10;;@Nonnull RunnableFuture<SnapshotResult<KeyedStateHandle>> triggerSnapshot() throws Exception {     RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotRunnableFuture = keyedStateBackend.snapshot(682375462392L, 10L, checkpointStorageLocation, CheckpointOptions.forCheckpointWithDefaultLocation()).     if (!snapshotRunnableFuture.isDone()) {         snapshotRunnableFuture.run().     }     return snapshotRunnableFuture. }
false;;1;10;;void restoreSnapshot(@Nullable KeyedStateHandle snapshot) throws Exception {     Collection<KeyedStateHandle> snapshots = new ArrayList<>().     snapshots.add(snapshot).     Collection<KeyedStateHandle> restoreState = snapshot == null ? null : new StateObjectCollection<>(snapshots).     keyedStateBackend.restore(restoreState).     if (snapshot != null) {         snapshots.add(snapshot).     } }
false;public;1;5;;public void setCurrentKey(String key) {     // noinspection resource     Preconditions.checkNotNull(keyedStateBackend, "keyed backend is not initialised").     keyedStateBackend.setCurrentKey(key). }
false;;2;8;;@SuppressWarnings("unchecked") <N, S extends State, V> S createState(StateDescriptor<S, V> stateDescriptor, @SuppressWarnings("SameParameterValue") N defaultNamespace) throws Exception {     S state = keyedStateBackend.getOrCreateKeyedState(StringSerializer.INSTANCE, stateDescriptor).     ((InternalKvState<?, N, ?>) state).setCurrentNamespace(defaultNamespace).     return state. }
false;public;0;4;;@SuppressWarnings("unchecked") public <B extends AbstractKeyedStateBackend> B getKeyedStateBackend() {     return (B) keyedStateBackend. }
