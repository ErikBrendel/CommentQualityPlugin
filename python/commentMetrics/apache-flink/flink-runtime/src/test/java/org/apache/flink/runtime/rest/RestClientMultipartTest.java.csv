commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupClient() throws ConfigurationException {     restClient = new RestClient(RestClientConfiguration.fromConfiguration(new Configuration()), TestingUtils.defaultExecutor()). }
false;public;0;4;;@After public void reset() {     MULTIPART_UPLOAD_RESOURCE.resetState(). }
false;public,static;0;6;;@AfterClass public static void teardownClient() {     if (restClient != null) {         restClient.shutdown(Time.seconds(10)).     } }
false;public;0;18;;@Test public void testMixedMultipart() throws Exception {     Collection<FileUpload> files = MULTIPART_UPLOAD_RESOURCE.getFilesToUpload().stream().map(file -> new FileUpload(file.toPath(), "application/octet-stream")).collect(Collectors.toList()).     MultipartUploadResource.TestRequestBody json = new MultipartUploadResource.TestRequestBody().     CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getHostName(), MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getPort(), MULTIPART_UPLOAD_RESOURCE.getMixedHandler().getMessageHeaders(), EmptyMessageParameters.getInstance(), json, files).     responseFuture.get().     Assert.assertEquals(json, MULTIPART_UPLOAD_RESOURCE.getMixedHandler().lastReceivedRequest). }
false;public;0;15;;@Test public void testJsonMultipart() throws Exception {     MultipartUploadResource.TestRequestBody json = new MultipartUploadResource.TestRequestBody().     CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getHostName(), MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getPort(), MULTIPART_UPLOAD_RESOURCE.getJsonHandler().getMessageHeaders(), EmptyMessageParameters.getInstance(), json, Collections.emptyList()).     responseFuture.get().     Assert.assertEquals(json, MULTIPART_UPLOAD_RESOURCE.getJsonHandler().lastReceivedRequest). }
false;public;0;16;;@Test public void testFileMultipart() throws Exception {     Collection<FileUpload> files = MULTIPART_UPLOAD_RESOURCE.getFilesToUpload().stream().map(file -> new FileUpload(file.toPath(), "application/octet-stream")).collect(Collectors.toList()).     CompletableFuture<EmptyResponseBody> responseFuture = restClient.sendRequest(MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getHostName(), MULTIPART_UPLOAD_RESOURCE.getServerSocketAddress().getPort(), MULTIPART_UPLOAD_RESOURCE.getFileHandler().getMessageHeaders(), EmptyMessageParameters.getInstance(), EmptyRequestBody.getInstance(), files).     responseFuture.get(). }
