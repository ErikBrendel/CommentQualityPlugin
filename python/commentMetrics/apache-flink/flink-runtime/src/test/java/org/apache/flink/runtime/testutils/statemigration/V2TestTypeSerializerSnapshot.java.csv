commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getCurrentVersion() {     return 1. }
false;public;1;17;;@Override public TypeSerializerSchemaCompatibility<TestType> resolveSchemaCompatibility(TypeSerializer<TestType> newSerializer) {     if (newSerializer instanceof TestType.V2TestTypeSerializer) {         return TypeSerializerSchemaCompatibility.compatibleAsIs().     } else if (newSerializer instanceof TestType.ReconfigurationRequiringTestTypeSerializer) {         // we mimic the reconfiguration by just re-instantiating the correct serializer         return TypeSerializerSchemaCompatibility.compatibleWithReconfiguredSerializer(new TestType.V2TestTypeSerializer()).     } else if (// migrating from V2 -> V1 is not supported     newSerializer instanceof TestType.V1TestTypeSerializer || newSerializer instanceof TestType.IncompatibleTestTypeSerializer) {         return TypeSerializerSchemaCompatibility.incompatible().     } else {         throw new IllegalStateException("Unknown serializer class for TestType.").     } }
false;public;0;4;;@Override public TypeSerializer<TestType> restoreSerializer() {     return new TestType.V2TestTypeSerializer(). }
false;public;1;3;;@Override public void writeSnapshot(DataOutputView out) throws IOException { }
false;public;3;3;;@Override public void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException { }
