# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1489479789;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final DeleteBuilder deleteBuilderMock = mock(DeleteBuilder.class)__		final BackgroundVersionable backgroundVersionableMock = mock(BackgroundVersionable.class)___		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)__		when(client.delete()).thenReturn(deleteBuilderMock)__		when(deleteBuilderMock.deletingChildrenIfNeeded()).thenReturn(backgroundVersionableMock)__		when(backgroundVersionableMock.inBackground(any(BackgroundCallback.class), any(Executor.class))).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__				when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__				when(curatorEventMock.getResultCode()).thenReturn(0)___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,delete,builder,delete,builder,mock,mock,delete,builder,class,final,background,versionable,background,versionable,mock,mock,background,versionable,class,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,then,return,delete,builder,mock,when,delete,builder,mock,deleting,children,if,needed,then,return,background,versionable,mock,when,background,versionable,mock,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1489565226;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1490012491;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1492867556;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		zooKeeperCompletedCheckpointStore.recover(sharedStateRegistry)___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,shared,state,registry,shared,state,registry,new,shared,state,registry,zoo,keeper,completed,checkpoint,store,recover,shared,state,registry,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1492867556;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1493403095;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<Pathable<Void>>() {_			@Override_			public Pathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				Pathable<Void> result = mock(Pathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,pathable,void,override,public,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,pathable,void,result,mock,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1493831843;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByName()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.deletingChildrenIfNeeded()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,deleting,children,if,needed,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1495184252;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1495287945;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new Exception("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		zooKeeperCompletedCheckpointStore.recover(sharedStateRegistry)___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,exception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,shared,state,registry,shared,state,registry,new,shared,state,registry,zoo,keeper,completed,checkpoint,store,recover,shared,state,registry,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1495563868;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		zooKeeperCompletedCheckpointStore.recover(sharedStateRegistry)___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,shared,state,registry,shared,state,registry,new,shared,state,registry,zoo,keeper,completed,checkpoint,store,recover,shared,state,registry,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1500040329;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		SharedStateRegistry sharedStateRegistry = spy(new SharedStateRegistry())__		zooKeeperCompletedCheckpointStore.recover(sharedStateRegistry)___		verify(retrievableStateHandle1.retrieveState(), times(1)).registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(retrievableStateHandle2.retrieveState(), times(1)).registerSharedStatesAfterRestored(sharedStateRegistry)___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,shared,state,registry,shared,state,registry,spy,new,shared,state,registry,zoo,keeper,completed,checkpoint,store,recover,shared,state,registry,verify,retrievable,state,handle1,retrieve,state,times,1,register,shared,states,after,restored,shared,state,registry,verify,retrievable,state,handle2,retrieve,state,times,1,register,shared,states,after,restored,shared,state,registry,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1502801814;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint1.getCheckpointID()).thenReturn(1L)__		final CompletedCheckpoint completedCheckpoint2 = mock(CompletedCheckpoint.class)__		when(completedCheckpoint2.getCheckpointID()).thenReturn(2L)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		verify(failingRetrievableStateHandle, times(2)).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,mock,completed,checkpoint,class,when,completed,checkpoint1,get,checkpoint,id,then,return,1l,final,completed,checkpoint,completed,checkpoint2,mock,completed,checkpoint,class,when,completed,checkpoint2,get,checkpoint,id,then,return,2l,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,times,2,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1508847658;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = new CompletedCheckpoint(_			new JobID(),_			1L,_			1L,_			1L,_			new HashMap<>(),_			null,_			CheckpointProperties.forStandardCheckpoint(),_			null, null)___		final CompletedCheckpoint completedCheckpoint2 = new CompletedCheckpoint(_			new JobID(),_			2L,_			2L,_			2L,_			new HashMap<>(),_			null,_			CheckpointProperties.forStandardCheckpoint(),_			null, null)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		_		verify(failingRetrievableStateHandle, never()).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,new,completed,checkpoint,new,job,id,1l,1l,1l,new,hash,map,null,checkpoint,properties,for,standard,checkpoint,null,null,final,completed,checkpoint,completed,checkpoint2,new,completed,checkpoint,new,job,id,2l,2l,2l,new,hash,map,null,checkpoint,properties,for,standard,checkpoint,null,null,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,never,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1516295283;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = new CompletedCheckpoint(_			new JobID(),_			1L,_			1L,_			1L,_			new HashMap<>(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_				"<pointer>")___		final CompletedCheckpoint completedCheckpoint2 = new CompletedCheckpoint(_			new JobID(),_			2L,_			2L,_			2L,_			new HashMap<>(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_			"<pointer")___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		_		verify(failingRetrievableStateHandle, never()).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,new,completed,checkpoint,new,job,id,1l,1l,1l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,final,completed,checkpoint,completed,checkpoint2,new,completed,checkpoint,new,job,id,2l,2l,2l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,never,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testCheckpointRecovery() throws Exception;1517489696;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.;@Test_	public void testCheckpointRecovery() throws Exception {_		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final CompletedCheckpoint completedCheckpoint1 = new CompletedCheckpoint(_			new JobID(),_			1L,_			1L,_			1L,_			new HashMap<>(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		final CompletedCheckpoint completedCheckpoint2 = new CompletedCheckpoint(_			new JobID(),_			2L,_			2L,_			2L,_			new HashMap<>(),_			null,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).thenReturn(completedCheckpoint1)___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).thenReturn(completedCheckpoint2)___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(completedCheckpoint2.getCheckpointID(), latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		_		verify(failingRetrievableStateHandle, never()).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles;test,public,void,test,checkpoint,recovery,throws,exception,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,completed,checkpoint,completed,checkpoint1,new,completed,checkpoint,new,job,id,1l,1l,1l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,final,completed,checkpoint,completed,checkpoint2,new,completed,checkpoint,new,job,id,2l,2l,2l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,return,completed,checkpoint1,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,return,completed,checkpoint2,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,completed,checkpoint2,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,never,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingSubsumedCheckpoints() throws Exception;1536763178;Tests that subsumed checkpoints are discarded.;@Test_	public void testDiscardingSubsumedCheckpoints() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint2 = CompletedCheckpointStoreTest.createCheckpoint(1, sharedStateRegistry)__			checkpointStore.addCheckpoint(checkpoint2)__			final List<CompletedCheckpoint> allCheckpoints = checkpointStore.getAllCheckpoints()__			assertThat(allCheckpoints, Matchers.contains(checkpoint2))__			assertThat(allCheckpoints, Matchers.not(Matchers.contains(checkpoint1)))___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,subsumed,checkpoints,are,discarded;test,public,void,test,discarding,subsumed,checkpoints,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint2,completed,checkpoint,store,test,create,checkpoint,1,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint2,final,list,completed,checkpoint,all,checkpoints,checkpoint,store,get,all,checkpoints,assert,that,all,checkpoints,matchers,contains,checkpoint2,assert,that,all,checkpoints,matchers,not,matchers,contains,checkpoint1,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingSubsumedCheckpoints() throws Exception;1536930104;Tests that subsumed checkpoints are discarded.;@Test_	public void testDiscardingSubsumedCheckpoints() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint2 = CompletedCheckpointStoreTest.createCheckpoint(1, sharedStateRegistry)__			checkpointStore.addCheckpoint(checkpoint2)__			final List<CompletedCheckpoint> allCheckpoints = checkpointStore.getAllCheckpoints()__			assertThat(allCheckpoints, Matchers.contains(checkpoint2))__			assertThat(allCheckpoints, Matchers.not(Matchers.contains(checkpoint1)))___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,subsumed,checkpoints,are,discarded;test,public,void,test,discarding,subsumed,checkpoints,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint2,completed,checkpoint,store,test,create,checkpoint,1,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint2,final,list,completed,checkpoint,all,checkpoints,checkpoint,store,get,all,checkpoints,assert,that,all,checkpoints,matchers,contains,checkpoint2,assert,that,all,checkpoints,matchers,not,matchers,contains,checkpoint1,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingSubsumedCheckpoints() throws Exception;1547547304;Tests that subsumed checkpoints are discarded.;@Test_	public void testDiscardingSubsumedCheckpoints() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint2 = CompletedCheckpointStoreTest.createCheckpoint(1, sharedStateRegistry)__			checkpointStore.addCheckpoint(checkpoint2)__			final List<CompletedCheckpoint> allCheckpoints = checkpointStore.getAllCheckpoints()__			assertThat(allCheckpoints, Matchers.contains(checkpoint2))__			assertThat(allCheckpoints, Matchers.not(Matchers.contains(checkpoint1)))___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,subsumed,checkpoints,are,discarded;test,public,void,test,discarding,subsumed,checkpoints,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint2,completed,checkpoint,store,test,create,checkpoint,1,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint2,final,list,completed,checkpoint,all,checkpoints,checkpoint,store,get,all,checkpoints,assert,that,all,checkpoints,matchers,contains,checkpoint2,assert,that,all,checkpoints,matchers,not,matchers,contains,checkpoint1,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1490012491;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).add(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).remove(anyString(), any(BackgroundCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())__		_		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,remove,any,string,any,background,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1492867556;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).add(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).remove(anyString(), any(BackgroundCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		_		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getTaskStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd, sharedStateRegistry)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,remove,any,string,any,background,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,shared,state,registry,shared,state,registry,new,shared,state,registry,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,task,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,shared,state,registry,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1492867556;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).add(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).remove(anyString(), any(BackgroundCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getTaskStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,remove,any,string,any,background,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,task,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1493403095;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).add(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).remove(anyString(), any(BackgroundCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,remove,any,string,any,background,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1493831843;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).add(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).remove(anyString(), any(BackgroundCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,remove,any,string,any,background,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1495184252;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1495287945;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1495563868;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1500040329;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1502801814;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1508847658;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1516295283;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1517489696;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1520261440;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock = _			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)__		_		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint)invocationOnMock.getArguments()[1]__				_				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)__				_				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))__		_		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))__		_		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)__		_		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			_			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1520261440;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock =_			spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock)___		doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>() {_			@Override_			public RetrievableStateHandle<CompletedCheckpoint> answer(InvocationOnMock invocationOnMock) throws Throwable {_				CompletedCheckpoint checkpoint = (CompletedCheckpoint) invocationOnMock.getArguments()[1]___				RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle = mock(RetrievableStateHandle.class)__				when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint)___				return retrievableStateHandle__			}_		}).when(zookeeperStateHandleStoreMock).addAndLock(anyString(), any(CompletedCheckpoint.class))___		doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString(), any(ZooKeeperStateHandleStore.RemoveCallback.class))___		final int numCheckpointsToRetain = 1__		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateSotrage,_			Executors.directExecutor())___		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()___			try {_				zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd)___				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zookeeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zookeeper,state,handle,store,mock,do,answer,new,answer,retrievable,state,handle,completed,checkpoint,override,public,retrievable,state,handle,completed,checkpoint,answer,invocation,on,mock,invocation,on,mock,throws,throwable,completed,checkpoint,checkpoint,completed,checkpoint,invocation,on,mock,get,arguments,1,retrievable,state,handle,completed,checkpoint,retrievable,state,handle,mock,retrievable,state,handle,class,when,retrievable,state,handle,retrieve,state,then,return,checkpoint,return,retrievable,state,handle,when,zookeeper,state,handle,store,mock,add,and,lock,any,string,any,completed,checkpoint,class,do,throw,new,exception,when,zookeeper,state,handle,store,mock,release,and,try,remove,any,string,any,zoo,keeper,state,handle,store,remove,callback,class,final,int,num,checkpoints,to,retain,1,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,sotrage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,sotrage,executors,direct,executor,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,try,zoo,keeper,completed,checkpoint,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingCheckpointsAtShutDown() throws Exception;1536763178;Tests that checkpoints are discarded when the completed checkpoint store is shut_down with a globally terminal state.;@Test_	public void testDiscardingCheckpointsAtShutDown() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			checkpointStore.shutdown(JobStatus.FINISHED)___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,checkpoints,are,discarded,when,the,completed,checkpoint,store,is,shut,down,with,a,globally,terminal,state;test,public,void,test,discarding,checkpoints,at,shut,down,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,checkpoint,store,shutdown,job,status,finished,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingCheckpointsAtShutDown() throws Exception;1536930104;Tests that checkpoints are discarded when the completed checkpoint store is shut_down with a globally terminal state.;@Test_	public void testDiscardingCheckpointsAtShutDown() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			checkpointStore.shutdown(JobStatus.FINISHED)___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,checkpoints,are,discarded,when,the,completed,checkpoint,store,is,shut,down,with,a,globally,terminal,state;test,public,void,test,discarding,checkpoints,at,shut,down,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,checkpoint,store,shutdown,job,status,finished,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test 	public void testDiscardingCheckpointsAtShutDown() throws Exception;1547547304;Tests that checkpoints are discarded when the completed checkpoint store is shut_down with a globally terminal state.;@Test_	public void testDiscardingCheckpointsAtShutDown() throws Exception {_		final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		final Configuration configuration = new Configuration()__		configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString())___		final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration)__		final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client)___		try {_			final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry)___			checkpointStore.addCheckpoint(checkpoint1)__			assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1))___			checkpointStore.shutdown(JobStatus.FINISHED)___			_			CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1)__		} finally {_			client.close()__		}_	};tests,that,checkpoints,are,discarded,when,the,completed,checkpoint,store,is,shut,down,with,a,globally,terminal,state;test,public,void,test,discarding,checkpoints,at,shut,down,throws,exception,final,shared,state,registry,shared,state,registry,new,shared,state,registry,final,configuration,configuration,new,configuration,configuration,set,string,high,availability,options,zoo,keeper,resource,get,connect,string,final,curator,framework,client,zoo,keeper,utils,start,curator,framework,configuration,final,zoo,keeper,completed,checkpoint,store,checkpoint,store,create,zoo,keeper,checkpoint,store,client,try,final,completed,checkpoint,store,test,test,completed,checkpoint,checkpoint1,completed,checkpoint,store,test,create,checkpoint,0,shared,state,registry,checkpoint,store,add,checkpoint,checkpoint1,assert,that,checkpoint,store,get,all,checkpoints,matchers,contains,checkpoint1,checkpoint,store,shutdown,job,status,finished,completed,checkpoint,store,test,verify,checkpoint,discarded,checkpoint1,finally,client,close
ZooKeeperCompletedCheckpointStoreTest -> @Test(timeout = 50000) 	public void testCheckpointRecovery() throws Exception;1520261440;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.__<p>We have a timeout in case the ZooKeeper store get's into a deadlock/livelock situation.;@Test(timeout = 50000)_	public void testCheckpointRecovery() throws Exception {_		final JobID jobID = new JobID()__		final long checkpoint1Id = 1L__		final long checkpoint2Id = 2__		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).then(_			(invocation) -> new CompletedCheckpoint(_				jobID,_				checkpoint1Id,_				1L,_				1L,_				new HashMap<>(),_				null,_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new TestCompletedCheckpointStorageLocation()))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).then(_			(invocation -> new CompletedCheckpoint(_				jobID,_				checkpoint2Id,_				2L,_				2L,_				new HashMap<>(),_				null,_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new TestCompletedCheckpointStorageLocation())))___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(checkpoint2Id, latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		_		verify(failingRetrievableStateHandle, never()).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles,p,we,have,a,timeout,in,case,the,zoo,keeper,store,get,s,into,a,deadlock,livelock,situation;test,timeout,50000,public,void,test,checkpoint,recovery,throws,exception,final,job,id,job,id,new,job,id,final,long,checkpoint1id,1l,final,long,checkpoint2id,2,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,invocation,new,completed,checkpoint,job,id,checkpoint1id,1l,1l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,invocation,new,completed,checkpoint,job,id,checkpoint2id,2l,2l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoint2id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,never,discard,state
ZooKeeperCompletedCheckpointStoreTest -> @Test(timeout = 50000) 	public void testCheckpointRecovery() throws Exception;1520261440;Tests that the completed checkpoint store can retrieve all checkpoints stored in ZooKeeper_and ignores those which cannot be retrieved via their state handles.__<p>We have a timeout in case the ZooKeeper store get's into a deadlock/livelock situation.;@Test(timeout = 50000)_	public void testCheckpointRecovery() throws Exception {_		final JobID jobID = new JobID()__		final long checkpoint1Id = 1L__		final long checkpoint2Id = 2__		final List<Tuple2<RetrievableStateHandle<CompletedCheckpoint>, String>> checkpointsInZooKeeper = new ArrayList<>(4)___		final Collection<Long> expectedCheckpointIds = new HashSet<>(2)__		expectedCheckpointIds.add(1L)__		expectedCheckpointIds.add(2L)___		final RetrievableStateHandle<CompletedCheckpoint> failingRetrievableStateHandle = mock(RetrievableStateHandle.class)__		when(failingRetrievableStateHandle.retrieveState()).thenThrow(new IOException("Test exception"))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle1 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle1.retrieveState()).then(_			(invocation) -> new CompletedCheckpoint(_				jobID,_				checkpoint1Id,_				1L,_				1L,_				new HashMap<>(),_				null,_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new TestCompletedCheckpointStorageLocation()))___		final RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle2 = mock(RetrievableStateHandle.class)__		when(retrievableStateHandle2.retrieveState()).then(_			(invocation -> new CompletedCheckpoint(_				jobID,_				checkpoint2Id,_				2L,_				2L,_				new HashMap<>(),_				null,_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new TestCompletedCheckpointStorageLocation())))___		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle1, "/foobar1"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing1"))__		checkpointsInZooKeeper.add(Tuple2.of(retrievableStateHandle2, "/foobar2"))__		checkpointsInZooKeeper.add(Tuple2.of(failingRetrievableStateHandle, "/failing2"))___		final CuratorFramework client = mock(CuratorFramework.class, Mockito.RETURNS_DEEP_STUBS)__		final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock = mock(RetrievableStateStorageHelper.class)___		ZooKeeperStateHandleStore<CompletedCheckpoint> zooKeeperStateHandleStoreMock = spy(new ZooKeeperStateHandleStore<>(client, storageHelperMock, Executors.directExecutor()))__		whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zooKeeperStateHandleStoreMock)__		doReturn(checkpointsInZooKeeper).when(zooKeeperStateHandleStoreMock).getAllSortedByNameAndLock()___		final int numCheckpointsToRetain = 1___		_		__		final EnsurePath ensurePathMock = mock(EnsurePath.class)__		final CuratorEvent curatorEventMock = mock(CuratorEvent.class)__		when(curatorEventMock.getType()).thenReturn(CuratorEventType.DELETE)__		when(curatorEventMock.getResultCode()).thenReturn(0)__		when(client.newNamespaceAwareEnsurePath(anyString())).thenReturn(ensurePathMock)___		when(_			client_				.delete()_				.inBackground(any(BackgroundCallback.class), any(Executor.class))_		).thenAnswer(new Answer<ErrorListenerPathable<Void>>() {_			@Override_			public ErrorListenerPathable<Void> answer(InvocationOnMock invocation) throws Throwable {_				final BackgroundCallback callback = (BackgroundCallback) invocation.getArguments()[0]___				ErrorListenerPathable<Void> result = mock(ErrorListenerPathable.class)___				when(result.forPath(anyString())).thenAnswer(new Answer<Void>() {_					@Override_					public Void answer(InvocationOnMock invocation) throws Throwable {__						callback.processResult(client, curatorEventMock)___						return null__					}_				})___				return result__			}_		})___		final String checkpointsPath = "foobar"__		final RetrievableStateStorageHelper<CompletedCheckpoint> stateStorage = mock(RetrievableStateStorageHelper.class)___		ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore = new ZooKeeperCompletedCheckpointStore(_			numCheckpointsToRetain,_			client,_			checkpointsPath,_			stateStorage,_			Executors.directExecutor())___		zooKeeperCompletedCheckpointStore.recover()___		CompletedCheckpoint latestCompletedCheckpoint = zooKeeperCompletedCheckpointStore.getLatestCheckpoint()___		_		_		assertEquals(checkpoint2Id, latestCompletedCheckpoint.getCheckpointID())___		_		List<CompletedCheckpoint> completedCheckpoints = zooKeeperCompletedCheckpointStore.getAllCheckpoints()___		Collection<Long> actualCheckpointIds = new HashSet<>(completedCheckpoints.size())___		for (CompletedCheckpoint completedCheckpoint : completedCheckpoints) {_			actualCheckpointIds.add(completedCheckpoint.getCheckpointID())__		}__		assertEquals(expectedCheckpointIds, actualCheckpointIds)___		_		verify(retrievableStateHandle1, never()).discardState()__		verify(retrievableStateHandle2, never()).discardState()___		_		_		verify(failingRetrievableStateHandle, never()).discardState()__	};tests,that,the,completed,checkpoint,store,can,retrieve,all,checkpoints,stored,in,zoo,keeper,and,ignores,those,which,cannot,be,retrieved,via,their,state,handles,p,we,have,a,timeout,in,case,the,zoo,keeper,store,get,s,into,a,deadlock,livelock,situation;test,timeout,50000,public,void,test,checkpoint,recovery,throws,exception,final,job,id,job,id,new,job,id,final,long,checkpoint1id,1l,final,long,checkpoint2id,2,final,list,tuple2,retrievable,state,handle,completed,checkpoint,string,checkpoints,in,zoo,keeper,new,array,list,4,final,collection,long,expected,checkpoint,ids,new,hash,set,2,expected,checkpoint,ids,add,1l,expected,checkpoint,ids,add,2l,final,retrievable,state,handle,completed,checkpoint,failing,retrievable,state,handle,mock,retrievable,state,handle,class,when,failing,retrievable,state,handle,retrieve,state,then,throw,new,ioexception,test,exception,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle1,mock,retrievable,state,handle,class,when,retrievable,state,handle1,retrieve,state,then,invocation,new,completed,checkpoint,job,id,checkpoint1id,1l,1l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,final,retrievable,state,handle,completed,checkpoint,retrievable,state,handle2,mock,retrievable,state,handle,class,when,retrievable,state,handle2,retrieve,state,then,invocation,new,completed,checkpoint,job,id,checkpoint2id,2l,2l,new,hash,map,null,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle1,foobar1,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing1,checkpoints,in,zoo,keeper,add,tuple2,of,retrievable,state,handle2,foobar2,checkpoints,in,zoo,keeper,add,tuple2,of,failing,retrievable,state,handle,failing2,final,curator,framework,client,mock,curator,framework,class,mockito,final,retrievable,state,storage,helper,completed,checkpoint,storage,helper,mock,mock,retrievable,state,storage,helper,class,zoo,keeper,state,handle,store,completed,checkpoint,zoo,keeper,state,handle,store,mock,spy,new,zoo,keeper,state,handle,store,client,storage,helper,mock,executors,direct,executor,when,new,zoo,keeper,state,handle,store,class,with,any,arguments,then,return,zoo,keeper,state,handle,store,mock,do,return,checkpoints,in,zoo,keeper,when,zoo,keeper,state,handle,store,mock,get,all,sorted,by,name,and,lock,final,int,num,checkpoints,to,retain,1,final,ensure,path,ensure,path,mock,mock,ensure,path,class,final,curator,event,curator,event,mock,mock,curator,event,class,when,curator,event,mock,get,type,then,return,curator,event,type,delete,when,curator,event,mock,get,result,code,then,return,0,when,client,new,namespace,aware,ensure,path,any,string,then,return,ensure,path,mock,when,client,delete,in,background,any,background,callback,class,any,executor,class,then,answer,new,answer,error,listener,pathable,void,override,public,error,listener,pathable,void,answer,invocation,on,mock,invocation,throws,throwable,final,background,callback,callback,background,callback,invocation,get,arguments,0,error,listener,pathable,void,result,mock,error,listener,pathable,class,when,result,for,path,any,string,then,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,callback,process,result,client,curator,event,mock,return,null,return,result,final,string,checkpoints,path,foobar,final,retrievable,state,storage,helper,completed,checkpoint,state,storage,mock,retrievable,state,storage,helper,class,zoo,keeper,completed,checkpoint,store,zoo,keeper,completed,checkpoint,store,new,zoo,keeper,completed,checkpoint,store,num,checkpoints,to,retain,client,checkpoints,path,state,storage,executors,direct,executor,zoo,keeper,completed,checkpoint,store,recover,completed,checkpoint,latest,completed,checkpoint,zoo,keeper,completed,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoint2id,latest,completed,checkpoint,get,checkpoint,id,list,completed,checkpoint,completed,checkpoints,zoo,keeper,completed,checkpoint,store,get,all,checkpoints,collection,long,actual,checkpoint,ids,new,hash,set,completed,checkpoints,size,for,completed,checkpoint,completed,checkpoint,completed,checkpoints,actual,checkpoint,ids,add,completed,checkpoint,get,checkpoint,id,assert,equals,expected,checkpoint,ids,actual,checkpoint,ids,verify,retrievable,state,handle1,never,discard,state,verify,retrievable,state,handle2,never,discard,state,verify,failing,retrievable,state,handle,never,discard,state
