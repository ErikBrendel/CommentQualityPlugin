commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testPathConversion() {     final long checkpointId = 42L.     final String path = ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpointId).     assertEquals(checkpointId, ZooKeeperCompletedCheckpointStore.pathToCheckpointId(path)). }
true;public;0;27;/**  * Tests that subsumed checkpoints are discarded.  */ ;/**  * Tests that subsumed checkpoints are discarded.  */ @Test public void testDiscardingSubsumedCheckpoints() throws Exception {     final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     final Configuration configuration = new Configuration().     configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString()).     final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration).     final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client).     try {         final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry).         checkpointStore.addCheckpoint(checkpoint1).         assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1)).         final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint2 = CompletedCheckpointStoreTest.createCheckpoint(1, sharedStateRegistry).         checkpointStore.addCheckpoint(checkpoint2).         final List<CompletedCheckpoint> allCheckpoints = checkpointStore.getAllCheckpoints().         assertThat(allCheckpoints, Matchers.contains(checkpoint2)).         assertThat(allCheckpoints, Matchers.not(Matchers.contains(checkpoint1))).         // verify that the subsumed checkpoint is discarded         CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1).     } finally {         client.close().     } }
true;public;0;23;/**  * Tests that checkpoints are discarded when the completed checkpoint store is shut  * down with a globally terminal state.  */ ;/**  * Tests that checkpoints are discarded when the completed checkpoint store is shut  * down with a globally terminal state.  */ @Test public void testDiscardingCheckpointsAtShutDown() throws Exception {     final SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     final Configuration configuration = new Configuration().     configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperResource.getConnectString()).     final CuratorFramework client = ZooKeeperUtils.startCuratorFramework(configuration).     final ZooKeeperCompletedCheckpointStore checkpointStore = createZooKeeperCheckpointStore(client).     try {         final CompletedCheckpointStoreTest.TestCompletedCheckpoint checkpoint1 = CompletedCheckpointStoreTest.createCheckpoint(0, sharedStateRegistry).         checkpointStore.addCheckpoint(checkpoint1).         assertThat(checkpointStore.getAllCheckpoints(), Matchers.contains(checkpoint1)).         checkpointStore.shutdown(JobStatus.FINISHED).         // verify that the checkpoint is discarded         CompletedCheckpointStoreTest.verifyCheckpointDiscarded(checkpoint1).     } finally {         client.close().     } }
false;private;1;12;;@Nonnull private ZooKeeperCompletedCheckpointStore createZooKeeperCheckpointStore(CuratorFramework client) throws Exception {     final ZooKeeperStateHandleStore<CompletedCheckpoint> checkpointsInZooKeeper = ZooKeeperUtils.createZooKeeperStateHandleStore(client, "/checkpoints", new TestingRetrievableStateStorageHelper<>()).     return new ZooKeeperCompletedCheckpointStore(1, checkpointsInZooKeeper, Executors.directExecutor()). }
