# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1493831843;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1499173456;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1509631297;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1513201070;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1513261599;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1516812618;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1519317157;Going into SUSPENDING out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1549365080;Going into SUSPENDING out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1550683187;Going into SUSPENDING out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1550683188;Going into SUSPENDING out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1550683188;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfDeploying() throws Exception;1550683188;Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfDeploying() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.DEPLOYING)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,deploying,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,deploying,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,deploying,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1493831843;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1499173456;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1509631297;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1513201070;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1513261599;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1516812618;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1519317157;Suspending from FAILING goes to SUSPENDING and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1549365080;Suspending from FAILING goes to SUSPENDING and sends no additional RPC calls;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1550683187;Suspending from FAILING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1550683188;Suspending from FAILING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1550683188;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailing() throws Exception;1550683188;Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfFailing() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,failing,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,failing,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1493831843;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1499173456;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause().getException())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause,get,exception
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1509631297;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause().getException())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause,get,exception
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1513201070;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause().getException())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause,get,exception
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1513261599;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause().getException())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause,get,exception
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1516812618;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1519317157;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1549365080;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550683187;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550683188;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550683188;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550683188;Tests that we can suspend a job when in state RESTARTING.;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10))__		eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())__		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("test"))__		assertEquals(JobStatus.FAILING, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.RESTARTING, eg.getState())___		final Exception exception = new Exception("Suspended")___		eg.suspend(exception)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		assertEquals(exception, eg.getFailureCause())__	};tests,that,we,can,suspend,a,job,when,in,state,restarting;test,public,void,test,suspend,while,restarting,throws,exception,final,execution,graph,eg,execution,graph,test,utils,create,simple,test,graph,new,infinite,delay,restart,strategy,10,eg,start,testing,component,main,thread,executor,service,adapter,for,main,thread,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,test,assert,equals,job,status,failing,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,restarting,eg,get,state,final,exception,exception,new,exception,suspended,eg,suspend,exception,assert,equals,job,status,suspended,eg,get,state,assert,equals,exception,eg,get,failure,cause
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1493831843;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1499173456;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1509631297;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1513201070;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1513261599;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1516812618;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1519317157;Going into SUSPENDING out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1549365080;Going into SUSPENDING out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1550683187;Going into SUSPENDING out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1550683188;Going into SUSPENDING out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1550683188;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCreated() throws Exception;1550683188;Going into SUSPENDED out of CREATED should immediately cancel everything and_not send out RPC calls.;@Test_	public void testSuspendedOutOfCreated() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		assertEquals(JobStatus.CREATED, eg.getState())___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELED)__		validateCancelRpcCalls(gateway, 0)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,created,should,immediately,cancel,everything,and,not,send,out,rpc,calls;test,public,void,test,suspended,out,of,created,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,assert,equals,job,status,created,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceled,validate,cancel,rpc,calls,gateway,0,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1493831843;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1499173456;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1509631297;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1513201070;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1513261599;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1516812618;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.CANCELING)__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1519317157;Going into SUSPENDING out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)___		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1549365080;Going into SUSPENDING out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)___		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1550683187;Going into SUSPENDING out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)___		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1550683188;Going into SUSPENDING out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		__		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDING, eg.getState())___		validateAllVerticesInState(eg, ExecutionState.CANCELING)___		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspending,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,validate,all,vertices,in,state,eg,execution,state,canceling,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1550683188;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfRunning() throws Exception;1550683188;Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.;@Test_	public void testSuspendedOutOfRunning() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		assertEquals(JobStatus.RUNNING, eg.getState())__		validateAllVerticesInState(eg, ExecutionState.RUNNING)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};going,into,suspended,out,of,running,vertices,should,cancel,all,vertices,once,with,rpc,calls;test,public,void,test,suspended,out,of,running,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,assert,equals,job,status,running,eg,get,state,validate,all,vertices,in,state,eg,execution,state,running,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1493831843;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1499173456;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1509631297;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1513201070;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1513261599;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1516812618;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1519317157;Suspending from CANCELING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1549365080;Suspending from CANCELING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1550683187;Suspending from CANCELING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1550683188;Suspending from CANCELING goes to SUSPENDING and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))__		assertEquals(JobStatus.SUSPENDING, eg.getState())___		ensureCannotLeaveSuspendingState(eg, gateway)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspending,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspending,eg,get,state,ensure,cannot,leave,suspending,state,eg,gateway,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1550683188;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceling() throws Exception;1550683188;Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.;@Test_	public void testSuspendedOutOfCanceling() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		_		eg.suspend(new Exception("suspend"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		ensureCannotLeaveSuspendedState(eg, gateway)__	};suspending,from,canceling,goes,to,suspended,and,sends,no,additional,rpc,calls;test,public,void,test,suspended,out,of,canceling,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,eg,suspend,new,exception,suspend,assert,equals,job,status,suspended,eg,get,state,ensure,cannot,leave,suspended,state,eg,gateway
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1493831843;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1499173456;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1509631297;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1513201070;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1513261599;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1516812618;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1519317157;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1549365080;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1550683187;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1550683188;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1550683188;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfCanceled() throws Exception;1550683188;Suspending from CANCELLED should do nothing.;@Test_	public void testSuspendedOutOfCanceled() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.cancel()___		assertEquals(JobStatus.CANCELLING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.CANCELED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,cancelled,should,do,nothing;test,public,void,test,suspended,out,of,canceled,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,canceled,eg,get,termination,future,get,eg,suspend,new,exception,suspend,assert,equals,job,status,canceled,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1493831843;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1499173456;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1509631297;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1513201070;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1513261599;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1516812618;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1519317157;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1549365080;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1550683187;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final TaskManagerGateway gateway = spy(new SimpleAckingTaskManagerGateway())__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,task,manager,gateway,gateway,spy,new,simple,acking,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1550683188;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1550683188;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
ExecutionGraphSuspendTest -> @Test 	public void testSuspendedOutOfFailed() throws Exception;1550683188;Suspending from FAILED should do nothing.;@Test_	public void testSuspendedOutOfFailed() throws Exception {_		final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway()__		final int parallelism = 10__		final ExecutionGraph eg = createExecutionGraph(gateway, parallelism)___		eg.scheduleForExecution()__		ExecutionGraphTestUtils.switchAllVerticesToRunning(eg)___		eg.failGlobal(new Exception("fail global"))___		assertEquals(JobStatus.FAILING, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)___		ExecutionGraphTestUtils.completeCancellingForAllVertices(eg)__		assertEquals(JobStatus.FAILED, eg.getState())___		_		eg.suspend(new Exception("suspend"))___		_		assertEquals(JobStatus.FAILED, eg.getState())__		validateCancelRpcCalls(gateway, parallelism)__	};suspending,from,failed,should,do,nothing;test,public,void,test,suspended,out,of,failed,throws,exception,final,interactions,counting,task,manager,gateway,gateway,new,interactions,counting,task,manager,gateway,final,int,parallelism,10,final,execution,graph,eg,create,execution,graph,gateway,parallelism,eg,schedule,for,execution,execution,graph,test,utils,switch,all,vertices,to,running,eg,eg,fail,global,new,exception,fail,global,assert,equals,job,status,failing,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism,execution,graph,test,utils,complete,cancelling,for,all,vertices,eg,assert,equals,job,status,failed,eg,get,state,eg,suspend,new,exception,suspend,assert,equals,job,status,failed,eg,get,state,validate,cancel,rpc,calls,gateway,parallelism
