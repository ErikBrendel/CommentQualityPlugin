commented;modifiers;parameterAmount;loc;comment;code
true;public;0;18;/**  * Going into SUSPENDED out of CREATED should immediately cancel everything and  * not send out RPC calls.  */ ;/**  * Going into SUSPENDED out of CREATED should immediately cancel everything and  * not send out RPC calls.  */ @Test public void testSuspendedOutOfCreated() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     assertEquals(JobStatus.CREATED, eg.getState()).     // suspend     eg.suspend(new Exception("suspend")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateAllVerticesInState(eg, ExecutionState.CANCELED).     validateCancelRpcCalls(gateway, 0).     ensureCannotLeaveSuspendedState(eg, gateway). }
true;public;0;18;/**  * Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.  */ ;/**  * Going into SUSPENDED out of DEPLOYING vertices should cancel all vertices once with RPC calls.  */ @Test public void testSuspendedOutOfDeploying() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     assertEquals(JobStatus.RUNNING, eg.getState()).     validateAllVerticesInState(eg, ExecutionState.DEPLOYING).     // suspend     eg.suspend(new Exception("suspend")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     ensureCannotLeaveSuspendedState(eg, gateway). }
true;public;0;20;/**  * Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.  */ ;/**  * Going into SUSPENDED out of RUNNING vertices should cancel all vertices once with RPC calls.  */ @Test public void testSuspendedOutOfRunning() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     assertEquals(JobStatus.RUNNING, eg.getState()).     validateAllVerticesInState(eg, ExecutionState.RUNNING).     // suspend     eg.suspend(new Exception("suspend")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     ensureCannotLeaveSuspendedState(eg, gateway). }
true;public;0;20;/**  * Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls.  */ ;/**  * Suspending from FAILING goes to SUSPENDED and sends no additional RPC calls.  */ @Test public void testSuspendedOutOfFailing() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     eg.failGlobal(new Exception("fail global")).     assertEquals(JobStatus.FAILING, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     // suspend     eg.suspend(new Exception("suspend")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     ensureCannotLeaveSuspendedState(eg, gateway). }
true;public;0;24;/**  * Suspending from FAILED should do nothing.  */ ;/**  * Suspending from FAILED should do nothing.  */ @Test public void testSuspendedOutOfFailed() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     eg.failGlobal(new Exception("fail global")).     assertEquals(JobStatus.FAILING, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     ExecutionGraphTestUtils.completeCancellingForAllVertices(eg).     assertEquals(JobStatus.FAILED, eg.getState()).     // suspend     eg.suspend(new Exception("suspend")).     // still in failed state     assertEquals(JobStatus.FAILED, eg.getState()).     validateCancelRpcCalls(gateway, parallelism). }
true;public;0;21;/**  * Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.  */ ;/**  * Suspending from CANCELING goes to SUSPENDED and sends no additional RPC calls.  */ @Test public void testSuspendedOutOfCanceling() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     eg.cancel().     assertEquals(JobStatus.CANCELLING, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     // suspend     eg.suspend(new Exception("suspend")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     ensureCannotLeaveSuspendedState(eg, gateway). }
true;public;0;24;/**  * Suspending from CANCELLED should do nothing.  */ ;/**  * Suspending from CANCELLED should do nothing.  */ @Test public void testSuspendedOutOfCanceled() throws Exception {     final InteractionsCountingTaskManagerGateway gateway = new InteractionsCountingTaskManagerGateway().     final int parallelism = 10.     final ExecutionGraph eg = createExecutionGraph(gateway, parallelism).     eg.scheduleForExecution().     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     eg.cancel().     assertEquals(JobStatus.CANCELLING, eg.getState()).     validateCancelRpcCalls(gateway, parallelism).     ExecutionGraphTestUtils.completeCancellingForAllVertices(eg).     assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get()).     // suspend     eg.suspend(new Exception("suspend")).     // still in failed state     assertEquals(JobStatus.CANCELED, eg.getState()).     validateCancelRpcCalls(gateway, parallelism). }
true;public;0;23;/**  * Tests that we can suspend a job when in state RESTARTING.  */ ;/**  * Tests that we can suspend a job when in state RESTARTING.  */ @Test public void testSuspendWhileRestarting() throws Exception {     final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new InfiniteDelayRestartStrategy(10)).     eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread()).     eg.scheduleForExecution().     assertEquals(JobStatus.RUNNING, eg.getState()).     ExecutionGraphTestUtils.switchAllVerticesToRunning(eg).     eg.failGlobal(new Exception("test")).     assertEquals(JobStatus.FAILING, eg.getState()).     ExecutionGraphTestUtils.completeCancellingForAllVertices(eg).     assertEquals(JobStatus.RESTARTING, eg.getState()).     final Exception exception = new Exception("Suspended").     eg.suspend(exception).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     assertEquals(exception, eg.getFailureCause()). }
false;private,static;2;20;;// ------------------------------------------------------------------------ // utilities // ------------------------------------------------------------------------ private static void ensureCannotLeaveSuspendedState(ExecutionGraph eg, InteractionsCountingTaskManagerGateway gateway) {     assertEquals(JobStatus.SUSPENDED, eg.getState()).     gateway.resetCounts().     eg.failGlobal(new Exception("fail")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateNoInteractions(gateway).     eg.cancel().     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateNoInteractions(gateway).     eg.suspend(new Exception("suspend again")).     assertEquals(JobStatus.SUSPENDED, eg.getState()).     validateNoInteractions(gateway).     for (ExecutionVertex ev : eg.getAllExecutionVertices()) {         assertEquals(0, ev.getCurrentExecutionAttempt().getAttemptNumber()).     } }
false;private,static;1;3;;private static void validateNoInteractions(InteractionsCountingTaskManagerGateway gateway) {     assertThat(gateway.getInteractionsCount(), is(0)). }
false;private,static;2;5;;private static void validateAllVerticesInState(ExecutionGraph eg, ExecutionState expected) {     for (ExecutionVertex ev : eg.getAllExecutionVertices()) {         assertEquals(expected, ev.getCurrentExecutionAttempt().getState()).     } }
false;private,static;2;3;;private static void validateCancelRpcCalls(InteractionsCountingTaskManagerGateway gateway, int num) {     assertThat(gateway.getCancelTaskCount(), is(num)). }
false;private,static;2;17;;private static ExecutionGraph createExecutionGraph(TaskManagerGateway gateway, int parallelism) throws Exception {     final JobID jobId = new JobID().     final JobVertex vertex = new JobVertex("vertex").     vertex.setInvokableClass(NoOpInvokable.class).     vertex.setParallelism(parallelism).     final SlotProvider slotProvider = new SimpleSlotProvider(jobId, parallelism, gateway).     ExecutionGraph simpleTestGraph = ExecutionGraphTestUtils.createSimpleTestGraph(jobId, slotProvider, new FixedDelayRestartStrategy(0, 0), vertex).     simpleTestGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread()).     return simpleTestGraph. }
