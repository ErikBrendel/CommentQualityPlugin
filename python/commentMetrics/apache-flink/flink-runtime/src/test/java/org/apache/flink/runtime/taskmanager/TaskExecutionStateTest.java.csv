commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testEqualsHashCode() {     try {         final JobID jid = new JobID().         final ExecutionAttemptID executionId = new ExecutionAttemptID().         final ExecutionState state = ExecutionState.RUNNING.         final Throwable error = new RuntimeException("some test error message").         TaskExecutionState s1 = new TaskExecutionState(jid, executionId, state, error).         TaskExecutionState s2 = new TaskExecutionState(jid, executionId, state, error).         assertEquals(s1.hashCode(), s2.hashCode()).         assertEquals(s1, s2).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;30;;@Test public void testSerialization() {     try {         final JobID jid = new JobID().         final ExecutionAttemptID executionId = new ExecutionAttemptID().         final ExecutionState state = ExecutionState.DEPLOYING.         final Throwable error = new IOException("fubar").         TaskExecutionState original1 = new TaskExecutionState(jid, executionId, state, error).         TaskExecutionState original2 = new TaskExecutionState(jid, executionId, state).         TaskExecutionState javaSerCopy1 = CommonTestUtils.createCopySerializable(original1).         TaskExecutionState javaSerCopy2 = CommonTestUtils.createCopySerializable(original2).         // equalities         assertEquals(original1, javaSerCopy1).         assertEquals(javaSerCopy1, original1).         assertEquals(original2, javaSerCopy2).         assertEquals(javaSerCopy2, original2).         // hash codes         assertEquals(original1.hashCode(), javaSerCopy1.hashCode()).         assertEquals(original2.hashCode(), javaSerCopy2.hashCode()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;4;;// should be non serializable, because it contains the outer class reference @Override public String getMessage() {     throw new RuntimeException("Cannot get Message"). }
false;public;1;4;;@Override public void printStackTrace(PrintStream s) {     throw new RuntimeException("Cannot print"). }
false;public;1;4;;@Override public void printStackTrace(PrintWriter s) {     throw new RuntimeException("Cannot print"). }
false;public;0;30;;@Test public void handleNonSerializableException() {     try {         @SuppressWarnings({ "ThrowableInstanceNeverThrown", "serial" })         Exception hostile = new Exception() {              // should be non serializable, because it contains the outer class reference             @Override             public String getMessage() {                 throw new RuntimeException("Cannot get Message").             }              @Override             public void printStackTrace(PrintStream s) {                 throw new RuntimeException("Cannot print").             }              @Override             public void printStackTrace(PrintWriter s) {                 throw new RuntimeException("Cannot print").             }         }.         new TaskExecutionState(new JobID(), new ExecutionAttemptID(), ExecutionState.FAILED, hostile).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
