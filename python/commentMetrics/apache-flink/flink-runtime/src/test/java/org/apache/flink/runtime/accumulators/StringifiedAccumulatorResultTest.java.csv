commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testSerialization() throws IOException {     final String name = "a".     final String type = "b".     final String value = "c".     final StringifiedAccumulatorResult original = new StringifiedAccumulatorResult(name, type, value).     // Confirm no funny business in the constructor to getter pathway     assertEquals(name, original.getName()).     assertEquals(type, original.getType()).     assertEquals(value, original.getValue()).     final StringifiedAccumulatorResult copy = CommonTestUtils.createCopySerializable(original).     // Copy should have equivalent core fields     assertEquals(name, copy.getName()).     assertEquals(type, copy.getType()).     assertEquals(value, copy.getValue()). }
false;public;0;18;;@Test public void stringifyingResultsShouldIncorporateAccumulatorLocalValueDirectly() {     final String name = "a".     final int targetValue = 314159.     final IntCounter acc = new IntCounter().     acc.add(targetValue).     final Map<String, OptionalFailure<Accumulator<?, ?>>> accumulatorMap = new HashMap<>().     accumulatorMap.put(name, OptionalFailure.of(acc)).     final StringifiedAccumulatorResult[] results = StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap).     assertEquals(1, results.length).     final StringifiedAccumulatorResult firstResult = results[0].     assertEquals(name, firstResult.getName()).     assertEquals("IntCounter", firstResult.getType()).     assertEquals(Integer.toString(targetValue), firstResult.getValue()). }
false;public;0;17;;@Test public void stringifyingResultsShouldReportNullLocalValueAsNonnullValueString() {     final String name = "a".     final NullBearingAccumulator acc = new NullBearingAccumulator().     final Map<String, OptionalFailure<Accumulator<?, ?>>> accumulatorMap = new HashMap<>().     accumulatorMap.put(name, OptionalFailure.of(acc)).     final StringifiedAccumulatorResult[] results = StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap).     assertEquals(1, results.length).     // Note the use of a String with a content of "null" rather than a null value     final StringifiedAccumulatorResult firstResult = results[0].     assertEquals(name, firstResult.getName()).     assertEquals("NullBearingAccumulator", firstResult.getType()).     assertEquals("null", firstResult.getValue()). }
false;public;0;16;;@Test public void stringifyingResultsShouldReportNullAccumulatorWithNonnullValueAndTypeString() {     final String name = "a".     final Map<String, OptionalFailure<Accumulator<?, ?>>> accumulatorMap = new HashMap<>().     accumulatorMap.put(name, null).     final StringifiedAccumulatorResult[] results = StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap).     assertEquals(1, results.length).     // Note the use of String values with content of "null" rather than null values     final StringifiedAccumulatorResult firstResult = results[0].     assertEquals(name, firstResult.getName()).     assertEquals("null", firstResult.getType()).     assertEquals("null", firstResult.getValue()). }
false;public;0;16;;@Test public void stringifyingFailureResults() {     final String name = "a".     final Map<String, OptionalFailure<Accumulator<?, ?>>> accumulatorMap = new HashMap<>().     accumulatorMap.put(name, OptionalFailure.ofFailure(new FlinkRuntimeException("Test"))).     final StringifiedAccumulatorResult[] results = StringifiedAccumulatorResult.stringifyAccumulatorResults(accumulatorMap).     assertEquals(1, results.length).     // Note the use of String values with content of "null" rather than null values     final StringifiedAccumulatorResult firstResult = results[0].     assertEquals(name, firstResult.getName()).     assertEquals("null", firstResult.getType()).     assertTrue(firstResult.getValue().startsWith("org.apache.flink.util.FlinkRuntimeException: Test")). }
false;public;1;4;;@Override public void add(Serializable value) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Serializable getLocalValue() {     return null. }
false;public;0;4;;@Override public void resetLocal() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void merge(Accumulator<Serializable, Serializable> other) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Accumulator<Serializable, Serializable> clone() {     return new NullBearingAccumulator(). }
