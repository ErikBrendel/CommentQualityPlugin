commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(StringPair record) {     return record.getKey().hashCode(). }
false;public;1;4;;@Override public void setReference(StringPair toCompare) {     this.reference = toCompare.getKey(). }
false;public;1;4;;@Override public boolean equalToReference(StringPair candidate) {     return this.reference.equals(candidate.getKey()). }
false;public;1;4;;@Override public int compareToReference(TypeComparator<StringPair> referencedComparator) {     return this.reference.compareTo(((StringPairComparator) referencedComparator).reference). }
false;public;2;4;;@Override public int compare(StringPair first, StringPair second) {     return first.getKey().compareTo(second.getKey()). }
false;public;2;5;;@Override public int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException {     return StringValue.readString(firstSource).compareTo(StringValue.readString(secondSource)). }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return false. }
false;public;0;4;;@Override public boolean supportsSerializationWithKeyNormalization() {     return false. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return Integer.MAX_VALUE. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return false. }
false;public;4;5;;@Override public void putNormalizedKey(StringPair record, MemorySegment target, int offset, int numBytes) {     throw new RuntimeException("not implemented"). }
false;public;2;5;;@Override public void writeWithKeyNormalization(StringPair record, DataOutputView target) throws IOException {     throw new RuntimeException("not implemented"). }
false;public;2;5;;@Override public StringPair readWithKeyDenormalization(StringPair record, DataInputView source) throws IOException {     throw new RuntimeException("not implemented"). }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return false. }
false;public;0;4;;@Override public TypeComparator<StringPair> duplicate() {     return new StringPairComparator(). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = ((StringPair) record).getKey().     return 1. }
false;public;0;3;;@Override public TypeComparator[] getFlatComparators() {     return comparators. }
