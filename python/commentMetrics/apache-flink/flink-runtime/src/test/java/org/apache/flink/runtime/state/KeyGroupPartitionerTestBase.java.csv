commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testPartitionByKeyGroup() throws IOException {     final Random random = new Random(0x42).     testPartitionByKeyGroupForSize(0, random).     testPartitionByKeyGroupForSize(1, random).     testPartitionByKeyGroupForSize(2, random).     testPartitionByKeyGroupForSize(10, random). }
false;private;2;25;;@SuppressWarnings("unchecked") private void testPartitionByKeyGroupForSize(int testSize, Random random) throws IOException {     final Set<T> allElementsIdentitySet = Collections.newSetFromMap(new IdentityHashMap<>()).     final T[] data = generateTestInput(random, testSize, allElementsIdentitySet).     Assert.assertEquals(testSize, allElementsIdentitySet.size()).     // Test with 5 key-groups.     final KeyGroupRange range = new KeyGroupRange(0, 4).     final int numberOfKeyGroups = range.getNumberOfKeyGroups().     final ValidatingElementWriterDummy<T> validatingElementWriter = new ValidatingElementWriterDummy<>(keyExtractorFunction, numberOfKeyGroups, allElementsIdentitySet).     final KeyGroupPartitioner<T> testInstance = createPartitioner(data, testSize, range, numberOfKeyGroups, validatingElementWriter).     final StateSnapshot.StateKeyGroupWriter result = testInstance.partitionByKeyGroup().     for (int keyGroup = 0. keyGroup < numberOfKeyGroups. ++keyGroup) {         validatingElementWriter.setCurrentKeyGroup(keyGroup).         result.writeStateInKeyGroup(DUMMY_OUT_VIEW, keyGroup).     }     validatingElementWriter.validateAllElementsSeen(). }
false;protected;3;16;;@SuppressWarnings("unchecked") protected T[] generateTestInput(Random random, int numElementsToGenerate, Set<T> allElementsIdentitySet) {     final int arraySize = numElementsToGenerate > 1 ? numElementsToGenerate + 5 : numElementsToGenerate.     T element = elementGenerator.apply(random).     final T[] partitioningIn = (T[]) Array.newInstance(element.getClass(), arraySize).     for (int i = 0. i < numElementsToGenerate. ++i) {         partitioningIn[i] = element.         allElementsIdentitySet.add(element).         element = elementGenerator.apply(random).     }     Assert.assertEquals(numElementsToGenerate, allElementsIdentitySet.size()).     return partitioningIn. }
false;protected;5;18;;@SuppressWarnings("unchecked") protected KeyGroupPartitioner<T> createPartitioner(T[] data, int numElements, KeyGroupRange keyGroupRange, int totalKeyGroups, KeyGroupPartitioner.ElementWriterFunction<T> elementWriterFunction) {     final T[] partitioningOut = (T[]) Array.newInstance(data.getClass().getComponentType(), numElements).     return new KeyGroupPartitioner<>(data, numElements, partitioningOut, keyGroupRange, totalKeyGroups, keyExtractorFunction, elementWriterFunction). }
false;public;2;9;;@Override public void writeElement(@Nonnull T element, @Nonnull DataOutputView dov) {     Assert.assertTrue(allElementsSet.remove(element)).     Assert.assertEquals(currentKeyGroup, KeyGroupRangeAssignment.assignToKeyGroup(keyExtractorFunction.extractKeyFromElement(element), numberOfKeyGroups)). }
false;;0;3;;void validateAllElementsSeen() {     Assert.assertTrue(allElementsSet.isEmpty()). }
false;;1;3;;void setCurrentKeyGroup(int currentKeyGroup) {     this.currentKeyGroup = currentKeyGroup. }
