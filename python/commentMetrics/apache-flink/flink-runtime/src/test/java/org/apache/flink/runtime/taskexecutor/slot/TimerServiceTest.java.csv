# id;timestamp;commentText;codeText;commentWords;codeWords
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1482522866;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1482522866;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService, 100L)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,100l,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1515481550;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService, 100L)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,100l,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1522681180;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService, 100L)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,100l,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1526494919;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService, 100L)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,100l,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
TimerServiceTest -> @Test 	@SuppressWarnings("unchecked") 	public void testUnregisterAllTimeouts() throws Exception;1538998760;Test all timeouts registered can be unregistered_@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testUnregisterAllTimeouts() throws Exception {_		_		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture scheduledFuture = mock(ScheduledFuture.class)__		when(scheduledExecutorService.schedule(any(Runnable.class), anyLong(), any(TimeUnit.class)))_			.thenReturn(scheduledFuture)__		TimerService<AllocationID> timerService = new TimerService<>(scheduledExecutorService, 100L)__		TimeoutListener<AllocationID> listener = mock(TimeoutListener.class)___		timerService.start(listener)___		_		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)__		timerService.registerTimeout(new AllocationID(), 10, TimeUnit.SECONDS)___		timerService.unregisterAllTimeouts()___		_		Map<?, ?> timeouts = (Map<?, ?>) Whitebox.getInternalState(timerService, "timeouts")__		assertTrue(timeouts.isEmpty())__		verify(scheduledFuture, times(2)).cancel(true)__	};test,all,timeouts,registered,can,be,unregistered,throws,exception;test,suppress,warnings,unchecked,public,void,test,unregister,all,timeouts,throws,exception,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,then,return,scheduled,future,timer,service,allocation,id,timer,service,new,timer,service,scheduled,executor,service,100l,timeout,listener,allocation,id,listener,mock,timeout,listener,class,timer,service,start,listener,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,register,timeout,new,allocation,id,10,time,unit,seconds,timer,service,unregister,all,timeouts,map,timeouts,map,whitebox,get,internal,state,timer,service,timeouts,assert,true,timeouts,is,empty,verify,scheduled,future,times,2,cancel,true
