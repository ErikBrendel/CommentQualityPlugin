# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphRescalingTest -> @Test 	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception;1518302632;Verifies that building an {@link ExecutionGraph} from a {@link JobGraph} with_parallelism higher than the maximum parallelism fails.;@Test_	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception {__		final Configuration config = new Configuration()___		final int initialParallelism = 1__		final int maxParallelism = 10__		final JobVertex[] jobVertices = createVerticesForSimpleBipartiteJobGraph(initialParallelism,  maxParallelism)__		final JobGraph jobGraph = new JobGraph(jobVertices)___		for (JobVertex jv : jobVertices) {_			jv.setParallelism(maxParallelism + 1)__		}__		try {_			_			ExecutionGraphBuilder.buildGraph(_				null,_				jobGraph,_				config,_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				new Scheduler(TestingUtils.defaultExecutionContext()),_				Thread.currentThread().getContextClassLoader(),_				new StandaloneCheckpointRecoveryFactory(),_				AkkaUtils.getDefaultTimeout(),_				new NoRestartStrategy(),_				new UnregisteredMetricsGroup(),_				-1,_				VoidBlobWriter.getInstance(),_				TEST_LOGGER)___			fail("Building the ExecutionGraph with a parallelism higher than the max parallelism should fail.")__		} catch (JobException e) {_			_		}_	};verifies,that,building,an,link,execution,graph,from,a,link,job,graph,with,parallelism,higher,than,the,maximum,parallelism,fails;test,public,void,test,execution,graph,construction,fails,rescale,dop,exceed,max,parallelism,throws,exception,final,configuration,config,new,configuration,final,int,initial,parallelism,1,final,int,max,parallelism,10,final,job,vertex,job,vertices,create,vertices,for,simple,bipartite,job,graph,initial,parallelism,max,parallelism,final,job,graph,job,graph,new,job,graph,job,vertices,for,job,vertex,jv,job,vertices,jv,set,parallelism,max,parallelism,1,try,execution,graph,builder,build,graph,null,job,graph,config,testing,utils,default,executor,testing,utils,default,executor,new,scheduler,testing,utils,default,execution,context,thread,current,thread,get,context,class,loader,new,standalone,checkpoint,recovery,factory,akka,utils,get,default,timeout,new,no,restart,strategy,new,unregistered,metrics,group,1,void,blob,writer,get,instance,fail,building,the,execution,graph,with,a,parallelism,higher,than,the,max,parallelism,should,fail,catch,job,exception,e
ExecutionGraphRescalingTest -> @Test 	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception;1518680774;Verifies that building an {@link ExecutionGraph} from a {@link JobGraph} with_parallelism higher than the maximum parallelism fails.;@Test_	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception {__		final Configuration config = new Configuration()___		final int initialParallelism = 1__		final int maxParallelism = 10__		final JobVertex[] jobVertices = createVerticesForSimpleBipartiteJobGraph(initialParallelism,  maxParallelism)__		final JobGraph jobGraph = new JobGraph(jobVertices)___		for (JobVertex jv : jobVertices) {_			jv.setParallelism(maxParallelism + 1)__		}__		try {_			_			ExecutionGraphBuilder.buildGraph(_				null,_				jobGraph,_				config,_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				new Scheduler(TestingUtils.defaultExecutionContext()),_				Thread.currentThread().getContextClassLoader(),_				new StandaloneCheckpointRecoveryFactory(),_				AkkaUtils.getDefaultTimeout(),_				new NoRestartStrategy(),_				new UnregisteredMetricsGroup(),_				-1,_				VoidBlobWriter.getInstance(),_				AkkaUtils.getDefaultTimeout(),_				TEST_LOGGER)___			fail("Building the ExecutionGraph with a parallelism higher than the max parallelism should fail.")__		} catch (JobException e) {_			_		}_	};verifies,that,building,an,link,execution,graph,from,a,link,job,graph,with,parallelism,higher,than,the,maximum,parallelism,fails;test,public,void,test,execution,graph,construction,fails,rescale,dop,exceed,max,parallelism,throws,exception,final,configuration,config,new,configuration,final,int,initial,parallelism,1,final,int,max,parallelism,10,final,job,vertex,job,vertices,create,vertices,for,simple,bipartite,job,graph,initial,parallelism,max,parallelism,final,job,graph,job,graph,new,job,graph,job,vertices,for,job,vertex,jv,job,vertices,jv,set,parallelism,max,parallelism,1,try,execution,graph,builder,build,graph,null,job,graph,config,testing,utils,default,executor,testing,utils,default,executor,new,scheduler,testing,utils,default,execution,context,thread,current,thread,get,context,class,loader,new,standalone,checkpoint,recovery,factory,akka,utils,get,default,timeout,new,no,restart,strategy,new,unregistered,metrics,group,1,void,blob,writer,get,instance,akka,utils,get,default,timeout,fail,building,the,execution,graph,with,a,parallelism,higher,than,the,max,parallelism,should,fail,catch,job,exception,e
ExecutionGraphRescalingTest -> @Test 	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception;1522324836;Verifies that building an {@link ExecutionGraph} from a {@link JobGraph} with_parallelism higher than the maximum parallelism fails.;@Test_	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception {__		final Configuration config = new Configuration()___		final int initialParallelism = 1__		final int maxParallelism = 10__		final JobVertex[] jobVertices = createVerticesForSimpleBipartiteJobGraph(initialParallelism,  maxParallelism)__		final JobGraph jobGraph = new JobGraph(jobVertices)___		for (JobVertex jv : jobVertices) {_			jv.setParallelism(maxParallelism + 1)__		}__		try {_			_			ExecutionGraphBuilder.buildGraph(_				null,_				jobGraph,_				config,_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				new Scheduler(TestingUtils.defaultExecutionContext()),_				Thread.currentThread().getContextClassLoader(),_				new StandaloneCheckpointRecoveryFactory(),_				AkkaUtils.getDefaultTimeout(),_				new NoRestartStrategy(),_				new UnregisteredMetricsGroup(),_				VoidBlobWriter.getInstance(),_				AkkaUtils.getDefaultTimeout(),_				TEST_LOGGER)___			fail("Building the ExecutionGraph with a parallelism higher than the max parallelism should fail.")__		} catch (JobException e) {_			_		}_	};verifies,that,building,an,link,execution,graph,from,a,link,job,graph,with,parallelism,higher,than,the,maximum,parallelism,fails;test,public,void,test,execution,graph,construction,fails,rescale,dop,exceed,max,parallelism,throws,exception,final,configuration,config,new,configuration,final,int,initial,parallelism,1,final,int,max,parallelism,10,final,job,vertex,job,vertices,create,vertices,for,simple,bipartite,job,graph,initial,parallelism,max,parallelism,final,job,graph,job,graph,new,job,graph,job,vertices,for,job,vertex,jv,job,vertices,jv,set,parallelism,max,parallelism,1,try,execution,graph,builder,build,graph,null,job,graph,config,testing,utils,default,executor,testing,utils,default,executor,new,scheduler,testing,utils,default,execution,context,thread,current,thread,get,context,class,loader,new,standalone,checkpoint,recovery,factory,akka,utils,get,default,timeout,new,no,restart,strategy,new,unregistered,metrics,group,void,blob,writer,get,instance,akka,utils,get,default,timeout,fail,building,the,execution,graph,with,a,parallelism,higher,than,the,max,parallelism,should,fail,catch,job,exception,e
ExecutionGraphRescalingTest -> @Test 	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception;1548932775;Verifies that building an {@link ExecutionGraph} from a {@link JobGraph} with_parallelism higher than the maximum parallelism fails.;@Test_	public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception {__		final Configuration config = new Configuration()___		final int initialParallelism = 1__		final int maxParallelism = 10__		final JobVertex[] jobVertices = createVerticesForSimpleBipartiteJobGraph(initialParallelism,  maxParallelism)__		final JobGraph jobGraph = new JobGraph(jobVertices)___		for (JobVertex jv : jobVertices) {_			jv.setParallelism(maxParallelism + 1)__		}__		try {_			_			ExecutionGraphBuilder.buildGraph(_				null,_				jobGraph,_				config,_				TestingUtils.defaultExecutor(),_				TestingUtils.defaultExecutor(),_				new TestingSlotProvider(ignore -> new CompletableFuture<>()),_				Thread.currentThread().getContextClassLoader(),_				new StandaloneCheckpointRecoveryFactory(),_				AkkaUtils.getDefaultTimeout(),_				new NoRestartStrategy(),_				new UnregisteredMetricsGroup(),_				VoidBlobWriter.getInstance(),_				AkkaUtils.getDefaultTimeout(),_				TEST_LOGGER)___			fail("Building the ExecutionGraph with a parallelism higher than the max parallelism should fail.")__		} catch (JobException e) {_			_		}_	};verifies,that,building,an,link,execution,graph,from,a,link,job,graph,with,parallelism,higher,than,the,maximum,parallelism,fails;test,public,void,test,execution,graph,construction,fails,rescale,dop,exceed,max,parallelism,throws,exception,final,configuration,config,new,configuration,final,int,initial,parallelism,1,final,int,max,parallelism,10,final,job,vertex,job,vertices,create,vertices,for,simple,bipartite,job,graph,initial,parallelism,max,parallelism,final,job,graph,job,graph,new,job,graph,job,vertices,for,job,vertex,jv,job,vertices,jv,set,parallelism,max,parallelism,1,try,execution,graph,builder,build,graph,null,job,graph,config,testing,utils,default,executor,testing,utils,default,executor,new,testing,slot,provider,ignore,new,completable,future,thread,current,thread,get,context,class,loader,new,standalone,checkpoint,recovery,factory,akka,utils,get,default,timeout,new,no,restart,strategy,new,unregistered,metrics,group,void,blob,writer,get,instance,akka,utils,get,default,timeout,fail,building,the,execution,graph,with,a,parallelism,higher,than,the,max,parallelism,should,fail,catch,job,exception,e
