# id;timestamp;commentText;codeText;commentWords;codeWords
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1505740530;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class)__		TestingLeaderRetrievalService testingLeaderRetrievalService = new TestingLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			testingLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,testing,leader,retrieval,service,testing,leader,retrieval,service,new,testing,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,testing,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1505769103;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		TestingLeaderRetrievalService testingLeaderRetrievalService = new TestingLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			testingLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,testing,leader,retrieval,service,testing,leader,retrieval,service,new,testing,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,testing,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1519406526;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		TestingLeaderRetrievalService testingLeaderRetrievalService = new TestingLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			testingLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,testing,leader,retrieval,service,testing,leader,retrieval,service,new,testing,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,testing,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1519406528;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		TestingLeaderRetrievalService testingLeaderRetrievalService = new TestingLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			testingLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			testingLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,testing,leader,retrieval,service,testing,leader,retrieval,service,new,testing,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,testing,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,testing,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1519638690;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		SettableLeaderRetrievalService settableLeaderRetrievalService = new SettableLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			settableLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,settable,leader,retrieval,service,settable,leader,retrieval,service,new,settable,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,settable,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1550005039;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		SettableLeaderRetrievalService settableLeaderRetrievalService = new SettableLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			settableLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			dummyRpcEndpoint.shutDown()__			dummyRpcEndpoint2.shutDown()__			dummyRpcEndpoint.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			dummyRpcEndpoint2.getTerminationFuture().get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,settable,leader,retrieval,service,settable,leader,retrieval,service,new,settable,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,settable,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,dummy,rpc,endpoint,shut,down,dummy,rpc,endpoint2,shut,down,dummy,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,dummy,rpc,endpoint2,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcGatewayRetrieverTest -> @Test 	public void testRpcGatewayRetrieval() throws Exception;1550005040;Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.;@Test_	public void testRpcGatewayRetrieval() throws Exception {_		final String expectedValue = "foobar"__		final String expectedValue2 = "barfoo"__		final UUID leaderSessionId = UUID.randomUUID()___		RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L))__		SettableLeaderRetrievalService settableLeaderRetrievalService = new SettableLeaderRetrievalService()__		DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue)__		DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2)__		rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class))__		rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class))___		try {_			dummyRpcEndpoint.start()__			dummyRpcEndpoint2.start()___			settableLeaderRetrievalService.start(gatewayRetriever)___			final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture()___			assertFalse(gatewayFuture.isDone())___			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId)___			final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress())__			assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))___			_			settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId)___			final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture()__			final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___			assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress())__			assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS))__		} finally {_			RpcUtils.terminateRpcEndpoint(dummyRpcEndpoint, TIMEOUT)__			RpcUtils.terminateRpcEndpoint(dummyRpcEndpoint2, TIMEOUT)__		}_	};tests,that,the,rpc,gateway,retriever,can,retrieve,the,specified,gateway,type,from,a,leader,retrieval,service;test,public,void,test,rpc,gateway,retrieval,throws,exception,final,string,expected,value,foobar,final,string,expected,value2,barfoo,final,uuid,leader,session,id,uuid,random,uuid,rpc,gateway,retriever,uuid,dummy,gateway,gateway,retriever,new,rpc,gateway,retriever,rpc,service,dummy,gateway,class,function,identity,0,time,milliseconds,0l,settable,leader,retrieval,service,settable,leader,retrieval,service,new,settable,leader,retrieval,service,dummy,rpc,endpoint,dummy,rpc,endpoint,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint1,expected,value,dummy,rpc,endpoint,dummy,rpc,endpoint2,new,dummy,rpc,endpoint,rpc,service,dummy,rpc,endpoint2,expected,value2,rpc,service,register,gateway,dummy,rpc,endpoint,get,address,dummy,rpc,endpoint,get,self,gateway,dummy,gateway,class,rpc,service,register,gateway,dummy,rpc,endpoint2,get,address,dummy,rpc,endpoint2,get,self,gateway,dummy,gateway,class,try,dummy,rpc,endpoint,start,dummy,rpc,endpoint2,start,settable,leader,retrieval,service,start,gateway,retriever,final,completable,future,dummy,gateway,gateway,future,gateway,retriever,get,future,assert,false,gateway,future,is,done,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint,get,address,leader,session,id,final,dummy,gateway,dummy,gateway,gateway,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint,get,address,dummy,gateway,get,address,assert,equals,expected,value,dummy,gateway,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,settable,leader,retrieval,service,notify,listener,dummy,rpc,endpoint2,get,address,leader,session,id,final,completable,future,dummy,gateway,gateway,future2,gateway,retriever,get,future,final,dummy,gateway,dummy,gateway2,gateway,future2,get,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,dummy,rpc,endpoint2,get,address,dummy,gateway2,get,address,assert,equals,expected,value2,dummy,gateway2,foobar,timeout,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,utils,terminate,rpc,endpoint,dummy,rpc,endpoint,timeout,rpc,utils,terminate,rpc,endpoint,dummy,rpc,endpoint2,timeout
