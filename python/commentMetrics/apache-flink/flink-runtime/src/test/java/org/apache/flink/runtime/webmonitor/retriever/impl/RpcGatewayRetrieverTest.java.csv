commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setup() {     rpcService = new TestingRpcService(). }
false;public,static;0;7;;@AfterClass public static void teardown() throws InterruptedException, ExecutionException, TimeoutException {     if (rpcService != null) {         RpcUtils.terminateRpcService(rpcService, TIMEOUT).         rpcService = null.     } }
true;public;0;43;/**  * Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.  */ ;/**  * Tests that the RpcGatewayRetriever can retrieve the specified gateway type from a leader retrieval service.  */ @Test public void testRpcGatewayRetrieval() throws Exception {     final String expectedValue = "foobar".     final String expectedValue2 = "barfoo".     final UUID leaderSessionId = UUID.randomUUID().     RpcGatewayRetriever<UUID, DummyGateway> gatewayRetriever = new RpcGatewayRetriever<>(rpcService, DummyGateway.class, Function.identity(), 0, Time.milliseconds(0L)).     SettableLeaderRetrievalService settableLeaderRetrievalService = new SettableLeaderRetrievalService().     DummyRpcEndpoint dummyRpcEndpoint = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint1", expectedValue).     DummyRpcEndpoint dummyRpcEndpoint2 = new DummyRpcEndpoint(rpcService, "dummyRpcEndpoint2", expectedValue2).     rpcService.registerGateway(dummyRpcEndpoint.getAddress(), dummyRpcEndpoint.getSelfGateway(DummyGateway.class)).     rpcService.registerGateway(dummyRpcEndpoint2.getAddress(), dummyRpcEndpoint2.getSelfGateway(DummyGateway.class)).     try {         dummyRpcEndpoint.start().         dummyRpcEndpoint2.start().         settableLeaderRetrievalService.start(gatewayRetriever).         final CompletableFuture<DummyGateway> gatewayFuture = gatewayRetriever.getFuture().         assertFalse(gatewayFuture.isDone()).         settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint.getAddress(), leaderSessionId).         final DummyGateway dummyGateway = gatewayFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS).         assertEquals(dummyRpcEndpoint.getAddress(), dummyGateway.getAddress()).         assertEquals(expectedValue, dummyGateway.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)).         // elect a new leader         settableLeaderRetrievalService.notifyListener(dummyRpcEndpoint2.getAddress(), leaderSessionId).         final CompletableFuture<DummyGateway> gatewayFuture2 = gatewayRetriever.getFuture().         final DummyGateway dummyGateway2 = gatewayFuture2.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS).         assertEquals(dummyRpcEndpoint2.getAddress(), dummyGateway2.getAddress()).         assertEquals(expectedValue2, dummyGateway2.foobar(TIMEOUT).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)).     } finally {         RpcUtils.terminateRpcEndpoint(dummyRpcEndpoint, TIMEOUT).         RpcUtils.terminateRpcEndpoint(dummyRpcEndpoint2, TIMEOUT).     } }
false;;1;1;;CompletableFuture<String> foobar(@RpcTimeout Time timeout).
false;public;1;4;;@Override public CompletableFuture<String> foobar(Time timeout) {     return CompletableFuture.completedFuture(value). }
false;public;0;4;;@Override public UUID getFencingToken() {     return HighAvailabilityServices.DEFAULT_LEADER_ID. }
