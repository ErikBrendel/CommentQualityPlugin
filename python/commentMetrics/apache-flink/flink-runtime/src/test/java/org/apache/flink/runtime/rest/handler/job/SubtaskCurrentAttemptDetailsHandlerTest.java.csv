commented;modifiers;parameterAmount;loc;comment;code
false;public;0;117;;@Test public void testHandleRequest() throws Exception {     // Prepare the execution graph.     final JobID jobID = new JobID().     final JobVertexID jobVertexID = new JobVertexID().     // The testing subtask.     final long deployingTs = System.currentTimeMillis() - 1024.     final long finishedTs = System.currentTimeMillis().     final long bytesInLocal = 1L.     final long bytesInRemote = 2L.     final long bytesOut = 10L.     final long recordsIn = 20L.     final long recordsOut = 30L.     final IOMetrics ioMetrics = new IOMetrics(bytesInLocal, bytesInRemote, bytesOut, recordsIn, recordsOut, 0.0, 0.0, 0.0, 0.0, 0.0).     final long[] timestamps = new long[ExecutionState.values().length].     timestamps[ExecutionState.DEPLOYING.ordinal()] = deployingTs.     final ExecutionState expectedState = ExecutionState.FINISHED.     timestamps[expectedState.ordinal()] = finishedTs.     final LocalTaskManagerLocation assignedResourceLocation = new LocalTaskManagerLocation().     final AllocationID allocationID = new AllocationID().     final int subtaskIndex = 1.     final int attempt = 2.     final ArchivedExecution execution = new ArchivedExecution(new StringifiedAccumulatorResult[0], ioMetrics, new ExecutionAttemptID(), attempt, expectedState, null, assignedResourceLocation, allocationID, subtaskIndex, timestamps).     final ArchivedExecutionVertex executionVertex = new ArchivedExecutionVertex(subtaskIndex, "Test archived execution vertex", execution, new EvictingBoundedList<>(0)).     // Instance the handler.     final RestHandlerConfiguration restHandlerConfiguration = RestHandlerConfiguration.fromConfiguration(new Configuration()).     final MetricFetcher metricFetcher = new MetricFetcherImpl<>(() -> null, path -> null, TestingUtils.defaultExecutor(), Time.milliseconds(1000L), MetricOptions.METRIC_FETCHER_UPDATE_INTERVAL.defaultValue()).     final SubtaskCurrentAttemptDetailsHandler handler = new SubtaskCurrentAttemptDetailsHandler(() -> null, Time.milliseconds(100), Collections.emptyMap(), SubtaskCurrentAttemptDetailsHeaders.getInstance(), new ExecutionGraphCache(restHandlerConfiguration.getTimeout(), Time.milliseconds(restHandlerConfiguration.getRefreshInterval())), TestingUtils.defaultExecutor(), metricFetcher).     final HashMap<String, String> receivedPathParameters = new HashMap<>(2).     receivedPathParameters.put(JobIDPathParameter.KEY, jobID.toString()).     receivedPathParameters.put(JobVertexIdPathParameter.KEY, jobVertexID.toString()).     final HandlerRequest<EmptyRequestBody, SubtaskMessageParameters> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), new SubtaskMessageParameters(), receivedPathParameters, Collections.emptyMap()).     // Handle request.     final SubtaskExecutionAttemptDetailsInfo detailsInfo = handler.handleRequest(request, executionVertex).     // Verify     final IOMetricsInfo ioMetricsInfo = new IOMetricsInfo(bytesInLocal + bytesInRemote, true, bytesOut, true, recordsIn, true, recordsOut, true).     final SubtaskExecutionAttemptDetailsInfo expectedDetailsInfo = new SubtaskExecutionAttemptDetailsInfo(subtaskIndex, expectedState, attempt, assignedResourceLocation.getHostname(), deployingTs, finishedTs, finishedTs - deployingTs, ioMetricsInfo).     assertEquals(expectedDetailsInfo, detailsInfo). }
