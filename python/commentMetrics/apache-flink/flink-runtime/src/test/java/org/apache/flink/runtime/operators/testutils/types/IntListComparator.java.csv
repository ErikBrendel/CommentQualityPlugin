commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(IntList record) {     return record.getKey() * 73. }
false;public;1;4;;@Override public void setReference(IntList toCompare) {     this.reference = toCompare.getKey(). }
false;public;1;4;;@Override public boolean equalToReference(IntList candidate) {     return candidate.getKey() == this.reference. }
false;public;1;5;;@Override public int compareToReference(TypeComparator<IntList> referencedComparator) {     final IntListComparator comp = (IntListComparator) referencedComparator.     return comp.reference - this.reference. }
false;public;2;4;;@Override public int compare(IntList first, IntList second) {     return first.getKey() - second.getKey(). }
false;public;2;4;;@Override public int compareSerialized(DataInputView source1, DataInputView source2) throws IOException {     return source1.readInt() - source2.readInt(). }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return true. }
false;public;0;4;;@Override public boolean supportsSerializationWithKeyNormalization() {     return true. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return 4. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < 4. }
false;public;4;21;;@Override public void putNormalizedKey(IntList record, MemorySegment target, int offset, int len) {     final int value = record.getKey() - Integer.MIN_VALUE.     if (len == 4) {         target.putIntBigEndian(offset, value).     } else if (len <= 0) {     } else if (len < 4) {         for (int i = 0. len > 0. len--, i++) {             target.put(offset + i, (byte) ((value >>> ((3 - i) << 3)) & 0xff)).         }     } else {         target.putIntBigEndian(offset, value).         for (int i = 4. i < len. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;2;9;;@Override public void writeWithKeyNormalization(IntList record, DataOutputView target) throws IOException {     target.writeInt(record.getKey() - Integer.MIN_VALUE).     target.writeInt(record.getValue().length).     for (int i = 0. i < record.getValue().length. i++) {         target.writeInt(record.getValue()[i]).     } }
false;public;2;11;;@Override public IntList readWithKeyDenormalization(IntList record, DataInputView source) throws IOException {     record.setKey(source.readInt() + Integer.MIN_VALUE).     int[] value = new int[source.readInt()].     for (int i = 0. i < value.length. i++) {         value[i] = source.readInt().     }     record.setValue(value).     return record. }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return false. }
false;public;0;4;;@Override public TypeComparator<IntList> duplicate() {     return new IntListComparator(). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = (Comparable) record.     return 1. }
false;public;0;3;;@Override public TypeComparator[] getFlatComparators() {     return comparators. }
