commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;0;7;;public synchronized void rethrowError() throws TestingException {     final Throwable throwable = getException().     if (throwable != null) {         throw new TestingException(throwable).     } }
false;public,synchronized;0;3;;public synchronized boolean hasExceptionOccurred() {     return errorFuture.isDone(). }
false;public,synchronized;0;19;;@Nullable public synchronized Throwable getException() {     if (errorFuture.isDone()) {         Throwable throwable.         try {             throwable = errorFuture.get().         } catch (InterruptedException ie) {             ExceptionUtils.checkInterrupted(ie).             throw new FlinkRuntimeException("This should never happen since the future was completed.").         } catch (ExecutionException e) {             throwable = ExceptionUtils.stripExecutionException(e).         }         return throwable.     } else {         return null.     } }
false;public,synchronized;0;3;;public synchronized CompletableFuture<Throwable> getErrorFuture() {     return errorFuture. }
false;public,synchronized;0;3;;public synchronized void clearError() {     errorFuture = new CompletableFuture<>(). }
false;public,synchronized;1;12;;@Override public synchronized void onFatalError(@Nonnull Throwable exception) {     LOG.error("OnFatalError:", exception).     if (!errorFuture.complete(exception)) {         final Throwable throwable = getException().         Preconditions.checkNotNull(throwable).         throwable.addSuppressed(exception).     } }
