commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CompletableFuture<DispatcherGateway> getFuture() {     return CompletableFuture.completedFuture(MOCK_DISPATCHER_GATEWAY). }
false;public;0;23;;@Before public void setUp() throws Exception {     MetricFetcher fetcher = new MetricFetcherImpl<RestfulGateway>(mock(GatewayRetriever.class), mock(MetricQueryServiceRetriever.class), Executors.directExecutor(), TestingUtils.TIMEOUT(), MetricOptions.METRIC_FETCHER_UPDATE_INTERVAL.defaultValue()).     store = fetcher.getMetricStore().     Collection<MetricDump> metricDumps = getMetricDumps().     for (MetricDump dump : metricDumps) {         store.add(dump).     }     handler = getHandler(LEADER_RETRIEVER, TIMEOUT, TEST_HEADERS, EXECUTOR, fetcher).     pathParameters = getPathParameters(). }
false;protected;0;3;;protected Map<String, String> getPathParameters() {     return Collections.emptyMap(). }
false;protected,abstract;0;1;;protected abstract Tuple2<String, List<String>> getFilter().
false;protected,abstract;0;1;;protected abstract Collection<MetricDump> getMetricDumps().
false;protected,abstract;5;7;;protected abstract H getHandler(GatewayRetriever<? extends RestfulGateway> leaderRetriever, Time timeout, Map<String, String> responseHeaders, Executor executor, MetricFetcher fetcher).
false;public;0;70;;@Test public void getStores() throws Exception {     {         // test without filter         HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, Collections.emptyMap()).         Collection<? extends MetricStore.ComponentMetricStore> subStores = handler.getStores(store, request).         assertEquals(3, subStores.size()).         List<String> sortedMetrics1 = subStores.stream().map(subStore -> subStore.getMetric("abc.metric1")).filter(Objects::nonNull).sorted().collect(Collectors.toList()).         assertEquals(2, sortedMetrics1.size()).         assertEquals("1", sortedMetrics1.get(0)).         assertEquals("3", sortedMetrics1.get(1)).         List<String> sortedMetrics2 = subStores.stream().map(subStore -> subStore.getMetric("abc.metric2")).filter(Objects::nonNull).sorted().collect(Collectors.toList()).         assertEquals(1, sortedMetrics2.size()).         assertEquals("5", sortedMetrics2.get(0)).     }     {         // test with filter         Tuple2<String, List<String>> filter = getFilter().         Map<String, List<String>> queryParameters = new HashMap<>(4).         queryParameters.put(filter.f0, filter.f1).         HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParameters).         Collection<? extends MetricStore.ComponentMetricStore> subStores = handler.getStores(store, request).         assertEquals(2, subStores.size()).         List<String> sortedMetrics1 = subStores.stream().map(subStore -> subStore.getMetric("abc.metric1")).filter(Objects::nonNull).sorted().collect(Collectors.toList()).         assertEquals(1, sortedMetrics1.size()).         assertEquals("1", sortedMetrics1.get(0)).         List<String> sortedMetrics2 = subStores.stream().map(subStore -> subStore.getMetric("abc.metric2")).filter(Objects::nonNull).sorted().collect(Collectors.toList()).         assertEquals(1, sortedMetrics2.size()).         assertEquals("5", sortedMetrics2.get(0)).     } }
false;public;0;21;;@Test public void testListMetrics() throws Exception {     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, Collections.emptyMap()).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     List<String> availableMetrics = response.getMetrics().stream().map(AggregatedMetric::getId).sorted().collect(Collectors.toList()).     assertEquals(2, availableMetrics.size()).     assertEquals("abc.metric1", availableMetrics.get(0)).     assertEquals("abc.metric2", availableMetrics.get(1)). }
false;public;0;27;;@Test public void testMinAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     queryParams.put("agg", Collections.singletonList("min")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(1.0, aggregatedMetric.getMin(), 0.1).     assertNull(aggregatedMetric.getMax()).     assertNull(aggregatedMetric.getSum()).     assertNull(aggregatedMetric.getAvg()). }
false;public;0;27;;@Test public void testMaxAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     queryParams.put("agg", Collections.singletonList("max")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(3.0, aggregatedMetric.getMax(), 0.1).     assertNull(aggregatedMetric.getMin()).     assertNull(aggregatedMetric.getSum()).     assertNull(aggregatedMetric.getAvg()). }
false;public;0;27;;@Test public void testSumAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     queryParams.put("agg", Collections.singletonList("sum")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(4.0, aggregatedMetric.getSum(), 0.1).     assertNull(aggregatedMetric.getMin()).     assertNull(aggregatedMetric.getMax()).     assertNull(aggregatedMetric.getAvg()). }
false;public;0;27;;@Test public void testAvgAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     queryParams.put("agg", Collections.singletonList("avg")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(2.0, aggregatedMetric.getAvg(), 0.1).     assertNull(aggregatedMetric.getMin()).     assertNull(aggregatedMetric.getMax()).     assertNull(aggregatedMetric.getSum()). }
false;public;0;27;;@Test public void testMultipleAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     queryParams.put("agg", Arrays.asList("min", "max", "avg")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(1.0, aggregatedMetric.getMin(), 0.1).     assertEquals(3.0, aggregatedMetric.getMax(), 0.1).     assertEquals(2.0, aggregatedMetric.getAvg(), 0.1).     assertNull(aggregatedMetric.getSum()). }
false;public;0;26;;@Test public void testDefaultAggregation() throws Exception {     Map<String, List<String>> queryParams = new HashMap<>(4).     queryParams.put("get", Collections.singletonList("abc.metric1")).     HandlerRequest<EmptyRequestBody, P> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), handler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, queryParams).     AggregatedMetricsResponseBody response = handler.handleRequest(request, MOCK_DISPATCHER_GATEWAY).get().     Collection<AggregatedMetric> aggregatedMetrics = response.getMetrics().     assertEquals(1, aggregatedMetrics.size()).     AggregatedMetric aggregatedMetric = aggregatedMetrics.iterator().next().     assertEquals("abc.metric1", aggregatedMetric.getId()).     assertEquals(1.0, aggregatedMetric.getMin(), 0.1).     assertEquals(3.0, aggregatedMetric.getMax(), 0.1).     assertEquals(2.0, aggregatedMetric.getAvg(), 0.1).     assertEquals(4.0, aggregatedMetric.getSum(), 0.1). }
