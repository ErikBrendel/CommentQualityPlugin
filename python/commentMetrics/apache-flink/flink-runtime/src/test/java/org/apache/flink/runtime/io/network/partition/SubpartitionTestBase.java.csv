commented;modifiers;parameterAmount;loc;comment;code
true;abstract;0;1;/**  * Return the subpartition to be tested.  */ ;/**  * Return the subpartition to be tested.  */ abstract ResultSubpartition createSubpartition().
false;public;0;25;;// ------------------------------------------------------------------------ @Test public void testAddAfterFinish() throws Exception {     final ResultSubpartition subpartition = createSubpartition().     try {         subpartition.finish().         assertEquals(1, subpartition.getTotalNumberOfBuffers()).         // only updated after consuming the buffers         assertEquals(0, subpartition.getTotalNumberOfBytes()).         assertEquals(1, subpartition.getTotalNumberOfBuffers()).         assertEquals(0, subpartition.getBuffersInBacklog()).         // only updated after consuming the buffers         assertEquals(0, subpartition.getTotalNumberOfBytes()).         BufferConsumer bufferConsumer = createFilledBufferConsumer(4096, 4096).         assertFalse(subpartition.add(bufferConsumer)).         assertEquals(1, subpartition.getTotalNumberOfBuffers()).         assertEquals(0, subpartition.getBuffersInBacklog()).         // only updated after consuming the buffers         assertEquals(0, subpartition.getTotalNumberOfBytes()).     } finally {         if (subpartition != null) {             subpartition.release().         }     } }
false;public;0;25;;@Test public void testAddAfterRelease() throws Exception {     final ResultSubpartition subpartition = createSubpartition().     try {         subpartition.release().         assertEquals(0, subpartition.getTotalNumberOfBuffers()).         assertEquals(0, subpartition.getTotalNumberOfBytes()).         assertEquals(0, subpartition.getTotalNumberOfBuffers()).         assertEquals(0, subpartition.getBuffersInBacklog()).         assertEquals(0, subpartition.getTotalNumberOfBytes()).         BufferConsumer bufferConsumer = createFilledBufferConsumer(4096, 4096).         assertFalse(subpartition.add(bufferConsumer)).         assertEquals(0, subpartition.getTotalNumberOfBuffers()).         assertEquals(0, subpartition.getBuffersInBacklog()).         assertEquals(0, subpartition.getTotalNumberOfBytes()).     } finally {         if (subpartition != null) {             subpartition.release().         }     } }
false;public;0;5;;@Test public void testReleaseParent() throws Exception {     final ResultSubpartition partition = createSubpartition().     verifyViewReleasedAfterParentRelease(partition). }
false;public;0;7;;@Test public void testReleaseParentAfterSpilled() throws Exception {     final ResultSubpartition partition = createSubpartition().     partition.releaseMemory().     verifyViewReleasedAfterParentRelease(partition). }
false;private;1;21;;private void verifyViewReleasedAfterParentRelease(ResultSubpartition partition) throws Exception {     // Add a bufferConsumer     BufferConsumer bufferConsumer = createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE).     partition.add(bufferConsumer).     partition.finish().     // Create the view     BufferAvailabilityListener listener = mock(BufferAvailabilityListener.class).     ResultSubpartitionView view = partition.createReadView(listener).     // The added bufferConsumer and end-of-partition event     assertNotNull(view.getNextBuffer()).     assertNotNull(view.getNextBuffer()).     // Release the parent     assertFalse(view.isReleased()).     partition.release().     // Verify that parent release is reflected at partition view     assertTrue(view.isReleased()). }
false;static;6;17;;static void assertNextBuffer(ResultSubpartitionView readView, int expectedReadableBufferSize, boolean expectedIsMoreAvailable, int expectedBuffersInBacklog, boolean expectedNextBufferIsEvent, boolean expectedRecycledAfterRecycle) throws IOException, InterruptedException {     assertNextBufferOrEvent(readView, expectedReadableBufferSize, true, null, expectedIsMoreAvailable, expectedBuffersInBacklog, expectedNextBufferIsEvent, expectedRecycledAfterRecycle). }
false;static;7;18;;static void assertNextEvent(ResultSubpartitionView readView, int expectedReadableBufferSize, Class<? extends AbstractEvent> expectedEventClass, boolean expectedIsMoreAvailable, int expectedBuffersInBacklog, boolean expectedNextBufferIsEvent, boolean expectedRecycledAfterRecycle) throws IOException, InterruptedException {     assertNextBufferOrEvent(readView, expectedReadableBufferSize, false, expectedEventClass, expectedIsMoreAvailable, expectedBuffersInBacklog, expectedNextBufferIsEvent, expectedRecycledAfterRecycle). }
false;private,static;8;38;;private static void assertNextBufferOrEvent(ResultSubpartitionView readView, int expectedReadableBufferSize, boolean expectedIsBuffer, @Nullable Class<? extends AbstractEvent> expectedEventClass, boolean expectedIsMoreAvailable, int expectedBuffersInBacklog, boolean expectedNextBufferIsEvent, boolean expectedRecycledAfterRecycle) throws IOException, InterruptedException {     checkArgument(expectedEventClass == null || !expectedIsBuffer).     ResultSubpartition.BufferAndBacklog bufferAndBacklog = readView.getNextBuffer().     assertNotNull(bufferAndBacklog).     try {         assertEquals("buffer size", expectedReadableBufferSize, bufferAndBacklog.buffer().readableBytes()).         assertEquals("buffer or event", expectedIsBuffer, bufferAndBacklog.buffer().isBuffer()).         if (expectedEventClass != null) {             assertThat(EventSerializer.fromBuffer(bufferAndBacklog.buffer(), ClassLoader.getSystemClassLoader()), instanceOf(expectedEventClass)).         }         assertEquals("more available", expectedIsMoreAvailable, bufferAndBacklog.isMoreAvailable()).         assertEquals("more available", expectedIsMoreAvailable, readView.isAvailable()).         assertEquals("backlog", expectedBuffersInBacklog, bufferAndBacklog.buffersInBacklog()).         assertEquals("next is event", expectedNextBufferIsEvent, bufferAndBacklog.nextBufferIsEvent()).         assertEquals("next is event", expectedNextBufferIsEvent, readView.nextBufferIsEvent()).         assertFalse("not recycled", bufferAndBacklog.buffer().isRecycled()).     } finally {         bufferAndBacklog.buffer().recycleBuffer().     }     assertEquals("recycled", expectedRecycledAfterRecycle, bufferAndBacklog.buffer().isRecycled()). }
false;static;1;3;;static void assertNoNextBuffer(ResultSubpartitionView readView) throws IOException, InterruptedException {     assertNull(readView.getNextBuffer()). }
