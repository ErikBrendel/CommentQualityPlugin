commented;modifiers;parameterAmount;loc;comment;code
true;public;0;18;/**  * Verifies that a reporter can be configured with all it's arguments being forwarded.  */ ;/**  * Verifies that a reporter can be configured with all it's arguments being forwarded.  */ @Test public void testReporterArgumentForwarding() {     final Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter.arg1", "value1").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter.arg2", "value2").     final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(config).     Assert.assertEquals(1, metricRegistryConfiguration.getReporterConfigurations().size()).     final Tuple2<String, Configuration> stringConfigurationTuple = metricRegistryConfiguration.getReporterConfigurations().get(0).     Assert.assertEquals("reporter", stringConfigurationTuple.f0).     Assert.assertEquals("value1", stringConfigurationTuple.f1.getString("arg1", null)).     Assert.assertEquals("value2", stringConfigurationTuple.f1.getString("arg2", null)).     Assert.assertEquals(TestReporter1.class.getName(), stringConfigurationTuple.f1.getString("class", null)). }
true;public;0;34;/**  * Verifies that multiple reporters can be configured with all their arguments being forwarded.  */ ;/**  * Verifies that multiple reporters can be configured with all their arguments being forwarded.  */ @Test public void testSeveralReportersWithArgumentForwarding() {     final Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1.arg1", "value1").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1.arg2", "value2").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter2.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2.arg1", "value1").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2.arg3", "value3").     final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(config).     Assert.assertEquals(2, metricRegistryConfiguration.getReporterConfigurations().size()).     final Optional<Tuple2<String, Configuration>> reporter1Config = metricRegistryConfiguration.getReporterConfigurations().stream().filter(c -> "reporter1".equals(c.f0)).findFirst().     Assert.assertTrue(reporter1Config.isPresent()).     Assert.assertEquals("reporter1", reporter1Config.get().f0).     Assert.assertEquals("value1", reporter1Config.get().f1.getString("arg1", "")).     Assert.assertEquals("value2", reporter1Config.get().f1.getString("arg2", "")).     Assert.assertEquals(TestReporter1.class.getName(), reporter1Config.get().f1.getString("class", null)).     final Optional<Tuple2<String, Configuration>> reporter2Config = metricRegistryConfiguration.getReporterConfigurations().stream().filter(c -> "reporter2".equals(c.f0)).findFirst().     Assert.assertTrue(reporter1Config.isPresent()).     Assert.assertEquals("reporter2", reporter2Config.get().f0).     Assert.assertEquals("value1", reporter2Config.get().f1.getString("arg1", null)).     Assert.assertEquals("value3", reporter2Config.get().f1.getString("arg3", null)).     Assert.assertEquals(TestReporter2.class.getName(), reporter2Config.get().f1.getString("class", null)). }
true;public;0;25;/**  * Verifies that {@link MetricOptions#REPORTERS_LIST} is correctly used to filter configured reporters.  */ ;/**  * Verifies that {@link MetricOptions#REPORTERS_LIST} is correctly used to filter configured reporters.  */ @Test public void testActivateOneReporterAmongTwoDeclared() {     final Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1.arg1", "value1").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter1.arg2", "value2").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter2.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2.arg1", "value1").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "reporter2.arg3", "value3").     config.setString(MetricOptions.REPORTERS_LIST, "reporter2").     final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(config).     Assert.assertEquals(1, metricRegistryConfiguration.getReporterConfigurations().size()).     final Tuple2<String, Configuration> stringConfigurationTuple = metricRegistryConfiguration.getReporterConfigurations().get(0).     Assert.assertEquals("reporter2", stringConfigurationTuple.f0).     Assert.assertEquals("reporter2", stringConfigurationTuple.f0).     Assert.assertEquals("value1", stringConfigurationTuple.f1.getString("arg1", null)).     Assert.assertEquals("value3", stringConfigurationTuple.f1.getString("arg3", null)).     Assert.assertEquals(TestReporter2.class.getName(), stringConfigurationTuple.f1.getString("class", null)). }
