commented;modifiers;parameterAmount;loc;comment;code
true;public;0;47;/**  * Validate that all states can be correctly registered at the registry.  */ ;/**  * Validate that all states can be correctly registered at the registry.  */ @Test public void testRegistryNormal() {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     // register one state     TestSharedState firstState = new TestSharedState("first").     SharedStateRegistry.Result result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState).     assertEquals(1, result.getReferenceCount()).     assertTrue(firstState == result.getReference()).     assertFalse(firstState.isDiscarded()).     // register another state     TestSharedState secondState = new TestSharedState("second").     result = sharedStateRegistry.registerReference(secondState.getRegistrationKey(), secondState).     assertEquals(1, result.getReferenceCount()).     assertTrue(secondState == result.getReference()).     assertFalse(firstState.isDiscarded()).     assertFalse(secondState.isDiscarded()).     // attempt to register state under an existing key     TestSharedState firstStatePrime = new TestSharedState(firstState.getRegistrationKey().getKeyString()).     result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstStatePrime).     assertEquals(2, result.getReferenceCount()).     assertFalse(firstStatePrime == result.getReference()).     assertTrue(firstState == result.getReference()).     assertTrue(firstStatePrime.isDiscarded()).     assertFalse(firstState.isDiscarded()).     // reference the first state again     result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState).     assertEquals(3, result.getReferenceCount()).     assertTrue(firstState == result.getReference()).     assertFalse(firstState.isDiscarded()).     // unregister the second state     result = sharedStateRegistry.unregisterReference(secondState.getRegistrationKey()).     assertEquals(0, result.getReferenceCount()).     assertTrue(result.getReference() == null).     assertTrue(secondState.isDiscarded()).     // unregister the first state     result = sharedStateRegistry.unregisterReference(firstState.getRegistrationKey()).     assertEquals(2, result.getReferenceCount()).     assertTrue(firstState == result.getReference()).     assertFalse(firstState.isDiscarded()). }
true;public;0;5;/**  * Validate that unregister a nonexistent key will throw exception  */ ;/**  * Validate that unregister a nonexistent key will throw exception  */ @Test(expected = IllegalStateException.class) public void testUnregisterWithUnexistedKey() {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     sharedStateRegistry.unregisterReference(new SharedStateRegistryKey("non-existent")). }
false;public;0;3;;public SharedStateRegistryKey getRegistrationKey() {     return key. }
false;public;0;4;;@Override public void discardState() throws Exception {     this.discarded = true. }
false;public;0;4;;@Override public long getStateSize() {     return key.toString().length(). }
false;public;0;4;;@Override public int hashCode() {     return key.hashCode(). }
false;public;0;4;;@Override public FSDataInputStream openInputStream() throws IOException {     throw new UnsupportedOperationException(). }
false;public;0;3;;public boolean isDiscarded() {     return discarded. }
