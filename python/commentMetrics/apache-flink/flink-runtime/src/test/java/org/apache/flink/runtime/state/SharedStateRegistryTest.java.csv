# id;timestamp;commentText;codeText;commentWords;codeWords
SharedStateRegistryTest -> @Test(expected = IllegalStateException.class) 	public void testUnregisterWithUnexistedKey();1492867556;Validate that unregister an unexisted key will throw exception;@Test(expected = IllegalStateException.class)_	public void testUnregisterWithUnexistedKey() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		sharedStateRegistry.unregister(new TestSharedState("unexisted"))__	};validate,that,unregister,an,unexisted,key,will,throw,exception;test,expected,illegal,state,exception,class,public,void,test,unregister,with,unexisted,key,shared,state,registry,shared,state,registry,new,shared,state,registry,shared,state,registry,unregister,new,test,shared,state,unexisted
SharedStateRegistryTest -> @Test(expected = IllegalStateException.class) 	public void testUnregisterWithUnexistedKey();1492867556;Validate that unregister an unexisted key will throw exception;@Test(expected = IllegalStateException.class)_	public void testUnregisterWithUnexistedKey() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		sharedStateRegistry.unregister(new TestSharedState("unexisted"))__	};validate,that,unregister,an,unexisted,key,will,throw,exception;test,expected,illegal,state,exception,class,public,void,test,unregister,with,unexisted,key,shared,state,registry,shared,state,registry,new,shared,state,registry,shared,state,registry,unregister,new,test,shared,state,unexisted
SharedStateRegistryTest -> @Test(expected = IllegalStateException.class) 	public void testUnregisterWithUnexistedKey();1494762590;Validate that unregister an unexisted key will throw exception;@Test(expected = IllegalStateException.class)_	public void testUnregisterWithUnexistedKey() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		sharedStateRegistry.releaseReference(new SharedStateRegistryKey("non-existent"))__	};validate,that,unregister,an,unexisted,key,will,throw,exception;test,expected,illegal,state,exception,class,public,void,test,unregister,with,unexisted,key,shared,state,registry,shared,state,registry,new,shared,state,registry,shared,state,registry,release,reference,new,shared,state,registry,key,non,existent
SharedStateRegistryTest -> @Test(expected = IllegalStateException.class) 	public void testUnregisterWithUnexistedKey();1495184252;Validate that unregister an unexisted key will throw exception;@Test(expected = IllegalStateException.class)_	public void testUnregisterWithUnexistedKey() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		sharedStateRegistry.unregisterReference(new SharedStateRegistryKey("non-existent"))__	};validate,that,unregister,an,unexisted,key,will,throw,exception;test,expected,illegal,state,exception,class,public,void,test,unregister,with,unexisted,key,shared,state,registry,shared,state,registry,new,shared,state,registry,shared,state,registry,unregister,reference,new,shared,state,registry,key,non,existent
SharedStateRegistryTest -> @Test(expected = IllegalStateException.class) 	public void testUnregisterWithUnexistedKey();1515177485;Validate that unregister a nonexistent key will throw exception;@Test(expected = IllegalStateException.class)_	public void testUnregisterWithUnexistedKey() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		sharedStateRegistry.unregisterReference(new SharedStateRegistryKey("non-existent"))__	};validate,that,unregister,a,nonexistent,key,will,throw,exception;test,expected,illegal,state,exception,class,public,void,test,unregister,with,unexisted,key,shared,state,registry,shared,state,registry,new,shared,state,registry,shared,state,registry,unregister,reference,new,shared,state,registry,key,non,existent
SharedStateRegistryTest -> @Test 	public void testRegistryNormal();1492867556;Validate that all states can be correctly registered at the registry.;@Test_	public void testRegistryNormal() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		_		TestSharedState firstState = new TestSharedState("first")__		sharedStateRegistry.register(firstState, true)__		assertEquals(1, sharedStateRegistry.getReferenceCount(firstState))___		_		TestSharedState secondState = new TestSharedState("second")__		sharedStateRegistry.register(secondState, true)__		assertEquals(1, sharedStateRegistry.getReferenceCount(secondState))___		_		sharedStateRegistry.register(firstState, false)__		assertEquals(2, sharedStateRegistry.getReferenceCount(firstState))___		_		sharedStateRegistry.unregister(secondState)__		assertEquals(0, sharedStateRegistry.getReferenceCount(secondState))___		_		sharedStateRegistry.unregister(firstState)__		assertEquals(1, sharedStateRegistry.getReferenceCount(firstState))__	};validate,that,all,states,can,be,correctly,registered,at,the,registry;test,public,void,test,registry,normal,shared,state,registry,shared,state,registry,new,shared,state,registry,test,shared,state,first,state,new,test,shared,state,first,shared,state,registry,register,first,state,true,assert,equals,1,shared,state,registry,get,reference,count,first,state,test,shared,state,second,state,new,test,shared,state,second,shared,state,registry,register,second,state,true,assert,equals,1,shared,state,registry,get,reference,count,second,state,shared,state,registry,register,first,state,false,assert,equals,2,shared,state,registry,get,reference,count,first,state,shared,state,registry,unregister,second,state,assert,equals,0,shared,state,registry,get,reference,count,second,state,shared,state,registry,unregister,first,state,assert,equals,1,shared,state,registry,get,reference,count,first,state
SharedStateRegistryTest -> @Test 	public void testRegistryNormal();1492867556;Validate that all states can be correctly registered at the registry.;@Test_	public void testRegistryNormal() {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		_		TestSharedState firstState = new TestSharedState("first")__		assertEquals(1, sharedStateRegistry.register(firstState))___		_		TestSharedState secondState = new TestSharedState("second")__		assertEquals(1, sharedStateRegistry.register(secondState))___		_		assertEquals(2, sharedStateRegistry.register(firstState))___		_		assertEquals(0, sharedStateRegistry.unregister(secondState))___		_		assertEquals(1, sharedStateRegistry.unregister(firstState))__	};validate,that,all,states,can,be,correctly,registered,at,the,registry;test,public,void,test,registry,normal,shared,state,registry,shared,state,registry,new,shared,state,registry,test,shared,state,first,state,new,test,shared,state,first,assert,equals,1,shared,state,registry,register,first,state,test,shared,state,second,state,new,test,shared,state,second,assert,equals,1,shared,state,registry,register,second,state,assert,equals,2,shared,state,registry,register,first,state,assert,equals,0,shared,state,registry,unregister,second,state,assert,equals,1,shared,state,registry,unregister,first,state
SharedStateRegistryTest -> @Test 	public void testRegistryNormal();1494762590;Validate that all states can be correctly registered at the registry.;@Test_	public void testRegistryNormal() {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		_		TestSharedState firstState = new TestSharedState("first")__		SharedStateRegistry.Result result = sharedStateRegistry.registerNewReference(firstState.getRegistrationKey(), firstState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		TestSharedState secondState = new TestSharedState("second")__		result = sharedStateRegistry.registerNewReference(secondState.getRegistrationKey(), secondState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(secondState == result.getReference())__		assertFalse(firstState.isDiscarded())__		assertFalse(secondState.isDiscarded())___		_		TestSharedState firstStatePrime = new TestSharedState(firstState.getRegistrationKey().getKeyString())__		result = sharedStateRegistry.registerNewReference(firstState.getRegistrationKey(), firstStatePrime)__		assertEquals(2, result.getReferenceCount())__		assertFalse(firstStatePrime == result.getReference())__		assertTrue(firstState == result.getReference())__		assertTrue(firstStatePrime.isDiscarded())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.obtainReference(firstState.getRegistrationKey())__		assertEquals(3, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.releaseReference(secondState.getRegistrationKey())__		assertEquals(0, result.getReferenceCount())__		assertTrue(result.getReference() == null)__		assertTrue(secondState.isDiscarded())___		_		result = sharedStateRegistry.releaseReference(firstState.getRegistrationKey())__		assertEquals(2, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())__	};validate,that,all,states,can,be,correctly,registered,at,the,registry;test,public,void,test,registry,normal,shared,state,registry,shared,state,registry,new,shared,state,registry,test,shared,state,first,state,new,test,shared,state,first,shared,state,registry,result,result,shared,state,registry,register,new,reference,first,state,get,registration,key,first,state,assert,equals,1,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,test,shared,state,second,state,new,test,shared,state,second,result,shared,state,registry,register,new,reference,second,state,get,registration,key,second,state,assert,equals,1,result,get,reference,count,assert,true,second,state,result,get,reference,assert,false,first,state,is,discarded,assert,false,second,state,is,discarded,test,shared,state,first,state,prime,new,test,shared,state,first,state,get,registration,key,get,key,string,result,shared,state,registry,register,new,reference,first,state,get,registration,key,first,state,prime,assert,equals,2,result,get,reference,count,assert,false,first,state,prime,result,get,reference,assert,true,first,state,result,get,reference,assert,true,first,state,prime,is,discarded,assert,false,first,state,is,discarded,result,shared,state,registry,obtain,reference,first,state,get,registration,key,assert,equals,3,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,result,shared,state,registry,release,reference,second,state,get,registration,key,assert,equals,0,result,get,reference,count,assert,true,result,get,reference,null,assert,true,second,state,is,discarded,result,shared,state,registry,release,reference,first,state,get,registration,key,assert,equals,2,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded
SharedStateRegistryTest -> @Test 	public void testRegistryNormal();1495184252;Validate that all states can be correctly registered at the registry.;@Test_	public void testRegistryNormal() {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		_		TestSharedState firstState = new TestSharedState("first")__		SharedStateRegistry.Result result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		TestSharedState secondState = new TestSharedState("second")__		result = sharedStateRegistry.registerReference(secondState.getRegistrationKey(), secondState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(secondState == result.getReference())__		assertFalse(firstState.isDiscarded())__		assertFalse(secondState.isDiscarded())___		_		TestSharedState firstStatePrime = new TestSharedState(firstState.getRegistrationKey().getKeyString())__		result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstStatePrime)__		assertEquals(2, result.getReferenceCount())__		assertFalse(firstStatePrime == result.getReference())__		assertTrue(firstState == result.getReference())__		assertTrue(firstStatePrime.isDiscarded())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState)__		assertEquals(3, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.unregisterReference(secondState.getRegistrationKey())__		assertEquals(0, result.getReferenceCount())__		assertTrue(result.getReference() == null)__		assertTrue(secondState.isDiscarded())___		_		result = sharedStateRegistry.unregisterReference(firstState.getRegistrationKey())__		assertEquals(2, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())__	};validate,that,all,states,can,be,correctly,registered,at,the,registry;test,public,void,test,registry,normal,shared,state,registry,shared,state,registry,new,shared,state,registry,test,shared,state,first,state,new,test,shared,state,first,shared,state,registry,result,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,assert,equals,1,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,test,shared,state,second,state,new,test,shared,state,second,result,shared,state,registry,register,reference,second,state,get,registration,key,second,state,assert,equals,1,result,get,reference,count,assert,true,second,state,result,get,reference,assert,false,first,state,is,discarded,assert,false,second,state,is,discarded,test,shared,state,first,state,prime,new,test,shared,state,first,state,get,registration,key,get,key,string,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,prime,assert,equals,2,result,get,reference,count,assert,false,first,state,prime,result,get,reference,assert,true,first,state,result,get,reference,assert,true,first,state,prime,is,discarded,assert,false,first,state,is,discarded,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,assert,equals,3,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,result,shared,state,registry,unregister,reference,second,state,get,registration,key,assert,equals,0,result,get,reference,count,assert,true,result,get,reference,null,assert,true,second,state,is,discarded,result,shared,state,registry,unregister,reference,first,state,get,registration,key,assert,equals,2,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded
SharedStateRegistryTest -> @Test 	public void testRegistryNormal();1515177485;Validate that all states can be correctly registered at the registry.;@Test_	public void testRegistryNormal() {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		_		TestSharedState firstState = new TestSharedState("first")__		SharedStateRegistry.Result result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		TestSharedState secondState = new TestSharedState("second")__		result = sharedStateRegistry.registerReference(secondState.getRegistrationKey(), secondState)__		assertEquals(1, result.getReferenceCount())__		assertTrue(secondState == result.getReference())__		assertFalse(firstState.isDiscarded())__		assertFalse(secondState.isDiscarded())___		_		TestSharedState firstStatePrime = new TestSharedState(firstState.getRegistrationKey().getKeyString())__		result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstStatePrime)__		assertEquals(2, result.getReferenceCount())__		assertFalse(firstStatePrime == result.getReference())__		assertTrue(firstState == result.getReference())__		assertTrue(firstStatePrime.isDiscarded())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.registerReference(firstState.getRegistrationKey(), firstState)__		assertEquals(3, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())___		_		result = sharedStateRegistry.unregisterReference(secondState.getRegistrationKey())__		assertEquals(0, result.getReferenceCount())__		assertTrue(result.getReference() == null)__		assertTrue(secondState.isDiscarded())___		_		result = sharedStateRegistry.unregisterReference(firstState.getRegistrationKey())__		assertEquals(2, result.getReferenceCount())__		assertTrue(firstState == result.getReference())__		assertFalse(firstState.isDiscarded())__	};validate,that,all,states,can,be,correctly,registered,at,the,registry;test,public,void,test,registry,normal,shared,state,registry,shared,state,registry,new,shared,state,registry,test,shared,state,first,state,new,test,shared,state,first,shared,state,registry,result,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,assert,equals,1,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,test,shared,state,second,state,new,test,shared,state,second,result,shared,state,registry,register,reference,second,state,get,registration,key,second,state,assert,equals,1,result,get,reference,count,assert,true,second,state,result,get,reference,assert,false,first,state,is,discarded,assert,false,second,state,is,discarded,test,shared,state,first,state,prime,new,test,shared,state,first,state,get,registration,key,get,key,string,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,prime,assert,equals,2,result,get,reference,count,assert,false,first,state,prime,result,get,reference,assert,true,first,state,result,get,reference,assert,true,first,state,prime,is,discarded,assert,false,first,state,is,discarded,result,shared,state,registry,register,reference,first,state,get,registration,key,first,state,assert,equals,3,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded,result,shared,state,registry,unregister,reference,second,state,get,registration,key,assert,equals,0,result,get,reference,count,assert,true,result,get,reference,null,assert,true,second,state,is,discarded,result,shared,state,registry,unregister,reference,first,state,get,registration,key,assert,equals,2,result,get,reference,count,assert,true,first,state,result,get,reference,assert,false,first,state,is,discarded
