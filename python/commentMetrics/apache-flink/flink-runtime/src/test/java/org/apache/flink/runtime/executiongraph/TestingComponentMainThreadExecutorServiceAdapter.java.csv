commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void execute(Runnable command) {     assert MainThreadValidatorUtil.isRunningInExpectedThread(main).     super.execute(command). }
false;public,static;0;10;;public static TestingComponentMainThreadExecutorServiceAdapter forMainThread() {     final Thread main = Thread.currentThread().     return new TestingComponentMainThreadExecutorServiceAdapter(new DirectScheduledExecutorService() {          @Override         public void execute(Runnable command) {             assert MainThreadValidatorUtil.isRunningInExpectedThread(main).             super.execute(command).         }     }, main). }
true;public,static;1;5;/**  * Creates a test executor that delegates to the given {@link ScheduledExecutorService}. The given executor must  * execute all submissions with the same thread.  */ ;/**  * Creates a test executor that delegates to the given {@link ScheduledExecutorService}. The given executor must  * execute all submissions with the same thread.  */ public static TestingComponentMainThreadExecutorServiceAdapter forSingleThreadExecutor(@Nonnull ScheduledExecutorService singleThreadExecutor) {     Thread thread = CompletableFuture.supplyAsync(Thread::currentThread, singleThreadExecutor).join().     return new TestingComponentMainThreadExecutorServiceAdapter(singleThreadExecutor, thread). }
