# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateLocationRegistryTest -> @Test 	public void testRegisterDuplicateName() throws Exception;1470753725;Tests that registrations with duplicate names throw an Exception.;@Test_	public void testRegisterDuplicateName() throws Exception {_		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)___		String registrationName = "duplicated-name"__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				0,_				registrationName,_				new KvStateID(),_				new KvStateServerAddress(InetAddress.getLocalHost(), 12328))___		try {_			_			registry.notifyKvStateRegistered(_					vertices[1].getJobVertexId(),_					0,_					registrationName,_					new KvStateID(),_					new KvStateServerAddress(InetAddress.getLocalHost(), 12032))___			fail("Did not throw expected Exception after duplicated name")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,registrations,with,duplicate,names,throw,an,exception;test,public,void,test,register,duplicate,name,throws,exception,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,string,registration,name,duplicated,name,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12328,try,registry,notify,kv,state,registered,vertices,1,get,job,vertex,id,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12032,fail,did,not,throw,expected,exception,after,duplicated,name,catch,illegal,state,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testRegisterDuplicateName() throws Exception;1474626282;Tests that registrations with duplicate names throw an Exception.;@Test_	public void testRegisterDuplicateName() throws Exception {_		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)___		String registrationName = "duplicated-name"__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				registrationName,_				new KvStateID(),_				new KvStateServerAddress(InetAddress.getLocalHost(), 12328))___		try {_			_			registry.notifyKvStateRegistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					registrationName,_					new KvStateID(),_					new KvStateServerAddress(InetAddress.getLocalHost(), 12032))___			fail("Did not throw expected Exception after duplicated name")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,registrations,with,duplicate,names,throw,an,exception;test,public,void,test,register,duplicate,name,throws,exception,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,string,registration,name,duplicated,name,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12328,try,registry,notify,kv,state,registered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12032,fail,did,not,throw,expected,exception,after,duplicated,name,catch,illegal,state,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testRegisterDuplicateName() throws Exception;1499682192;Tests that registrations with duplicate names throw an Exception.;@Test_	public void testRegisterDuplicateName() throws Exception {_		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)___		String registrationName = "duplicated-name"__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				registrationName,_				new KvStateID(),_				new KvStateServerAddress(InetAddress.getLocalHost(), 12328))___		try {_			_			registry.notifyKvStateRegistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					registrationName,_					new KvStateID(),_					new KvStateServerAddress(InetAddress.getLocalHost(), 12032))___			fail("Did not throw expected Exception after duplicated name")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,registrations,with,duplicate,names,throw,an,exception;test,public,void,test,register,duplicate,name,throws,exception,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,string,registration,name,duplicated,name,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12328,try,registry,notify,kv,state,registered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,kv,state,server,address,inet,address,get,local,host,12032,fail,did,not,throw,expected,exception,after,duplicated,name,catch,illegal,state,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testRegisterDuplicateName() throws Exception;1509037054;Tests that registrations with duplicate names throw an Exception.;@Test_	public void testRegisterDuplicateName() throws Exception {_		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)___		String registrationName = "duplicated-name"__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				registrationName,_				new KvStateID(),_				new InetSocketAddress(InetAddress.getLocalHost(), 12328))___		try {_			_			registry.notifyKvStateRegistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					registrationName,_					new KvStateID(),_					new InetSocketAddress(InetAddress.getLocalHost(), 12032))___			fail("Did not throw expected Exception after duplicated name")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,registrations,with,duplicate,names,throw,an,exception;test,public,void,test,register,duplicate,name,throws,exception,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,string,registration,name,duplicated,name,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,inet,socket,address,inet,address,get,local,host,12328,try,registry,notify,kv,state,registered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,inet,socket,address,inet,address,get,local,host,12032,fail,did,not,throw,expected,exception,after,duplicated,name,catch,illegal,state,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testRegisterDuplicateName() throws Exception;1515177485;Tests that registrations with duplicate names throw an Exception.;@Test_	public void testRegisterDuplicateName() throws Exception {_		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)___		String registrationName = "duplicated-name"__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				registrationName,_				new KvStateID(),_				new InetSocketAddress(InetAddress.getLocalHost(), 12328))___		try {_			_			registry.notifyKvStateRegistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					registrationName,_					new KvStateID(),_					new InetSocketAddress(InetAddress.getLocalHost(), 12032))___			fail("Did not throw expected Exception after duplicated name")__		} catch (IllegalStateException ignored) {_			_		}_	};tests,that,registrations,with,duplicate,names,throw,an,exception;test,public,void,test,register,duplicate,name,throws,exception,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,string,registration,name,duplicated,name,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,inet,socket,address,inet,address,get,local,host,12328,try,registry,notify,kv,state,registered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,registration,name,new,kv,state,id,new,inet,socket,address,inet,address,get,local,host,12032,fail,did,not,throw,expected,exception,after,duplicated,name,catch,illegal,state,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testUnregisterBeforeRegister() throws Exception;1470753725;Tests exception on unregistration before registration.;@Test_	public void testUnregisterBeforeRegister() throws Exception {_		ExecutionJobVertex vertex = createJobVertex(4)__		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertex)___		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)__		try {_			registry.notifyKvStateUnregistered(vertex.getJobVertexId(), 0, "any-name")__			fail("Did not throw expected Exception, because of missing registration")__		} catch (IllegalArgumentException ignored) {_			_		}_	};tests,exception,on,unregistration,before,registration;test,public,void,test,unregister,before,register,throws,exception,execution,job,vertex,vertex,create,job,vertex,4,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,try,registry,notify,kv,state,unregistered,vertex,get,job,vertex,id,0,any,name,fail,did,not,throw,expected,exception,because,of,missing,registration,catch,illegal,argument,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testUnregisterBeforeRegister() throws Exception;1474626282;Tests exception on unregistration before registration.;@Test_	public void testUnregisterBeforeRegister() throws Exception {_		ExecutionJobVertex vertex = createJobVertex(4)__		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertex)___		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)__		try {_			registry.notifyKvStateUnregistered(vertex.getJobVertexId(), new KeyGroupRange(0, 0), "any-name")__			fail("Did not throw expected Exception, because of missing registration")__		} catch (IllegalArgumentException ignored) {_			_		}_	};tests,exception,on,unregistration,before,registration;test,public,void,test,unregister,before,register,throws,exception,execution,job,vertex,vertex,create,job,vertex,4,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,try,registry,notify,kv,state,unregistered,vertex,get,job,vertex,id,new,key,group,range,0,0,any,name,fail,did,not,throw,expected,exception,because,of,missing,registration,catch,illegal,argument,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testUnregisterBeforeRegister() throws Exception;1499682192;Tests exception on unregistration before registration.;@Test_	public void testUnregisterBeforeRegister() throws Exception {_		ExecutionJobVertex vertex = createJobVertex(4)__		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertex)___		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)__		try {_			registry.notifyKvStateUnregistered(vertex.getJobVertexId(), new KeyGroupRange(0, 0), "any-name")__			fail("Did not throw expected Exception, because of missing registration")__		} catch (IllegalArgumentException ignored) {_			_		}_	};tests,exception,on,unregistration,before,registration;test,public,void,test,unregister,before,register,throws,exception,execution,job,vertex,vertex,create,job,vertex,4,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,try,registry,notify,kv,state,unregistered,vertex,get,job,vertex,id,new,key,group,range,0,0,any,name,fail,did,not,throw,expected,exception,because,of,missing,registration,catch,illegal,argument,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testUnregisterBeforeRegister() throws Exception;1509037054;Tests exception on unregistration before registration.;@Test_	public void testUnregisterBeforeRegister() throws Exception {_		ExecutionJobVertex vertex = createJobVertex(4)__		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertex)___		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)__		try {_			registry.notifyKvStateUnregistered(vertex.getJobVertexId(), new KeyGroupRange(0, 0), "any-name")__			fail("Did not throw expected Exception, because of missing registration")__		} catch (IllegalArgumentException ignored) {_			_		}_	};tests,exception,on,unregistration,before,registration;test,public,void,test,unregister,before,register,throws,exception,execution,job,vertex,vertex,create,job,vertex,4,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,try,registry,notify,kv,state,unregistered,vertex,get,job,vertex,id,new,key,group,range,0,0,any,name,fail,did,not,throw,expected,exception,because,of,missing,registration,catch,illegal,argument,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testUnregisterBeforeRegister() throws Exception;1515177485;Tests exception on unregistration before registration.;@Test_	public void testUnregisterBeforeRegister() throws Exception {_		ExecutionJobVertex vertex = createJobVertex(4)__		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertex)___		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)__		try {_			registry.notifyKvStateUnregistered(vertex.getJobVertexId(), new KeyGroupRange(0, 0), "any-name")__			fail("Did not throw expected Exception, because of missing registration")__		} catch (IllegalArgumentException ignored) {_			_		}_	};tests,exception,on,unregistration,before,registration;test,public,void,test,unregister,before,register,throws,exception,execution,job,vertex,vertex,create,job,vertex,4,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,try,registry,notify,kv,state,unregistered,vertex,get,job,vertex,id,new,key,group,range,0,0,any,name,fail,did,not,throw,expected,exception,because,of,missing,registration,catch,illegal,argument,exception,ignored
KvStateLocationRegistryTest -> @Test 	public void testRegisterAndLookup() throws Exception;1470753725;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		String[] registrationNames = new String[] {_				"TAsIrGnc7MULwVupNKZ0",_				"086133IrGn0Ii2853237" }___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		_		KvStateID[][] ids = new KvStateID[vertices.length][]__		for (int i = 0_ i < ids.length_ i++) {_			ids[i] = new KvStateID[vertices[i].getParallelism()]__			for (int j = 0_ j < vertices[i].getParallelism()_ j++) {_				ids[i][j] = new KvStateID()__			}_		}__		KvStateServerAddress server = new KvStateServerAddress(InetAddress.getLocalHost(), 12032)___		_		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				_				registry.notifyKvStateRegistered(_						vertices[i].getJobVertexId(),_						keyGroupIndex,_						registrationNames[i],_						ids[i][keyGroupIndex],_						server)__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			KvStateLocation location = registry.getKvStateLocation(registrationNames[i])__			assertNotNull(location)___			int parallelism = vertices[i].getParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < parallelism_ keyGroupIndex++) {_				assertEquals(ids[i][keyGroupIndex], location.getKvStateID(keyGroupIndex))__				assertEquals(server, location.getKvStateServerAddress(keyGroupIndex))__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getParallelism()__			JobVertexID jobVertexId = vertices[i].getJobVertexId()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				registry.notifyKvStateUnregistered(jobVertexId, keyGroupIndex, registrationNames[i])__			}_		}__		for (int i = 0_ i < registrationNames.length_ i++) {_			assertNull(registry.getKvStateLocation(registrationNames[i]))__		}_	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,string,registration,names,new,string,tas,ir,gnc7mulw,vup,nkz0,086133ir,gn0ii2853237,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,kv,state,id,ids,new,kv,state,id,vertices,length,for,int,i,0,i,ids,length,i,ids,i,new,kv,state,id,vertices,i,get,parallelism,for,int,j,0,j,vertices,i,get,parallelism,j,ids,i,j,new,kv,state,id,kv,state,server,address,server,new,kv,state,server,address,inet,address,get,local,host,12032,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,parallelism,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,registered,vertices,i,get,job,vertex,id,key,group,index,registration,names,i,ids,i,key,group,index,server,for,int,i,0,i,vertices,length,i,kv,state,location,location,registry,get,kv,state,location,registration,names,i,assert,not,null,location,int,parallelism,vertices,i,get,parallelism,for,int,key,group,index,0,key,group,index,parallelism,key,group,index,assert,equals,ids,i,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,location,get,kv,state,server,address,key,group,index,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,parallelism,job,vertex,id,job,vertex,id,vertices,i,get,job,vertex,id,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,unregistered,job,vertex,id,key,group,index,registration,names,i,for,int,i,0,i,registration,names,length,i,assert,null,registry,get,kv,state,location,registration,names,i
KvStateLocationRegistryTest -> @Test 	public void testRegisterAndLookup() throws Exception;1474626282;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		String[] registrationNames = new String[] {_				"TAsIrGnc7MULwVupNKZ0",_				"086133IrGn0Ii2853237" }___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		_		KvStateID[][] ids = new KvStateID[vertices.length][]__		for (int i = 0_ i < ids.length_ i++) {_			ids[i] = new KvStateID[vertices[i].getMaxParallelism()]__			for (int j = 0_ j < vertices[i].getMaxParallelism()_ j++) {_				ids[i][j] = new KvStateID()__			}_		}__		KvStateServerAddress server = new KvStateServerAddress(InetAddress.getLocalHost(), 12032)___		_		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				_				registry.notifyKvStateRegistered(_						vertices[i].getJobVertexId(),_						new KeyGroupRange(keyGroupIndex, keyGroupIndex),_						registrationNames[i],_						ids[i][keyGroupIndex],_						server)__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			KvStateLocation location = registry.getKvStateLocation(registrationNames[i])__			assertNotNull(location)___			int maxParallelism = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < maxParallelism_ keyGroupIndex++) {_				assertEquals(ids[i][keyGroupIndex], location.getKvStateID(keyGroupIndex))__				assertEquals(server, location.getKvStateServerAddress(keyGroupIndex))__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			JobVertexID jobVertexId = vertices[i].getJobVertexId()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				registry.notifyKvStateUnregistered(jobVertexId, new KeyGroupRange(keyGroupIndex, keyGroupIndex), registrationNames[i])__			}_		}__		for (int i = 0_ i < registrationNames.length_ i++) {_			assertNull(registry.getKvStateLocation(registrationNames[i]))__		}_	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,string,registration,names,new,string,tas,ir,gnc7mulw,vup,nkz0,086133ir,gn0ii2853237,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,kv,state,id,ids,new,kv,state,id,vertices,length,for,int,i,0,i,ids,length,i,ids,i,new,kv,state,id,vertices,i,get,max,parallelism,for,int,j,0,j,vertices,i,get,max,parallelism,j,ids,i,j,new,kv,state,id,kv,state,server,address,server,new,kv,state,server,address,inet,address,get,local,host,12032,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,registered,vertices,i,get,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,ids,i,key,group,index,server,for,int,i,0,i,vertices,length,i,kv,state,location,location,registry,get,kv,state,location,registration,names,i,assert,not,null,location,int,max,parallelism,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,max,parallelism,key,group,index,assert,equals,ids,i,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,location,get,kv,state,server,address,key,group,index,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,job,vertex,id,job,vertex,id,vertices,i,get,job,vertex,id,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,unregistered,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,for,int,i,0,i,registration,names,length,i,assert,null,registry,get,kv,state,location,registration,names,i
KvStateLocationRegistryTest -> @Test 	public void testRegisterAndLookup() throws Exception;1499682192;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		String[] registrationNames = new String[] {_				"TAsIrGnc7MULwVupNKZ0",_				"086133IrGn0Ii2853237" }___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		_		KvStateID[][] ids = new KvStateID[vertices.length][]__		for (int i = 0_ i < ids.length_ i++) {_			ids[i] = new KvStateID[vertices[i].getMaxParallelism()]__			for (int j = 0_ j < vertices[i].getMaxParallelism()_ j++) {_				ids[i][j] = new KvStateID()__			}_		}__		KvStateServerAddress server = new KvStateServerAddress(InetAddress.getLocalHost(), 12032)___		_		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				_				registry.notifyKvStateRegistered(_						vertices[i].getJobVertexId(),_						new KeyGroupRange(keyGroupIndex, keyGroupIndex),_						registrationNames[i],_						ids[i][keyGroupIndex],_						server)__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			KvStateLocation location = registry.getKvStateLocation(registrationNames[i])__			assertNotNull(location)___			int maxParallelism = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < maxParallelism_ keyGroupIndex++) {_				assertEquals(ids[i][keyGroupIndex], location.getKvStateID(keyGroupIndex))__				assertEquals(server, location.getKvStateServerAddress(keyGroupIndex))__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			JobVertexID jobVertexId = vertices[i].getJobVertexId()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				registry.notifyKvStateUnregistered(jobVertexId, new KeyGroupRange(keyGroupIndex, keyGroupIndex), registrationNames[i])__			}_		}__		for (int i = 0_ i < registrationNames.length_ i++) {_			assertNull(registry.getKvStateLocation(registrationNames[i]))__		}_	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,string,registration,names,new,string,tas,ir,gnc7mulw,vup,nkz0,086133ir,gn0ii2853237,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,kv,state,id,ids,new,kv,state,id,vertices,length,for,int,i,0,i,ids,length,i,ids,i,new,kv,state,id,vertices,i,get,max,parallelism,for,int,j,0,j,vertices,i,get,max,parallelism,j,ids,i,j,new,kv,state,id,kv,state,server,address,server,new,kv,state,server,address,inet,address,get,local,host,12032,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,registered,vertices,i,get,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,ids,i,key,group,index,server,for,int,i,0,i,vertices,length,i,kv,state,location,location,registry,get,kv,state,location,registration,names,i,assert,not,null,location,int,max,parallelism,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,max,parallelism,key,group,index,assert,equals,ids,i,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,location,get,kv,state,server,address,key,group,index,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,job,vertex,id,job,vertex,id,vertices,i,get,job,vertex,id,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,unregistered,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,for,int,i,0,i,registration,names,length,i,assert,null,registry,get,kv,state,location,registration,names,i
KvStateLocationRegistryTest -> @Test 	public void testRegisterAndLookup() throws Exception;1509037054;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		String[] registrationNames = new String[] {_				"TAsIrGnc7MULwVupNKZ0",_				"086133IrGn0Ii2853237" }___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		_		KvStateID[][] ids = new KvStateID[vertices.length][]__		for (int i = 0_ i < ids.length_ i++) {_			ids[i] = new KvStateID[vertices[i].getMaxParallelism()]__			for (int j = 0_ j < vertices[i].getMaxParallelism()_ j++) {_				ids[i][j] = new KvStateID()__			}_		}__		InetSocketAddress server = new InetSocketAddress(InetAddress.getLocalHost(), 12032)___		_		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				_				registry.notifyKvStateRegistered(_						vertices[i].getJobVertexId(),_						new KeyGroupRange(keyGroupIndex, keyGroupIndex),_						registrationNames[i],_						ids[i][keyGroupIndex],_						server)__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			KvStateLocation location = registry.getKvStateLocation(registrationNames[i])__			assertNotNull(location)___			int maxParallelism = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < maxParallelism_ keyGroupIndex++) {_				assertEquals(ids[i][keyGroupIndex], location.getKvStateID(keyGroupIndex))__				assertEquals(server, location.getKvStateServerAddress(keyGroupIndex))__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			JobVertexID jobVertexId = vertices[i].getJobVertexId()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				registry.notifyKvStateUnregistered(jobVertexId, new KeyGroupRange(keyGroupIndex, keyGroupIndex), registrationNames[i])__			}_		}__		for (int i = 0_ i < registrationNames.length_ i++) {_			assertNull(registry.getKvStateLocation(registrationNames[i]))__		}_	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,string,registration,names,new,string,tas,ir,gnc7mulw,vup,nkz0,086133ir,gn0ii2853237,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,kv,state,id,ids,new,kv,state,id,vertices,length,for,int,i,0,i,ids,length,i,ids,i,new,kv,state,id,vertices,i,get,max,parallelism,for,int,j,0,j,vertices,i,get,max,parallelism,j,ids,i,j,new,kv,state,id,inet,socket,address,server,new,inet,socket,address,inet,address,get,local,host,12032,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,registered,vertices,i,get,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,ids,i,key,group,index,server,for,int,i,0,i,vertices,length,i,kv,state,location,location,registry,get,kv,state,location,registration,names,i,assert,not,null,location,int,max,parallelism,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,max,parallelism,key,group,index,assert,equals,ids,i,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,location,get,kv,state,server,address,key,group,index,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,job,vertex,id,job,vertex,id,vertices,i,get,job,vertex,id,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,unregistered,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,for,int,i,0,i,registration,names,length,i,assert,null,registry,get,kv,state,location,registration,names,i
KvStateLocationRegistryTest -> @Test 	public void testRegisterAndLookup() throws Exception;1515177485;Simple test registering/unregistering state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		String[] registrationNames = new String[] {_				"TAsIrGnc7MULwVupNKZ0",_				"086133IrGn0Ii2853237" }___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		_		KvStateID[][] ids = new KvStateID[vertices.length][]__		for (int i = 0_ i < ids.length_ i++) {_			ids[i] = new KvStateID[vertices[i].getMaxParallelism()]__			for (int j = 0_ j < vertices[i].getMaxParallelism()_ j++) {_				ids[i][j] = new KvStateID()__			}_		}__		InetSocketAddress server = new InetSocketAddress(InetAddress.getLocalHost(), 12032)___		_		Map<JobVertexID, ExecutionJobVertex> vertexMap = createVertexMap(vertices)__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				_				registry.notifyKvStateRegistered(_						vertices[i].getJobVertexId(),_						new KeyGroupRange(keyGroupIndex, keyGroupIndex),_						registrationNames[i],_						ids[i][keyGroupIndex],_						server)__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			KvStateLocation location = registry.getKvStateLocation(registrationNames[i])__			assertNotNull(location)___			int maxParallelism = vertices[i].getMaxParallelism()__			for (int keyGroupIndex = 0_ keyGroupIndex < maxParallelism_ keyGroupIndex++) {_				assertEquals(ids[i][keyGroupIndex], location.getKvStateID(keyGroupIndex))__				assertEquals(server, location.getKvStateServerAddress(keyGroupIndex))__			}_		}__		_		for (int i = 0_ i < vertices.length_ i++) {_			int numKeyGroups = vertices[i].getMaxParallelism()__			JobVertexID jobVertexId = vertices[i].getJobVertexId()__			for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_				registry.notifyKvStateUnregistered(jobVertexId, new KeyGroupRange(keyGroupIndex, keyGroupIndex), registrationNames[i])__			}_		}__		for (int i = 0_ i < registrationNames.length_ i++) {_			assertNull(registry.getKvStateLocation(registrationNames[i]))__		}_	};simple,test,registering,unregistering,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,string,registration,names,new,string,tas,ir,gnc7mulw,vup,nkz0,086133ir,gn0ii2853237,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,kv,state,id,ids,new,kv,state,id,vertices,length,for,int,i,0,i,ids,length,i,ids,i,new,kv,state,id,vertices,i,get,max,parallelism,for,int,j,0,j,vertices,i,get,max,parallelism,j,ids,i,j,new,kv,state,id,inet,socket,address,server,new,inet,socket,address,inet,address,get,local,host,12032,map,job,vertex,id,execution,job,vertex,vertex,map,create,vertex,map,vertices,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,registered,vertices,i,get,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,ids,i,key,group,index,server,for,int,i,0,i,vertices,length,i,kv,state,location,location,registry,get,kv,state,location,registration,names,i,assert,not,null,location,int,max,parallelism,vertices,i,get,max,parallelism,for,int,key,group,index,0,key,group,index,max,parallelism,key,group,index,assert,equals,ids,i,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,location,get,kv,state,server,address,key,group,index,for,int,i,0,i,vertices,length,i,int,num,key,groups,vertices,i,get,max,parallelism,job,vertex,id,job,vertex,id,vertices,i,get,job,vertex,id,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,registry,notify,kv,state,unregistered,job,vertex,id,new,key,group,range,key,group,index,key,group,index,registration,names,i,for,int,i,0,i,registration,names,length,i,assert,null,registry,get,kv,state,location,registration,names,i
KvStateLocationRegistryTest -> @Test 	public void testUnregisterFailures() throws Exception;1470753725;Tests failures during unregistration.;@Test_	public void testUnregisterFailures() throws Exception {_		String name = "IrGnc73237TAs"___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = new HashMap<>()__		for (ExecutionJobVertex vertex : vertices) {_			vertexMap.put(vertex.getJobVertexId(), vertex)__		}__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				0,_				name,_				new KvStateID(),_				mock(KvStateServerAddress.class))___		try {_			_			int notRegisteredKeyGroupIndex = 2___			registry.notifyKvStateUnregistered(_					vertices[0].getJobVertexId(),_					notRegisteredKeyGroupIndex,_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}__		try {_			_			registry.notifyKvStateUnregistered(_					vertices[1].getJobVertexId(),_					0,_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}_	};tests,failures,during,unregistration;test,public,void,test,unregister,failures,throws,exception,string,name,ir,gnc73237tas,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,new,hash,map,for,execution,job,vertex,vertex,vertices,vertex,map,put,vertex,get,job,vertex,id,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,0,name,new,kv,state,id,mock,kv,state,server,address,class,try,int,not,registered,key,group,index,2,registry,notify,kv,state,unregistered,vertices,0,get,job,vertex,id,not,registered,key,group,index,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected,try,registry,notify,kv,state,unregistered,vertices,1,get,job,vertex,id,0,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected
KvStateLocationRegistryTest -> @Test 	public void testUnregisterFailures() throws Exception;1474626282;Tests failures during unregistration.;@Test_	public void testUnregisterFailures() throws Exception {_		String name = "IrGnc73237TAs"___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = new HashMap<>()__		for (ExecutionJobVertex vertex : vertices) {_			vertexMap.put(vertex.getJobVertexId(), vertex)__		}__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				name,_				new KvStateID(),_				mock(KvStateServerAddress.class))___		try {_			_			int notRegisteredKeyGroupIndex = 2___			registry.notifyKvStateUnregistered(_					vertices[0].getJobVertexId(),_					new KeyGroupRange(notRegisteredKeyGroupIndex, notRegisteredKeyGroupIndex),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}__		try {_			_			registry.notifyKvStateUnregistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}_	};tests,failures,during,unregistration;test,public,void,test,unregister,failures,throws,exception,string,name,ir,gnc73237tas,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,new,hash,map,for,execution,job,vertex,vertex,vertices,vertex,map,put,vertex,get,job,vertex,id,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,name,new,kv,state,id,mock,kv,state,server,address,class,try,int,not,registered,key,group,index,2,registry,notify,kv,state,unregistered,vertices,0,get,job,vertex,id,new,key,group,range,not,registered,key,group,index,not,registered,key,group,index,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected,try,registry,notify,kv,state,unregistered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected
KvStateLocationRegistryTest -> @Test 	public void testUnregisterFailures() throws Exception;1499682192;Tests failures during unregistration.;@Test_	public void testUnregisterFailures() throws Exception {_		String name = "IrGnc73237TAs"___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = new HashMap<>()__		for (ExecutionJobVertex vertex : vertices) {_			vertexMap.put(vertex.getJobVertexId(), vertex)__		}__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				name,_				new KvStateID(),_				mock(KvStateServerAddress.class))___		try {_			_			int notRegisteredKeyGroupIndex = 2___			registry.notifyKvStateUnregistered(_					vertices[0].getJobVertexId(),_					new KeyGroupRange(notRegisteredKeyGroupIndex, notRegisteredKeyGroupIndex),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}__		try {_			_			registry.notifyKvStateUnregistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}_	};tests,failures,during,unregistration;test,public,void,test,unregister,failures,throws,exception,string,name,ir,gnc73237tas,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,new,hash,map,for,execution,job,vertex,vertex,vertices,vertex,map,put,vertex,get,job,vertex,id,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,name,new,kv,state,id,mock,kv,state,server,address,class,try,int,not,registered,key,group,index,2,registry,notify,kv,state,unregistered,vertices,0,get,job,vertex,id,new,key,group,range,not,registered,key,group,index,not,registered,key,group,index,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected,try,registry,notify,kv,state,unregistered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected
KvStateLocationRegistryTest -> @Test 	public void testUnregisterFailures() throws Exception;1509037054;Tests failures during unregistration.;@Test_	public void testUnregisterFailures() throws Exception {_		String name = "IrGnc73237TAs"___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = new HashMap<>()__		for (ExecutionJobVertex vertex : vertices) {_			vertexMap.put(vertex.getJobVertexId(), vertex)__		}__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				name,_				new KvStateID(),_				mock(InetSocketAddress.class))___		try {_			_			int notRegisteredKeyGroupIndex = 2___			registry.notifyKvStateUnregistered(_					vertices[0].getJobVertexId(),_					new KeyGroupRange(notRegisteredKeyGroupIndex, notRegisteredKeyGroupIndex),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}__		try {_			_			registry.notifyKvStateUnregistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}_	};tests,failures,during,unregistration;test,public,void,test,unregister,failures,throws,exception,string,name,ir,gnc73237tas,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,new,hash,map,for,execution,job,vertex,vertex,vertices,vertex,map,put,vertex,get,job,vertex,id,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,name,new,kv,state,id,mock,inet,socket,address,class,try,int,not,registered,key,group,index,2,registry,notify,kv,state,unregistered,vertices,0,get,job,vertex,id,new,key,group,range,not,registered,key,group,index,not,registered,key,group,index,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected,try,registry,notify,kv,state,unregistered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected
KvStateLocationRegistryTest -> @Test 	public void testUnregisterFailures() throws Exception;1515177485;Tests failures during unregistration.;@Test_	public void testUnregisterFailures() throws Exception {_		String name = "IrGnc73237TAs"___		ExecutionJobVertex[] vertices = new ExecutionJobVertex[] {_				createJobVertex(32),_				createJobVertex(13) }___		Map<JobVertexID, ExecutionJobVertex> vertexMap = new HashMap<>()__		for (ExecutionJobVertex vertex : vertices) {_			vertexMap.put(vertex.getJobVertexId(), vertex)__		}__		KvStateLocationRegistry registry = new KvStateLocationRegistry(new JobID(), vertexMap)___		_		registry.notifyKvStateRegistered(_				vertices[0].getJobVertexId(),_				new KeyGroupRange(0, 0),_				name,_				new KvStateID(),_				mock(InetSocketAddress.class))___		try {_			_			int notRegisteredKeyGroupIndex = 2___			registry.notifyKvStateUnregistered(_					vertices[0].getJobVertexId(),_					new KeyGroupRange(notRegisteredKeyGroupIndex, notRegisteredKeyGroupIndex),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}__		try {_			_			registry.notifyKvStateUnregistered(_					vertices[1].getJobVertexId(),_					new KeyGroupRange(0, 0),_					name)___			fail("Did not throw expected Exception")__		} catch (IllegalArgumentException expected) {_		}_	};tests,failures,during,unregistration;test,public,void,test,unregister,failures,throws,exception,string,name,ir,gnc73237tas,execution,job,vertex,vertices,new,execution,job,vertex,create,job,vertex,32,create,job,vertex,13,map,job,vertex,id,execution,job,vertex,vertex,map,new,hash,map,for,execution,job,vertex,vertex,vertices,vertex,map,put,vertex,get,job,vertex,id,vertex,kv,state,location,registry,registry,new,kv,state,location,registry,new,job,id,vertex,map,registry,notify,kv,state,registered,vertices,0,get,job,vertex,id,new,key,group,range,0,0,name,new,kv,state,id,mock,inet,socket,address,class,try,int,not,registered,key,group,index,2,registry,notify,kv,state,unregistered,vertices,0,get,job,vertex,id,new,key,group,range,not,registered,key,group,index,not,registered,key,group,index,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected,try,registry,notify,kv,state,unregistered,vertices,1,get,job,vertex,id,new,key,group,range,0,0,name,fail,did,not,throw,expected,exception,catch,illegal,argument,exception,expected
