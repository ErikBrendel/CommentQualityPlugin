# id;timestamp;commentText;codeText;commentWords;codeWords
SingleLogicalSlotTest -> @Test 	public void testConcurrentReleaseOperations() throws Exception;1525961911;Tests that concurrent release operations only trigger the failing of the payload and_the return of the slot once.;@Test_	public void testConcurrentReleaseOperations() throws Exception {_		final CountingSlotOwner countingSlotOwner = new CountingSlotOwner()__		final CountingFailPayload countingFailPayload = new CountingFailPayload()__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(countingSlotOwner)___		singleLogicalSlot.tryAssignPayload(countingFailPayload)___		final ExecutorService executorService = Executors.newFixedThreadPool(4)___		try {_			final int numberConcurrentOperations = 10__			final Collection<CompletableFuture<?>> releaseOperationFutures = new ArrayList<>(numberConcurrentOperations)___			for (int i = 0_ i < numberConcurrentOperations_ i++) {_				final CompletableFuture<Void> releaseOperationFuture = CompletableFuture.runAsync(_					() -> {_						try {_							singleLogicalSlot.releaseSlot(new FlinkException("Test exception")).get()__						} catch (InterruptedException | ExecutionException e) {_							ExceptionUtils.checkInterrupted(e)__							throw new CompletionException(e)__						}_					})___				releaseOperationFutures.add(releaseOperationFuture)__			}__			final FutureUtils.ConjunctFuture<Void> releaseOperationsFuture = FutureUtils.waitForAll(releaseOperationFutures)___			releaseOperationsFuture.get()___			assertThat(countingSlotOwner.getReleaseCount(), is(1))__			assertThat(countingFailPayload.getFailCount(), is(1))__		} finally {_			executorService.shutdownNow()__		}_	};tests,that,concurrent,release,operations,only,trigger,the,failing,of,the,payload,and,the,return,of,the,slot,once;test,public,void,test,concurrent,release,operations,throws,exception,final,counting,slot,owner,counting,slot,owner,new,counting,slot,owner,final,counting,fail,payload,counting,fail,payload,new,counting,fail,payload,final,single,logical,slot,single,logical,slot,create,single,logical,slot,counting,slot,owner,single,logical,slot,try,assign,payload,counting,fail,payload,final,executor,service,executor,service,executors,new,fixed,thread,pool,4,try,final,int,number,concurrent,operations,10,final,collection,completable,future,release,operation,futures,new,array,list,number,concurrent,operations,for,int,i,0,i,number,concurrent,operations,i,final,completable,future,void,release,operation,future,completable,future,run,async,try,single,logical,slot,release,slot,new,flink,exception,test,exception,get,catch,interrupted,exception,execution,exception,e,exception,utils,check,interrupted,e,throw,new,completion,exception,e,release,operation,futures,add,release,operation,future,final,future,utils,conjunct,future,void,release,operations,future,future,utils,wait,for,all,release,operation,futures,release,operations,future,get,assert,that,counting,slot,owner,get,release,count,is,1,assert,that,counting,fail,payload,get,fail,count,is,1,finally,executor,service,shutdown,now
SingleLogicalSlotTest -> @Test 	public void testConcurrentReleaseOperations() throws Exception;1549365080;Tests that concurrent release operations only trigger the failing of the payload and_the return of the slot once.;@Test_	public void testConcurrentReleaseOperations() throws Exception {_		final CountingSlotOwner countingSlotOwner = new CountingSlotOwner()__		final CountingFailPayload countingFailPayload = new CountingFailPayload()__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(countingSlotOwner)___		singleLogicalSlot.tryAssignPayload(countingFailPayload)___		final ExecutorService executorService = Executors.newFixedThreadPool(4)___		try {_			final int numberConcurrentOperations = 10__			final Collection<CompletableFuture<?>> releaseOperationFutures = new ArrayList<>(numberConcurrentOperations)___			for (int i = 0_ i < numberConcurrentOperations_ i++) {_				final CompletableFuture<Void> releaseOperationFuture = CompletableFuture.runAsync(_					() -> {_						try {_							singleLogicalSlot.releaseSlot(new FlinkException("Test exception")).get()__						} catch (InterruptedException | ExecutionException e) {_							ExceptionUtils.checkInterrupted(e)__							throw new CompletionException(e)__						}_					})___				releaseOperationFutures.add(releaseOperationFuture)__			}__			final FutureUtils.ConjunctFuture<Void> releaseOperationsFuture = FutureUtils.waitForAll(releaseOperationFutures)___			releaseOperationsFuture.get()___			assertThat(countingSlotOwner.getReleaseCount(), is(1))__			assertThat(countingFailPayload.getFailCount(), is(1))__		} finally {_			executorService.shutdownNow()__		}_	};tests,that,concurrent,release,operations,only,trigger,the,failing,of,the,payload,and,the,return,of,the,slot,once;test,public,void,test,concurrent,release,operations,throws,exception,final,counting,slot,owner,counting,slot,owner,new,counting,slot,owner,final,counting,fail,payload,counting,fail,payload,new,counting,fail,payload,final,single,logical,slot,single,logical,slot,create,single,logical,slot,counting,slot,owner,single,logical,slot,try,assign,payload,counting,fail,payload,final,executor,service,executor,service,executors,new,fixed,thread,pool,4,try,final,int,number,concurrent,operations,10,final,collection,completable,future,release,operation,futures,new,array,list,number,concurrent,operations,for,int,i,0,i,number,concurrent,operations,i,final,completable,future,void,release,operation,future,completable,future,run,async,try,single,logical,slot,release,slot,new,flink,exception,test,exception,get,catch,interrupted,exception,execution,exception,e,exception,utils,check,interrupted,e,throw,new,completion,exception,e,release,operation,futures,add,release,operation,future,final,future,utils,conjunct,future,void,release,operations,future,future,utils,wait,for,all,release,operation,futures,release,operations,future,get,assert,that,counting,slot,owner,get,release,count,is,1,assert,that,counting,fail,payload,get,fail,count,is,1,finally,executor,service,shutdown,now
SingleLogicalSlotTest -> @Test 	public void testConcurrentReleaseOperations() throws Exception;1550220073;Tests that concurrent release operations only trigger the failing of the payload and_the return of the slot once.;@Test_	public void testConcurrentReleaseOperations() throws Exception {_		final CountingSlotOwner countingSlotOwner = new CountingSlotOwner()__		final CountingFailPayload countingFailPayload = new CountingFailPayload()__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(countingSlotOwner)___		singleLogicalSlot.tryAssignPayload(countingFailPayload)___		final ExecutorService executorService = Executors.newFixedThreadPool(4)___		try {_			final int numberConcurrentOperations = 10__			final Collection<CompletableFuture<?>> releaseOperationFutures = new ArrayList<>(numberConcurrentOperations)___			for (int i = 0_ i < numberConcurrentOperations_ i++) {_				final CompletableFuture<Void> releaseOperationFuture = CompletableFuture.runAsync(_					() -> {_						try {_							singleLogicalSlot.releaseSlot(new FlinkException("Test exception")).get()__						} catch (InterruptedException | ExecutionException e) {_							ExceptionUtils.checkInterrupted(e)__							throw new CompletionException(e)__						}_					})___				releaseOperationFutures.add(releaseOperationFuture)__			}__			final FutureUtils.ConjunctFuture<Void> releaseOperationsFuture = FutureUtils.waitForAll(releaseOperationFutures)___			releaseOperationsFuture.get()___			assertThat(countingSlotOwner.getReleaseCount(), is(1))__			assertThat(countingFailPayload.getFailCount(), is(1))__		} finally {_			executorService.shutdownNow()__		}_	};tests,that,concurrent,release,operations,only,trigger,the,failing,of,the,payload,and,the,return,of,the,slot,once;test,public,void,test,concurrent,release,operations,throws,exception,final,counting,slot,owner,counting,slot,owner,new,counting,slot,owner,final,counting,fail,payload,counting,fail,payload,new,counting,fail,payload,final,single,logical,slot,single,logical,slot,create,single,logical,slot,counting,slot,owner,single,logical,slot,try,assign,payload,counting,fail,payload,final,executor,service,executor,service,executors,new,fixed,thread,pool,4,try,final,int,number,concurrent,operations,10,final,collection,completable,future,release,operation,futures,new,array,list,number,concurrent,operations,for,int,i,0,i,number,concurrent,operations,i,final,completable,future,void,release,operation,future,completable,future,run,async,try,single,logical,slot,release,slot,new,flink,exception,test,exception,get,catch,interrupted,exception,execution,exception,e,exception,utils,check,interrupted,e,throw,new,completion,exception,e,release,operation,futures,add,release,operation,future,final,future,utils,conjunct,future,void,release,operations,future,future,utils,wait,for,all,release,operation,futures,release,operations,future,get,assert,that,counting,slot,owner,get,release,count,is,1,assert,that,counting,fail,payload,get,fail,count,is,1,finally,executor,service,shutdown,now
SingleLogicalSlotTest -> @Test 	public void testAllocatedSlotRelease();1525961911;Tests that the {@link AllocatedSlot.Payload#release(Throwable)} does not wait_for the payload to reach a terminal state.;@Test_	public void testAllocatedSlotRelease() {_		final CompletableFuture<LogicalSlot> returnSlotFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnSlotFuture, new CompletableFuture<>())__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		singleLogicalSlot.release(new FlinkException("Test exception"))___		assertThat(failFuture.isDone(), is(true))__		_		_		assertThat(returnSlotFuture.isDone(), is(false))__	};tests,that,the,link,allocated,slot,payload,release,throwable,does,not,wait,for,the,payload,to,reach,a,terminal,state;test,public,void,test,allocated,slot,release,final,completable,future,logical,slot,return,slot,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,return,slot,future,new,completable,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,single,logical,slot,release,new,flink,exception,test,exception,assert,that,fail,future,is,done,is,true,assert,that,return,slot,future,is,done,is,false
SingleLogicalSlotTest -> @Test 	public void testAllocatedSlotRelease();1549365080;Tests that the {@link AllocatedSlot.Payload#release(Throwable)} does not wait_for the payload to reach a terminal state.;@Test_	public void testAllocatedSlotRelease() {_		final CompletableFuture<LogicalSlot> returnSlotFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnSlotFuture, new CompletableFuture<>())__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		singleLogicalSlot.release(new FlinkException("Test exception"))___		assertThat(failFuture.isDone(), is(true))__		_		_		assertThat(returnSlotFuture.isDone(), is(false))__	};tests,that,the,link,allocated,slot,payload,release,throwable,does,not,wait,for,the,payload,to,reach,a,terminal,state;test,public,void,test,allocated,slot,release,final,completable,future,logical,slot,return,slot,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,return,slot,future,new,completable,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,single,logical,slot,release,new,flink,exception,test,exception,assert,that,fail,future,is,done,is,true,assert,that,return,slot,future,is,done,is,false
SingleLogicalSlotTest -> @Test 	public void testAllocatedSlotRelease();1550220073;Tests that the {@link PhysicalSlot.Payload#release(Throwable)} does not wait_for the payload to reach a terminal state.;@Test_	public void testAllocatedSlotRelease() {_		final CompletableFuture<LogicalSlot> returnSlotFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnSlotFuture, new CompletableFuture<>())__		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		singleLogicalSlot.release(new FlinkException("Test exception"))___		assertThat(failFuture.isDone(), is(true))__		_		_		assertThat(returnSlotFuture.isDone(), is(false))__	};tests,that,the,link,physical,slot,payload,release,throwable,does,not,wait,for,the,payload,to,reach,a,terminal,state;test,public,void,test,allocated,slot,release,final,completable,future,logical,slot,return,slot,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,return,slot,future,new,completable,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,single,logical,slot,release,new,flink,exception,test,exception,assert,that,fail,future,is,done,is,true,assert,that,return,slot,future,is,done,is,false
SingleLogicalSlotTest -> @Test 	public void testSlotRelease();1525961911;Tests that the slot release is only signaled after the owner has_taken it back.;@Test_	public void testSlotRelease() {_		final CompletableFuture<LogicalSlot> returnedSlotFuture = new CompletableFuture<>()__		final CompletableFuture<Boolean> returnSlotResponseFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnedSlotFuture, returnSlotResponseFuture)__		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		final CompletableFuture<?> releaseFuture = singleLogicalSlot.releaseSlot(new FlinkException("Test exception"))___		assertThat(releaseFuture.isDone(), is(false))__		assertThat(returnedSlotFuture.isDone(), is(false))__		assertThat(failFuture.isDone(), is(true))___		terminalStateFuture.complete(null)___		assertThat(returnedSlotFuture.isDone(), is(true))___		returnSlotResponseFuture.complete(true)___		assertThat(releaseFuture.isDone(), is(true))__	};tests,that,the,slot,release,is,only,signaled,after,the,owner,has,taken,it,back;test,public,void,test,slot,release,final,completable,future,logical,slot,returned,slot,future,new,completable,future,final,completable,future,boolean,return,slot,response,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,returned,slot,future,return,slot,response,future,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,final,completable,future,release,future,single,logical,slot,release,slot,new,flink,exception,test,exception,assert,that,release,future,is,done,is,false,assert,that,returned,slot,future,is,done,is,false,assert,that,fail,future,is,done,is,true,terminal,state,future,complete,null,assert,that,returned,slot,future,is,done,is,true,return,slot,response,future,complete,true,assert,that,release,future,is,done,is,true
SingleLogicalSlotTest -> @Test 	public void testSlotRelease();1549365080;Tests that the slot release is only signaled after the owner has_taken it back.;@Test_	public void testSlotRelease() {_		final CompletableFuture<LogicalSlot> returnedSlotFuture = new CompletableFuture<>()__		final CompletableFuture<Boolean> returnSlotResponseFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnedSlotFuture, returnSlotResponseFuture)__		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		final CompletableFuture<?> releaseFuture = singleLogicalSlot.releaseSlot(new FlinkException("Test exception"))___		assertThat(releaseFuture.isDone(), is(false))__		assertThat(returnedSlotFuture.isDone(), is(false))__		assertThat(failFuture.isDone(), is(true))___		terminalStateFuture.complete(null)___		assertThat(returnedSlotFuture.isDone(), is(true))___		returnSlotResponseFuture.complete(true)___		assertThat(releaseFuture.isDone(), is(true))__	};tests,that,the,slot,release,is,only,signaled,after,the,owner,has,taken,it,back;test,public,void,test,slot,release,final,completable,future,logical,slot,returned,slot,future,new,completable,future,final,completable,future,boolean,return,slot,response,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,returned,slot,future,return,slot,response,future,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,final,completable,future,release,future,single,logical,slot,release,slot,new,flink,exception,test,exception,assert,that,release,future,is,done,is,false,assert,that,returned,slot,future,is,done,is,false,assert,that,fail,future,is,done,is,true,terminal,state,future,complete,null,assert,that,returned,slot,future,is,done,is,true,return,slot,response,future,complete,true,assert,that,release,future,is,done,is,true
SingleLogicalSlotTest -> @Test 	public void testSlotRelease();1550220073;Tests that the slot release is only signaled after the owner has_taken it back.;@Test_	public void testSlotRelease() {_		final CompletableFuture<LogicalSlot> returnedSlotFuture = new CompletableFuture<>()__		final CompletableFuture<Boolean> returnSlotResponseFuture = new CompletableFuture<>()__		final WaitingSlotOwner waitingSlotOwner = new WaitingSlotOwner(returnedSlotFuture, returnSlotResponseFuture)__		final CompletableFuture<?> terminalStateFuture = new CompletableFuture<>()__		final CompletableFuture<?> failFuture = new CompletableFuture<>()__		final ManualTestingPayload dummyPayload = new ManualTestingPayload(failFuture, terminalStateFuture)___		final SingleLogicalSlot singleLogicalSlot = createSingleLogicalSlot(waitingSlotOwner)___		assertThat(singleLogicalSlot.tryAssignPayload(dummyPayload), is(true))___		final CompletableFuture<?> releaseFuture = singleLogicalSlot.releaseSlot(new FlinkException("Test exception"))___		assertThat(releaseFuture.isDone(), is(false))__		assertThat(returnedSlotFuture.isDone(), is(false))__		assertThat(failFuture.isDone(), is(true))___		terminalStateFuture.complete(null)___		assertThat(returnedSlotFuture.isDone(), is(true))___		returnSlotResponseFuture.complete(true)___		assertThat(releaseFuture.isDone(), is(true))__	};tests,that,the,slot,release,is,only,signaled,after,the,owner,has,taken,it,back;test,public,void,test,slot,release,final,completable,future,logical,slot,returned,slot,future,new,completable,future,final,completable,future,boolean,return,slot,response,future,new,completable,future,final,waiting,slot,owner,waiting,slot,owner,new,waiting,slot,owner,returned,slot,future,return,slot,response,future,final,completable,future,terminal,state,future,new,completable,future,final,completable,future,fail,future,new,completable,future,final,manual,testing,payload,dummy,payload,new,manual,testing,payload,fail,future,terminal,state,future,final,single,logical,slot,single,logical,slot,create,single,logical,slot,waiting,slot,owner,assert,that,single,logical,slot,try,assign,payload,dummy,payload,is,true,final,completable,future,release,future,single,logical,slot,release,slot,new,flink,exception,test,exception,assert,that,release,future,is,done,is,false,assert,that,returned,slot,future,is,done,is,false,assert,that,fail,future,is,done,is,true,terminal,state,future,complete,null,assert,that,returned,slot,future,is,done,is,true,return,slot,response,future,complete,true,assert,that,release,future,is,done,is,true
