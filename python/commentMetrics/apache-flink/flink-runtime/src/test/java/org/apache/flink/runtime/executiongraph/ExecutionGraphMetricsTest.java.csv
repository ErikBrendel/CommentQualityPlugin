# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1469110591;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		_		int parallelism = 1___		JobVertex jobVertex = new JobVertex("TestVertex")__		jobVertex.setParallelism(parallelism)__		jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_CLASS, TestingReporter.class.getName())___		Configuration jobConfig = new Configuration()___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		MetricRegistry metricRegistry = new MetricRegistry(config)___		MetricReporter reporter = metricRegistry.getReporter()___		assertTrue(reporter instanceof TestingReporter)___		TestingReporter testingReporter = (TestingReporter) reporter___		MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")___		Scheduler scheduler = mock(Scheduler.class)___		SimpleSlot simpleSlot = mock(SimpleSlot.class)___		Instance instance = mock(Instance.class)___		InstanceConnectionInfo instanceConnectionInfo = mock(InstanceConnectionInfo.class)___		Slot rootSlot = mock(Slot.class)___		ActorGateway actorGateway = mock(ActorGateway.class)___		when(simpleSlot.isAlive()).thenReturn(true)__		when(simpleSlot.getInstance()).thenReturn(instance)__		when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__		when(simpleSlot.getRoot()).thenReturn(rootSlot)___		when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___		when(instance.getInstanceConnectionInfo()).thenReturn(instanceConnectionInfo)__		when(instance.getActorGateway()).thenReturn(actorGateway)__		when(instanceConnectionInfo.getHostname()).thenReturn("localhost")___		when(rootSlot.getSlotNumber()).thenReturn(0)___		when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___		TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___		ExecutionGraph executionGraph = new ExecutionGraph(_			ExecutionContext$.MODULE$.fromExecutor(new ForkJoinPool()),_			jobGraph.getJobID(),_			jobGraph.getName(),_			jobConfig,_			new SerializedValue<ExecutionConfig>(null),_			timeout,_			testingRestartStrategy,_			Collections.<BlobKey>emptyList(),_			Collections.<URL>emptyList(),_			getClass().getClassLoader(),_			metricGroup)___		_		Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)___		assertNotNull(metric)__		assertTrue(metric instanceof Gauge)___		Gauge<Long> restartingTime = (Gauge<Long>) metric___		_		assertTrue(0L == restartingTime.getValue())___		executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		_		executionGraph.scheduleForExecution(scheduler)___		assertTrue(0L == restartingTime.getValue())___		List<ExecutionAttemptID> executionIDs = new ArrayList<>()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(0L == restartingTime.getValue())___		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		_		Thread.sleep(50)___		long previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		assertTrue(previousRestartingTime > 0)___		_		testingRestartStrategy.restartExecutionGraph()___		executionIDs.clear()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(firstRestartingTimestamp != 0)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___		Thread.sleep(50)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		assertTrue(previousRestartingTime > 0)___		_		executionGraph.fail(new Exception())___		assertEquals(JobStatus.FAILED, executionGraph.getState())___		previousRestartingTime = restartingTime.getValue()___		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,metric,reporter,reporter,metric,registry,get,reporter,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,simple,slot,simple,slot,mock,simple,slot,class,instance,instance,mock,instance,class,instance,connection,info,instance,connection,info,mock,instance,connection,info,class,slot,root,slot,mock,slot,class,actor,gateway,actor,gateway,mock,actor,gateway,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,instance,then,return,instance,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,instance,get,instance,connection,info,then,return,instance,connection,info,when,instance,get,actor,gateway,then,return,actor,gateway,when,instance,connection,info,get,hostname,then,return,localhost,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,new,fork,join,pool,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1469529015;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		_		int parallelism = 1___		JobVertex jobVertex = new JobVertex("TestVertex")__		jobVertex.setParallelism(parallelism)__		jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_CLASS, TestingReporter.class.getName())___		Configuration jobConfig = new Configuration()___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		MetricRegistry metricRegistry = new MetricRegistry(config)___		MetricReporter reporter = metricRegistry.getReporter()___		assertTrue(reporter instanceof TestingReporter)___		TestingReporter testingReporter = (TestingReporter) reporter___		MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")___		Scheduler scheduler = mock(Scheduler.class)___		SimpleSlot simpleSlot = mock(SimpleSlot.class)___		Instance instance = mock(Instance.class)___		InstanceConnectionInfo instanceConnectionInfo = mock(InstanceConnectionInfo.class)___		Slot rootSlot = mock(Slot.class)___		ActorGateway actorGateway = mock(ActorGateway.class)___		when(simpleSlot.isAlive()).thenReturn(true)__		when(simpleSlot.getInstance()).thenReturn(instance)__		when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__		when(simpleSlot.getRoot()).thenReturn(rootSlot)___		when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___		when(instance.getInstanceConnectionInfo()).thenReturn(instanceConnectionInfo)__		when(instance.getActorGateway()).thenReturn(actorGateway)__		when(instanceConnectionInfo.getHostname()).thenReturn("localhost")___		when(rootSlot.getSlotNumber()).thenReturn(0)___		when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___		TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___		ExecutionGraph executionGraph = new ExecutionGraph(_			ExecutionContext$.MODULE$.fromExecutor(new ForkJoinPool()),_			jobGraph.getJobID(),_			jobGraph.getName(),_			jobConfig,_			new SerializedValue<ExecutionConfig>(null),_			timeout,_			testingRestartStrategy,_			Collections.<BlobKey>emptyList(),_			Collections.<URL>emptyList(),_			getClass().getClassLoader(),_			metricGroup)___		_		Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)___		assertNotNull(metric)__		assertTrue(metric instanceof Gauge)___		Gauge<Long> restartingTime = (Gauge<Long>) metric___		_		assertTrue(0L == restartingTime.getValue())___		executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		_		executionGraph.scheduleForExecution(scheduler)___		assertTrue(0L == restartingTime.getValue())___		List<ExecutionAttemptID> executionIDs = new ArrayList<>()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(0L == restartingTime.getValue())___		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		_		Thread.sleep(50)___		long previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		assertTrue(previousRestartingTime > 0)___		_		testingRestartStrategy.restartExecutionGraph()___		executionIDs.clear()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(firstRestartingTimestamp != 0)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___		Thread.sleep(50)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		assertTrue(previousRestartingTime > 0)___		_		executionGraph.fail(new Exception())___		assertEquals(JobStatus.FAILED, executionGraph.getState())___		previousRestartingTime = restartingTime.getValue()___		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,metric,reporter,reporter,metric,registry,get,reporter,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,simple,slot,simple,slot,mock,simple,slot,class,instance,instance,mock,instance,class,instance,connection,info,instance,connection,info,mock,instance,connection,info,class,slot,root,slot,mock,slot,class,actor,gateway,actor,gateway,mock,actor,gateway,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,instance,then,return,instance,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,instance,get,instance,connection,info,then,return,instance,connection,info,when,instance,get,actor,gateway,then,return,actor,gateway,when,instance,connection,info,get,hostname,then,return,localhost,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,new,fork,join,pool,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1469545521;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		_		int parallelism = 1___		JobVertex jobVertex = new JobVertex("TestVertex")__		jobVertex.setParallelism(parallelism)__		jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())___		Configuration jobConfig = new Configuration()___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		MetricRegistry metricRegistry = new MetricRegistry(config)___		assertTrue(metricRegistry.getReporters().size() == 1)___		MetricReporter reporter = metricRegistry.getReporters().get(0)___		assertTrue(reporter instanceof TestingReporter)___		TestingReporter testingReporter = (TestingReporter) reporter___		MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")___		Scheduler scheduler = mock(Scheduler.class)___		SimpleSlot simpleSlot = mock(SimpleSlot.class)___		Instance instance = mock(Instance.class)___		InstanceConnectionInfo instanceConnectionInfo = mock(InstanceConnectionInfo.class)___		Slot rootSlot = mock(Slot.class)___		ActorGateway actorGateway = mock(ActorGateway.class)___		when(simpleSlot.isAlive()).thenReturn(true)__		when(simpleSlot.getInstance()).thenReturn(instance)__		when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__		when(simpleSlot.getRoot()).thenReturn(rootSlot)___		when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___		when(instance.getInstanceConnectionInfo()).thenReturn(instanceConnectionInfo)__		when(instance.getActorGateway()).thenReturn(actorGateway)__		when(instanceConnectionInfo.getHostname()).thenReturn("localhost")___		when(rootSlot.getSlotNumber()).thenReturn(0)___		when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___		TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___		ExecutionGraph executionGraph = new ExecutionGraph(_			ExecutionContext$.MODULE$.fromExecutor(new ForkJoinPool()),_			jobGraph.getJobID(),_			jobGraph.getName(),_			jobConfig,_			new SerializedValue<ExecutionConfig>(null),_			timeout,_			testingRestartStrategy,_			Collections.<BlobKey>emptyList(),_			Collections.<URL>emptyList(),_			getClass().getClassLoader(),_			metricGroup)___		_		Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)___		assertNotNull(metric)__		assertTrue(metric instanceof Gauge)___		Gauge<Long> restartingTime = (Gauge<Long>) metric___		_		assertTrue(0L == restartingTime.getValue())___		executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		_		executionGraph.scheduleForExecution(scheduler)___		assertTrue(0L == restartingTime.getValue())___		List<ExecutionAttemptID> executionIDs = new ArrayList<>()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(0L == restartingTime.getValue())___		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		_		Thread.sleep(50)___		long previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		assertTrue(previousRestartingTime > 0)___		_		testingRestartStrategy.restartExecutionGraph()___		executionIDs.clear()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(firstRestartingTimestamp != 0)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___		Thread.sleep(50)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		assertTrue(previousRestartingTime > 0)___		_		executionGraph.fail(new Exception())___		assertEquals(JobStatus.FAILED, executionGraph.getState())___		previousRestartingTime = restartingTime.getValue()___		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,simple,slot,simple,slot,mock,simple,slot,class,instance,instance,mock,instance,class,instance,connection,info,instance,connection,info,mock,instance,connection,info,class,slot,root,slot,mock,slot,class,actor,gateway,actor,gateway,mock,actor,gateway,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,instance,then,return,instance,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,instance,get,instance,connection,info,then,return,instance,connection,info,when,instance,get,actor,gateway,then,return,actor,gateway,when,instance,connection,info,get,hostname,then,return,localhost,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,new,fork,join,pool,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1472830377;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		_		int parallelism = 1___		JobVertex jobVertex = new JobVertex("TestVertex")__		jobVertex.setParallelism(parallelism)__		jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())___		Configuration jobConfig = new Configuration()___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		MetricRegistry metricRegistry = new MetricRegistry(config)___		assertTrue(metricRegistry.getReporters().size() == 1)___		MetricReporter reporter = metricRegistry.getReporters().get(0)___		assertTrue(reporter instanceof TestingReporter)___		TestingReporter testingReporter = (TestingReporter) reporter___		MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")___		Scheduler scheduler = mock(Scheduler.class)___		SimpleSlot simpleSlot = mock(SimpleSlot.class)___		Instance instance = mock(Instance.class)___		TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)___		Slot rootSlot = mock(Slot.class)___		ActorGateway actorGateway = mock(ActorGateway.class)___		when(simpleSlot.isAlive()).thenReturn(true)__		when(simpleSlot.getInstance()).thenReturn(instance)__		when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__		when(simpleSlot.getRoot()).thenReturn(rootSlot)___		when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___		when(instance.getInstanceConnectionInfo()).thenReturn(taskManagerLocation)__		when(instance.getActorGateway()).thenReturn(actorGateway)__		when(taskManagerLocation.getHostname()).thenReturn("localhost")___		when(rootSlot.getSlotNumber()).thenReturn(0)___		when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___		TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___		ExecutionGraph executionGraph = new ExecutionGraph(_			ExecutionContext$.MODULE$.fromExecutor(new ForkJoinPool()),_			jobGraph.getJobID(),_			jobGraph.getName(),_			jobConfig,_			new SerializedValue<ExecutionConfig>(null),_			timeout,_			testingRestartStrategy,_			Collections.<BlobKey>emptyList(),_			Collections.<URL>emptyList(),_			getClass().getClassLoader(),_			metricGroup)___		_		Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)___		assertNotNull(metric)__		assertTrue(metric instanceof Gauge)___		Gauge<Long> restartingTime = (Gauge<Long>) metric___		_		assertTrue(0L == restartingTime.getValue())___		executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		_		executionGraph.scheduleForExecution(scheduler)___		assertTrue(0L == restartingTime.getValue())___		List<ExecutionAttemptID> executionIDs = new ArrayList<>()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(0L == restartingTime.getValue())___		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		_		Thread.sleep(50)___		long previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		assertTrue(previousRestartingTime > 0)___		_		testingRestartStrategy.restartExecutionGraph()___		executionIDs.clear()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(firstRestartingTimestamp != 0)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___		Thread.sleep(50)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		assertTrue(previousRestartingTime > 0)___		_		executionGraph.fail(new Exception())___		assertEquals(JobStatus.FAILED, executionGraph.getState())___		previousRestartingTime = restartingTime.getValue()___		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,simple,slot,simple,slot,mock,simple,slot,class,instance,instance,mock,instance,class,task,manager,location,task,manager,location,mock,task,manager,location,class,slot,root,slot,mock,slot,class,actor,gateway,actor,gateway,mock,actor,gateway,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,instance,then,return,instance,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,instance,get,instance,connection,info,then,return,task,manager,location,when,instance,get,actor,gateway,then,return,actor,gateway,when,task,manager,location,get,hostname,then,return,localhost,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,new,fork,join,pool,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1472830377;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		_		int parallelism = 1___		JobVertex jobVertex = new JobVertex("TestVertex")__		jobVertex.setParallelism(parallelism)__		jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())___		Configuration jobConfig = new Configuration()___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		MetricRegistry metricRegistry = new MetricRegistry(config)___		assertTrue(metricRegistry.getReporters().size() == 1)___		MetricReporter reporter = metricRegistry.getReporters().get(0)___		assertTrue(reporter instanceof TestingReporter)___		TestingReporter testingReporter = (TestingReporter) reporter___		MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")___		Scheduler scheduler = mock(Scheduler.class)___		SimpleSlot simpleSlot = mock(SimpleSlot.class)___		Instance instance = mock(Instance.class)___		TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)___		Slot rootSlot = mock(Slot.class)___		ActorGateway actorGateway = mock(ActorGateway.class)___		when(simpleSlot.isAlive()).thenReturn(true)__		when(simpleSlot.getTaskManagerID()).thenReturn(instance.getResourceId())__		when(simpleSlot.getTaskManagerLocation()).thenReturn(instance.getInstanceConnectionInfo())__		when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__		when(simpleSlot.getRoot()).thenReturn(rootSlot)___		when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___		when(instance.getInstanceConnectionInfo()).thenReturn(taskManagerLocation)__		when(instance.getActorGateway()).thenReturn(actorGateway)__		when(taskManagerLocation.getHostname()).thenReturn("localhost")___		when(rootSlot.getSlotNumber()).thenReturn(0)___		when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___		TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___		ExecutionGraph executionGraph = new ExecutionGraph(_			ExecutionContext$.MODULE$.fromExecutor(new ForkJoinPool()),_			jobGraph.getJobID(),_			jobGraph.getName(),_			jobConfig,_			new SerializedValue<ExecutionConfig>(null),_			timeout,_			testingRestartStrategy,_			Collections.<BlobKey>emptyList(),_			Collections.<URL>emptyList(),_			getClass().getClassLoader(),_			metricGroup)___		_		Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)___		assertNotNull(metric)__		assertTrue(metric instanceof Gauge)___		@SuppressWarnings("unchecked")_		Gauge<Long> restartingTime = (Gauge<Long>) metric___		_		assertTrue(0L == restartingTime.getValue())___		executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		_		executionGraph.scheduleForExecution(scheduler)___		assertTrue(0L == restartingTime.getValue())___		List<ExecutionAttemptID> executionIDs = new ArrayList<>()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(0L == restartingTime.getValue())___		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		_		Thread.sleep(50)___		long previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		assertTrue(previousRestartingTime > 0)___		_		testingRestartStrategy.restartExecutionGraph()___		executionIDs.clear()___		for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_			executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__		}__		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__		}__		assertEquals(JobStatus.RUNNING, executionGraph.getState())___		assertTrue(firstRestartingTimestamp != 0)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		_		for (ExecutionAttemptID executionID : executionIDs) {_			executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__		}__		assertEquals(JobStatus.RESTARTING, executionGraph.getState())___		long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___		assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___		Thread.sleep(50)___		previousRestartingTime = restartingTime.getValue()___		_		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime >= previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__		assertTrue(previousRestartingTime > 0)___		_		executionGraph.fail(new Exception())___		assertEquals(JobStatus.FAILED, executionGraph.getState())___		previousRestartingTime = restartingTime.getValue()___		for (int i = 0_ i < 10_ i++) {_			long currentRestartingTime = restartingTime.getValue()___			assertTrue(currentRestartingTime == previousRestartingTime)__			previousRestartingTime = currentRestartingTime__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,simple,slot,simple,slot,mock,simple,slot,class,instance,instance,mock,instance,class,task,manager,location,task,manager,location,mock,task,manager,location,class,slot,root,slot,mock,slot,class,actor,gateway,actor,gateway,mock,actor,gateway,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,id,then,return,instance,get,resource,id,when,simple,slot,get,task,manager,location,then,return,instance,get,instance,connection,info,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,instance,get,instance,connection,info,then,return,task,manager,location,when,instance,get,actor,gateway,then,return,actor,gateway,when,task,manager,location,get,hostname,then,return,localhost,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,new,fork,join,pool,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1472830377;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)__	_			MetricRegistry metricRegistry = new MetricRegistry(config)__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			ActorGateway actorGateway = mock(ActorGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getActorGateway()).thenReturn(actorGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerActorGateway()).thenReturn(actorGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			when(scheduler.scheduleImmediately(Matchers.any(ScheduledUnit.class))).thenReturn(simpleSlot)___			__			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				ExecutionContext$.MODULE$.fromExecutor(executor),_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			executionGraph.fail(new Exception())__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,actor,gateway,actor,gateway,mock,actor,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,actor,gateway,then,return,actor,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,actor,gateway,then,return,actor,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,schedule,immediately,matchers,any,scheduled,unit,class,then,return,simple,slot,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1473023399;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)__	_			MetricRegistry metricRegistry = new MetricRegistry(config)__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			ActorGateway actorGateway = mock(ActorGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getActorGateway()).thenReturn(actorGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerActorGateway()).thenReturn(actorGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean()))_					.thenReturn(new SlotAllocationFuture(simpleSlot))___			__			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				ExecutionContext$.MODULE$.fromExecutor(executor),_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			executionGraph.fail(new Exception())__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,actor,gateway,actor,gateway,mock,actor,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,actor,gateway,then,return,actor,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,actor,gateway,then,return,actor,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,new,slot,allocation,future,simple,slot,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1474994376;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)__	_			MetricRegistry metricRegistry = new MetricRegistry(config)__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			ActorGateway actorGateway = mock(ActorGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getActorGateway()).thenReturn(actorGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerActorGateway()).thenReturn(actorGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				ExecutionContext$.MODULE$.fromExecutor(executor),_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			executionGraph.fail(new Exception())__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,actor,gateway,actor,gateway,mock,actor,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,actor,gateway,then,return,actor,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,actor,gateway,then,return,actor,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1474995330;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			ActorGateway actorGateway = mock(ActorGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getActorGateway()).thenReturn(actorGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerActorGateway()).thenReturn(actorGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				ExecutionContext$.MODULE$.fromExecutor(executor),_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			executionGraph.fail(new Exception())__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,actor,gateway,actor,gateway,mock,actor,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,actor,gateway,then,return,actor,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,actor,gateway,then,return,actor,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1477937801;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			ActorGateway actorGateway = mock(ActorGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getActorGateway()).thenReturn(actorGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerActorGateway()).thenReturn(actorGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(actorGateway.ask(Matchers.any(Object.class), Matchers.any(FiniteDuration.class))).thenReturn(Future$.MODULE$.<Object>successful(Messages.getAcknowledge()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				ExecutionContext$.MODULE$.fromExecutor(executor),_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,actor,gateway,actor,gateway,mock,actor,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,actor,gateway,then,return,actor,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,actor,gateway,then,return,actor,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,actor,gateway,ask,matchers,any,object,class,matchers,any,finite,duration,class,then,return,future,module,object,successful,messages,get,acknowledge,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,execution,context,module,from,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1477989375;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1479852017;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(Tasks.NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1482522863;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)__	_			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1482522865;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ExecutorService executor = Executors.newCachedThreadPool()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)___			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,executor,service,executor,executors,new,cached,thread,pool,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1486647395;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_			executionGraph.scheduleForExecution(scheduler)___			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,scheduler,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1488453790;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_			scheduler,_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_		executionGraph.scheduleForExecution()___			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,scheduler,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1490800309;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1__	_			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)__	_			Configuration config = new Configuration()__			config.setString(ConfigConstants.METRICS_REPORTERS_LIST, "test")__			config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestingReporter.class.getName())__	_			Configuration jobConfig = new Configuration()__	_			Time timeout = Time.seconds(10L)__	_			MetricRegistry metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))__	_			assertTrue(metricRegistry.getReporters().size() == 1)__	_			MetricReporter reporter = metricRegistry.getReporters().get(0)__	_			assertTrue(reporter instanceof TestingReporter)__	_			TestingReporter testingReporter = (TestingReporter) reporter__	_			MetricGroup metricGroup = new JobManagerMetricGroup(metricRegistry, "localhost")__	_			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				scheduler,_				getClass().getClassLoader(),_				metricGroup)__	_			_			Metric metric = testingReporter.getMetric(ExecutionGraph.RESTARTING_TIME_METRIC_NAME)__	_			assertNotNull(metric)__			assertTrue(metric instanceof Gauge)__	_			@SuppressWarnings("unchecked")_			Gauge<Long> restartingTime = (Gauge<Long>) metric__	_			_			assertTrue(0L == restartingTime.getValue())__	_			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())__	_			_		executionGraph.scheduleForExecution()___			assertTrue(0L == restartingTime.getValue())__	_			List<ExecutionAttemptID> executionIDs = new ArrayList<>()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(0L == restartingTime.getValue())__	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			_			Thread.sleep(50)__	_			long previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			assertTrue(previousRestartingTime > 0)__	_			_			testingRestartStrategy.restartExecutionGraph()__	_			executionIDs.clear()__	_			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}_	_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}_	_			assertEquals(JobStatus.RUNNING, executionGraph.getState())__	_			assertTrue(firstRestartingTimestamp != 0)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}_	_			assertEquals(JobStatus.RESTARTING, executionGraph.getState())__	_			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)__	_			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)__	_			Thread.sleep(50)__	_			previousRestartingTime = restartingTime.getValue()__	_			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_	_			assertTrue(previousRestartingTime > 0)__	_			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())__	_			previousRestartingTime = restartingTime.getValue()__	_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()__	_				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}__	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,config,new,configuration,config,set,string,config,constants,test,config,set,string,config,constants,test,config,constants,testing,reporter,class,get,name,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,metric,registry,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,1,metric,reporter,reporter,metric,registry,get,reporters,get,0,assert,true,reporter,instanceof,testing,reporter,testing,reporter,testing,reporter,testing,reporter,reporter,metric,group,metric,group,new,job,manager,metric,group,metric,registry,localhost,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,scheduler,get,class,get,class,loader,metric,group,metric,metric,testing,reporter,get,metric,execution,graph,assert,not,null,metric,assert,true,metric,instanceof,gauge,suppress,warnings,unchecked,gauge,long,restarting,time,gauge,long,metric,assert,true,0l,restarting,time,get,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,true,0l,restarting,time,get,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,0l,restarting,time,get,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1490800309;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				Collections.<BlobKey>emptyList(),_				Collections.<URL>emptyList(),_				scheduler,_				getClass().getClassLoader())___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.fail(new SuppressRestartsException(new Exception()))___			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,collections,blob,key,empty,list,collections,url,empty,list,scheduler,get,class,get,class,loader,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1493831843;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1500811086;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			FlinkCompletableFuture<SimpleSlot> future = new FlinkCompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,flink,completable,future,simple,slot,future,new,flink,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1501665499;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			CompletableFuture<SimpleSlot> future = new CompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,completable,future,simple,slot,future,new,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1501760738;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			CompletableFuture<SimpleSlot> future = new CompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean())).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,completable,future,simple,slot,future,new,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1509638685;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			ResourceID taskManagerId = ResourceID.generate()___			TaskManagerLocation taskManagerLocation = mock(TaskManagerLocation.class)__			when(taskManagerLocation.getResourceID()).thenReturn(taskManagerId)__			when(taskManagerLocation.getHostname()).thenReturn("localhost")___			TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)___			Instance instance = mock(Instance.class)__			when(instance.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(instance.getTaskManagerID()).thenReturn(taskManagerId)__			when(instance.getTaskManagerGateway()).thenReturn(taskManagerGateway)___			Slot rootSlot = mock(Slot.class)___			AllocatedSlot mockAllocatedSlot = mock(AllocatedSlot.class)__			when(mockAllocatedSlot.getSlotAllocationId()).thenReturn(new AllocationID())___			SimpleSlot simpleSlot = mock(SimpleSlot.class)__			when(simpleSlot.isAlive()).thenReturn(true)__			when(simpleSlot.getTaskManagerLocation()).thenReturn(taskManagerLocation)__			when(simpleSlot.getTaskManagerID()).thenReturn(taskManagerId)__			when(simpleSlot.getTaskManagerGateway()).thenReturn(taskManagerGateway)__			when(simpleSlot.setExecutedVertex(Matchers.any(Execution.class))).thenReturn(true)__			when(simpleSlot.getRoot()).thenReturn(rootSlot)__			when(simpleSlot.getAllocatedSlot()).thenReturn(mockAllocatedSlot)___			CompletableFuture<SimpleSlot> future = new CompletableFuture<>()__			future.complete(simpleSlot)__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean(), any(Collection.class))).thenReturn(future)___			when(rootSlot.getSlotNumber()).thenReturn(0)___			when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<ExecutionConfig>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,resource,id,task,manager,id,resource,id,generate,task,manager,location,task,manager,location,mock,task,manager,location,class,when,task,manager,location,get,resource,id,then,return,task,manager,id,when,task,manager,location,get,hostname,then,return,localhost,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,instance,instance,mock,instance,class,when,instance,get,task,manager,location,then,return,task,manager,location,when,instance,get,task,manager,id,then,return,task,manager,id,when,instance,get,task,manager,gateway,then,return,task,manager,gateway,slot,root,slot,mock,slot,class,allocated,slot,mock,allocated,slot,mock,allocated,slot,class,when,mock,allocated,slot,get,slot,allocation,id,then,return,new,allocation,id,simple,slot,simple,slot,mock,simple,slot,class,when,simple,slot,is,alive,then,return,true,when,simple,slot,get,task,manager,location,then,return,task,manager,location,when,simple,slot,get,task,manager,id,then,return,task,manager,id,when,simple,slot,get,task,manager,gateway,then,return,task,manager,gateway,when,simple,slot,set,executed,vertex,matchers,any,execution,class,then,return,true,when,simple,slot,get,root,then,return,root,slot,when,simple,slot,get,allocated,slot,then,return,mock,allocated,slot,completable,future,simple,slot,future,new,completable,future,future,complete,simple,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,any,collection,class,then,return,future,when,root,slot,get,slot,number,then,return,0,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,execution,config,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1513201052;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean(), any(Collection.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,any,collection,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1513261599;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean(), any(Collection.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,any,collection,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1518680774;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(ScheduledUnit.class), anyBoolean(), any(Collection.class), any(Time.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,scheduled,unit,class,any,boolean,any,collection,class,any,time,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1519481114;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(SlotRequestId.class), any(ScheduledUnit.class), anyBoolean(), any(Collection.class), any(Time.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,slot,request,id,class,any,scheduled,unit,class,any,boolean,any,collection,class,any,time,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1519655521;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(SlotRequestId.class), any(ScheduledUnit.class), anyBoolean(), any(SlotProfile.class), any(Time.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			_			Thread.sleep(50)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			Thread.sleep(50)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,slot,request,id,class,any,scheduled,unit,class,any,boolean,any,slot,profile,class,any,time,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,thread,sleep,50,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,thread,sleep,50,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1522759793;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)__			Scheduler scheduler = mock(Scheduler.class)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			when(scheduler.allocateSlot(any(SlotRequestId.class), any(ScheduledUnit.class), anyBoolean(), any(SlotProfile.class), any(Time.class))).thenReturn(slotFuture1, slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				scheduler)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)___				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)__				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,scheduler,scheduler,mock,scheduler,class,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,when,scheduler,allocate,slot,any,slot,request,id,class,any,scheduled,unit,class,any,boolean,any,slot,profile,class,any,time,class,then,return,slot,future1,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,scheduler,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1548932775;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			ArrayDeque<CompletableFuture<LogicalSlot>> slotFutures = new ArrayDeque<>()__			slotFutures.addLast(slotFuture1)__			slotFutures.addLast(slotFuture2)___			TestingRestartStrategy testingRestartStrategy = new TestingRestartStrategy()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				new TestingSlotProvider(ignore -> slotFutures.removeFirst()))___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)___				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.restartExecutionGraph()___			executionIDs.clear()___			for (ExecutionVertex executionVertex: executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)__				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))__	_			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,array,deque,completable,future,logical,slot,slot,futures,new,array,deque,slot,futures,add,last,slot,future1,slot,futures,add,last,slot,future2,testing,restart,strategy,testing,restart,strategy,new,testing,restart,strategy,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,new,testing,slot,provider,ignore,slot,futures,remove,first,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,restart,execution,graph,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
ExecutionGraphMetricsTest -> @Test 	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException;1549365080;This test tests that the restarting time metric correctly displays restarting times.;@Test_	public void testExecutionGraphRestartTimeMetric() throws JobException, IOException, InterruptedException {_		final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()__		try {_			_			int parallelism = 1___			JobVertex jobVertex = new JobVertex("TestVertex")__			jobVertex.setParallelism(parallelism)__			jobVertex.setInvokableClass(NoOpInvokable.class)__			JobGraph jobGraph = new JobGraph("Test Job", jobVertex)___			Configuration jobConfig = new Configuration()__			Time timeout = Time.seconds(10L)___			CompletableFuture<LogicalSlot> slotFuture1 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			CompletableFuture<LogicalSlot> slotFuture2 = CompletableFuture.completedFuture(new TestingLogicalSlot())__			ArrayDeque<CompletableFuture<LogicalSlot>> slotFutures = new ArrayDeque<>()__			slotFutures.addLast(slotFuture1)__			slotFutures.addLast(slotFuture2)___			TestRestartStrategy testingRestartStrategy = TestRestartStrategy.manuallyTriggered()___			ExecutionGraph executionGraph = new ExecutionGraph(_				executor,_				executor,_				jobGraph.getJobID(),_				jobGraph.getName(),_				jobConfig,_				new SerializedValue<>(null),_				timeout,_				testingRestartStrategy,_				new TestingSlotProvider(ignore -> slotFutures.removeFirst()))___			executionGraph.start(mainThreadExecutor)___			RestartTimeGauge restartingTime = new RestartTimeGauge(executionGraph)___			_			assertEquals(0L, restartingTime.getValue().longValue())___			executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___			_			executionGraph.scheduleForExecution()__			assertEquals(0L, restartingTime.getValue().longValue())___			List<ExecutionAttemptID> executionIDs = new ArrayList<>()___			for (ExecutionVertex executionVertex : executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())__			assertEquals(0L, restartingTime.getValue().longValue())___			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long firstRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			long previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)___				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			assertTrue(previousRestartingTime > 0)___			_			testingRestartStrategy.triggerAll().join()___			executionIDs.clear()___			for (ExecutionVertex executionVertex : executionGraph.getAllExecutionVertices()) {_				executionIDs.add(executionVertex.getCurrentExecutionAttempt().getAttemptId())__			}__			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.RUNNING))__			}__			assertEquals(JobStatus.RUNNING, executionGraph.getState())___			assertTrue(firstRestartingTimestamp != 0)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			_			Thread.sleep(1L)___			_			for (ExecutionAttemptID executionID : executionIDs) {_				executionGraph.updateState(new TaskExecutionState(jobGraph.getJobID(), executionID, ExecutionState.FAILED, new Exception()))__			}__			assertEquals(JobStatus.RESTARTING, executionGraph.getState())___			long secondRestartingTimestamp = executionGraph.getStatusTimestamp(JobStatus.RESTARTING)___			assertTrue(firstRestartingTimestamp != secondRestartingTimestamp)___			previousRestartingTime = restartingTime.getValue()___			_			for (int i = 0_ i < 2_ i++) {_				_				Thread.sleep(1L)__				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime >= previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}__			assertTrue(previousRestartingTime > 0)___			_			_			executionGraph.failGlobal(new SuppressRestartsException(new Exception()))___			assertEquals(JobStatus.FAILED, executionGraph.getState())___			previousRestartingTime = restartingTime.getValue()___			for (int i = 0_ i < 10_ i++) {_				long currentRestartingTime = restartingTime.getValue()___				assertTrue(currentRestartingTime == previousRestartingTime)__				previousRestartingTime = currentRestartingTime__			}_		} finally {_			executor.shutdownNow()__		}_	};this,test,tests,that,the,restarting,time,metric,correctly,displays,restarting,times;test,public,void,test,execution,graph,restart,time,metric,throws,job,exception,ioexception,interrupted,exception,final,scheduled,executor,service,executor,executors,new,single,thread,scheduled,executor,try,int,parallelism,1,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,set,parallelism,parallelism,job,vertex,set,invokable,class,no,op,invokable,class,job,graph,job,graph,new,job,graph,test,job,job,vertex,configuration,job,config,new,configuration,time,timeout,time,seconds,10l,completable,future,logical,slot,slot,future1,completable,future,completed,future,new,testing,logical,slot,completable,future,logical,slot,slot,future2,completable,future,completed,future,new,testing,logical,slot,array,deque,completable,future,logical,slot,slot,futures,new,array,deque,slot,futures,add,last,slot,future1,slot,futures,add,last,slot,future2,test,restart,strategy,testing,restart,strategy,test,restart,strategy,manually,triggered,execution,graph,execution,graph,new,execution,graph,executor,executor,job,graph,get,job,id,job,graph,get,name,job,config,new,serialized,value,null,timeout,testing,restart,strategy,new,testing,slot,provider,ignore,slot,futures,remove,first,execution,graph,start,main,thread,executor,restart,time,gauge,restarting,time,new,restart,time,gauge,execution,graph,assert,equals,0l,restarting,time,get,value,long,value,execution,graph,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,execution,graph,schedule,for,execution,assert,equals,0l,restarting,time,get,value,long,value,list,execution,attempt,id,execution,ids,new,array,list,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,equals,0l,restarting,time,get,value,long,value,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,first,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,long,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,testing,restart,strategy,trigger,all,join,execution,ids,clear,for,execution,vertex,execution,vertex,execution,graph,get,all,execution,vertices,execution,ids,add,execution,vertex,get,current,execution,attempt,get,attempt,id,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,running,assert,equals,job,status,running,execution,graph,get,state,assert,true,first,restarting,timestamp,0,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,thread,sleep,1l,for,execution,attempt,id,execution,id,execution,ids,execution,graph,update,state,new,task,execution,state,job,graph,get,job,id,execution,id,execution,state,failed,new,exception,assert,equals,job,status,restarting,execution,graph,get,state,long,second,restarting,timestamp,execution,graph,get,status,timestamp,job,status,restarting,assert,true,first,restarting,timestamp,second,restarting,timestamp,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,2,i,thread,sleep,1l,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,assert,true,previous,restarting,time,0,execution,graph,fail,global,new,suppress,restarts,exception,new,exception,assert,equals,job,status,failed,execution,graph,get,state,previous,restarting,time,restarting,time,get,value,for,int,i,0,i,10,i,long,current,restarting,time,restarting,time,get,value,assert,true,current,restarting,time,previous,restarting,time,previous,restarting,time,current,restarting,time,finally,executor,shutdown,now
