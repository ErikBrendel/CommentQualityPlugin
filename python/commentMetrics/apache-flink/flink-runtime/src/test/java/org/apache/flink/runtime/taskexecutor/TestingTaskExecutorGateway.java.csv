commented;modifiers;parameterAmount;loc;comment;code
false;public;6;4;;@Override public CompletableFuture<Acknowledge> requestSlot(SlotID slotId, JobID jobId, AllocationID allocationId, String targetAddress, ResourceManagerId resourceManagerId, Time timeout) {     return requestSlotFunction.apply(Tuple5.of(slotId, jobId, allocationId, targetAddress, resourceManagerId)). }
false;public;6;10;;@Override public CompletableFuture<StackTraceSampleResponse> requestStackTraceSample(final ExecutionAttemptID executionAttemptId, final int sampleId, final int numSamples, final Time delayBetweenSamples, final int maxStackTraceDepth, final Time timeout) {     throw new UnsupportedOperationException(). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> submitTask(TaskDeploymentDescriptor tdd, JobMasterId jobMasterId, Time timeout) {     return submitTaskConsumer.apply(tdd, jobMasterId). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> updatePartitions(ExecutionAttemptID executionAttemptID, Iterable<PartitionInfo> partitionInfos, Time timeout) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;1;4;;@Override public void failPartition(ExecutionAttemptID executionAttemptID) { // noop }
false;public;4;4;;@Override public CompletableFuture<Acknowledge> triggerCheckpoint(ExecutionAttemptID executionAttemptID, long checkpointID, long checkpointTimestamp, CheckpointOptions checkpointOptions) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> confirmCheckpoint(ExecutionAttemptID executionAttemptID, long checkpointId, long checkpointTimestamp) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> stopTask(ExecutionAttemptID executionAttemptID, Time timeout) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> cancelTask(ExecutionAttemptID executionAttemptID, Time timeout) {     return cancelTaskFunction.apply(executionAttemptID). }
false;public;1;4;;@Override public void heartbeatFromJobManager(ResourceID heartbeatOrigin) {     heartbeatJobManagerConsumer.accept(heartbeatOrigin). }
false;public;1;4;;@Override public void heartbeatFromResourceManager(ResourceID heartbeatOrigin) {     heartbeatResourceManagerConsumer.accept(heartbeatOrigin). }
false;public;2;4;;@Override public void disconnectJobManager(JobID jobId, Exception cause) {     disconnectJobManagerConsumer.accept(jobId, cause). }
false;public;1;4;;@Override public void disconnectResourceManager(Exception cause) {     disconnectResourceManagerConsumer.accept(cause). }
false;public;3;4;;@Override public CompletableFuture<Acknowledge> freeSlot(AllocationID allocationId, Throwable cause, Time timeout) {     return freeSlotFunction.apply(allocationId, cause). }
false;public;2;4;;@Override public CompletableFuture<TransientBlobKey> requestFileUpload(FileType fileType, Time timeout) {     return FutureUtils.completedExceptionally(new UnsupportedOperationException()). }
false;public;1;4;;@Override public CompletableFuture<SerializableOptional<String>> requestMetricQueryServiceAddress(Time timeout) {     return CompletableFuture.completedFuture(SerializableOptional.of(address)). }
false;public;0;4;;@Override public String getAddress() {     return address. }
false;public;0;4;;@Override public String getHostname() {     return hostname. }
