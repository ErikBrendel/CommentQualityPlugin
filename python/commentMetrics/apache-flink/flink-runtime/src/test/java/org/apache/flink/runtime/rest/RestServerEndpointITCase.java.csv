# id;timestamp;commentText;codeText;commentWords;codeWords
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1518680660;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1518945174;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1519052657;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1519820826;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1519820826;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1521016671;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1521385094;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1521804758;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1522681180;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1524124694;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1525904579;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1525933612;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1526494919;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1529584793;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1530644925;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1531721446;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1534233643;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1535963626;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1538485302;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1539170288;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1539934386;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1539934386;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1545326469;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMultiPartFormDataWithoutFileUpload() throws Exception;1550222817;Sending multipart/form-data without a file should result in a bad request if the handler_expects a file upload.;@Test_	public void testMultiPartFormDataWithoutFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"").append(crlf)__			writer.append(crlf).flush()__			output.write("test".getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(400, connection.getResponseCode())__	};sending,multipart,form,data,without,a,file,should,result,in,a,bad,request,if,the,handler,expects,a,file,upload;test,public,void,test,multi,part,form,data,without,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,append,crlf,writer,append,crlf,flush,output,write,test,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,400,connection,get,response,code
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1521016671;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1521385094;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1521804758;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1522681180;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1524124694;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1525904579;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1525933612;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1526494919;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1529584793;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1530644925;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1531721446;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1534233643;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1535963626;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1538485302;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1539170288;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testMaxContentLengthLimit() throws Exception;1539934386;Tests that requests and responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH}_are rejected by the server and client, respectively.;@Test_	public void testMaxContentLengthLimit() throws Exception {_		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}__		response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(TestHandler.LARGE_RESPONSE_BODY_ID))___		try {_			response.get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,and,responses,larger,than,link,are,rejected,by,the,server,and,client,respectively;test,public,void,test,max,content,length,limit,throws,exception,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,create,string,of,size,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,test,handler,try,response,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception;1539934386;Tests that requests larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception {_		testHandler.handlerBody = id -> {_			throw new AssertionError("Request should not arrive at server.")__		}___		try {_			sendRequestToTestHandler(new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH))).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,requests,throws,exception,test,handler,handler,body,id,throw,new,assertion,error,request,should,not,arrive,at,server,try,send,request,to,test,handler,new,test,request,2,create,string,of,size,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception;1545326469;Tests that requests larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception {_		testHandler.handlerBody = id -> {_			throw new AssertionError("Request should not arrive at server.")__		}___		try {_			sendRequestToTestHandler(new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH))).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,requests,throws,exception,test,handler,handler,body,id,throw,new,assertion,error,request,should,not,arrive,at,server,try,send,request,to,test,handler,new,test,request,2,create,string,of,size,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception;1550222817;Tests that requests larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForRequests() throws Exception {_		testHandler.handlerBody = id -> {_			throw new AssertionError("Request should not arrive at server.")__		}___		try {_			sendRequestToTestHandler(new TestRequest(2, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH))).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(RestClientException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,requests,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,requests,throws,exception,test,handler,handler,body,id,throw,new,assertion,error,request,should,not,arrive,at,server,try,send,request,to,test,handler,new,test,request,2,create,string,of,size,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,rest,client,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1518680660;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			Assert.fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			Assert.assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,inet,socket,address,server,address,server,endpoint,get,server,address,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,assert,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1518945174;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			Assert.fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			Assert.assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,inet,socket,address,server,address,server,endpoint,get,server,address,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,assert,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1519052657;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			Assert.fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			Assert.assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,inet,socket,address,server,address,server,endpoint,get,server,address,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,assert,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1519820826;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			Assert.fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			Assert.assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,inet,socket,address,server,address,server,endpoint,get,server,address,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,assert,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1519820826;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			Assert.fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			Assert.assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,inet,socket,address,server,address,server,endpoint,get,server,address,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,assert,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1521016671;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1521385094;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1521804758;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1522681180;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1524124694;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1525904579;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1525933612;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1526494919;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1529584793;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1530644925;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1531721446;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1534233643;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1535963626;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1538485302;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1539170288;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1539934386;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1539934386;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1545326469;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> @Test 	public void testBadHandlerRequest() throws Exception;1550222817;Tests that a bad handler request (HandlerRequest cannot be created) is reported as a BAD_REQUEST_and not an internal server error.__<p>See FLINK-7663;@Test_	public void testBadHandlerRequest() throws Exception {_		final FaultyTestParameters parameters = new FaultyTestParameters()___		parameters.faultyJobIDPathParameter.resolve(PATH_JOB_ID)__		((TestParameters) parameters).jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		CompletableFuture<TestResponse> response = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))___		try {_			response.get()___			fail("The request should fail with a bad request return code.")__		} catch (ExecutionException ee) {_			Throwable t = ExceptionUtils.stripExecutionException(ee)___			assertTrue(t instanceof RestClientException)___			RestClientException rce = (RestClientException) t___			assertEquals(HttpResponseStatus.BAD_REQUEST, rce.getHttpResponseStatus())__		}_	};tests,that,a,bad,handler,request,handler,request,cannot,be,created,is,reported,as,a,and,not,an,internal,server,error,p,see,flink,7663;test,public,void,test,bad,handler,request,throws,exception,final,faulty,test,parameters,parameters,new,faulty,test,parameters,parameters,faulty,job,idpath,parameter,resolve,test,parameters,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,try,response,get,fail,the,request,should,fail,with,a,bad,request,return,code,catch,execution,exception,ee,throwable,t,exception,utils,strip,execution,exception,ee,assert,true,t,instanceof,rest,client,exception,rest,client,exception,rce,rest,client,exception,t,assert,equals,http,response,status,rce,get,http,response,status
RestServerEndpointITCase -> HandlerBlocker -> public void arriveAndBlock();1539934386;Signals that the request arrived. This method blocks until {@link #unblockRequest()} is_called.;public void arriveAndBlock() {_			markRequestArrived()__			try {_				assertTrue(finishRequestLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};signals,that,the,request,arrived,this,method,blocks,until,link,unblock,request,is,called;public,void,arrive,and,block,mark,request,arrived,try,assert,true,finish,request,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> HandlerBlocker -> public void arriveAndBlock();1545326469;Signals that the request arrived. This method blocks until {@link #unblockRequest()} is_called.;public void arriveAndBlock() {_			markRequestArrived()__			try {_				assertTrue(finishRequestLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};signals,that,the,request,arrived,this,method,blocks,until,link,unblock,request,is,called;public,void,arrive,and,block,mark,request,arrived,try,assert,true,finish,request,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> HandlerBlocker -> public void arriveAndBlock();1550222817;Signals that the request arrived. This method blocks until {@link #unblockRequest()} is_called.;public void arriveAndBlock() {_			markRequestArrived()__			try {_				assertTrue(finishRequestLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};signals,that,the,request,arrived,this,method,blocks,until,link,unblock,request,is,called;public,void,arrive,and,block,mark,request,arrived,try,assert,true,finish,request,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> @Test 	public void testShouldWaitForHandlersWhenClosing() throws Exception;1539934386;Tests that after calling {@link RestServerEndpoint#closeAsync()}, the handlers are closed_first, and we wait for in-flight requests to finish. As long as not all handlers are closed,_HTTP requests should be served.;@Test_	public void testShouldWaitForHandlersWhenClosing() throws Exception {_		final CompletableFuture<Void> closeHandlerFuture = new CompletableFuture<>()__		testHandler.closeFuture = closeHandlerFuture___		_		final CompletableFuture<Void> closeRestServerEndpointFuture = serverEndpoint.closeAsync()__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		final TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		final CompletableFuture<TestResponse> request__		synchronized (TestHandler.LOCK) {_			request = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		_		closeHandlerFuture.complete(null)__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}__		request.get(timeout.getSize(), timeout.getUnit())__		closeRestServerEndpointFuture.get(timeout.getSize(), timeout.getUnit())__	};tests,that,after,calling,link,rest,server,endpoint,close,async,the,handlers,are,closed,first,and,we,wait,for,in,flight,requests,to,finish,as,long,as,not,all,handlers,are,closed,http,requests,should,be,served;test,public,void,test,should,wait,for,handlers,when,closing,throws,exception,final,completable,future,void,close,handler,future,new,completable,future,test,handler,close,future,close,handler,future,final,completable,future,void,close,rest,server,endpoint,future,server,endpoint,close,async,assert,that,close,rest,server,endpoint,future,is,done,is,false,final,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,final,completable,future,test,response,request,synchronized,test,handler,lock,request,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,close,handler,future,complete,null,assert,that,close,rest,server,endpoint,future,is,done,is,false,synchronized,test,handler,lock,test,handler,lock,notify,all,request,get,timeout,get,size,timeout,get,unit,close,rest,server,endpoint,future,get,timeout,get,size,timeout,get,unit
RestServerEndpointITCase -> @Test 	public void testShouldWaitForHandlersWhenClosing() throws Exception;1539934386;Tests that after calling {@link RestServerEndpoint#closeAsync()}, the handlers are closed_first, and we wait for in-flight requests to finish. As long as not all handlers are closed,_HTTP requests should be served.;@Test_	public void testShouldWaitForHandlersWhenClosing() throws Exception {_		testHandler.closeFuture = new CompletableFuture<>()__		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			_			_			return CompletableFuture.supplyAsync(() -> {_				handlerBlocker.arriveAndBlock()__				return new TestResponse(id)__			})__		}___		_		final CompletableFuture<Void> closeRestServerEndpointFuture = serverEndpoint.closeAsync()__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		final CompletableFuture<TestResponse> request = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		_		testHandler.closeFuture.complete(null)__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		_		handlerBlocker.unblockRequest()___		request.get(timeout.getSize(), timeout.getUnit())__		closeRestServerEndpointFuture.get(timeout.getSize(), timeout.getUnit())__	};tests,that,after,calling,link,rest,server,endpoint,close,async,the,handlers,are,closed,first,and,we,wait,for,in,flight,requests,to,finish,as,long,as,not,all,handlers,are,closed,http,requests,should,be,served;test,public,void,test,should,wait,for,handlers,when,closing,throws,exception,test,handler,close,future,new,completable,future,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,return,completable,future,supply,async,handler,blocker,arrive,and,block,return,new,test,response,id,final,completable,future,void,close,rest,server,endpoint,future,server,endpoint,close,async,assert,that,close,rest,server,endpoint,future,is,done,is,false,final,completable,future,test,response,request,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,test,handler,close,future,complete,null,assert,that,close,rest,server,endpoint,future,is,done,is,false,handler,blocker,unblock,request,request,get,timeout,get,size,timeout,get,unit,close,rest,server,endpoint,future,get,timeout,get,size,timeout,get,unit
RestServerEndpointITCase -> @Test 	public void testShouldWaitForHandlersWhenClosing() throws Exception;1545326469;Tests that after calling {@link RestServerEndpoint#closeAsync()}, the handlers are closed_first, and we wait for in-flight requests to finish. As long as not all handlers are closed,_HTTP requests should be served.;@Test_	public void testShouldWaitForHandlersWhenClosing() throws Exception {_		testHandler.closeFuture = new CompletableFuture<>()__		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			_			_			return CompletableFuture.supplyAsync(() -> {_				handlerBlocker.arriveAndBlock()__				return new TestResponse(id)__			})__		}___		_		final CompletableFuture<Void> closeRestServerEndpointFuture = serverEndpoint.closeAsync()__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		final CompletableFuture<TestResponse> request = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		_		testHandler.closeFuture.complete(null)__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		_		handlerBlocker.unblockRequest()___		request.get(timeout.getSize(), timeout.getUnit())__		closeRestServerEndpointFuture.get(timeout.getSize(), timeout.getUnit())__	};tests,that,after,calling,link,rest,server,endpoint,close,async,the,handlers,are,closed,first,and,we,wait,for,in,flight,requests,to,finish,as,long,as,not,all,handlers,are,closed,http,requests,should,be,served;test,public,void,test,should,wait,for,handlers,when,closing,throws,exception,test,handler,close,future,new,completable,future,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,return,completable,future,supply,async,handler,blocker,arrive,and,block,return,new,test,response,id,final,completable,future,void,close,rest,server,endpoint,future,server,endpoint,close,async,assert,that,close,rest,server,endpoint,future,is,done,is,false,final,completable,future,test,response,request,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,test,handler,close,future,complete,null,assert,that,close,rest,server,endpoint,future,is,done,is,false,handler,blocker,unblock,request,request,get,timeout,get,size,timeout,get,unit,close,rest,server,endpoint,future,get,timeout,get,size,timeout,get,unit
RestServerEndpointITCase -> @Test 	public void testShouldWaitForHandlersWhenClosing() throws Exception;1550222817;Tests that after calling {@link RestServerEndpoint#closeAsync()}, the handlers are closed_first, and we wait for in-flight requests to finish. As long as not all handlers are closed,_HTTP requests should be served.;@Test_	public void testShouldWaitForHandlersWhenClosing() throws Exception {_		testHandler.closeFuture = new CompletableFuture<>()__		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			_			_			return CompletableFuture.supplyAsync(() -> {_				handlerBlocker.arriveAndBlock()__				return new TestResponse(id)__			})__		}___		_		final CompletableFuture<Void> closeRestServerEndpointFuture = serverEndpoint.closeAsync()__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		final CompletableFuture<TestResponse> request = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		_		testHandler.closeFuture.complete(null)__		assertThat(closeRestServerEndpointFuture.isDone(), is(false))___		_		handlerBlocker.unblockRequest()___		request.get(timeout.getSize(), timeout.getUnit())__		closeRestServerEndpointFuture.get(timeout.getSize(), timeout.getUnit())__	};tests,that,after,calling,link,rest,server,endpoint,close,async,the,handlers,are,closed,first,and,we,wait,for,in,flight,requests,to,finish,as,long,as,not,all,handlers,are,closed,http,requests,should,be,served;test,public,void,test,should,wait,for,handlers,when,closing,throws,exception,test,handler,close,future,new,completable,future,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,return,completable,future,supply,async,handler,blocker,arrive,and,block,return,new,test,response,id,final,completable,future,void,close,rest,server,endpoint,future,server,endpoint,close,async,assert,that,close,rest,server,endpoint,future,is,done,is,false,final,completable,future,test,response,request,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,test,handler,close,future,complete,null,assert,that,close,rest,server,endpoint,future,is,done,is,false,handler,blocker,unblock,request,request,get,timeout,get,size,timeout,get,unit,close,rest,server,endpoint,future,get,timeout,get,size,timeout,get,unit
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1518680660;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1__		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,final,inet,socket,address,server,address,server,endpoint,get,server,address,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1518945174;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1__		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,final,inet,socket,address,server,address,server,endpoint,get,server,address,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1519052657;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1__		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,final,inet,socket,address,server,address,server,endpoint,get,server,address,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1519820826;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1__		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,final,inet,socket,address,server,address,server,endpoint,get,server,address,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1519820826;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1__		final InetSocketAddress serverAddress = serverEndpoint.getServerAddress()___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,final,inet,socket,address,server,address,server,endpoint,get,server,address,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1521016671;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1521385094;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1521804758;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1522681180;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1524124694;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1525904579;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1525933612;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1526494919;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1529584793;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1530644925;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1531721446;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1534233643;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1535963626;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1538485302;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1539170288;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1539934386;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {__		TestParameters parameters = new TestParameters()__		parameters.jobIDPathParameter.resolve(PATH_JOB_ID)__		parameters.jobIDQueryParameter.resolve(Collections.singletonList(QUERY_JOB_ID))___		_		CompletableFuture<TestResponse> response1___		synchronized (TestHandler.LOCK) {_			response1 = restClient.sendRequest(_				serverAddress.getHostName(),_				serverAddress.getPort(),_				new TestHeaders(),_				parameters,_				new TestRequest(1))__			TestHandler.LOCK.wait()__		}__		_		CompletableFuture<TestResponse> response2 = restClient.sendRequest(_			serverAddress.getHostName(),_			serverAddress.getPort(),_			new TestHeaders(),_			parameters,_			new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		synchronized (TestHandler.LOCK) {_			TestHandler.LOCK.notifyAll()__		}_		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,test,parameters,parameters,new,test,parameters,parameters,job,idpath,parameter,resolve,parameters,job,idquery,parameter,resolve,collections,singleton,list,completable,future,test,response,response1,synchronized,test,handler,lock,response1,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,1,test,handler,lock,wait,completable,future,test,response,response2,rest,client,send,request,server,address,get,host,name,server,address,get,port,new,test,headers,parameters,new,test,request,2,assert,equals,2,response2,get,id,synchronized,test,handler,lock,test,handler,lock,notify,all,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1539934386;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {_		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			if (id == 1) {_				handlerBlocker.arriveAndBlock()__			}_			return CompletableFuture.completedFuture(new TestResponse(id))__		}___		_		final CompletableFuture<TestResponse> response1 = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		final CompletableFuture<TestResponse> response2 = sendRequestToTestHandler(new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		handlerBlocker.unblockRequest()___		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,if,id,1,handler,blocker,arrive,and,block,return,completable,future,completed,future,new,test,response,id,final,completable,future,test,response,response1,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,final,completable,future,test,response,response2,send,request,to,test,handler,new,test,request,2,assert,equals,2,response2,get,id,handler,blocker,unblock,request,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1545326469;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {_		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			if (id == 1) {_				handlerBlocker.arriveAndBlock()__			}_			return CompletableFuture.completedFuture(new TestResponse(id))__		}___		_		final CompletableFuture<TestResponse> response1 = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		final CompletableFuture<TestResponse> response2 = sendRequestToTestHandler(new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		handlerBlocker.unblockRequest()___		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,if,id,1,handler,blocker,arrive,and,block,return,completable,future,completed,future,new,test,response,id,final,completable,future,test,response,response1,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,final,completable,future,test,response,response2,send,request,to,test,handler,new,test,request,2,assert,equals,2,response2,get,id,handler,blocker,unblock,request,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testRequestInterleaving() throws Exception;1550222817;Tests that request are handled as individual units which don't interfere with each other._This means that request responses can overtake each other.;@Test_	public void testRequestInterleaving() throws Exception {_		final HandlerBlocker handlerBlocker = new HandlerBlocker(timeout)__		testHandler.handlerBody = id -> {_			if (id == 1) {_				handlerBlocker.arriveAndBlock()__			}_			return CompletableFuture.completedFuture(new TestResponse(id))__		}___		_		final CompletableFuture<TestResponse> response1 = sendRequestToTestHandler(new TestRequest(1))__		handlerBlocker.awaitRequestToArrive()___		_		final CompletableFuture<TestResponse> response2 = sendRequestToTestHandler(new TestRequest(2))__		assertEquals(2, response2.get().id)___		_		handlerBlocker.unblockRequest()___		_		assertEquals(1, response1.get().id)__	};tests,that,request,are,handled,as,individual,units,which,don,t,interfere,with,each,other,this,means,that,request,responses,can,overtake,each,other;test,public,void,test,request,interleaving,throws,exception,final,handler,blocker,handler,blocker,new,handler,blocker,timeout,test,handler,handler,body,id,if,id,1,handler,blocker,arrive,and,block,return,completable,future,completed,future,new,test,response,id,final,completable,future,test,response,response1,send,request,to,test,handler,new,test,request,1,handler,blocker,await,request,to,arrive,final,completable,future,test,response,response2,send,request,to,test,handler,new,test,request,2,assert,equals,2,response2,get,id,handler,blocker,unblock,request,assert,equals,1,response1,get,id
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1518680660;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1518945174;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1519052657;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1519820826;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1519820826;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1521016671;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1521385094;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1521804758;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1522681180;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1524124694;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1525904579;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1525933612;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1526494919;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final Path lastUploadedPath = testUploadHandler.getLastUploadedPath()__		assertEquals(uploadedContent, new String(Files.readAllBytes(lastUploadedPath), StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,path,last,uploaded,path,test,upload,handler,get,last,uploaded,path,assert,equals,uploaded,content,new,string,files,read,all,bytes,last,uploaded,path,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1529584793;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1530644925;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1531721446;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1534233643;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1535963626;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1538485302;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1539170288;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1539934386;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1539934386;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1545326469;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testFileUpload() throws Exception;1550222817;Tests that multipart/form-data uploads work correctly.__@see FileUploadHandler;@Test_	public void testFileUpload() throws Exception {_		final String boundary = generateMultiPartBoundary()__		final String crlf = "\r\n"__		final String uploadedContent = "hello"__		final HttpURLConnection connection = openHttpConnectionForUpload(boundary)___		try (OutputStream output = connection.getOutputStream()_ PrintWriter writer =_			new PrintWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8), true)) {__			writer.append("--" + boundary).append(crlf)__			writer.append("Content-Disposition: form-data_ name=\"foo\"_ filename=\"bar\"").append(crlf)__			writer.append("Content-Type: plain/text_ charset=utf8").append(crlf)__			writer.append(crlf).flush()__			output.write(uploadedContent.getBytes(StandardCharsets.UTF_8))__			output.flush()__			writer.append(crlf).flush()__			writer.append("--" + boundary + "--").append(crlf).flush()__		}__		assertEquals(200, connection.getResponseCode())__		final byte[] lastUploadedFileContents = testUploadHandler.getLastUploadedFileContents()__		assertEquals(uploadedContent, new String(lastUploadedFileContents, StandardCharsets.UTF_8))__	};tests,that,multipart,form,data,uploads,work,correctly,see,file,upload,handler;test,public,void,test,file,upload,throws,exception,final,string,boundary,generate,multi,part,boundary,final,string,crlf,r,n,final,string,uploaded,content,hello,final,http,urlconnection,connection,open,http,connection,for,upload,boundary,try,output,stream,output,connection,get,output,stream,print,writer,writer,new,print,writer,new,output,stream,writer,output,standard,charsets,true,writer,append,boundary,append,crlf,writer,append,content,disposition,form,data,name,foo,filename,bar,append,crlf,writer,append,content,type,plain,text,charset,utf8,append,crlf,writer,append,crlf,flush,output,write,uploaded,content,get,bytes,standard,charsets,output,flush,writer,append,crlf,flush,writer,append,boundary,append,crlf,flush,assert,equals,200,connection,get,response,code,final,byte,last,uploaded,file,contents,test,upload,handler,get,last,uploaded,file,contents,assert,equals,uploaded,content,new,string,last,uploaded,file,contents,standard,charsets
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1525904579;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1525933612;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1526494919;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1529584793;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1530644925;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1531721446;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1534233643;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1535963626;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1538485302;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1539170288;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1539934386;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1539934386;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1545326469;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> @Test 	public void testStaticFileServerHandler() throws Exception;1550222817;Tests that files can be served with the {@link StaticFileServerHandler}.;@Test_	public void testStaticFileServerHandler() throws Exception {_		final File file = temporaryFolder.newFile()__		Files.write(file.toPath(), Collections.singletonList("foobar"))___		final URL url = new URL(serverEndpoint.getRestBaseUrl() + "/" + file.getName())__		final HttpURLConnection connection = (HttpURLConnection) url.openConnection()__		connection.setRequestMethod("GET")__		final String fileContents = IOUtils.toString(connection.getInputStream())___		assertEquals("foobar", fileContents.trim())__	};tests,that,files,can,be,served,with,the,link,static,file,server,handler;test,public,void,test,static,file,server,handler,throws,exception,final,file,file,temporary,folder,new,file,files,write,file,to,path,collections,singleton,list,foobar,final,url,url,new,url,server,endpoint,get,rest,base,url,file,get,name,final,http,urlconnection,connection,http,urlconnection,url,open,connection,connection,set,request,method,get,final,string,file,contents,ioutils,to,string,connection,get,input,stream,assert,equals,foobar,file,contents,trim
RestServerEndpointITCase -> HandlerBlocker -> public void unblockRequest();1539934386;@see #arriveAndBlock();public void unblockRequest() {_			finishRequestLatch.countDown()__		};see,arrive,and,block;public,void,unblock,request,finish,request,latch,count,down
RestServerEndpointITCase -> HandlerBlocker -> public void unblockRequest();1545326469;@see #arriveAndBlock();public void unblockRequest() {_			finishRequestLatch.countDown()__		};see,arrive,and,block;public,void,unblock,request,finish,request,latch,count,down
RestServerEndpointITCase -> HandlerBlocker -> public void unblockRequest();1550222817;@see #arriveAndBlock();public void unblockRequest() {_			finishRequestLatch.countDown()__		};see,arrive,and,block;public,void,unblock,request,finish,request,latch,count,down
RestServerEndpointITCase -> HandlerBlocker -> public void awaitRequestToArrive();1539934386;Waits until {@link #arriveAndBlock()} is called.;public void awaitRequestToArrive() {_			try {_				assertTrue(requestArrivedLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};waits,until,link,arrive,and,block,is,called;public,void,await,request,to,arrive,try,assert,true,request,arrived,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> HandlerBlocker -> public void awaitRequestToArrive();1545326469;Waits until {@link #arriveAndBlock()} is called.;public void awaitRequestToArrive() {_			try {_				assertTrue(requestArrivedLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};waits,until,link,arrive,and,block,is,called;public,void,await,request,to,arrive,try,assert,true,request,arrived,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> HandlerBlocker -> public void awaitRequestToArrive();1550222817;Waits until {@link #arriveAndBlock()} is called.;public void awaitRequestToArrive() {_			try {_				assertTrue(requestArrivedLatch.await(timeout.getSize(), timeout.getUnit()))__			} catch (final InterruptedException e) {_				Thread.currentThread().interrupt()__			}_		};waits,until,link,arrive,and,block,is,called;public,void,await,request,to,arrive,try,assert,true,request,arrived,latch,await,timeout,get,size,timeout,get,unit,catch,final,interrupted,exception,e,thread,current,thread,interrupt
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception;1539934386;Tests that responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception {_		testHandler.handlerBody = id -> CompletableFuture.completedFuture(_			new TestResponse(id, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			sendRequestToTestHandler(new TestRequest(1)).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,responses,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,responses,throws,exception,test,handler,handler,body,id,completable,future,completed,future,new,test,response,id,create,string,of,size,try,send,request,to,test,handler,new,test,request,1,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception;1545326469;Tests that responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception {_		testHandler.handlerBody = id -> CompletableFuture.completedFuture(_			new TestResponse(id, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			sendRequestToTestHandler(new TestRequest(1)).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,responses,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,responses,throws,exception,test,handler,handler,body,id,completable,future,completed,future,new,test,response,id,create,string,of,size,try,send,request,to,test,handler,new,test,request,1,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
RestServerEndpointITCase -> @Test 	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception;1550222817;Tests that responses larger than {@link #TEST_REST_MAX_CONTENT_LENGTH} are rejected.;@Test_	public void testShouldRespectMaxContentLengthLimitForResponses() throws Exception {_		testHandler.handlerBody = id -> CompletableFuture.completedFuture(_			new TestResponse(id, createStringOfSize(TEST_REST_MAX_CONTENT_LENGTH)))___		try {_			sendRequestToTestHandler(new TestRequest(1)).get()__			fail("Expected exception not thrown")__		} catch (final ExecutionException e) {_			final Throwable throwable = ExceptionUtils.stripExecutionException(e)__			assertThat(throwable, instanceOf(TooLongFrameException.class))__			assertThat(throwable.getMessage(), containsString("Try to raise"))__		}_	};tests,that,responses,larger,than,link,are,rejected;test,public,void,test,should,respect,max,content,length,limit,for,responses,throws,exception,test,handler,handler,body,id,completable,future,completed,future,new,test,response,id,create,string,of,size,try,send,request,to,test,handler,new,test,request,1,get,fail,expected,exception,not,thrown,catch,final,execution,exception,e,final,throwable,throwable,exception,utils,strip,execution,exception,e,assert,that,throwable,instance,of,too,long,frame,exception,class,assert,that,throwable,get,message,contains,string,try,to,raise
