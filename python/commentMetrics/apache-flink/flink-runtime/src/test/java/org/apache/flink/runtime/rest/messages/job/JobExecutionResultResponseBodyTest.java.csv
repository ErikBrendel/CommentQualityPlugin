commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;19;;@Parameterized.Parameters public static Collection<Object[]> data() throws IOException {     return Arrays.asList(new Object[][] { { JobExecutionResultResponseBody.created(new JobResult.Builder().jobId(TEST_JOB_ID).applicationStatus(ApplicationStatus.SUCCEEDED).netRuntime(TEST_NET_RUNTIME).accumulatorResults(TEST_ACCUMULATORS).serializedThrowable(new SerializedThrowable(new RuntimeException("expected"))).build()) }, { JobExecutionResultResponseBody.created(new JobResult.Builder().jobId(TEST_JOB_ID).applicationStatus(ApplicationStatus.FAILED).netRuntime(TEST_NET_RUNTIME).accumulatorResults(TEST_ACCUMULATORS).build()) }, { JobExecutionResultResponseBody.inProgress() } }). }
false;protected;0;4;;@Override protected Class<JobExecutionResultResponseBody> getTestResponseClass() {     return JobExecutionResultResponseBody.class. }
false;protected;0;4;;@Override protected JobExecutionResultResponseBody getTestResponseInstance() throws Exception {     return jobExecutionResultResponseBody. }
false;protected;2;36;;@Override protected void assertOriginalEqualsToUnmarshalled(final JobExecutionResultResponseBody expected, final JobExecutionResultResponseBody actual) {     assertThat(actual.getStatus(), equalTo(actual.getStatus())).     final JobResult expectedJobExecutionResult = expected.getJobExecutionResult().     final JobResult actualJobExecutionResult = actual.getJobExecutionResult().     if (expectedJobExecutionResult != null) {         assertNotNull(actualJobExecutionResult).         assertThat(actualJobExecutionResult.getJobId(), equalTo(expectedJobExecutionResult.getJobId())).         assertThat(actualJobExecutionResult.getApplicationStatus(), equalTo(expectedJobExecutionResult.getApplicationStatus())).         assertThat(actualJobExecutionResult.getNetRuntime(), equalTo(expectedJobExecutionResult.getNetRuntime())).         assertThat(actualJobExecutionResult.getAccumulatorResults(), equalTo(expectedJobExecutionResult.getAccumulatorResults())).         final Optional<SerializedThrowable> expectedFailureCauseOptional = expectedJobExecutionResult.getSerializedThrowable().         expectedFailureCauseOptional.ifPresent(expectedFailureCause -> {             final SerializedThrowable actualFailureCause = actualJobExecutionResult.getSerializedThrowable().orElseThrow(() -> new AssertionError("actualFailureCause is not available")).             assertThat(actualFailureCause.getFullStringifiedStackTrace(), equalTo(expectedFailureCause.getFullStringifiedStackTrace())).             assertThat(actualFailureCause.getOriginalErrorClassName(), equalTo(expectedFailureCause.getOriginalErrorClassName())).             assertArrayEquals(expectedFailureCause.getSerializedException(), actualFailureCause.getSerializedException()).         }).         if (expectedJobExecutionResult.getAccumulatorResults() != null) {             assertNotNull(actualJobExecutionResult.getAccumulatorResults()).             assertArrayEquals(actualJobExecutionResult.getAccumulatorResults().get(TEST_ACCUMULATOR_NAME).getByteArray(), expectedJobExecutionResult.getAccumulatorResults().get(TEST_ACCUMULATOR_NAME).getByteArray()).         }     } }
