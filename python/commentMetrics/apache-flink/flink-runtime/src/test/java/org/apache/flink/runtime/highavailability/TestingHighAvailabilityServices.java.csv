commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;// ------------------------------------------------------------------------ // Setters for mock / testing implementations // ------------------------------------------------------------------------ public void setResourceManagerLeaderRetriever(LeaderRetrievalService resourceManagerLeaderRetriever) {     this.resourceManagerLeaderRetriever = resourceManagerLeaderRetriever. }
false;public;1;3;;public void setDispatcherLeaderRetriever(LeaderRetrievalService dispatcherLeaderRetriever) {     this.dispatcherLeaderRetriever = dispatcherLeaderRetriever. }
false;public;1;3;;public void setWebMonitorEndpointLeaderRetriever(final LeaderRetrievalService webMonitorEndpointLeaderRetriever) {     this.webMonitorEndpointLeaderRetriever = webMonitorEndpointLeaderRetriever. }
false;public;2;3;;public void setJobMasterLeaderRetriever(JobID jobID, LeaderRetrievalService jobMasterLeaderRetriever) {     this.jobMasterLeaderRetrievers.put(jobID, jobMasterLeaderRetriever). }
false;public;2;3;;public void setJobMasterLeaderElectionService(JobID jobID, LeaderElectionService leaderElectionService) {     this.jobManagerLeaderElectionServices.put(jobID, leaderElectionService). }
false;public;1;3;;public void setResourceManagerLeaderElectionService(LeaderElectionService leaderElectionService) {     this.resourceManagerLeaderElectionService = leaderElectionService. }
false;public;1;3;;public void setDispatcherLeaderElectionService(LeaderElectionService leaderElectionService) {     this.dispatcherLeaderElectionService = leaderElectionService. }
false;public;1;3;;public void setWebMonitorEndpointLeaderElectionService(final LeaderElectionService webMonitorEndpointLeaderElectionService) {     this.webMonitorEndpointLeaderElectionService = webMonitorEndpointLeaderElectionService. }
false;public;1;3;;public void setCheckpointRecoveryFactory(CheckpointRecoveryFactory checkpointRecoveryFactory) {     this.checkpointRecoveryFactory = checkpointRecoveryFactory. }
false;public;1;3;;public void setSubmittedJobGraphStore(SubmittedJobGraphStore submittedJobGraphStore) {     this.submittedJobGraphStore = submittedJobGraphStore. }
false;public;1;3;;public void setRunningJobsRegistry(RunningJobsRegistry runningJobsRegistry) {     this.runningJobsRegistry = runningJobsRegistry. }
false;public;1;3;;public void setJobMasterLeaderElectionServiceFunction(Function<JobID, LeaderElectionService> jobMasterLeaderElectionServiceFunction) {     this.jobMasterLeaderElectionServiceFunction = jobMasterLeaderElectionServiceFunction. }
false;public;1;3;;public void setJobMasterLeaderRetrieverFunction(Function<JobID, LeaderRetrievalService> jobMasterLeaderRetrieverFunction) {     this.jobMasterLeaderRetrieverFunction = jobMasterLeaderRetrieverFunction. }
false;public;0;9;;// ------------------------------------------------------------------------ // HA Services Methods // ------------------------------------------------------------------------ @Override public LeaderRetrievalService getResourceManagerLeaderRetriever() {     LeaderRetrievalService service = this.resourceManagerLeaderRetriever.     if (service != null) {         return service.     } else {         throw new IllegalStateException("ResourceManagerLeaderRetriever has not been set").     } }
false;public;0;9;;@Override public LeaderRetrievalService getDispatcherLeaderRetriever() {     LeaderRetrievalService service = this.dispatcherLeaderRetriever.     if (service != null) {         return service.     } else {         throw new IllegalStateException("ResourceManagerLeaderRetriever has not been set").     } }
false;public;1;9;;@Override public LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID) {     LeaderRetrievalService service = jobMasterLeaderRetrievers.computeIfAbsent(jobID, jobMasterLeaderRetrieverFunction).     if (service != null) {         return service.     } else {         throw new IllegalStateException("JobMasterLeaderRetriever has not been set").     } }
false;public;2;4;;@Override public LeaderRetrievalService getJobManagerLeaderRetriever(JobID jobID, String defaultJobManagerAddress) {     return getJobManagerLeaderRetriever(jobID). }
false;public;0;4;;@Override public LeaderRetrievalService getWebMonitorLeaderRetriever() {     return webMonitorEndpointLeaderRetriever. }
false;public;0;10;;@Override public LeaderElectionService getResourceManagerLeaderElectionService() {     LeaderElectionService service = resourceManagerLeaderElectionService.     if (service != null) {         return service.     } else {         throw new IllegalStateException("ResourceManagerLeaderElectionService has not been set").     } }
false;public;0;10;;@Override public LeaderElectionService getDispatcherLeaderElectionService() {     LeaderElectionService service = dispatcherLeaderElectionService.     if (service != null) {         return service.     } else {         throw new IllegalStateException("DispatcherLeaderElectionService has not been set").     } }
false;public;1;10;;@Override public LeaderElectionService getJobManagerLeaderElectionService(JobID jobID) {     LeaderElectionService service = jobManagerLeaderElectionServices.computeIfAbsent(jobID, jobMasterLeaderElectionServiceFunction).     if (service != null) {         return service.     } else {         throw new IllegalStateException("JobMasterLeaderElectionService has not been set").     } }
false;public;0;4;;@Override public LeaderElectionService getWebMonitorLeaderElectionService() {     return webMonitorEndpointLeaderElectionService. }
false;public;0;10;;@Override public CheckpointRecoveryFactory getCheckpointRecoveryFactory() {     CheckpointRecoveryFactory factory = checkpointRecoveryFactory.     if (factory != null) {         return factory.     } else {         throw new IllegalStateException("CheckpointRecoveryFactory has not been set").     } }
false;public;0;11;;@Override public SubmittedJobGraphStore getSubmittedJobGraphStore() {     SubmittedJobGraphStore store = submittedJobGraphStore.     if (store != null) {         return store.     } else {         throw new IllegalStateException("SubmittedJobGraphStore has not been set").     } }
false;public;0;4;;@Override public RunningJobsRegistry getRunningJobsRegistry() {     return runningJobsRegistry. }
false;public;0;4;;@Override public BlobStore createBlobStore() throws IOException {     return new VoidBlobStore(). }
false;public;0;4;;// ------------------------------------------------------------------------ // Shutdown // ------------------------------------------------------------------------ @Override public void close() throws Exception { // nothing to do }
false;public;0;4;;@Override public void closeAndCleanupAllData() throws Exception { // nothing to do }
