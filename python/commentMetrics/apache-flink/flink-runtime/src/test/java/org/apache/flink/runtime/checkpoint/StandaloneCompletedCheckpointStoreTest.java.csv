commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected CompletedCheckpointStore createCompletedCheckpoints(int maxNumberOfCheckpointsToRetain) throws Exception {     return new StandaloneCompletedCheckpointStore(maxNumberOfCheckpointsToRetain). }
true;public;0;16;/**  * Tests that shutdown discards all checkpoints.  */ ;/**  * Tests that shutdown discards all checkpoints.  */ @Test public void testShutdownDiscardsCheckpoints() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore store = createCompletedCheckpoints(1).     TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry).     Collection<OperatorState> operatorStates = checkpoint.getOperatorStates().values().     store.addCheckpoint(checkpoint).     assertEquals(1, store.getNumberOfRetainedCheckpoints()).     verifyCheckpointRegistered(operatorStates, sharedStateRegistry).     store.shutdown(JobStatus.FINISHED).     assertEquals(0, store.getNumberOfRetainedCheckpoints()).     assertTrue(checkpoint.isDiscarded()).     verifyCheckpointDiscarded(operatorStates). }
true;public;0;16;/**  * Tests that suspends discards all checkpoints (as they cannot be  * recovered later in standalone recovery mode).  */ ;/**  * Tests that suspends discards all checkpoints (as they cannot be  * recovered later in standalone recovery mode).  */ @Test public void testSuspendDiscardsCheckpoints() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore store = createCompletedCheckpoints(1).     TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry).     Collection<OperatorState> taskStates = checkpoint.getOperatorStates().values().     store.addCheckpoint(checkpoint).     assertEquals(1, store.getNumberOfRetainedCheckpoints()).     verifyCheckpointRegistered(taskStates, sharedStateRegistry).     store.shutdown(JobStatus.SUSPENDED).     assertEquals(0, store.getNumberOfRetainedCheckpoints()).     assertTrue(checkpoint.isDiscarded()).     verifyCheckpointDiscarded(taskStates). }
true;public;0;25;/**  * Tests that the checkpoint does not exist in the store when we fail to add  * it into the store (i.e., there exists an exception thrown by the method).  */ ;/**  * Tests that the checkpoint does not exist in the store when we fail to add  * it into the store (i.e., there exists an exception thrown by the method).  */ @Test public void testAddCheckpointWithFailedRemove() throws Exception {     final int numCheckpointsToRetain = 1.     CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain).     for (long i = 0. i <= numCheckpointsToRetain. ++i) {         CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class).         doReturn(i).when(checkpointToAdd).getCheckpointID().         doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates().         doThrow(new IOException()).when(checkpointToAdd).discardOnSubsume().         try {             store.addCheckpoint(checkpointToAdd).             // The checkpoint should be in the store if we successfully add it into the store.             List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints().             assertTrue(addedCheckpoints.contains(checkpointToAdd)).         } catch (Exception e) {             // The checkpoint should not be in the store if any exception is thrown.             List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints().             assertFalse(addedCheckpoints.contains(checkpointToAdd)).         }     } }
