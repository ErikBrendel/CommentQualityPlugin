commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@BeforeClass public static void setup() throws Exception {     Configuration configuration = new Configuration().     configuration.setString(AkkaOptions.FRAMESIZE, maxFrameSize + "b").     akkaRpcService1 = AkkaRpcServiceUtils.createRpcService("localhost", 0, configuration).     akkaRpcService2 = AkkaRpcServiceUtils.createRpcService("localhost", 0, configuration). }
false;public,static;0;11;;@AfterClass public static void teardown() throws InterruptedException, ExecutionException, TimeoutException {     final Collection<CompletableFuture<?>> terminationFutures = new ArrayList<>(2).     terminationFutures.add(akkaRpcService1.stopService()).     terminationFutures.add(akkaRpcService2.stopService()).     FutureUtils.waitForAll(terminationFutures).get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS). }
true;public;0;14;/**  * Tests that a local rpc call with a non serializable argument can be executed.  */ ;/**  * Tests that a local rpc call with a non serializable argument can be executed.  */ @Test public void testNonSerializableLocalMessageTransfer() throws Exception {     LinkedBlockingQueue<Object> linkedBlockingQueue = new LinkedBlockingQueue<>().     TestEndpoint testEndpoint = new TestEndpoint(akkaRpcService1, linkedBlockingQueue).     testEndpoint.start().     TestGateway testGateway = testEndpoint.getSelfGateway(TestGateway.class).     NonSerializableObject expected = new NonSerializableObject(42).     testGateway.foobar(expected).     assertThat(linkedBlockingQueue.take(), Is.<Object>is(expected)). }
true;public;0;17;/**  * Tests that a remote rpc call with a non-serializable argument fails with an  * {@link IOException} (or an {@link java.lang.reflect.UndeclaredThrowableException} if the  * the method declaration does not include the {@link IOException} as throwable).  */ ;/**  * Tests that a remote rpc call with a non-serializable argument fails with an  * {@link IOException} (or an {@link java.lang.reflect.UndeclaredThrowableException} if the  * the method declaration does not include the {@link IOException} as throwable).  */ @Test(expected = IOException.class) public void testNonSerializableRemoteMessageTransfer() throws Exception {     LinkedBlockingQueue<Object> linkedBlockingQueue = new LinkedBlockingQueue<>().     TestEndpoint testEndpoint = new TestEndpoint(akkaRpcService1, linkedBlockingQueue).     testEndpoint.start().     String address = testEndpoint.getAddress().     CompletableFuture<TestGateway> remoteGatewayFuture = akkaRpcService2.connect(address, TestGateway.class).     TestGateway remoteGateway = remoteGatewayFuture.get(timeout.getSize(), timeout.getUnit()).     remoteGateway.foobar(new Object()).     fail("Should have failed because Object is not serializable."). }
true;public;0;19;/**  * Tests that a remote rpc call with a serializable argument can be successfully executed.  */ ;/**  * Tests that a remote rpc call with a serializable argument can be successfully executed.  */ @Test public void testSerializableRemoteMessageTransfer() throws Exception {     LinkedBlockingQueue<Object> linkedBlockingQueue = new LinkedBlockingQueue<>().     TestEndpoint testEndpoint = new TestEndpoint(akkaRpcService1, linkedBlockingQueue).     testEndpoint.start().     String address = testEndpoint.getAddress().     CompletableFuture<TestGateway> remoteGatewayFuture = akkaRpcService2.connect(address, TestGateway.class).     TestGateway remoteGateway = remoteGatewayFuture.get(timeout.getSize(), timeout.getUnit()).     int expected = 42.     remoteGateway.foobar(expected).     assertThat(linkedBlockingQueue.take(), Is.<Object>is(expected)). }
true;public;0;20;/**  * Tests that a message which exceeds the maximum frame size is detected and a corresponding  * exception is thrown.  */ ;/**  * Tests that a message which exceeds the maximum frame size is detected and a corresponding  * exception is thrown.  */ @Test(expected = IOException.class) public void testMaximumFramesizeRemoteMessageTransfer() throws Exception {     LinkedBlockingQueue<Object> linkedBlockingQueue = new LinkedBlockingQueue<>().     TestEndpoint testEndpoint = new TestEndpoint(akkaRpcService1, linkedBlockingQueue).     testEndpoint.start().     String address = testEndpoint.getAddress().     CompletableFuture<TestGateway> remoteGatewayFuture = akkaRpcService2.connect(address, TestGateway.class).     TestGateway remoteGateway = remoteGatewayFuture.get(timeout.getSize(), timeout.getUnit()).     int bufferSize = maxFrameSize + 1.     byte[] buffer = new byte[bufferSize].     remoteGateway.foobar(buffer).     fail("Should have failed due to exceeding the maximum framesize."). }
false;;1;1;;void foobar(Object object) throws IOException, InterruptedException.
false;public;1;4;;@Override public void foobar(Object object) throws InterruptedException {     queue.put(object). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj instanceof NonSerializableObject) {         NonSerializableObject nonSerializableObject = (NonSerializableObject) obj.         return value == nonSerializableObject.value.     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return value * 41. }
