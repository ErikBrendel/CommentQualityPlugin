commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupClass() {     rpcService = new TestingRpcService(). }
false;public;0;8;;@Before public void setup() throws Exception {     highAvailabilityServices = new TestingHighAvailabilityServices().     resourceManagerLeaderElectionService = new TestingLeaderElectionService().     highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService).     testingFatalErrorHandler = new TestingFatalErrorHandler().     resourceManagerResourceId = ResourceID.generate(). }
false;public;0;14;;@After public void after() throws Exception {     if (resourceManager != null) {         RpcUtils.terminateRpcEndpoint(resourceManager, TIMEOUT).     }     if (highAvailabilityServices != null) {         highAvailabilityServices.closeAndCleanupAllData().     }     if (testingFatalErrorHandler.hasExceptionOccurred()) {         testingFatalErrorHandler.rethrowError().     } }
false;public,static;0;6;;@AfterClass public static void tearDownClass() throws Exception {     if (rpcService != null) {         RpcUtils.terminateRpcServices(TIMEOUT, rpcService).     } }
true;public;0;24;/**  * Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.  */ ;/**  * Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.  */ @Test public void testRequestTaskManagerInfo() throws Exception {     final ResourceID taskManagerId = ResourceID.generate().     final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().setAddress(UUID.randomUUID().toString()).createTestingTaskExecutorGateway().     rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway).     resourceManager = createAndStartResourceManager(heartbeatServices).     final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class).     registerTaskExecutor(resourceManagerGateway, taskManagerId, taskExecutorGateway.getAddress()).     CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(taskManagerId, TestingUtils.TIMEOUT()).     TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get().     Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId()).     Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription()).     Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress()).     Assert.assertEquals(dataPort, taskManagerInfo.getDataPort()).     Assert.assertEquals(0, taskManagerInfo.getNumberSlots()).     Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots()). }
false;private;3;10;;private void registerTaskExecutor(ResourceManagerGateway resourceManagerGateway, ResourceID taskExecutorId, String taskExecutorAddress) throws Exception {     final CompletableFuture<RegistrationResponse> registrationFuture = resourceManagerGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorId, dataPort, hardwareDescription, TestingUtils.TIMEOUT()).     assertThat(registrationFuture.get(), instanceOf(RegistrationResponse.Success.class)). }
false;public;0;34;;@Test public void testHeartbeatTimeoutWithJobMaster() throws Exception {     final CompletableFuture<ResourceID> heartbeatRequestFuture = new CompletableFuture<>().     final CompletableFuture<ResourceManagerId> disconnectFuture = new CompletableFuture<>().     final TestingJobMasterGateway jobMasterGateway = new TestingJobMasterGatewayBuilder().setResourceManagerHeartbeatConsumer(heartbeatRequestFuture::complete).setDisconnectResourceManagerConsumer(disconnectFuture::complete).build().     rpcService.registerGateway(jobMasterGateway.getAddress(), jobMasterGateway).     final JobID jobId = new JobID().     final ResourceID jobMasterResourceId = ResourceID.generate().     final LeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterGateway.getAddress(), jobMasterGateway.getFencingToken().toUUID()).     highAvailabilityServices.setJobMasterLeaderRetrieverFunction(requestedJobId -> {         assertThat(requestedJobId, is(equalTo(jobId))).         return jobMasterLeaderRetrievalService.     }).     runHeartbeatTimeoutTest(resourceManagerGateway -> {         final CompletableFuture<RegistrationResponse> registrationFuture = resourceManagerGateway.registerJobManager(jobMasterGateway.getFencingToken(), jobMasterResourceId, jobMasterGateway.getAddress(), jobId, TIMEOUT).         assertThat(registrationFuture.get(), instanceOf(RegistrationResponse.Success.class)).     }, resourceManagerResourceId -> {         assertThat(heartbeatRequestFuture.get(), is(equalTo(resourceManagerResourceId))).         assertThat(disconnectFuture.get(), is(equalTo(resourceManagerId))).     }). }
false;public;0;21;;@Test public void testHeartbeatTimeoutWithTaskExecutor() throws Exception {     final ResourceID taskExecutorId = ResourceID.generate().     final CompletableFuture<ResourceID> heartbeatRequestFuture = new CompletableFuture<>().     final CompletableFuture<Exception> disconnectFuture = new CompletableFuture<>().     final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().setDisconnectResourceManagerConsumer(disconnectFuture::complete).setHeartbeatResourceManagerConsumer(heartbeatRequestFuture::complete).createTestingTaskExecutorGateway().     rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway).     runHeartbeatTimeoutTest(resourceManagerGateway -> {         registerTaskExecutor(resourceManagerGateway, taskExecutorId, taskExecutorGateway.getAddress()).     }, resourceManagerResourceId -> {         assertThat(heartbeatRequestFuture.get(), is(equalTo(resourceManagerResourceId))).         assertThat(disconnectFuture.get(), instanceOf(TimeoutException.class)).     }). }
false;private;2;9;;private void runHeartbeatTimeoutTest(ThrowingConsumer<ResourceManagerGateway, Exception> registerComponentAtResourceManager, ThrowingConsumer<ResourceID, Exception> verifyHeartbeatTimeout) throws Exception {     resourceManager = createAndStartResourceManager(fastHeartbeatServices).     final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class).     registerComponentAtResourceManager.accept(resourceManagerGateway).     verifyHeartbeatTimeout.accept(resourceManagerResourceId). }
false;private;1;31;;private TestingResourceManager createAndStartResourceManager(HeartbeatServices heartbeatServices) throws Exception {     final SlotManager slotManager = new SlotManager(rpcService.getScheduledExecutor(), TestingUtils.infiniteTime(), TestingUtils.infiniteTime(), TestingUtils.infiniteTime()).     final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(highAvailabilityServices, rpcService.getScheduledExecutor(), TestingUtils.infiniteTime()).     final TestingResourceManager resourceManager = new TestingResourceManager(rpcService, ResourceManager.RESOURCE_MANAGER_NAME + UUID.randomUUID(), resourceManagerResourceId, highAvailabilityServices, heartbeatServices, slotManager, NoOpMetricRegistry.INSTANCE, jobLeaderIdService, testingFatalErrorHandler, UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup()).     resourceManager.start().     // first make the ResourceManager the leader     resourceManagerId = ResourceManagerId.generate().     resourceManagerLeaderElectionService.isLeader(resourceManagerId.toUUID()).get().     return resourceManager. }
