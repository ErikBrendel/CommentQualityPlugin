# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1511963573;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			new NoOpMetricRegistry(),_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,new,no,op,metric,registry,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1513102156;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1515669170;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1519406526;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1522681180;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1526387042;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1526494919;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				new SlotReport(),_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,new,slot,report,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1527173115;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final ResourceManagerConfiguration resourceManagerConfiguration = ResourceManagerConfiguration.fromConfiguration(configuration)__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			resourceManagerConfiguration,_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,resource,manager,configuration,resource,manager,configuration,resource,manager,configuration,from,configuration,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,resource,manager,configuration,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1532290976;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final Configuration configuration = new Configuration()__		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,configuration,configuration,new,configuration,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1533306679;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler)___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1539582211;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final TestingHighAvailabilityServices highAvailabilityServices = new TestingHighAvailabilityServices()__		final SlotManager slotManager = new SlotManager(_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())__		final JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			highAvailabilityServices,_			rpcService.getScheduledExecutor(),_			TestingUtils.infiniteTime())__		final TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()___		final TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		highAvailabilityServices.setResourceManagerLeaderElectionService(resourceManagerLeaderElectionService)___		final TestingResourceManager resourceManager = new TestingResourceManager(_			rpcService,_			ResourceManager.RESOURCE_MANAGER_NAME,_			ResourceID.generate(),_			highAvailabilityServices,_			new HeartbeatServices(1000L, 10000L),_			slotManager,_			NoOpMetricRegistry.INSTANCE,_			jobLeaderIdService,_			testingFatalErrorHandler,_			UnregisteredMetricGroups.createUnregisteredJobManagerMetricGroup())___		resourceManager.start()___		try {_			final ResourceID taskManagerId = ResourceID.generate()__			final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___			_			resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___			rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___			final HardwareDescription hardwareDescription = new HardwareDescription(_				42,_				1337L,_				1337L,_				0L)___			final int dataPort = 1234___			CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskManagerId,_				dataPort,_				hardwareDescription,_				TestingUtils.TIMEOUT())___			Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___			CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_				taskManagerId,_				TestingUtils.TIMEOUT())___			TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___			Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__			Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__			Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__			Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__			Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__			Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())___			testingFatalErrorHandler.rethrowError()__		} finally {_			RpcUtils.terminateRpcEndpoint(resourceManager, TestingUtils.TIMEOUT())__			highAvailabilityServices.close()__		}_	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,testing,high,availability,services,high,availability,services,new,testing,high,availability,services,final,slot,manager,slot,manager,new,slot,manager,rpc,service,get,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,high,availability,services,rpc,service,get,scheduled,executor,testing,utils,infinite,time,final,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,high,availability,services,set,resource,manager,leader,election,service,resource,manager,leader,election,service,final,testing,resource,manager,resource,manager,new,testing,resource,manager,rpc,service,resource,manager,resource,id,generate,high,availability,services,new,heartbeat,services,1000l,10000l,slot,manager,no,op,metric,registry,instance,job,leader,id,service,testing,fatal,error,handler,unregistered,metric,groups,create,unregistered,job,manager,metric,group,resource,manager,start,try,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots,testing,fatal,error,handler,rethrow,error,finally,rpc,utils,terminate,rpc,endpoint,resource,manager,testing,utils,timeout,high,availability,services,close
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1550238837;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___		final HardwareDescription hardwareDescription = new HardwareDescription(_			42,_			1337L,_			1337L,_			0L)___		final int dataPort = 1234___		CompletableFuture<RegistrationResponse> registrationResponseFuture = resourceManagerGateway.registerTaskExecutor(_			taskExecutorGateway.getAddress(),_			taskManagerId,_			dataPort,_			hardwareDescription,_			TestingUtils.TIMEOUT())___		Assert.assertTrue(registrationResponseFuture.get() instanceof RegistrationResponse.Success)___		CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_			taskManagerId,_			TestingUtils.TIMEOUT())___		TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___		Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__		Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__		Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__		Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__		Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__		Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())__	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,final,hardware,description,hardware,description,new,hardware,description,42,1337l,1337l,0l,final,int,data,port,1234,completable,future,registration,response,registration,response,future,resource,manager,gateway,register,task,executor,task,executor,gateway,get,address,task,manager,id,data,port,hardware,description,testing,utils,timeout,assert,assert,true,registration,response,future,get,instanceof,registration,response,success,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots
ResourceManagerTest -> @Test 	public void testRequestTaskManagerInfo() throws Exception;1550238838;Tests that we can retrieve the correct {@link TaskManagerInfo} from the {@link ResourceManager}.;@Test_	public void testRequestTaskManagerInfo() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().setAddress(UUID.randomUUID().toString()).createTestingTaskExecutorGateway()__		rpcService.registerGateway(taskExecutorGateway.getAddress(), taskExecutorGateway)___		resourceManager = createAndStartResourceManager(heartbeatServices)__		final ResourceManagerGateway resourceManagerGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		registerTaskExecutor(resourceManagerGateway, taskManagerId, taskExecutorGateway.getAddress())___		CompletableFuture<TaskManagerInfo> taskManagerInfoFuture = resourceManagerGateway.requestTaskManagerInfo(_			taskManagerId,_			TestingUtils.TIMEOUT())___		TaskManagerInfo taskManagerInfo = taskManagerInfoFuture.get()___		Assert.assertEquals(taskManagerId, taskManagerInfo.getResourceId())__		Assert.assertEquals(hardwareDescription, taskManagerInfo.getHardwareDescription())__		Assert.assertEquals(taskExecutorGateway.getAddress(), taskManagerInfo.getAddress())__		Assert.assertEquals(dataPort, taskManagerInfo.getDataPort())__		Assert.assertEquals(0, taskManagerInfo.getNumberSlots())__		Assert.assertEquals(0, taskManagerInfo.getNumberAvailableSlots())__	};tests,that,we,can,retrieve,the,correct,link,task,manager,info,from,the,link,resource,manager;test,public,void,test,request,task,manager,info,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,address,uuid,random,uuid,to,string,create,testing,task,executor,gateway,rpc,service,register,gateway,task,executor,gateway,get,address,task,executor,gateway,resource,manager,create,and,start,resource,manager,heartbeat,services,final,resource,manager,gateway,resource,manager,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,register,task,executor,resource,manager,gateway,task,manager,id,task,executor,gateway,get,address,completable,future,task,manager,info,task,manager,info,future,resource,manager,gateway,request,task,manager,info,task,manager,id,testing,utils,timeout,task,manager,info,task,manager,info,task,manager,info,future,get,assert,assert,equals,task,manager,id,task,manager,info,get,resource,id,assert,assert,equals,hardware,description,task,manager,info,get,hardware,description,assert,assert,equals,task,executor,gateway,get,address,task,manager,info,get,address,assert,assert,equals,data,port,task,manager,info,get,data,port,assert,assert,equals,0,task,manager,info,get,number,slots,assert,assert,equals,0,task,manager,info,get,number,available,slots
ResourceManagerTest -> @Test 	public void testTaskManagerRegistration();1459248687;Tests the registration and accounting of resources at the ResourceManager.;@Test_	public void testTaskManagerRegistration() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			_			expectMsgClass(RegisterResourceManager.class)__			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), Collections.<ResourceID>emptyList()),_				fakeJobManager)___			ResourceID resourceID = ResourceID.generate()___			_			resourceManager.tell(new RegisterResource(_				ActorRef.noSender(),_				new RegistrationMessages.RegisterTaskManager(resourceID,_					Mockito.mock(InstanceConnectionInfo.class),_					null,_					1)),_				fakeJobManager)___			expectMsgClass(RegisterResourceSuccessful.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())___			_			resourceManager.tell(new RegisterResource(_					ActorRef.noSender(),_					new RegistrationMessages.RegisterTaskManager(resourceID,_						Mockito.mock(InstanceConnectionInfo.class),_						null,_						1)),_				fakeJobManager)___			expectMsgClass(RegisterResourceSuccessful.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			reply = expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())____			_			resourceManager.tell(new RegisterResource(_					ActorRef.noSender(),_					new RegistrationMessages.RegisterTaskManager(null,_						Mockito.mock(InstanceConnectionInfo.class),_						null,_						1)),_				fakeJobManager)___			expectMsgClass(RegisterResourceFailed.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			reply = expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())__		}}__		}}__	};tests,the,registration,and,accounting,of,resources,at,the,resource,manager;test,public,void,test,task,manager,registration,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,collections,resource,id,empty,list,fake,job,manager,resource,id,resource,id,resource,id,generate,resource,manager,tell,new,register,resource,actor,ref,no,sender,new,registration,messages,register,task,manager,resource,id,mockito,mock,instance,connection,info,class,null,1,fake,job,manager,expect,msg,class,register,resource,successful,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size,resource,manager,tell,new,register,resource,actor,ref,no,sender,new,registration,messages,register,task,manager,resource,id,mockito,mock,instance,connection,info,class,null,1,fake,job,manager,expect,msg,class,register,resource,successful,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size,resource,manager,tell,new,register,resource,actor,ref,no,sender,new,registration,messages,register,task,manager,null,mockito,mock,instance,connection,info,class,null,1,fake,job,manager,expect,msg,class,register,resource,failed,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size
ResourceManagerTest -> @Test 	public void testTaskManagerRegistration();1469543962;Tests the registration and accounting of resources at the ResourceManager.;@Test_	public void testTaskManagerRegistration() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			_			expectMsgClass(RegisterResourceManager.class)__			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), Collections.<ResourceID>emptyList()),_				fakeJobManager)___			ResourceID resourceID = ResourceID.generate()___			_			resourceManager.tell(new NotifyResourceStarted(resourceID),_				fakeJobManager)___			expectMsgClass(Acknowledge.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())___			_			resourceManager.tell(new NotifyResourceStarted(resourceID),_				fakeJobManager)___			expectMsgClass(Acknowledge.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			reply = expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())___			_			resourceManager.tell(new NotifyResourceStarted(null),_				fakeJobManager)___			expectMsgClass(Acknowledge.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			reply = expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(1, reply.resources.size())__		}}__		}}__	};tests,the,registration,and,accounting,of,resources,at,the,resource,manager;test,public,void,test,task,manager,registration,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,collections,resource,id,empty,list,fake,job,manager,resource,id,resource,id,resource,id,generate,resource,manager,tell,new,notify,resource,started,resource,id,fake,job,manager,expect,msg,class,acknowledge,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size,resource,manager,tell,new,notify,resource,started,resource,id,fake,job,manager,expect,msg,class,acknowledge,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size,resource,manager,tell,new,notify,resource,started,null,fake,job,manager,expect,msg,class,acknowledge,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,1,reply,resources,size
ResourceManagerTest -> @Test 	public void testDelayedJobManagerRegistration();1459248687;Tests delayed or erroneous registration of the ResourceManager with the JobManager;@Test_	public void testDelayedJobManagerRegistration() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			_			Configuration shortTimeoutConfig = config.clone()__			shortTimeoutConfig.setString(ConfigConstants.AKKA_LOOKUP_TIMEOUT, "1 s")___			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), shortTimeoutConfig)___			_			RegisterResourceManager msg = expectMsgClass(RegisterResourceManager.class)__			_			getLastSender().tell(new JobManagerMessages.LeaderSessionMessage(null, new Object()),_				fakeJobManager.actor())___			_			expectMsgClass(RegisterResourceManager.class)___			_			expectMsgClass(RegisterResourceManager.class)___		}}__		}}__	};tests,delayed,or,erroneous,registration,of,the,resource,manager,with,the,job,manager;test,public,void,test,delayed,job,manager,registration,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,configuration,short,timeout,config,config,clone,short,timeout,config,set,string,config,constants,1,s,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,short,timeout,config,register,resource,manager,msg,expect,msg,class,register,resource,manager,class,get,last,sender,tell,new,job,manager,messages,leader,session,message,null,new,object,fake,job,manager,actor,expect,msg,class,register,resource,manager,class,expect,msg,class,register,resource,manager,class
ResourceManagerTest -> @Test 	public void testDelayedJobManagerRegistration();1469543962;Tests delayed or erroneous registration of the ResourceManager with the JobManager;@Test_	public void testDelayedJobManagerRegistration() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			_			Configuration shortTimeoutConfig = config.clone()__			shortTimeoutConfig.setString(ConfigConstants.AKKA_LOOKUP_TIMEOUT, "1 s")___			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), shortTimeoutConfig)___			_			RegisterResourceManager msg = expectMsgClass(RegisterResourceManager.class)__			_			getLastSender().tell(new JobManagerMessages.LeaderSessionMessage(null, new Object()),_				fakeJobManager.actor())___			_			expectMsgClass(RegisterResourceManager.class)___			_			expectMsgClass(RegisterResourceManager.class)___		}}__		}}__	};tests,delayed,or,erroneous,registration,of,the,resource,manager,with,the,job,manager;test,public,void,test,delayed,job,manager,registration,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,configuration,short,timeout,config,config,clone,short,timeout,config,set,string,config,constants,1,s,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,short,timeout,config,register,resource,manager,msg,expect,msg,class,register,resource,manager,class,get,last,sender,tell,new,job,manager,messages,leader,session,message,null,new,object,fake,job,manager,actor,expect,msg,class,register,resource,manager,class,expect,msg,class,register,resource,manager,class
ResourceManagerTest -> @Test 	public void testJobManagerRegistrationAndReconciliation();1459248687;Tests the registration and reconciliation of the ResourceManager with the JobManager;@Test_	public void testJobManagerRegistrationAndReconciliation() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {_			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			expectMsgClass(RegisterResourceManager.class)___			List<ResourceID> resourceList = new ArrayList<>()__			resourceList.add(ResourceID.generate())__			resourceList.add(ResourceID.generate())__			resourceList.add(ResourceID.generate())___			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), resourceList),_				fakeJobManager)___			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			for (ResourceID id : resourceList) {_				if (!reply.resources.contains(id)) {_					fail("Expected to find all resources that were provided during registration.")__				}_			}_		}}__		}}__	};tests,the,registration,and,reconciliation,of,the,resource,manager,with,the,job,manager;test,public,void,test,job,manager,registration,and,reconciliation,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,list,resource,id,resource,list,new,array,list,resource,list,add,resource,id,generate,resource,list,add,resource,id,generate,resource,list,add,resource,id,generate,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,resource,list,fake,job,manager,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,for,resource,id,id,resource,list,if,reply,resources,contains,id,fail,expected,to,find,all,resources,that,were,provided,during,registration
ResourceManagerTest -> @Test 	public void testJobManagerRegistrationAndReconciliation();1469543962;Tests the registration and reconciliation of the ResourceManager with the JobManager;@Test_	public void testJobManagerRegistrationAndReconciliation() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {_			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			expectMsgClass(RegisterResourceManager.class)___			List<ResourceID> resourceList = new ArrayList<>()__			resourceList.add(ResourceID.generate())__			resourceList.add(ResourceID.generate())__			resourceList.add(ResourceID.generate())___			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), resourceList),_				fakeJobManager)___			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			for (ResourceID id : resourceList) {_				if (!reply.resources.contains(id)) {_					fail("Expected to find all resources that were provided during registration.")__				}_			}_		}}__		}}__	};tests,the,registration,and,reconciliation,of,the,resource,manager,with,the,job,manager;test,public,void,test,job,manager,registration,and,reconciliation,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,list,resource,id,resource,list,new,array,list,resource,list,add,resource,id,generate,resource,list,add,resource,id,generate,resource,list,add,resource,id,generate,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,resource,list,fake,job,manager,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,for,resource,id,id,resource,list,if,reply,resources,contains,id,fail,expected,to,find,all,resources,that,were,provided,during,registration
ResourceManagerTest -> @Test 	public void testResourceFailureNotification();1459248687;Tests notification of JobManager about a failed resource.;@Test_	public void testResourceFailureNotification() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			_			expectMsgClass(RegisterResourceManager.class)__			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), Collections.<ResourceID>emptyList()),_				fakeJobManager)___			ResourceID resourceID1 = ResourceID.generate()__			ResourceID resourceID2 = ResourceID.generate()___			_			resourceManager.tell(new RegisterResource(_					ActorRef.noSender(),_					new RegistrationMessages.RegisterTaskManager(resourceID1,_						Mockito.mock(InstanceConnectionInfo.class),_						null,_						1)),_				fakeJobManager)___			_			resourceManager.tell(new RegisterResource(_					ActorRef.noSender(),_					new RegistrationMessages.RegisterTaskManager(resourceID2,_						Mockito.mock(InstanceConnectionInfo.class),_						null,_						1)),_				fakeJobManager)___			expectMsgClass(RegisterResourceSuccessful.class)__			expectMsgClass(RegisterResourceSuccessful.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(2, reply.resources.size())__			assertTrue(reply.resources.contains(resourceID1))__			assertTrue(reply.resources.contains(resourceID2))___			_			resourceManager.tell(new TestingResourceManager.FailResource(resourceID1), fakeJobManager)__			resourceManager.tell(new TestingResourceManager.FailResource(resourceID2), fakeJobManager)___			ResourceRemoved answer = expectMsgClass(ResourceRemoved.class)__			ResourceRemoved answer2 = expectMsgClass(ResourceRemoved.class)___			assertEquals(resourceID1, answer.resourceId())__			assertEquals(resourceID2, answer2.resourceId())___		}}__		}}__	};tests,notification,of,job,manager,about,a,failed,resource;test,public,void,test,resource,failure,notification,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,collections,resource,id,empty,list,fake,job,manager,resource,id,resource,id1,resource,id,generate,resource,id,resource,id2,resource,id,generate,resource,manager,tell,new,register,resource,actor,ref,no,sender,new,registration,messages,register,task,manager,resource,id1,mockito,mock,instance,connection,info,class,null,1,fake,job,manager,resource,manager,tell,new,register,resource,actor,ref,no,sender,new,registration,messages,register,task,manager,resource,id2,mockito,mock,instance,connection,info,class,null,1,fake,job,manager,expect,msg,class,register,resource,successful,class,expect,msg,class,register,resource,successful,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,2,reply,resources,size,assert,true,reply,resources,contains,resource,id1,assert,true,reply,resources,contains,resource,id2,resource,manager,tell,new,testing,resource,manager,fail,resource,resource,id1,fake,job,manager,resource,manager,tell,new,testing,resource,manager,fail,resource,resource,id2,fake,job,manager,resource,removed,answer,expect,msg,class,resource,removed,class,resource,removed,answer2,expect,msg,class,resource,removed,class,assert,equals,resource,id1,answer,resource,id,assert,equals,resource,id2,answer2,resource,id
ResourceManagerTest -> @Test 	public void testResourceFailureNotification();1469543962;Tests notification of JobManager about a failed resource.;@Test_	public void testResourceFailureNotification() {_		new JavaTestKit(system){{_		new Within(duration("10 seconds")) {_		@Override_		protected void run() {__			fakeJobManager = TestingUtils.createForwardingActor(system, getTestActor(), Option.<String>empty())__			resourceManager = TestingUtils.createResourceManager(system, fakeJobManager.actor(), config)___			_			expectMsgClass(RegisterResourceManager.class)__			resourceManager.tell(_				new RegisterResourceManagerSuccessful(fakeJobManager.actor(), Collections.<ResourceID>emptyList()),_				fakeJobManager)___			ResourceID resourceID1 = ResourceID.generate()__			ResourceID resourceID2 = ResourceID.generate()___			_			resourceManager.tell(new NotifyResourceStarted(resourceID1),_				fakeJobManager)___			expectMsgClass(Acknowledge.class)___			_			resourceManager.tell(new NotifyResourceStarted(resourceID2),_				fakeJobManager)___			expectMsgClass(Acknowledge.class)___			_			resourceManager.tell(new TestingResourceManager.GetRegisteredResources(), fakeJobManager)__			TestingResourceManager.GetRegisteredResourcesReply reply =_				expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class)___			assertEquals(2, reply.resources.size())__			assertTrue(reply.resources.contains(resourceID1))__			assertTrue(reply.resources.contains(resourceID2))___			_			resourceManager.tell(new TestingResourceManager.FailResource(resourceID1), fakeJobManager)__			resourceManager.tell(new TestingResourceManager.FailResource(resourceID2), fakeJobManager)___			ResourceRemoved answer = expectMsgClass(ResourceRemoved.class)__			ResourceRemoved answer2 = expectMsgClass(ResourceRemoved.class)___			assertEquals(resourceID1, answer.resourceId())__			assertEquals(resourceID2, answer2.resourceId())___		}}__		}}__	};tests,notification,of,job,manager,about,a,failed,resource;test,public,void,test,resource,failure,notification,new,java,test,kit,system,new,within,duration,10,seconds,override,protected,void,run,fake,job,manager,testing,utils,create,forwarding,actor,system,get,test,actor,option,string,empty,resource,manager,testing,utils,create,resource,manager,system,fake,job,manager,actor,config,expect,msg,class,register,resource,manager,class,resource,manager,tell,new,register,resource,manager,successful,fake,job,manager,actor,collections,resource,id,empty,list,fake,job,manager,resource,id,resource,id1,resource,id,generate,resource,id,resource,id2,resource,id,generate,resource,manager,tell,new,notify,resource,started,resource,id1,fake,job,manager,expect,msg,class,acknowledge,class,resource,manager,tell,new,notify,resource,started,resource,id2,fake,job,manager,expect,msg,class,acknowledge,class,resource,manager,tell,new,testing,resource,manager,get,registered,resources,fake,job,manager,testing,resource,manager,get,registered,resources,reply,reply,expect,msg,class,testing,resource,manager,get,registered,resources,reply,class,assert,equals,2,reply,resources,size,assert,true,reply,resources,contains,resource,id1,assert,true,reply,resources,contains,resource,id2,resource,manager,tell,new,testing,resource,manager,fail,resource,resource,id1,fake,job,manager,resource,manager,tell,new,testing,resource,manager,fail,resource,resource,id2,fake,job,manager,resource,removed,answer,expect,msg,class,resource,removed,class,resource,removed,answer2,expect,msg,class,resource,removed,class,assert,equals,resource,id1,answer,resource,id,assert,equals,resource,id2,answer2,resource,id
