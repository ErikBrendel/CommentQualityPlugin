# id;timestamp;commentText;codeText;commentWords;codeWords
PendingCheckpointStatsTest -> @Test 	public void testReportCompletedCheckpoint() throws Exception;1484038132;Test reporting of a completed checkpoint.;@Test_	public void testReportCompletedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		Map<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			1,_			CheckpointProperties.forStandardCheckpoint(),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		String externalPath = "asdjkasdjkasd"___		CompletedCheckpointStats.DiscardCallback discardCallback = pending.reportCompletedCheckpoint(externalPath)___		ArgumentCaptor<CompletedCheckpointStats> args = ArgumentCaptor.forClass(CompletedCheckpointStats.class)__		verify(callback).reportCompletedCheckpoint(args.capture())___		CompletedCheckpointStats completed = args.getValue()___		assertNotNull(completed)__		assertEquals(CheckpointStatsStatus.COMPLETED, completed.getStatus())__		assertFalse(completed.isDiscarded())__		assertEquals(discardCallback, completed.getDiscardCallback())__		discardCallback.notifyDiscardedCheckpoint()__		assertTrue(completed.isDiscarded())__		assertEquals(externalPath, completed.getExternalPath())___		assertEquals(pending.getCheckpointId(), completed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), completed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), completed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), completed.getLatestAckTimestamp())__		assertEquals(pending.getEndToEndDuration(), completed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), completed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), completed.getAlignmentBuffered())__		assertEquals(task1, completed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, completed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,completed,checkpoint;test,public,void,test,report,completed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,1,checkpoint,properties,for,standard,checkpoint,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,string,external,path,asdjkasdjkasd,completed,checkpoint,stats,discard,callback,discard,callback,pending,report,completed,checkpoint,external,path,argument,captor,completed,checkpoint,stats,args,argument,captor,for,class,completed,checkpoint,stats,class,verify,callback,report,completed,checkpoint,args,capture,completed,checkpoint,stats,completed,args,get,value,assert,not,null,completed,assert,equals,checkpoint,stats,status,completed,completed,get,status,assert,false,completed,is,discarded,assert,equals,discard,callback,completed,get,discard,callback,discard,callback,notify,discarded,checkpoint,assert,true,completed,is,discarded,assert,equals,external,path,completed,get,external,path,assert,equals,pending,get,checkpoint,id,completed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,completed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,completed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,completed,get,latest,ack,timestamp,assert,equals,pending,get,end,to,end,duration,completed,get,end,to,end,duration,assert,equals,pending,get,state,size,completed,get,state,size,assert,equals,pending,get,alignment,buffered,completed,get,alignment,buffered,assert,equals,task1,completed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,completed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportCompletedCheckpoint() throws Exception;1485790402;Test reporting of a completed checkpoint.;@Test_	public void testReportCompletedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			1,_			CheckpointProperties.forStandardCheckpoint(),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		String externalPath = "asdjkasdjkasd"___		CompletedCheckpointStats.DiscardCallback discardCallback = pending.reportCompletedCheckpoint(externalPath)___		ArgumentCaptor<CompletedCheckpointStats> args = ArgumentCaptor.forClass(CompletedCheckpointStats.class)__		verify(callback).reportCompletedCheckpoint(args.capture())___		CompletedCheckpointStats completed = args.getValue()___		assertNotNull(completed)__		assertEquals(CheckpointStatsStatus.COMPLETED, completed.getStatus())__		assertFalse(completed.isDiscarded())__		discardCallback.notifyDiscardedCheckpoint()__		assertTrue(completed.isDiscarded())__		assertEquals(externalPath, completed.getExternalPath())___		assertEquals(pending.getCheckpointId(), completed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), completed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), completed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), completed.getLatestAckTimestamp())__		assertEquals(pending.getEndToEndDuration(), completed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), completed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), completed.getAlignmentBuffered())__		assertEquals(task1, completed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, completed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,completed,checkpoint;test,public,void,test,report,completed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,1,checkpoint,properties,for,standard,checkpoint,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,string,external,path,asdjkasdjkasd,completed,checkpoint,stats,discard,callback,discard,callback,pending,report,completed,checkpoint,external,path,argument,captor,completed,checkpoint,stats,args,argument,captor,for,class,completed,checkpoint,stats,class,verify,callback,report,completed,checkpoint,args,capture,completed,checkpoint,stats,completed,args,get,value,assert,not,null,completed,assert,equals,checkpoint,stats,status,completed,completed,get,status,assert,false,completed,is,discarded,discard,callback,notify,discarded,checkpoint,assert,true,completed,is,discarded,assert,equals,external,path,completed,get,external,path,assert,equals,pending,get,checkpoint,id,completed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,completed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,completed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,completed,get,latest,ack,timestamp,assert,equals,pending,get,end,to,end,duration,completed,get,end,to,end,duration,assert,equals,pending,get,state,size,completed,get,state,size,assert,equals,pending,get,alignment,buffered,completed,get,alignment,buffered,assert,equals,task1,completed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,completed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportCompletedCheckpoint() throws Exception;1516295283;Test reporting of a completed checkpoint.;@Test_	public void testReportCompletedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			1,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		String externalPath = "asdjkasdjkasd"___		CompletedCheckpointStats.DiscardCallback discardCallback = pending.reportCompletedCheckpoint(externalPath)___		ArgumentCaptor<CompletedCheckpointStats> args = ArgumentCaptor.forClass(CompletedCheckpointStats.class)__		verify(callback).reportCompletedCheckpoint(args.capture())___		CompletedCheckpointStats completed = args.getValue()___		assertNotNull(completed)__		assertEquals(CheckpointStatsStatus.COMPLETED, completed.getStatus())__		assertFalse(completed.isDiscarded())__		discardCallback.notifyDiscardedCheckpoint()__		assertTrue(completed.isDiscarded())__		assertEquals(externalPath, completed.getExternalPath())___		assertEquals(pending.getCheckpointId(), completed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), completed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), completed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), completed.getLatestAckTimestamp())__		assertEquals(pending.getEndToEndDuration(), completed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), completed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), completed.getAlignmentBuffered())__		assertEquals(task1, completed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, completed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,completed,checkpoint;test,public,void,test,report,completed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,1,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,string,external,path,asdjkasdjkasd,completed,checkpoint,stats,discard,callback,discard,callback,pending,report,completed,checkpoint,external,path,argument,captor,completed,checkpoint,stats,args,argument,captor,for,class,completed,checkpoint,stats,class,verify,callback,report,completed,checkpoint,args,capture,completed,checkpoint,stats,completed,args,get,value,assert,not,null,completed,assert,equals,checkpoint,stats,status,completed,completed,get,status,assert,false,completed,is,discarded,discard,callback,notify,discarded,checkpoint,assert,true,completed,is,discarded,assert,equals,external,path,completed,get,external,path,assert,equals,pending,get,checkpoint,id,completed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,completed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,completed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,completed,get,latest,ack,timestamp,assert,equals,pending,get,end,to,end,duration,completed,get,end,to,end,duration,assert,equals,pending,get,state,size,completed,get,state,size,assert,equals,pending,get,alignment,buffered,completed,get,alignment,buffered,assert,equals,task1,completed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,completed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportFailedCheckpoint() throws Exception;1484038132;Test reporting of a failed checkpoint.;@Test_	public void testReportFailedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		Map<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		long triggerTimestamp = 123123__		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			triggerTimestamp,_			CheckpointProperties.forStandardCheckpoint(),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		Exception cause = new Exception("test exception")__		long failureTimestamp = 112211137__		pending.reportFailedCheckpoint(failureTimestamp, cause)___		ArgumentCaptor<FailedCheckpointStats> args = ArgumentCaptor.forClass(FailedCheckpointStats.class)__		verify(callback).reportFailedCheckpoint(args.capture())___		FailedCheckpointStats failed = args.getValue()___		assertNotNull(failed)__		assertEquals(CheckpointStatsStatus.FAILED, failed.getStatus())__		assertEquals(failureTimestamp, failed.getFailureTimestamp())__		assertEquals(cause.getMessage(), failed.getFailureMessage())___		assertEquals(pending.getCheckpointId(), failed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), failed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), failed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), failed.getLatestAckTimestamp())__		assertEquals(failureTimestamp - triggerTimestamp, failed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), failed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), failed.getAlignmentBuffered())__		assertEquals(task1, failed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, failed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,failed,checkpoint;test,public,void,test,report,failed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,long,trigger,timestamp,123123,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,trigger,timestamp,checkpoint,properties,for,standard,checkpoint,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,exception,cause,new,exception,test,exception,long,failure,timestamp,112211137,pending,report,failed,checkpoint,failure,timestamp,cause,argument,captor,failed,checkpoint,stats,args,argument,captor,for,class,failed,checkpoint,stats,class,verify,callback,report,failed,checkpoint,args,capture,failed,checkpoint,stats,failed,args,get,value,assert,not,null,failed,assert,equals,checkpoint,stats,status,failed,failed,get,status,assert,equals,failure,timestamp,failed,get,failure,timestamp,assert,equals,cause,get,message,failed,get,failure,message,assert,equals,pending,get,checkpoint,id,failed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,failed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,failed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,failed,get,latest,ack,timestamp,assert,equals,failure,timestamp,trigger,timestamp,failed,get,end,to,end,duration,assert,equals,pending,get,state,size,failed,get,state,size,assert,equals,pending,get,alignment,buffered,failed,get,alignment,buffered,assert,equals,task1,failed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,failed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportFailedCheckpoint() throws Exception;1485790402;Test reporting of a failed checkpoint.;@Test_	public void testReportFailedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		long triggerTimestamp = 123123__		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			triggerTimestamp,_			CheckpointProperties.forStandardCheckpoint(),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		Exception cause = new Exception("test exception")__		long failureTimestamp = 112211137__		pending.reportFailedCheckpoint(failureTimestamp, cause)___		ArgumentCaptor<FailedCheckpointStats> args = ArgumentCaptor.forClass(FailedCheckpointStats.class)__		verify(callback).reportFailedCheckpoint(args.capture())___		FailedCheckpointStats failed = args.getValue()___		assertNotNull(failed)__		assertEquals(CheckpointStatsStatus.FAILED, failed.getStatus())__		assertEquals(failureTimestamp, failed.getFailureTimestamp())__		assertEquals(cause.getMessage(), failed.getFailureMessage())___		assertEquals(pending.getCheckpointId(), failed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), failed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), failed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), failed.getLatestAckTimestamp())__		assertEquals(failureTimestamp - triggerTimestamp, failed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), failed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), failed.getAlignmentBuffered())__		assertEquals(task1, failed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, failed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,failed,checkpoint;test,public,void,test,report,failed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,long,trigger,timestamp,123123,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,trigger,timestamp,checkpoint,properties,for,standard,checkpoint,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,exception,cause,new,exception,test,exception,long,failure,timestamp,112211137,pending,report,failed,checkpoint,failure,timestamp,cause,argument,captor,failed,checkpoint,stats,args,argument,captor,for,class,failed,checkpoint,stats,class,verify,callback,report,failed,checkpoint,args,capture,failed,checkpoint,stats,failed,args,get,value,assert,not,null,failed,assert,equals,checkpoint,stats,status,failed,failed,get,status,assert,equals,failure,timestamp,failed,get,failure,timestamp,assert,equals,cause,get,message,failed,get,failure,message,assert,equals,pending,get,checkpoint,id,failed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,failed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,failed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,failed,get,latest,ack,timestamp,assert,equals,failure,timestamp,trigger,timestamp,failed,get,end,to,end,duration,assert,equals,pending,get,state,size,failed,get,state,size,assert,equals,pending,get,alignment,buffered,failed,get,alignment,buffered,assert,equals,task1,failed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,failed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportFailedCheckpoint() throws Exception;1516295283;Test reporting of a failed checkpoint.;@Test_	public void testReportFailedCheckpoint() throws Exception {_		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		long triggerTimestamp = 123123__		PendingCheckpointStats pending = new PendingCheckpointStats(_			0,_			triggerTimestamp,_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks(),_			taskStats,_			callback)___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task1.getJobVertexId(), createSubtaskStats(i))__		}__		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			pending.reportSubtaskStats(task2.getJobVertexId(), createSubtaskStats(i))__		}__		_		Exception cause = new Exception("test exception")__		long failureTimestamp = 112211137__		pending.reportFailedCheckpoint(failureTimestamp, cause)___		ArgumentCaptor<FailedCheckpointStats> args = ArgumentCaptor.forClass(FailedCheckpointStats.class)__		verify(callback).reportFailedCheckpoint(args.capture())___		FailedCheckpointStats failed = args.getValue()___		assertNotNull(failed)__		assertEquals(CheckpointStatsStatus.FAILED, failed.getStatus())__		assertEquals(failureTimestamp, failed.getFailureTimestamp())__		assertEquals(cause.getMessage(), failed.getFailureMessage())___		assertEquals(pending.getCheckpointId(), failed.getCheckpointId())__		assertEquals(pending.getNumberOfAcknowledgedSubtasks(), failed.getNumberOfAcknowledgedSubtasks())__		assertEquals(pending.getLatestAcknowledgedSubtaskStats(), failed.getLatestAcknowledgedSubtaskStats())__		assertEquals(pending.getLatestAckTimestamp(), failed.getLatestAckTimestamp())__		assertEquals(failureTimestamp - triggerTimestamp, failed.getEndToEndDuration())__		assertEquals(pending.getStateSize(), failed.getStateSize())__		assertEquals(pending.getAlignmentBuffered(), failed.getAlignmentBuffered())__		assertEquals(task1, failed.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, failed.getTaskStateStats(task2.getJobVertexId()))__	};test,reporting,of,a,failed,checkpoint;test,public,void,test,report,failed,checkpoint,throws,exception,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,long,trigger,timestamp,123123,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,0,trigger,timestamp,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,task1,get,number,of,subtasks,task2,get,number,of,subtasks,task,stats,callback,for,int,i,0,i,task1,get,number,of,subtasks,i,pending,report,subtask,stats,task1,get,job,vertex,id,create,subtask,stats,i,for,int,i,0,i,task2,get,number,of,subtasks,i,pending,report,subtask,stats,task2,get,job,vertex,id,create,subtask,stats,i,exception,cause,new,exception,test,exception,long,failure,timestamp,112211137,pending,report,failed,checkpoint,failure,timestamp,cause,argument,captor,failed,checkpoint,stats,args,argument,captor,for,class,failed,checkpoint,stats,class,verify,callback,report,failed,checkpoint,args,capture,failed,checkpoint,stats,failed,args,get,value,assert,not,null,failed,assert,equals,checkpoint,stats,status,failed,failed,get,status,assert,equals,failure,timestamp,failed,get,failure,timestamp,assert,equals,cause,get,message,failed,get,failure,message,assert,equals,pending,get,checkpoint,id,failed,get,checkpoint,id,assert,equals,pending,get,number,of,acknowledged,subtasks,failed,get,number,of,acknowledged,subtasks,assert,equals,pending,get,latest,acknowledged,subtask,stats,failed,get,latest,acknowledged,subtask,stats,assert,equals,pending,get,latest,ack,timestamp,failed,get,latest,ack,timestamp,assert,equals,failure,timestamp,trigger,timestamp,failed,get,end,to,end,duration,assert,equals,pending,get,state,size,failed,get,state,size,assert,equals,pending,get,alignment,buffered,failed,get,alignment,buffered,assert,equals,task1,failed,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,failed,get,task,state,stats,task2,get,job,vertex,id
PendingCheckpointStatsTest -> @Test 	public void testReportSubtaskStats() throws Exception;1484038132;Tests reporting of subtask stats.;@Test_	public void testReportSubtaskStats() throws Exception {_		long checkpointId = Integer.MAX_VALUE + 1222L__		long triggerTimestamp = Integer.MAX_VALUE - 1239L__		CheckpointProperties props = CheckpointProperties.forStandardCheckpoint()__		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)__		int totalSubtaskCount = task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks()___		Map<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStats,_				callback)___		_		assertEquals(checkpointId, pending.getCheckpointId())__		assertEquals(triggerTimestamp, pending.getTriggerTimestamp())__		assertEquals(props, pending.getProperties())__		assertEquals(CheckpointStatsStatus.IN_PROGRESS, pending.getStatus())__		assertEquals(0, pending.getNumberOfAcknowledgedSubtasks())__		assertEquals(0, pending.getStateSize())__		assertEquals(totalSubtaskCount, pending.getNumberOfSubtasks())__		assertNull(pending.getLatestAcknowledgedSubtaskStats())__		assertEquals(-1, pending.getLatestAckTimestamp())__		assertEquals(-1, pending.getEndToEndDuration())__		assertEquals(task1, pending.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, pending.getTaskStateStats(task2.getJobVertexId()))__		assertNull(pending.getTaskStateStats(new JobVertexID()))___		_		assertFalse(pending.reportSubtaskStats(new JobVertexID(), createSubtaskStats(0)))___		long stateSize = 0__		long alignmentBuffered = 0___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task1.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		_		assertFalse(pending.reportSubtaskStats(task1.getJobVertexId(), task1.getSubtaskStats()[0]))___		_		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task2.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		assertEquals(task1.getNumberOfSubtasks(), task1.getNumberOfAcknowledgedSubtasks())__		assertEquals(task2.getNumberOfSubtasks(), task2.getNumberOfAcknowledgedSubtasks())__	};tests,reporting,of,subtask,stats;test,public,void,test,report,subtask,stats,throws,exception,long,checkpoint,id,integer,1222l,long,trigger,timestamp,integer,1239l,checkpoint,properties,props,checkpoint,properties,for,standard,checkpoint,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,int,total,subtask,count,task1,get,number,of,subtasks,task2,get,number,of,subtasks,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,stats,callback,assert,equals,checkpoint,id,pending,get,checkpoint,id,assert,equals,trigger,timestamp,pending,get,trigger,timestamp,assert,equals,props,pending,get,properties,assert,equals,checkpoint,stats,status,pending,get,status,assert,equals,0,pending,get,number,of,acknowledged,subtasks,assert,equals,0,pending,get,state,size,assert,equals,total,subtask,count,pending,get,number,of,subtasks,assert,null,pending,get,latest,acknowledged,subtask,stats,assert,equals,1,pending,get,latest,ack,timestamp,assert,equals,1,pending,get,end,to,end,duration,assert,equals,task1,pending,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,pending,get,task,state,stats,task2,get,job,vertex,id,assert,null,pending,get,task,state,stats,new,job,vertex,id,assert,false,pending,report,subtask,stats,new,job,vertex,id,create,subtask,stats,0,long,state,size,0,long,alignment,buffered,0,for,int,i,0,i,task1,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task1,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,false,pending,report,subtask,stats,task1,get,job,vertex,id,task1,get,subtask,stats,0,for,int,i,0,i,task2,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task2,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,equals,task1,get,number,of,subtasks,task1,get,number,of,acknowledged,subtasks,assert,equals,task2,get,number,of,subtasks,task2,get,number,of,acknowledged,subtasks
PendingCheckpointStatsTest -> @Test 	public void testReportSubtaskStats() throws Exception;1485790402;Tests reporting of subtask stats.;@Test_	public void testReportSubtaskStats() throws Exception {_		long checkpointId = Integer.MAX_VALUE + 1222L__		long triggerTimestamp = Integer.MAX_VALUE - 1239L__		CheckpointProperties props = CheckpointProperties.forStandardCheckpoint()__		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)__		int totalSubtaskCount = task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks()___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStats,_				callback)___		_		assertEquals(checkpointId, pending.getCheckpointId())__		assertEquals(triggerTimestamp, pending.getTriggerTimestamp())__		assertEquals(props, pending.getProperties())__		assertEquals(CheckpointStatsStatus.IN_PROGRESS, pending.getStatus())__		assertEquals(0, pending.getNumberOfAcknowledgedSubtasks())__		assertEquals(0, pending.getStateSize())__		assertEquals(totalSubtaskCount, pending.getNumberOfSubtasks())__		assertNull(pending.getLatestAcknowledgedSubtaskStats())__		assertEquals(-1, pending.getLatestAckTimestamp())__		assertEquals(-1, pending.getEndToEndDuration())__		assertEquals(task1, pending.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, pending.getTaskStateStats(task2.getJobVertexId()))__		assertNull(pending.getTaskStateStats(new JobVertexID()))___		_		assertFalse(pending.reportSubtaskStats(new JobVertexID(), createSubtaskStats(0)))___		long stateSize = 0__		long alignmentBuffered = 0___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task1.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		_		assertFalse(pending.reportSubtaskStats(task1.getJobVertexId(), task1.getSubtaskStats()[0]))___		_		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task2.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		assertEquals(task1.getNumberOfSubtasks(), task1.getNumberOfAcknowledgedSubtasks())__		assertEquals(task2.getNumberOfSubtasks(), task2.getNumberOfAcknowledgedSubtasks())__	};tests,reporting,of,subtask,stats;test,public,void,test,report,subtask,stats,throws,exception,long,checkpoint,id,integer,1222l,long,trigger,timestamp,integer,1239l,checkpoint,properties,props,checkpoint,properties,for,standard,checkpoint,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,int,total,subtask,count,task1,get,number,of,subtasks,task2,get,number,of,subtasks,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,stats,callback,assert,equals,checkpoint,id,pending,get,checkpoint,id,assert,equals,trigger,timestamp,pending,get,trigger,timestamp,assert,equals,props,pending,get,properties,assert,equals,checkpoint,stats,status,pending,get,status,assert,equals,0,pending,get,number,of,acknowledged,subtasks,assert,equals,0,pending,get,state,size,assert,equals,total,subtask,count,pending,get,number,of,subtasks,assert,null,pending,get,latest,acknowledged,subtask,stats,assert,equals,1,pending,get,latest,ack,timestamp,assert,equals,1,pending,get,end,to,end,duration,assert,equals,task1,pending,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,pending,get,task,state,stats,task2,get,job,vertex,id,assert,null,pending,get,task,state,stats,new,job,vertex,id,assert,false,pending,report,subtask,stats,new,job,vertex,id,create,subtask,stats,0,long,state,size,0,long,alignment,buffered,0,for,int,i,0,i,task1,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task1,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,false,pending,report,subtask,stats,task1,get,job,vertex,id,task1,get,subtask,stats,0,for,int,i,0,i,task2,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task2,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,equals,task1,get,number,of,subtasks,task1,get,number,of,acknowledged,subtasks,assert,equals,task2,get,number,of,subtasks,task2,get,number,of,acknowledged,subtasks
PendingCheckpointStatsTest -> @Test 	public void testReportSubtaskStats() throws Exception;1516295283;Tests reporting of subtask stats.;@Test_	public void testReportSubtaskStats() throws Exception {_		long checkpointId = Integer.MAX_VALUE + 1222L__		long triggerTimestamp = Integer.MAX_VALUE - 1239L__		CheckpointProperties props = CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION)__		TaskStateStats task1 = new TaskStateStats(new JobVertexID(), 3)__		TaskStateStats task2 = new TaskStateStats(new JobVertexID(), 4)__		int totalSubtaskCount = task1.getNumberOfSubtasks() + task2.getNumberOfSubtasks()___		HashMap<JobVertexID, TaskStateStats> taskStats = new HashMap<>()__		taskStats.put(task1.getJobVertexId(), task1)__		taskStats.put(task2.getJobVertexId(), task2)___		CheckpointStatsTracker.PendingCheckpointStatsCallback callback = mock(_			CheckpointStatsTracker.PendingCheckpointStatsCallback.class)___		PendingCheckpointStats pending = new PendingCheckpointStats(_				checkpointId,_				triggerTimestamp,_				props,_				totalSubtaskCount,_				taskStats,_				callback)___		_		assertEquals(checkpointId, pending.getCheckpointId())__		assertEquals(triggerTimestamp, pending.getTriggerTimestamp())__		assertEquals(props, pending.getProperties())__		assertEquals(CheckpointStatsStatus.IN_PROGRESS, pending.getStatus())__		assertEquals(0, pending.getNumberOfAcknowledgedSubtasks())__		assertEquals(0, pending.getStateSize())__		assertEquals(totalSubtaskCount, pending.getNumberOfSubtasks())__		assertNull(pending.getLatestAcknowledgedSubtaskStats())__		assertEquals(-1, pending.getLatestAckTimestamp())__		assertEquals(-1, pending.getEndToEndDuration())__		assertEquals(task1, pending.getTaskStateStats(task1.getJobVertexId()))__		assertEquals(task2, pending.getTaskStateStats(task2.getJobVertexId()))__		assertNull(pending.getTaskStateStats(new JobVertexID()))___		_		assertFalse(pending.reportSubtaskStats(new JobVertexID(), createSubtaskStats(0)))___		long stateSize = 0__		long alignmentBuffered = 0___		_		for (int i = 0_ i < task1.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task1.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		_		assertFalse(pending.reportSubtaskStats(task1.getJobVertexId(), task1.getSubtaskStats()[0]))___		_		for (int i = 0_ i < task2.getNumberOfSubtasks()_ i++) {_			SubtaskStateStats subtask = createSubtaskStats(i)__			stateSize += subtask.getStateSize()__			alignmentBuffered += subtask.getAlignmentBuffered()___			pending.reportSubtaskStats(task2.getJobVertexId(), subtask)___			assertEquals(subtask, pending.getLatestAcknowledgedSubtaskStats())__			assertEquals(subtask.getAckTimestamp(), pending.getLatestAckTimestamp())__			assertEquals(subtask.getAckTimestamp() - triggerTimestamp, pending.getEndToEndDuration())__			assertEquals(stateSize, pending.getStateSize())__			assertEquals(alignmentBuffered, pending.getAlignmentBuffered())__		}__		assertEquals(task1.getNumberOfSubtasks(), task1.getNumberOfAcknowledgedSubtasks())__		assertEquals(task2.getNumberOfSubtasks(), task2.getNumberOfAcknowledgedSubtasks())__	};tests,reporting,of,subtask,stats;test,public,void,test,report,subtask,stats,throws,exception,long,checkpoint,id,integer,1222l,long,trigger,timestamp,integer,1239l,checkpoint,properties,props,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,task,state,stats,task1,new,task,state,stats,new,job,vertex,id,3,task,state,stats,task2,new,task,state,stats,new,job,vertex,id,4,int,total,subtask,count,task1,get,number,of,subtasks,task2,get,number,of,subtasks,hash,map,job,vertex,id,task,state,stats,task,stats,new,hash,map,task,stats,put,task1,get,job,vertex,id,task1,task,stats,put,task2,get,job,vertex,id,task2,checkpoint,stats,tracker,pending,checkpoint,stats,callback,callback,mock,checkpoint,stats,tracker,pending,checkpoint,stats,callback,class,pending,checkpoint,stats,pending,new,pending,checkpoint,stats,checkpoint,id,trigger,timestamp,props,total,subtask,count,task,stats,callback,assert,equals,checkpoint,id,pending,get,checkpoint,id,assert,equals,trigger,timestamp,pending,get,trigger,timestamp,assert,equals,props,pending,get,properties,assert,equals,checkpoint,stats,status,pending,get,status,assert,equals,0,pending,get,number,of,acknowledged,subtasks,assert,equals,0,pending,get,state,size,assert,equals,total,subtask,count,pending,get,number,of,subtasks,assert,null,pending,get,latest,acknowledged,subtask,stats,assert,equals,1,pending,get,latest,ack,timestamp,assert,equals,1,pending,get,end,to,end,duration,assert,equals,task1,pending,get,task,state,stats,task1,get,job,vertex,id,assert,equals,task2,pending,get,task,state,stats,task2,get,job,vertex,id,assert,null,pending,get,task,state,stats,new,job,vertex,id,assert,false,pending,report,subtask,stats,new,job,vertex,id,create,subtask,stats,0,long,state,size,0,long,alignment,buffered,0,for,int,i,0,i,task1,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task1,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,false,pending,report,subtask,stats,task1,get,job,vertex,id,task1,get,subtask,stats,0,for,int,i,0,i,task2,get,number,of,subtasks,i,subtask,state,stats,subtask,create,subtask,stats,i,state,size,subtask,get,state,size,alignment,buffered,subtask,get,alignment,buffered,pending,report,subtask,stats,task2,get,job,vertex,id,subtask,assert,equals,subtask,pending,get,latest,acknowledged,subtask,stats,assert,equals,subtask,get,ack,timestamp,pending,get,latest,ack,timestamp,assert,equals,subtask,get,ack,timestamp,trigger,timestamp,pending,get,end,to,end,duration,assert,equals,state,size,pending,get,state,size,assert,equals,alignment,buffered,pending,get,alignment,buffered,assert,equals,task1,get,number,of,subtasks,task1,get,number,of,acknowledged,subtasks,assert,equals,task2,get,number,of,subtasks,task2,get,number,of,acknowledged,subtasks
