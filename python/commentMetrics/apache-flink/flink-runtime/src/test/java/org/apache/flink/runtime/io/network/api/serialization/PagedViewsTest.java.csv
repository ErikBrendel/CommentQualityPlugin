commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSequenceOfIntegersWithAlignedBuffers() {     try {         final int numInts = 1000000.         testSequenceOfTypes(Util.randomRecords(numInts, SerializationTestTypeFactory.INT), 2048).     } catch (Exception e) {         e.printStackTrace().         fail("Test encountered an unexpected exception.").     } }
false;public;0;12;;@Test public void testSequenceOfIntegersWithUnalignedBuffers() {     try {         final int numInts = 1000000.         testSequenceOfTypes(Util.randomRecords(numInts, SerializationTestTypeFactory.INT), 2047).     } catch (Exception e) {         e.printStackTrace().         fail("Test encountered an unexpected exception.").     } }
false;public;0;13;;@Test public void testRandomTypes() {     try {         final int numTypes = 100000.         // test with an odd buffer size to force many unaligned cases         testSequenceOfTypes(Util.randomRecords(numTypes), 57).     } catch (Exception e) {         e.printStackTrace().         fail("Test encountered an unexpected exception.").     } }
false;public;0;30;;@Test public void testReadFully() {     int bufferSize = 100.     byte[] expected = new byte[bufferSize].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(bufferSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[bufferSize].     try {         inputView.readFully(buffer).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(inputView.getCurrentPositionInSegment(), bufferSize).     assertArrayEquals(expected, buffer). }
false;public;0;31;;@Test public void testReadFullyAcrossSegments() {     int bufferSize = 100.     int segmentSize = 30.     byte[] expected = new byte[bufferSize].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(segmentSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[bufferSize].     try {         inputView.readFully(buffer).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(inputView.getCurrentPositionInSegment(), bufferSize % segmentSize).     assertArrayEquals(expected, buffer). }
false;public;0;37;;@Test public void testReadAcrossSegments() {     int bufferSize = 100.     int bytes2Write = 75.     int segmentSize = 30.     byte[] expected = new byte[bytes2Write].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(segmentSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[bufferSize].     int bytesRead = 0.     try {         bytesRead = inputView.read(buffer).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(bytes2Write, bytesRead).     assertEquals(inputView.getCurrentPositionInSegment(), bytes2Write % segmentSize).     byte[] tempBuffer = new byte[bytesRead].     System.arraycopy(buffer, 0, tempBuffer, 0, bytesRead).     assertArrayEquals(expected, tempBuffer). }
false;public;0;46;;@Test public void testEmptyingInputView() {     int bufferSize = 100.     int bytes2Write = 75.     int segmentSize = 30.     byte[] expected = new byte[bytes2Write].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(segmentSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[bufferSize].     int bytesRead = 0.     try {         bytesRead = inputView.read(buffer).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(bytes2Write, bytesRead).     byte[] tempBuffer = new byte[bytesRead].     System.arraycopy(buffer, 0, tempBuffer, 0, bytesRead).     assertArrayEquals(expected, tempBuffer).     try {         bytesRead = inputView.read(buffer).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Input view should be empty and thus return -1.").     }     assertEquals(-1, bytesRead).     assertEquals(inputView.getCurrentPositionInSegment(), bytes2Write % segmentSize). }
false;public;0;47;;@Test public void testReadFullyWithNotEnoughData() {     int bufferSize = 100.     int bytes2Write = 99.     int segmentSize = 30.     byte[] expected = new byte[bytes2Write].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(segmentSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[bufferSize].     boolean eofException = false.     try {         inputView.readFully(buffer).     } catch (EOFException e) {         // Expected exception         eofException = true.     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertTrue("EOFException should have occurred.", eofException).     int bytesRead = 0.     try {         bytesRead = inputView.read(buffer).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(-1, bytesRead). }
false;public;0;33;;@Test public void testReadFullyWithOffset() {     int bufferSize = 100.     int segmentSize = 30.     byte[] expected = new byte[bufferSize].     new Random().nextBytes(expected).     TestOutputView outputView = new TestOutputView(segmentSize).     try {         outputView.write(expected).     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not write to TestOutputView.").     }     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[2 * bufferSize].     try {         inputView.readFully(buffer, bufferSize, bufferSize).     } catch (IOException e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertEquals(inputView.getCurrentPositionInSegment(), bufferSize % segmentSize).     byte[] tempBuffer = new byte[bufferSize].     System.arraycopy(buffer, bufferSize, tempBuffer, 0, bufferSize).     assertArrayEquals(expected, tempBuffer). }
false;public;0;22;;@Test public void testReadFullyEmptyView() {     int segmentSize = 30.     TestOutputView outputView = new TestOutputView(segmentSize).     outputView.close().     TestInputView inputView = new TestInputView(outputView.segments).     byte[] buffer = new byte[segmentSize].     boolean eofException = false.     try {         inputView.readFully(buffer).     } catch (EOFException e) {         // expected Exception         eofException = true.     } catch (Exception e) {         e.printStackTrace().         fail("Unexpected exception: Could not read TestInputView.").     }     assertTrue("EOFException expected.", eofException). }
false;private,static;2;22;;private static void testSequenceOfTypes(Iterable<SerializationTestType> sequence, int segmentSize) throws Exception {     List<SerializationTestType> elements = new ArrayList<>(512).     TestOutputView outView = new TestOutputView(segmentSize).     // write     for (SerializationTestType type : sequence) {         // serialize the record         type.write(outView).         elements.add(type).     }     outView.close().     // check the records     TestInputView inView = new TestInputView(outView.segments).     for (SerializationTestType reference : elements) {         SerializationTestType result = reference.getClass().newInstance().         result.read(inView).         assertEquals(reference, result).     } }
false;protected;2;5;;@Override protected MemorySegment nextSegment(MemorySegment current, int positionInCurrent) throws IOException {     segments.add(new SegmentWithPosition(current, positionInCurrent)).     return MemorySegmentFactory.allocateUnpooledSegment(segmentSize). }
false;public;0;3;;public void close() {     segments.add(new SegmentWithPosition(getCurrentSegment(), getCurrentPositionInSegment())). }
false;protected;1;9;;@Override protected MemorySegment nextSegment(MemorySegment current) throws IOException {     num++.     if (num < segments.size()) {         return segments.get(num).segment.     } else {         throw new EOFException().     } }
false;protected;1;4;;@Override protected int getLimitForSegment(MemorySegment segment) {     return segments.get(num).position. }
