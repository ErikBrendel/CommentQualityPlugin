commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@AfterClass public static void afterClass() {     ExecutorUtils.gracefulShutdown(timeout, TimeUnit.MILLISECONDS, scheduledExecutorService). }
true;public;0;52;/**  * Tests whether  * 1) SlotManager accepts a slot request  * 2) SlotRequest leads to a container allocation  * 3) Slot becomes available and TaskExecutor gets a SlotRequest  */ ;/**  * Tests whether  * 1) SlotManager accepts a slot request  * 2) SlotRequest leads to a container allocation  * 3) Slot becomes available and TaskExecutor gets a SlotRequest  */ @Test public void testSlotsUnavailableRequest() throws Exception {     final JobID jobID = new JobID().     final ResourceManagerId rmLeaderID = ResourceManagerId.generate().     try (SlotManager slotManager = new SlotManager(scheduledExecutor, TestingUtils.infiniteTime(), TestingUtils.infiniteTime(), TestingUtils.infiniteTime())) {         final CompletableFuture<ResourceProfile> resourceProfileFuture = new CompletableFuture<>().         ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().setAllocateResourceConsumer(resourceProfileFuture::complete).build().         slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions).         final AllocationID allocationID = new AllocationID().         final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100).         final String targetAddress = "foobar".         SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress).         slotManager.registerSlotRequest(slotRequest).         assertThat(resourceProfileFuture.get(), is(equalTo(slotRequest.getResourceProfile()))).         // slot becomes available         final CompletableFuture<Tuple3<SlotID, JobID, AllocationID>> requestFuture = new CompletableFuture<>().         TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().setRequestSlotFunction(tuple5 -> {             requestFuture.complete(Tuple3.of(tuple5.f0, tuple5.f1, tuple5.f2)).             return new CompletableFuture<>().         }).createTestingTaskExecutorGateway().         final ResourceID resourceID = ResourceID.generate().         final SlotID slotID = new SlotID(resourceID, 0).         final SlotStatus slotStatus = new SlotStatus(slotID, resourceProfile).         final SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus)).         // register slot at SlotManager         slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport).         // 4) Slot becomes available and TaskExecutor gets a SlotRequest         assertThat(requestFuture.get(), is(equalTo(Tuple3.of(slotID, jobID, allocationID)))).     } }
true;public;0;46;/**  * Tests whether  * 1) a SlotRequest is routed to the SlotManager  * 2) a SlotRequest is confirmed  * 3) a SlotRequest leads to an allocation of a registered slot  * 4) a SlotRequest is routed to the TaskExecutor  */ ;/**  * Tests whether  * 1) a SlotRequest is routed to the SlotManager  * 2) a SlotRequest is confirmed  * 3) a SlotRequest leads to an allocation of a registered slot  * 4) a SlotRequest is routed to the TaskExecutor  */ @Test public void testSlotAvailableRequest() throws Exception {     final JobID jobID = new JobID().     final ResourceManagerId rmLeaderID = ResourceManagerId.generate().     final CompletableFuture<Tuple3<SlotID, JobID, AllocationID>> requestFuture = new CompletableFuture<>().     TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().setRequestSlotFunction(tuple5 -> {         requestFuture.complete(Tuple3.of(tuple5.f0, tuple5.f1, tuple5.f2)).         return new CompletableFuture<>().     }).createTestingTaskExecutorGateway().     try (SlotManager slotManager = new SlotManager(scheduledExecutor, TestingUtils.infiniteTime(), TestingUtils.infiniteTime(), TestingUtils.infiniteTime())) {         ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build().         slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions).         final ResourceID resourceID = ResourceID.generate().         final AllocationID allocationID = new AllocationID().         final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100).         final SlotID slotID = new SlotID(resourceID, 0).         final SlotStatus slotStatus = new SlotStatus(slotID, resourceProfile).         final SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus)).         // register slot at SlotManager         slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport).         final String targetAddress = "foobar".         SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress).         slotManager.registerSlotRequest(slotRequest).         // a SlotRequest is routed to the TaskExecutor         assertThat(requestFuture.get(), is(equalTo(Tuple3.of(slotID, jobID, allocationID)))).     } }
