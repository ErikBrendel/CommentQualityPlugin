# id;timestamp;commentText;codeText;commentWords;codeWords
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522858;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))____		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, new NonHaServices(rmAddress), slotManager)__		resourceManager.start()___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(new JobMasterRegistration(jmAddress, jobID))__		try {_			Await.ready(registrationFuture, Duration.create(5, TimeUnit.SECONDS))__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(slotManager, timeout(5000)).allocateContainer(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(FiniteDuration.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,new,non,ha,services,rm,address,slot,manager,resource,manager,start,future,registration,response,registration,future,resource,manager,register,job,master,new,job,master,registration,jm,address,job,id,try,await,ready,registration,future,duration,create,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,slot,manager,timeout,5000,allocate,container,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,finite,duration,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522859;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))____		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, new NonHaServices(rmAddress), slotManager)__		resourceManager.start()___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(new JobMasterRegistration(jmAddress, jobID))__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(slotManager, timeout(5000)).allocateContainer(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,new,non,ha,services,rm,address,slot,manager,resource,manager,start,future,registration,response,registration,future,resource,manager,register,job,master,new,job,master,registration,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,slot,manager,timeout,5000,allocate,container,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522859;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, testingHaServices, slotManager)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(slotManager, timeout(5000)).allocateContainer(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,slot,manager,timeout,5000,allocate,container,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522860;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new StandaloneResourceManager(testRpcService, testingHaServices, slotManager)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(slotManager, timeout(5000)).allocateContainer(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,slot,manager,timeout,5000,allocate,container,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522861;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(resourceManager, timeout(5000)).startNewWorker(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,resource,manager,timeout,5000,start,new,worker,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522861;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(resourceManager, timeout(5000)).startNewWorker(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,resource,manager,timeout,5000,start,new,worker,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522861;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		verify(resourceManager, timeout(5000)).startNewWorker(resourceProfile)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,verify,resource,manager,timeout,5000,start,new,worker,resource,profile,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522861;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(testRpcService, testingHaServices, slotManagerFactory)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,testing,ha,services,slot,manager,factory,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522862;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(testRpcService, testingHaServices, slotManagerFactory)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,testing,ha,services,slot,manager,factory,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522864;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(Time.seconds(5L), Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1482522864;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(Time.seconds(5L), Time.seconds(5L))__		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(testingHaServices)___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1489413798;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L),_			Time.minutes(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			resourceManagerConfiguration.getJobTimeout())___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,time,minutes,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,resource,manager,configuration,get,job,timeout,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1490031358;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,spied,resource,manager,resource,manager,new,spied,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1490273924;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		final HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				rmResourceId,_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,final,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,spied,resource,manager,resource,manager,new,spied,resource,manager,rm,resource,id,test,rpc,service,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1490273924;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		final HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				rmResourceId,_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,final,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,spied,resource,manager,resource,manager,new,spied,resource,manager,rm,resource,id,test,rpc,service,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1493146240;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		final HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				rmResourceId,_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,final,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,spied,resource,manager,resource,manager,new,spied,resource,manager,rm,resource,id,test,rpc,service,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1493308611;Tests whether_1) SlotRequest is routed to the SlotManager_2) SlotRequest is confirmed_3) SlotRequest leads to a container allocation_4) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		final TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		final HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		SpiedResourceManager resourceManager =_			new SpiedResourceManager(_				rmResourceId,_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmResourceId, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertEquals(1, resourceManager.startNewWorkerCalled)___		Assert.assertFalse(slotManager.isAllocated(allocationID))___		_		final String tmAddress = "/tm1"__		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito_			.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,slot,request,is,routed,to,the,slot,manager,2,slot,request,is,confirmed,3,slot,request,leads,to,a,container,allocation,4,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,final,resource,id,jm,resource,id,new,resource,id,jm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,final,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,final,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,spied,resource,manager,resource,manager,new,spied,resource,manager,rm,resource,id,test,rpc,service,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,resource,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,equals,1,resource,manager,start,new,worker,called,assert,assert,false,slot,manager,is,allocated,allocation,id,final,string,tm,address,tm1,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1493386068;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		final UUID rmLeaderID = UUID.randomUUID()___		try (SlotManager slotManager = new SlotManager(_			new ScheduledExecutorServiceAdapter(scheduledExecutorService),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_				.thenReturn(mock(FlinkFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,id,jm,resource,id,new,resource,id,jm,address,final,uuid,rm,leader,id,uuid,random,uuid,try,slot,manager,slot,manager,new,slot,manager,new,scheduled,executor,service,adapter,scheduled,executor,service,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1493386105;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		final UUID rmLeaderID = UUID.randomUUID()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_				.thenReturn(mock(FlinkFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,id,jm,resource,id,new,resource,id,jm,address,final,uuid,rm,leader,id,uuid,random,uuid,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1493386106;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final UUID rmLeaderID = UUID.randomUUID()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_				.thenReturn(mock(FlinkFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,uuid,rm,leader,id,uuid,random,uuid,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1501760738;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final UUID rmLeaderID = UUID.randomUUID()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,uuid,rm,leader,id,uuid,random,uuid,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1504525441;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1508597556;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1512567202;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1515481550;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1522681180;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1525452496;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1526494919;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(slotRequest.getResourceProfile()))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1538127492;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			final CompletableFuture<ResourceProfile> resourceProfileFuture = new CompletableFuture<>()__			ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_				.setAllocateResourceConsumer(resourceProfile -> resourceProfileFuture.complete(resourceProfile))_				.build()___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			assertThat(resourceProfileFuture.get(), is(equalTo(slotRequest.getResourceProfile())))___			_			TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			Mockito.when(_				taskExecutorGateway_					.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_				.thenReturn(mock(CompletableFuture.class))___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			_			verify(taskExecutorGateway, timeout(5000L))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,completable,future,resource,profile,resource,profile,future,new,completable,future,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,resource,profile,future,complete,resource,profile,build,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,assert,that,resource,profile,future,get,is,equal,to,slot,request,get,resource,profile,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,verify,task,executor,gateway,timeout,5000l,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotsUnavailableRequest() throws Exception;1538127495;Tests whether_1) SlotManager accepts a slot request_2) SlotRequest leads to a container allocation_3) Slot becomes available and TaskExecutor gets a SlotRequest;@Test_	public void testSlotsUnavailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			final CompletableFuture<ResourceProfile> resourceProfileFuture = new CompletableFuture<>()__			ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_				.setAllocateResourceConsumer(resourceProfileFuture::complete)_				.build()___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)___			slotManager.registerSlotRequest(slotRequest)___			assertThat(resourceProfileFuture.get(), is(equalTo(slotRequest.getResourceProfile())))___			_			final CompletableFuture<Tuple3<SlotID, JobID, AllocationID>> requestFuture = new CompletableFuture<>()__			TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(tuple5 -> {_					requestFuture.complete(Tuple3.of(tuple5.f0, tuple5.f1, tuple5.f2))__					return new CompletableFuture<>()__				})_				.createTestingTaskExecutorGateway()___			final ResourceID resourceID = ResourceID.generate()__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			_			assertThat(requestFuture.get(), is(equalTo(Tuple3.of(slotID, jobID, allocationID))))__		}_	};tests,whether,1,slot,manager,accepts,a,slot,request,2,slot,request,leads,to,a,container,allocation,3,slot,becomes,available,and,task,executor,gets,a,slot,request;test,public,void,test,slots,unavailable,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,final,completable,future,resource,profile,resource,profile,future,new,completable,future,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,future,complete,build,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,assert,that,resource,profile,future,get,is,equal,to,slot,request,get,resource,profile,final,completable,future,tuple3,slot,id,job,id,allocation,id,request,future,new,completable,future,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,request,future,complete,tuple3,of,tuple5,f0,tuple5,f1,tuple5,f2,return,new,completable,future,create,testing,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,assert,that,request,future,get,is,equal,to,tuple3,of,slot,id,job,id,allocation,id
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522858;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, new NonHaServices(rmAddress), slotManager)__		resourceManager.start()___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(new JobMasterRegistration(jmAddress, jobID))__		try {_			Await.ready(registrationFuture, Duration.create(5, TimeUnit.SECONDS))__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(FiniteDuration.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,new,non,ha,services,rm,address,slot,manager,resource,manager,start,future,registration,response,registration,future,resource,manager,register,job,master,new,job,master,registration,jm,address,job,id,try,await,ready,registration,future,duration,create,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,finite,duration,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522859;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, new NonHaServices(rmAddress), slotManager)__		resourceManager.start()___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(new JobMasterRegistration(jmAddress, jobID))__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,new,non,ha,services,rm,address,slot,manager,resource,manager,start,future,registration,response,registration,future,resource,manager,register,job,master,new,job,master,registration,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522859;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new ResourceManager(testRpcService, testingHaServices, slotManager)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522860;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManager slotManager = Mockito.spy(new TestingSlotManager())__		ResourceManager resourceManager =_			new StandaloneResourceManager(testRpcService, testingHaServices, slotManager)__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,slot,manager,mockito,spy,new,testing,slot,manager,resource,manager,resource,manager,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522861;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522861;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522861;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(taskExecutorGateway.requestSlot(any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<SlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		SlotManager slotManager = Mockito.spy(new SimpleSlotManager())__		ResourceManager resourceManager =_			Mockito.spy(new StandaloneResourceManager(testRpcService, testingHaServices, slotManager))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus), resourceID)__		_		slotManager.registerTaskExecutor(resourceID, taskExecutorGateway)__		slotManager.updateSlotStatus(slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		SlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))____		_		verify(taskExecutorGateway, timeout(5000)).requestSlot(eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,slot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,slot,manager,slot,manager,mockito,spy,new,simple,slot,manager,resource,manager,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,testing,ha,services,slot,manager,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,resource,id,slot,manager,register,task,executor,resource,id,task,executor,gateway,slot,manager,update,slot,status,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,slot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522861;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(AllocationID.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		TestingResourceManager resourceManager =_			Mockito.spy(new TestingResourceManager(testRpcService, testingHaServices, slotManagerFactory))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(allocationID), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,allocation,id,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,testing,resource,manager,resource,manager,mockito,spy,new,testing,resource,manager,test,rpc,service,testing,ha,services,slot,manager,factory,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,allocation,id,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522862;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		TestingResourceManager resourceManager =_			Mockito.spy(new TestingResourceManager(testRpcService, testingHaServices, slotManagerFactory))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,testing,resource,manager,resource,manager,mockito,spy,new,testing,resource,manager,test,rpc,service,testing,ha,services,slot,manager,factory,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522864;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(Time.seconds(5L), Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobMaster(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,master,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1482522864;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(Time.seconds(5L), Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(testingHaServices)___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1489413798;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L),_			Time.minutes(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			resourceManagerConfiguration.getJobTimeout())___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,time,minutes,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,resource,manager,configuration,get,job,timeout,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1490031358;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()__		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,resource,manager,configuration,testing,ha,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1490273924;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				rmResourceId,_				testRpcService,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,rm,resource,id,test,rpc,service,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1490273924;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService, rmResourceId,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,rm,resource,id,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1493146240;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				FlinkResourceManager.RESOURCE_MANAGER_NAME,_				rmResourceId,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,flink,resource,manager,rm,resource,id,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1493308611;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final String rmAddress = "/rm1"__		final String jmAddress = "/jm1"__		final String tmAddress = "/tm1"__		final JobID jobID = new JobID()__		final ResourceID rmResourceId = new ResourceID(rmAddress)__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		testRpcService.registerGateway(jmAddress, mock(JobMasterGateway.class))___		final TestingHighAvailabilityServices testingHaServices = new TestingHighAvailabilityServices()__		final UUID rmLeaderID = UUID.randomUUID()__		final UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderElectionService rmLeaderElectionService =_			configureHA(testingHaServices, jobID, rmAddress, rmLeaderID, jmAddress, jmLeaderID)___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(new FlinkCompletableFuture<TMSlotRequestReply>())__		testRpcService.registerGateway(tmAddress, taskExecutorGateway)___		ResourceManagerConfiguration resourceManagerConfiguration = new ResourceManagerConfiguration(_			Time.seconds(5L),_			Time.seconds(5L))___		JobLeaderIdService jobLeaderIdService = new JobLeaderIdService(_			testingHaServices,_			testRpcService.getScheduledExecutor(),_			Time.seconds(5L))___		TestingSlotManagerFactory slotManagerFactory = new TestingSlotManagerFactory()___		HeartbeatServices heartbeatServices = mock(HeartbeatServices.class)___		ResourceManager<ResourceID> resourceManager =_			Mockito.spy(new StandaloneResourceManager(_				testRpcService,_				FlinkResourceManager.RESOURCE_MANAGER_NAME,_				rmResourceId,_				resourceManagerConfiguration,_				testingHaServices,_				heartbeatServices,_				slotManagerFactory,_				mock(MetricRegistry.class),_				jobLeaderIdService,_				mock(FatalErrorHandler.class)))__		resourceManager.start()__		rmLeaderElectionService.isLeader(rmLeaderID)___		Thread.sleep(1000)___		Future<RegistrationResponse> registrationFuture =_			resourceManager.registerJobManager(rmLeaderID, jmLeaderID, jmResourceId, jmAddress, jobID)__		try {_			registrationFuture.get(5L, TimeUnit.SECONDS)__		} catch (Exception e) {_			Assert.fail("JobManager registration Future didn't become ready.")__		}__		final SlotManager slotManager = slotManagerFactory.slotManager___		final ResourceID resourceID = ResourceID.generate()__		final AllocationID allocationID = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__		final SlotID slotID = new SlotID(resourceID, 0)___		final SlotStatus slotStatus =_			new SlotStatus(slotID, resourceProfile)__		final SlotReport slotReport =_			new SlotReport(Collections.singletonList(slotStatus))__		_		slotManager.registerTaskExecutor(_			resourceID, new TaskExecutorRegistration(taskExecutorGateway), slotReport)___		SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile)__		RMSlotRequestReply slotRequestReply =_			resourceManager.requestSlot(jmLeaderID, rmLeaderID, slotRequest)___		_		verify(slotManager).requestSlot(slotRequest)___		_		Assert.assertEquals(_			slotRequestReply.getAllocationID(),_			allocationID)___		_		Assert.assertTrue(slotManager.isAllocated(slotID))__		Assert.assertTrue(slotManager.isAllocated(allocationID))___		_		verify(taskExecutorGateway, timeout(5000))_			.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,string,rm,address,rm1,final,string,jm,address,jm1,final,string,tm,address,tm1,final,job,id,job,id,new,job,id,final,resource,id,rm,resource,id,new,resource,id,rm,address,final,resource,id,jm,resource,id,new,resource,id,jm,address,test,rpc,service,register,gateway,jm,address,mock,job,master,gateway,class,final,testing,high,availability,services,testing,ha,services,new,testing,high,availability,services,final,uuid,rm,leader,id,uuid,random,uuid,final,uuid,jm,leader,id,uuid,random,uuid,testing,leader,election,service,rm,leader,election,service,configure,ha,testing,ha,services,job,id,rm,address,rm,leader,id,jm,address,jm,leader,id,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,new,flink,completable,future,tmslot,request,reply,test,rpc,service,register,gateway,tm,address,task,executor,gateway,resource,manager,configuration,resource,manager,configuration,new,resource,manager,configuration,time,seconds,5l,time,seconds,5l,job,leader,id,service,job,leader,id,service,new,job,leader,id,service,testing,ha,services,test,rpc,service,get,scheduled,executor,time,seconds,5l,testing,slot,manager,factory,slot,manager,factory,new,testing,slot,manager,factory,heartbeat,services,heartbeat,services,mock,heartbeat,services,class,resource,manager,resource,id,resource,manager,mockito,spy,new,standalone,resource,manager,test,rpc,service,flink,resource,manager,rm,resource,id,resource,manager,configuration,testing,ha,services,heartbeat,services,slot,manager,factory,mock,metric,registry,class,job,leader,id,service,mock,fatal,error,handler,class,resource,manager,start,rm,leader,election,service,is,leader,rm,leader,id,thread,sleep,1000,future,registration,response,registration,future,resource,manager,register,job,manager,rm,leader,id,jm,leader,id,jm,resource,id,jm,address,job,id,try,registration,future,get,5l,time,unit,seconds,catch,exception,e,assert,fail,job,manager,registration,future,didn,t,become,ready,final,slot,manager,slot,manager,slot,manager,factory,slot,manager,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,resource,id,new,task,executor,registration,task,executor,gateway,slot,report,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,rmslot,request,reply,slot,request,reply,resource,manager,request,slot,jm,leader,id,rm,leader,id,slot,request,verify,slot,manager,request,slot,slot,request,assert,assert,equals,slot,request,reply,get,allocation,id,allocation,id,assert,assert,true,slot,manager,is,allocated,slot,id,assert,assert,true,slot,manager,is,allocated,allocation,id,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1493386068;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		final UUID rmLeaderID = UUID.randomUUID()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(mock(FlinkFuture.class))___		try (SlotManager slotManager = new SlotManager(_			new ScheduledExecutorServiceAdapter(scheduledExecutorService),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,id,jm,resource,id,new,resource,id,jm,address,final,uuid,rm,leader,id,uuid,random,uuid,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,try,slot,manager,slot,manager,new,slot,manager,new,scheduled,executor,service,adapter,scheduled,executor,service,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1493386105;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()__		final ResourceID jmResourceId = new ResourceID(jmAddress)___		final UUID rmLeaderID = UUID.randomUUID()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(mock(FlinkFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,id,jm,resource,id,new,resource,id,jm,address,final,uuid,rm,leader,id,uuid,random,uuid,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1493386106;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final UUID rmLeaderID = UUID.randomUUID()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(mock(FlinkFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,uuid,rm,leader,id,uuid,random,uuid,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,flink,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1501760738;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final UUID rmLeaderID = UUID.randomUUID()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(UUID.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(UUID.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,uuid,rm,leader,id,uuid,random,uuid,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,uuid,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,uuid,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1504525441;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1508597556;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1512567202;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1515481550;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1522681180;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1525452496;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1526494919;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1538127492;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		Mockito.when(_			taskExecutorGateway_				.requestSlot(any(SlotID.class), any(JobID.class), any(AllocationID.class), any(String.class), any(ResourceManagerId.class), any(Time.class)))_			.thenReturn(mock(CompletableFuture.class))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = mock(ResourceActions.class)___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			verify(taskExecutorGateway, timeout(5000))_				.requestSlot(eq(slotID), eq(jobID), eq(allocationID), any(String.class), any(ResourceManagerId.class), any(Time.class))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,mockito,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,class,any,resource,manager,id,class,any,time,class,then,return,mock,completable,future,class,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,mock,resource,actions,class,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,timeout,5000,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,class,any,resource,manager,id,class,any,time,class
SlotProtocolTest -> @Test 	public void testSlotAvailableRequest() throws Exception;1538127495;Tests whether_1) a SlotRequest is routed to the SlotManager_2) a SlotRequest is confirmed_3) a SlotRequest leads to an allocation of a registered slot_4) a SlotRequest is routed to the TaskExecutor;@Test_	public void testSlotAvailableRequest() throws Exception {_		final JobID jobID = new JobID()___		final ResourceManagerId rmLeaderID = ResourceManagerId.generate()___		final CompletableFuture<Tuple3<SlotID, JobID, AllocationID>> requestFuture = new CompletableFuture<>()__		TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setRequestSlotFunction(tuple5 -> {_				requestFuture.complete(Tuple3.of(tuple5.f0, tuple5.f1, tuple5.f2))__				return new CompletableFuture<>()__			})_			.createTestingTaskExecutorGateway()___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___			slotManager.start(rmLeaderID, Executors.directExecutor(), resourceManagerActions)___			final ResourceID resourceID = ResourceID.generate()__			final AllocationID allocationID = new AllocationID()__			final ResourceProfile resourceProfile = new ResourceProfile(1.0, 100)__			final SlotID slotID = new SlotID(resourceID, 0)___			final SlotStatus slotStatus =_				new SlotStatus(slotID, resourceProfile)__			final SlotReport slotReport =_				new SlotReport(Collections.singletonList(slotStatus))__			_			slotManager.registerTaskManager(_				new TaskExecutorConnection(resourceID, taskExecutorGateway), slotReport)___			final String targetAddress = "foobar"___			SlotRequest slotRequest = new SlotRequest(jobID, allocationID, resourceProfile, targetAddress)__			slotManager.registerSlotRequest(slotRequest)___			_			assertThat(requestFuture.get(), is(equalTo(Tuple3.of(slotID, jobID, allocationID))))__		}_	};tests,whether,1,a,slot,request,is,routed,to,the,slot,manager,2,a,slot,request,is,confirmed,3,a,slot,request,leads,to,an,allocation,of,a,registered,slot,4,a,slot,request,is,routed,to,the,task,executor;test,public,void,test,slot,available,request,throws,exception,final,job,id,job,id,new,job,id,final,resource,manager,id,rm,leader,id,resource,manager,id,generate,final,completable,future,tuple3,slot,id,job,id,allocation,id,request,future,new,completable,future,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,request,future,complete,tuple3,of,tuple5,f0,tuple5,f1,tuple5,f2,return,new,completable,future,create,testing,task,executor,gateway,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,slot,manager,start,rm,leader,id,executors,direct,executor,resource,manager,actions,final,resource,id,resource,id,resource,id,generate,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,100,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,manager,new,task,executor,connection,resource,id,task,executor,gateway,slot,report,final,string,target,address,foobar,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,slot,manager,register,slot,request,slot,request,assert,that,request,future,get,is,equal,to,tuple3,of,slot,id,job,id,allocation,id
