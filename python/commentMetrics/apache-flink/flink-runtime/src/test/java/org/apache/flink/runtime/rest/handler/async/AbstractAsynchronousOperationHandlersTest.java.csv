# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationCompletion() throws Exception;1519249749;Tests the triggering and successful completion of an asynchronous operation.;@Test_	public void testOperationCompletion() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId()))___		_		final String savepointPath = "foobar"__		savepointFuture.complete(savepointPath)___		operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		assertThat(operationResult.resource().value, is(savepointPath))__	};tests,the,triggering,and,successful,completion,of,an,asynchronous,operation;test,public,void,test,operation,completion,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,in,progress,get,id,final,string,savepoint,path,foobar,savepoint,future,complete,savepoint,path,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,assert,that,operation,result,resource,value,is,savepoint,path
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationCompletion() throws Exception;1520032992;Tests the triggering and successful completion of an asynchronous operation.;@Test_	public void testOperationCompletion() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId()))___		_		final String savepointPath = "foobar"__		savepointFuture.complete(savepointPath)___		operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		assertThat(operationResult.resource().value, is(savepointPath))__	};tests,the,triggering,and,successful,completion,of,an,asynchronous,operation;test,public,void,test,operation,completion,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,in,progress,get,id,final,string,savepoint,path,foobar,savepoint,future,complete,savepoint,path,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,assert,that,operation,result,resource,value,is,savepoint,path
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationCompletion() throws Exception;1525933612;Tests the triggering and successful completion of an asynchronous operation.;@Test_	public void testOperationCompletion() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId()))___		_		final String savepointPath = "foobar"__		savepointFuture.complete(savepointPath)___		operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		assertThat(operationResult.resource().value, is(savepointPath))__	};tests,the,triggering,and,successful,completion,of,an,asynchronous,operation;test,public,void,test,operation,completion,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,in,progress,get,id,final,string,savepoint,path,foobar,savepoint,future,complete,savepoint,path,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,assert,that,operation,result,resource,value,is,savepoint,path
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationCompletion() throws Exception;1539934386;Tests the triggering and successful completion of an asynchronous operation.;@Test_	public void testOperationCompletion() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId()))___		_		final String savepointPath = "foobar"__		savepointFuture.complete(savepointPath)___		operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		assertThat(operationResult.resource().value, is(savepointPath))__	};tests,the,triggering,and,successful,completion,of,an,asynchronous,operation;test,public,void,test,operation,completion,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,in,progress,get,id,final,string,savepoint,path,foobar,savepoint,future,complete,savepoint,path,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,assert,that,operation,result,resource,value,is,savepoint,path
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationCompletion() throws Exception;1545326469;Tests the triggering and successful completion of an asynchronous operation.;@Test_	public void testOperationCompletion() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId()))___		_		final String savepointPath = "foobar"__		savepointFuture.complete(savepointPath)___		operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		assertThat(operationResult.resource().value, is(savepointPath))__	};tests,the,triggering,and,successful,completion,of,an,asynchronous,operation;test,public,void,test,operation,completion,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,in,progress,get,id,final,string,savepoint,path,foobar,savepoint,future,complete,savepoint,path,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,assert,that,operation,result,resource,value,is,savepoint,path
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testCloseShouldFinishOnFirstServedResult() throws Exception;1539934386;Tests that the future returned by {@link AbstractAsynchronousOperationHandlers.StatusHandler#closeAsync()}_completes when the result of the asynchronous operation is served.;@Test_	public void testCloseShouldFinishOnFirstServedResult() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()__		final CompletableFuture<Void> closeFuture = testingStatusHandler.closeAsync()___		testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get()___		assertThat(closeFuture.isDone(), is(false))___		savepointFuture.complete("foobar")__		testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get()___		assertThat(closeFuture.isDone(), is(true))__	};tests,that,the,future,returned,by,link,abstract,asynchronous,operation,handlers,status,handler,close,async,completes,when,the,result,of,the,asynchronous,operation,is,served;test,public,void,test,close,should,finish,on,first,served,result,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,final,completable,future,void,close,future,testing,status,handler,close,async,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,close,future,is,done,is,false,savepoint,future,complete,foobar,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,close,future,is,done,is,true
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testCloseShouldFinishOnFirstServedResult() throws Exception;1545326469;Tests that the future returned by {@link AbstractAsynchronousOperationHandlers.StatusHandler#closeAsync()}_completes when the result of the asynchronous operation is served.;@Test_	public void testCloseShouldFinishOnFirstServedResult() throws Exception {_		final CompletableFuture<String> savepointFuture = new CompletableFuture<>()__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture)_			.build()___		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()__		final CompletableFuture<Void> closeFuture = testingStatusHandler.closeAsync()___		testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get()___		assertThat(closeFuture.isDone(), is(false))___		savepointFuture.complete("foobar")__		testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get()___		assertThat(closeFuture.isDone(), is(true))__	};tests,that,the,future,returned,by,link,abstract,asynchronous,operation,handlers,status,handler,close,async,completes,when,the,result,of,the,asynchronous,operation,is,served;test,public,void,test,close,should,finish,on,first,served,result,throws,exception,final,completable,future,string,savepoint,future,new,completable,future,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,savepoint,future,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,final,completable,future,void,close,future,testing,status,handler,close,async,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,close,future,is,done,is,false,savepoint,future,complete,foobar,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,close,future,is,done,is,true
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationFailure() throws Exception;1519249749;Tests the triggering and exceptional completion of an asynchronous operation.;@Test_	public void testOperationFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException))_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		final OperationResult resource = operationResult.resource()__		assertThat(resource.throwable, is(testException))__	};tests,the,triggering,and,exceptional,completion,of,an,asynchronous,operation;test,public,void,test,operation,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,future,utils,completed,exceptionally,test,exception,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,final,operation,result,resource,operation,result,resource,assert,that,resource,throwable,is,test,exception
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationFailure() throws Exception;1520032992;Tests the triggering and exceptional completion of an asynchronous operation.;@Test_	public void testOperationFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException))_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		final OperationResult resource = operationResult.resource()__		assertThat(resource.throwable, is(testException))__	};tests,the,triggering,and,exceptional,completion,of,an,asynchronous,operation;test,public,void,test,operation,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,future,utils,completed,exceptionally,test,exception,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,final,operation,result,resource,operation,result,resource,assert,that,resource,throwable,is,test,exception
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationFailure() throws Exception;1525933612;Tests the triggering and exceptional completion of an asynchronous operation.;@Test_	public void testOperationFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException))_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		final OperationResult resource = operationResult.resource()__		assertThat(resource.throwable, is(testException))__	};tests,the,triggering,and,exceptional,completion,of,an,asynchronous,operation;test,public,void,test,operation,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,future,utils,completed,exceptionally,test,exception,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,final,operation,result,resource,operation,result,resource,assert,that,resource,throwable,is,test,exception
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationFailure() throws Exception;1539934386;Tests the triggering and exceptional completion of an asynchronous operation.;@Test_	public void testOperationFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException))_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		final OperationResult resource = operationResult.resource()__		assertThat(resource.throwable, is(testException))__	};tests,the,triggering,and,exceptional,completion,of,an,asynchronous,operation;test,public,void,test,operation,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,future,utils,completed,exceptionally,test,exception,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,final,operation,result,resource,operation,result,resource,assert,that,resource,throwable,is,test,exception
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testOperationFailure() throws Exception;1545326469;Tests the triggering and exceptional completion of an asynchronous operation.;@Test_	public void testOperationFailure() throws Exception {_		final FlinkException testException = new FlinkException("Test exception")__		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder()_			.setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException))_			.build()___		_		final TriggerId triggerId = testingTriggerHandler.handleRequest(_			triggerOperationRequest(),_			testingRestfulGateway).get().getTriggerId()___		AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(_			statusOperationRequest(triggerId),_			testingRestfulGateway).get()___		assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId()))___		final OperationResult resource = operationResult.resource()__		assertThat(resource.throwable, is(testException))__	};tests,the,triggering,and,exceptional,completion,of,an,asynchronous,operation;test,public,void,test,operation,failure,throws,exception,final,flink,exception,test,exception,new,flink,exception,test,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,set,trigger,savepoint,function,job,id,job,id,string,directory,future,utils,completed,exceptionally,test,exception,build,final,trigger,id,trigger,id,testing,trigger,handler,handle,request,trigger,operation,request,testing,restful,gateway,get,get,trigger,id,asynchronous,operation,result,operation,result,operation,result,testing,status,handler,handle,request,status,operation,request,trigger,id,testing,restful,gateway,get,assert,that,operation,result,queue,status,get,id,is,queue,status,completed,get,id,final,operation,result,resource,operation,result,resource,assert,that,resource,throwable,is,test,exception
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testUnknownTriggerId() throws Exception;1519249749;Tests that an querying an unknown trigger id will return an exceptionally completed_future.;@Test_	public void testUnknownTriggerId() throws Exception {_		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build()___		try {_			testingStatusHandler.handleRequest(_				statusOperationRequest(new TriggerId()),_				testingRestfulGateway).get()___			fail("This should have failed with a RestHandlerException.")__		} catch (ExecutionException ee) {_			final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class)___			assertThat(optionalRestHandlerException.isPresent(), is(true))___			final RestHandlerException restHandlerException = optionalRestHandlerException.get()___			assertThat(restHandlerException.getMessage(), containsString("Operation not found"))__			assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND))__		}_	};tests,that,an,querying,an,unknown,trigger,id,will,return,an,exceptionally,completed,future;test,public,void,test,unknown,trigger,id,throws,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,build,try,testing,status,handler,handle,request,status,operation,request,new,trigger,id,testing,restful,gateway,get,fail,this,should,have,failed,with,a,rest,handler,exception,catch,execution,exception,ee,final,optional,rest,handler,exception,optional,rest,handler,exception,exception,utils,find,throwable,ee,rest,handler,exception,class,assert,that,optional,rest,handler,exception,is,present,is,true,final,rest,handler,exception,rest,handler,exception,optional,rest,handler,exception,get,assert,that,rest,handler,exception,get,message,contains,string,operation,not,found,assert,that,rest,handler,exception,get,http,response,status,is,http,response,status
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testUnknownTriggerId() throws Exception;1520032992;Tests that an querying an unknown trigger id will return an exceptionally completed_future.;@Test_	public void testUnknownTriggerId() throws Exception {_		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build()___		try {_			testingStatusHandler.handleRequest(_				statusOperationRequest(new TriggerId()),_				testingRestfulGateway).get()___			fail("This should have failed with a RestHandlerException.")__		} catch (ExecutionException ee) {_			final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class)___			assertThat(optionalRestHandlerException.isPresent(), is(true))___			final RestHandlerException restHandlerException = optionalRestHandlerException.get()___			assertThat(restHandlerException.getMessage(), containsString("Operation not found"))__			assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND))__		}_	};tests,that,an,querying,an,unknown,trigger,id,will,return,an,exceptionally,completed,future;test,public,void,test,unknown,trigger,id,throws,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,build,try,testing,status,handler,handle,request,status,operation,request,new,trigger,id,testing,restful,gateway,get,fail,this,should,have,failed,with,a,rest,handler,exception,catch,execution,exception,ee,final,optional,rest,handler,exception,optional,rest,handler,exception,exception,utils,find,throwable,ee,rest,handler,exception,class,assert,that,optional,rest,handler,exception,is,present,is,true,final,rest,handler,exception,rest,handler,exception,optional,rest,handler,exception,get,assert,that,rest,handler,exception,get,message,contains,string,operation,not,found,assert,that,rest,handler,exception,get,http,response,status,is,http,response,status
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testUnknownTriggerId() throws Exception;1525933612;Tests that an querying an unknown trigger id will return an exceptionally completed_future.;@Test_	public void testUnknownTriggerId() throws Exception {_		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build()___		try {_			testingStatusHandler.handleRequest(_				statusOperationRequest(new TriggerId()),_				testingRestfulGateway).get()___			fail("This should have failed with a RestHandlerException.")__		} catch (ExecutionException ee) {_			final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class)___			assertThat(optionalRestHandlerException.isPresent(), is(true))___			final RestHandlerException restHandlerException = optionalRestHandlerException.get()___			assertThat(restHandlerException.getMessage(), containsString("Operation not found"))__			assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND))__		}_	};tests,that,an,querying,an,unknown,trigger,id,will,return,an,exceptionally,completed,future;test,public,void,test,unknown,trigger,id,throws,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,build,try,testing,status,handler,handle,request,status,operation,request,new,trigger,id,testing,restful,gateway,get,fail,this,should,have,failed,with,a,rest,handler,exception,catch,execution,exception,ee,final,optional,rest,handler,exception,optional,rest,handler,exception,exception,utils,find,throwable,ee,rest,handler,exception,class,assert,that,optional,rest,handler,exception,is,present,is,true,final,rest,handler,exception,rest,handler,exception,optional,rest,handler,exception,get,assert,that,rest,handler,exception,get,message,contains,string,operation,not,found,assert,that,rest,handler,exception,get,http,response,status,is,http,response,status
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testUnknownTriggerId() throws Exception;1539934386;Tests that an querying an unknown trigger id will return an exceptionally completed_future.;@Test_	public void testUnknownTriggerId() throws Exception {_		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build()___		try {_			testingStatusHandler.handleRequest(_				statusOperationRequest(new TriggerId()),_				testingRestfulGateway).get()___			fail("This should have failed with a RestHandlerException.")__		} catch (ExecutionException ee) {_			final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class)___			assertThat(optionalRestHandlerException.isPresent(), is(true))___			final RestHandlerException restHandlerException = optionalRestHandlerException.get()___			assertThat(restHandlerException.getMessage(), containsString("Operation not found"))__			assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND))__		}_	};tests,that,an,querying,an,unknown,trigger,id,will,return,an,exceptionally,completed,future;test,public,void,test,unknown,trigger,id,throws,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,build,try,testing,status,handler,handle,request,status,operation,request,new,trigger,id,testing,restful,gateway,get,fail,this,should,have,failed,with,a,rest,handler,exception,catch,execution,exception,ee,final,optional,rest,handler,exception,optional,rest,handler,exception,exception,utils,find,throwable,ee,rest,handler,exception,class,assert,that,optional,rest,handler,exception,is,present,is,true,final,rest,handler,exception,rest,handler,exception,optional,rest,handler,exception,get,assert,that,rest,handler,exception,get,message,contains,string,operation,not,found,assert,that,rest,handler,exception,get,http,response,status,is,http,response,status
AbstractAsynchronousOperationHandlersTest -> @Test 	public void testUnknownTriggerId() throws Exception;1545326469;Tests that an querying an unknown trigger id will return an exceptionally completed_future.;@Test_	public void testUnknownTriggerId() throws Exception {_		final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build()___		try {_			testingStatusHandler.handleRequest(_				statusOperationRequest(new TriggerId()),_				testingRestfulGateway).get()___			fail("This should have failed with a RestHandlerException.")__		} catch (ExecutionException ee) {_			final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class)___			assertThat(optionalRestHandlerException.isPresent(), is(true))___			final RestHandlerException restHandlerException = optionalRestHandlerException.get()___			assertThat(restHandlerException.getMessage(), containsString("Operation not found"))__			assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND))__		}_	};tests,that,an,querying,an,unknown,trigger,id,will,return,an,exceptionally,completed,future;test,public,void,test,unknown,trigger,id,throws,exception,final,testing,restful,gateway,testing,restful,gateway,new,testing,restful,gateway,builder,build,try,testing,status,handler,handle,request,status,operation,request,new,trigger,id,testing,restful,gateway,get,fail,this,should,have,failed,with,a,rest,handler,exception,catch,execution,exception,ee,final,optional,rest,handler,exception,optional,rest,handler,exception,exception,utils,find,throwable,ee,rest,handler,exception,class,assert,that,optional,rest,handler,exception,is,present,is,true,final,rest,handler,exception,rest,handler,exception,optional,rest,handler,exception,get,assert,that,rest,handler,exception,get,message,contains,string,operation,not,found,assert,that,rest,handler,exception,get,http,response,status,is,http,response,status
