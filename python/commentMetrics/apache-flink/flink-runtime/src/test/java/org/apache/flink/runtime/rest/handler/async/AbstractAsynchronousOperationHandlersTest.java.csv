commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Before public void setup() {     testingAsynchronousOperationHandlers = new TestingAsynchronousOperationHandlers().     testingTriggerHandler = testingAsynchronousOperationHandlers.new TestingTriggerHandler(() -> null, TIMEOUT, Collections.emptyMap(), TestingTriggerMessageHeaders.INSTANCE).     testingStatusHandler = testingAsynchronousOperationHandlers.new TestingStatusHandler(() -> null, TIMEOUT, Collections.emptyMap(), TestingStatusMessageHeaders.INSTANCE). }
true;public;0;30;/**  * Tests the triggering and successful completion of an asynchronous operation.  */ ;/**  * Tests the triggering and successful completion of an asynchronous operation.  */ @Test public void testOperationCompletion() throws Exception {     final CompletableFuture<String> savepointFuture = new CompletableFuture<>().     final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture).build().     // trigger the operation     final TriggerId triggerId = testingTriggerHandler.handleRequest(triggerOperationRequest(), testingRestfulGateway).get().getTriggerId().     AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get().     assertThat(operationResult.queueStatus().getId(), is(QueueStatus.inProgress().getId())).     // complete the operation     final String savepointPath = "foobar".     savepointFuture.complete(savepointPath).     operationResult = testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get().     assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId())).     assertThat(operationResult.resource().value, is(savepointPath)). }
true;public;0;21;/**  * Tests the triggering and exceptional completion of an asynchronous operation.  */ ;/**  * Tests the triggering and exceptional completion of an asynchronous operation.  */ @Test public void testOperationFailure() throws Exception {     final FlinkException testException = new FlinkException("Test exception").     final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().setTriggerSavepointFunction((JobID jobId, String directory) -> FutureUtils.completedExceptionally(testException)).build().     // trigger the operation     final TriggerId triggerId = testingTriggerHandler.handleRequest(triggerOperationRequest(), testingRestfulGateway).get().getTriggerId().     AsynchronousOperationResult<OperationResult> operationResult = testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get().     assertThat(operationResult.queueStatus().getId(), is(QueueStatus.completed().getId())).     final OperationResult resource = operationResult.resource().     assertThat(resource.throwable, is(testException)). }
true;public;0;21;/**  * Tests that an querying an unknown trigger id will return an exceptionally completed  * future.  */ ;/**  * Tests that an querying an unknown trigger id will return an exceptionally completed  * future.  */ @Test public void testUnknownTriggerId() throws Exception {     final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().build().     try {         testingStatusHandler.handleRequest(statusOperationRequest(new TriggerId()), testingRestfulGateway).get().         fail("This should have failed with a RestHandlerException.").     } catch (ExecutionException ee) {         final Optional<RestHandlerException> optionalRestHandlerException = ExceptionUtils.findThrowable(ee, RestHandlerException.class).         assertThat(optionalRestHandlerException.isPresent(), is(true)).         final RestHandlerException restHandlerException = optionalRestHandlerException.get().         assertThat(restHandlerException.getMessage(), containsString("Operation not found")).         assertThat(restHandlerException.getHttpResponseStatus(), is(HttpResponseStatus.NOT_FOUND)).     } }
true;public;0;21;/**  * Tests that the future returned by {@link AbstractAsynchronousOperationHandlers.StatusHandler#closeAsync()}  * completes when the result of the asynchronous operation is served.  */ ;/**  * Tests that the future returned by {@link AbstractAsynchronousOperationHandlers.StatusHandler#closeAsync()}  * completes when the result of the asynchronous operation is served.  */ @Test public void testCloseShouldFinishOnFirstServedResult() throws Exception {     final CompletableFuture<String> savepointFuture = new CompletableFuture<>().     final TestingRestfulGateway testingRestfulGateway = new TestingRestfulGateway.Builder().setTriggerSavepointFunction((JobID jobId, String directory) -> savepointFuture).build().     final TriggerId triggerId = testingTriggerHandler.handleRequest(triggerOperationRequest(), testingRestfulGateway).get().getTriggerId().     final CompletableFuture<Void> closeFuture = testingStatusHandler.closeAsync().     testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get().     assertThat(closeFuture.isDone(), is(false)).     savepointFuture.complete("foobar").     testingStatusHandler.handleRequest(statusOperationRequest(triggerId), testingRestfulGateway).get().     assertThat(closeFuture.isDone(), is(true)). }
false;private,static;0;3;;private static HandlerRequest<EmptyRequestBody, EmptyMessageParameters> triggerOperationRequest() throws HandlerRequestException {     return new HandlerRequest<>(EmptyRequestBody.getInstance(), EmptyMessageParameters.getInstance()). }
false;private,static;1;7;;private static HandlerRequest<EmptyRequestBody, TriggerMessageParameters> statusOperationRequest(TriggerId triggerId) throws HandlerRequestException {     return new HandlerRequest<>(EmptyRequestBody.getInstance(), new TriggerMessageParameters(), Collections.singletonMap(TriggerIdPathParameter.KEY, triggerId.toString()), Collections.emptyMap()). }
false;public;0;4;;@Override public Collection<MessagePathParameter<?>> getPathParameters() {     return Collections.singleton(triggerIdPathParameter). }
false;public;0;4;;@Override public Collection<MessageQueryParameter<?>> getQueryParameters() {     return Collections.emptyList(). }
false;public;0;4;;@Override public HttpResponseStatus getResponseStatusCode() {     return HttpResponseStatus.OK. }
false;public;0;4;;@Override public String getDescription() {     return "". }
false;public;0;4;;@Override public Class<EmptyRequestBody> getRequestClass() {     return EmptyRequestBody.class. }
false;public;0;4;;@Override public EmptyMessageParameters getUnresolvedMessageParameters() {     return EmptyMessageParameters.getInstance(). }
false;public;0;4;;@Override public HttpMethodWrapper getHttpMethod() {     return HttpMethodWrapper.POST. }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return "barfoo". }
false;protected;0;4;;@Override protected Class<OperationResult> getValueClass() {     return OperationResult.class. }
false;public;0;4;;@Override public HttpResponseStatus getResponseStatusCode() {     return HttpResponseStatus.OK. }
false;public;0;4;;@Override public Class<EmptyRequestBody> getRequestClass() {     return EmptyRequestBody.class. }
false;public;0;4;;@Override public TriggerMessageParameters getUnresolvedMessageParameters() {     return new TriggerMessageParameters(). }
false;public;0;4;;@Override public HttpMethodWrapper getHttpMethod() {     return HttpMethodWrapper.GET. }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return "foobar". }
false;public;0;4;;@Override public String getDescription() {     return "". }
false;protected;2;4;;@Override protected CompletableFuture<String> triggerOperation(HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request, RestfulGateway gateway) throws RestHandlerException {     return gateway.triggerSavepoint(new JobID(), null, false, timeout). }
false;protected;1;4;;@Override protected TestOperationKey createOperationKey(HandlerRequest<EmptyRequestBody, EmptyMessageParameters> request) {     return new TestOperationKey(new TriggerId()). }
false;protected;1;6;;@Override protected TestOperationKey getOperationKey(HandlerRequest<EmptyRequestBody, TriggerMessageParameters> request) {     final TriggerId triggerId = request.getPathParameter(TriggerIdPathParameter.class).     return new TestOperationKey(triggerId). }
false;protected;1;4;;@Override protected OperationResult exceptionalOperationResultResponse(Throwable throwable) {     return new OperationResult(null, throwable). }
false;protected;1;4;;@Override protected OperationResult operationResultResponse(String operationResult) {     return new OperationResult(operationResult, null). }
