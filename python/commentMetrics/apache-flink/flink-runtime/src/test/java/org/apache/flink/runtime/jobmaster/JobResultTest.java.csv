commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testNetRuntimeMandatory() {     try {         new JobResult.Builder().jobId(new JobID()).build().         fail("Expected exception not thrown").     } catch (final IllegalArgumentException e) {         assertThat(e.getMessage(), equalTo("netRuntime must be greater than or equals 0")).     } }
false;public;0;10;;@Test public void testIsNotSuccess() throws Exception {     final JobResult jobResult = new JobResult.Builder().jobId(new JobID()).serializedThrowable(new SerializedThrowable(new RuntimeException())).netRuntime(Long.MAX_VALUE).build().     assertThat(jobResult.isSuccess(), equalTo(false)). }
false;public;0;9;;@Test public void testIsSuccess() throws Exception {     final JobResult jobResult = new JobResult.Builder().jobId(new JobID()).netRuntime(Long.MAX_VALUE).build().     assertThat(jobResult.isSuccess(), equalTo(true)). }
false;public;0;10;;@Test public void testCancelledJobIsFailureResult() {     final JobResult jobResult = JobResult.createFrom(new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setState(JobStatus.CANCELED).build()).     assertThat(jobResult.isSuccess(), is(false)). }
false;public;0;11;;@Test public void testFailedJobIsFailureResult() {     final JobResult jobResult = JobResult.createFrom(new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setState(JobStatus.FAILED).setFailureCause(new ErrorInfo(new FlinkException("Test exception"), 42L)).build()).     assertThat(jobResult.isSuccess(), is(false)). }
false;public;0;17;;@Test public void testCancelledJobThrowsJobCancellationException() throws Exception {     final FlinkException cause = new FlinkException("Test exception").     final JobResult jobResult = JobResult.createFrom(new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setState(JobStatus.CANCELED).setFailureCause(new ErrorInfo(cause, 42L)).build()).     try {         jobResult.toJobExecutionResult(getClass().getClassLoader()).         fail("Job should fail with an JobCancellationException.").     } catch (JobCancellationException expected) {         assertThat(expected.getCause(), is(equalTo(cause))).     } }
false;public;0;17;;@Test public void testFailedJobThrowsJobExecutionException() throws Exception {     final FlinkException cause = new FlinkException("Test exception").     final JobResult jobResult = JobResult.createFrom(new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setState(JobStatus.FAILED).setFailureCause(new ErrorInfo(cause, 42L)).build()).     try {         jobResult.toJobExecutionResult(getClass().getClassLoader()).         fail("Job should fail with JobExecutionException.").     } catch (JobExecutionException expected) {         assertThat(expected.getCause(), is(equalTo(cause))).     } }
