commented;modifiers;parameterAmount;loc;comment;code
true;public;0;32;/**  * Tests that the gateway retrieval is retried in case of a failure.  */ ;/**  * Tests that the gateway retrieval is retried in case of a failure.  */ @Test public void testGatewayRetrievalFailures() throws Exception {     final String address = "localhost".     final UUID leaderId = UUID.randomUUID().     RpcGateway rpcGateway = mock(RpcGateway.class).     TestingLeaderGatewayRetriever leaderGatewayRetriever = new TestingLeaderGatewayRetriever(rpcGateway).     SettableLeaderRetrievalService settableLeaderRetrievalService = new SettableLeaderRetrievalService().     settableLeaderRetrievalService.start(leaderGatewayRetriever).     CompletableFuture<RpcGateway> gatewayFuture = leaderGatewayRetriever.getFuture().     // this triggers the first gateway retrieval attempt     settableLeaderRetrievalService.notifyListener(address, leaderId).     // check that the first future has been failed     try {         gatewayFuture.get().         fail("The first future should have been failed.").     } catch (ExecutionException ignored) {     // that's what we expect     }     // the second attempt should fail as well     assertFalse((leaderGatewayRetriever.getNow().isPresent())).     // the third attempt should succeed     assertEquals(rpcGateway, leaderGatewayRetriever.getNow().get()). }
false;protected;1;14;;@Override protected CompletableFuture<RpcGateway> createGateway(CompletableFuture<Tuple2<String, UUID>> leaderFuture) {     CompletableFuture<RpcGateway> result.     if (retrievalAttempt < 2) {         result = FutureUtils.completedExceptionally(new FlinkException("Could not resolve the leader gateway.")).     } else {         result = CompletableFuture.completedFuture(rpcGateway).     }     retrievalAttempt++.     return result. }
