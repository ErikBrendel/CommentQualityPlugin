commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testTaskManagerRpcServiceShouldBindToConfiguredTaskManagerHostname() throws Exception {     final String taskmanagerHost = "testhostname".     final Configuration config = createFlinkConfigWithPredefinedTaskManagerHostname(taskmanagerHost).     final HighAvailabilityServices highAvailabilityServices = createHighAvailabilityServices(config).     RpcService taskManagerRpcService = null.     try {         taskManagerRpcService = TaskManagerRunner.createRpcService(config, highAvailabilityServices).         assertThat(taskManagerRpcService.getPort(), is(greaterThanOrEqualTo(0))).         assertThat(taskManagerRpcService.getAddress(), is(equalTo(taskmanagerHost))).     } finally {         maybeCloseRpcService(taskManagerRpcService).         highAvailabilityServices.closeAndCleanupAllData().     } }
false;public;0;14;;@Test public void testTaskManagerRpcServiceShouldBindToHostnameAddress() throws Exception {     final Configuration config = createFlinkConfigWithHostBindPolicy(HostBindPolicy.NAME).     final HighAvailabilityServices highAvailabilityServices = createHighAvailabilityServices(config).     RpcService taskManagerRpcService = null.     try {         taskManagerRpcService = TaskManagerRunner.createRpcService(config, highAvailabilityServices).         assertThat(taskManagerRpcService.getAddress(), not(isEmptyOrNullString())).     } finally {         maybeCloseRpcService(taskManagerRpcService).         highAvailabilityServices.closeAndCleanupAllData().     } }
false;public;0;16;;@Test public void testTaskManagerRpcServiceShouldBindToIpAddressDeterminedByConnectingToResourceManager() throws Exception {     final ServerSocket testJobManagerSocket = openServerSocket().     final Configuration config = createFlinkConfigWithJobManagerPort(testJobManagerSocket.getLocalPort()).     final HighAvailabilityServices highAvailabilityServices = createHighAvailabilityServices(config).     RpcService taskManagerRpcService = null.     try {         taskManagerRpcService = TaskManagerRunner.createRpcService(config, highAvailabilityServices).         assertThat(taskManagerRpcService.getAddress(), is(ipAddress())).     } finally {         maybeCloseRpcService(taskManagerRpcService).         highAvailabilityServices.closeAndCleanupAllData().         IOUtils.closeQuietly(testJobManagerSocket).     } }
false;public;0;16;;@Test public void testCreatingTaskManagerRpcServiceShouldFailIfRpcPortRangeIsInvalid() throws Exception {     final Configuration config = new Configuration(createFlinkConfigWithPredefinedTaskManagerHostname("example.org")).     config.setString(TaskManagerOptions.RPC_PORT, "-1").     final HighAvailabilityServices highAvailabilityServices = createHighAvailabilityServices(config).     try {         TaskManagerRunner.createRpcService(config, highAvailabilityServices).         fail("Should fail because -1 is not a valid port range").     } catch (final IllegalArgumentException e) {         assertThat(e.getMessage(), containsString("Invalid port range definition: -1")).     } finally {         highAvailabilityServices.closeAndCleanupAllData().     } }
false;public;0;23;;@Test public void testDefaultFsParameterLoading() throws Exception {     try {         final File tmpDir = temporaryFolder.newFolder().         final File confFile = new File(tmpDir, GlobalConfiguration.FLINK_CONF_FILENAME).         final URI defaultFS = new URI("otherFS", null, "localhost", 1234, null, null, null).         final PrintWriter pw1 = new PrintWriter(confFile).         pw1.println("fs.default-scheme: " + defaultFS).         pw1.close().         String[] args = new String[] { "--configDir", tmpDir.toString() }.         Configuration configuration = TaskManagerRunner.loadConfiguration(args).         FileSystem.initialize(configuration).         assertEquals(defaultFS, FileSystem.getDefaultFsUri()).     } finally {         // reset FS settings         FileSystem.initialize(new Configuration()).     } }
false;private,static;1;7;;private static Configuration createFlinkConfigWithPredefinedTaskManagerHostname(final String taskmanagerHost) {     final Configuration config = new Configuration().     config.setString(TaskManagerOptions.HOST, taskmanagerHost).     config.setString(JobManagerOptions.ADDRESS, "localhost").     return new UnmodifiableConfiguration(config). }
false;private,static;1;6;;private static Configuration createFlinkConfigWithHostBindPolicy(final HostBindPolicy bindPolicy) {     final Configuration config = new Configuration().     config.setString(TaskManagerOptions.HOST_BIND_POLICY, bindPolicy.toString()).     config.setString(JobManagerOptions.ADDRESS, "localhost").     return new UnmodifiableConfiguration(config). }
false;private,static;1;6;;private static Configuration createFlinkConfigWithJobManagerPort(final int port) {     Configuration config = new Configuration().     config.setString(JobManagerOptions.ADDRESS, "localhost").     config.setInteger(JobManagerOptions.PORT, port).     return new UnmodifiableConfiguration(config). }
false;private;1;6;;private HighAvailabilityServices createHighAvailabilityServices(final Configuration config) throws Exception {     return HighAvailabilityServicesUtils.createHighAvailabilityServices(config, Executors.directExecutor(), HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION). }
false;private,static;0;8;;private static ServerSocket openServerSocket() {     try {         return new ServerSocket(0).     } catch (IOException e) {         assumeNoException("Skip test because could not open a server socket", e).         throw new RuntimeException("satisfy compiler").     } }
false;private,static;1;5;;private static void maybeCloseRpcService(@Nullable final RpcService rpcService) throws Exception {     if (rpcService != null) {         rpcService.stopService().get(TEST_TIMEOUT_SECONDS, TimeUnit.SECONDS).     } }
false;protected;1;4;;@Override protected boolean matchesSafely(String value) {     return IPAddressUtil.isIPv4LiteralAddress(value) || IPAddressUtil.isIPv6LiteralAddress(value). }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText("Is an ip address."). }
false;private,static;0;13;;private static TypeSafeMatcher<String> ipAddress() {     return new TypeSafeMatcher<String>() {          @Override         protected boolean matchesSafely(String value) {             return IPAddressUtil.isIPv4LiteralAddress(value) || IPAddressUtil.isIPv6LiteralAddress(value).         }          @Override         public void describeTo(Description description) {             description.appendText("Is an ip address.").         }     }. }
