commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean supportsHighlyAvailableStorage() {     return false. }
false;public;0;4;;@Override public boolean hasDefaultSavepointLocation() {     return false. }
false;public;1;4;;@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) {     return null. }
false;public;1;4;;@Override public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) {     return null. }
false;public;0;4;;@Override public CheckpointMetadataOutputStream createMetadataOutputStream() {     return null. }
false;public;0;4;;@Override public void disposeOnFailure() { }
false;public;0;4;;@Override public CheckpointStorageLocationReference getLocationReference() {     return null. }
false;public;1;25;;@Override public CheckpointStorageLocation initializeLocationForCheckpoint(long checkpointId) {     return new CheckpointStorageLocation() {          @Override         public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) {             return null.         }          @Override         public CheckpointMetadataOutputStream createMetadataOutputStream() {             return null.         }          @Override         public void disposeOnFailure() {         }          @Override         public CheckpointStorageLocationReference getLocationReference() {             return null.         }     }. }
false;public;2;4;;@Override public CheckpointStorageLocation initializeLocationForSavepoint(long checkpointId, @Nullable String externalLocationPointer) {     return null. }
false;public;2;4;;@Override public CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) {     return null. }
false;public;0;4;;@Override public CheckpointStreamFactory.CheckpointStateOutputStream createTaskOwnedStateStream() {     return null. }
false;public;1;60;;@Override public CheckpointStorage createCheckpointStorage(JobID jobId) {     return new CheckpointStorage() {          @Override         public boolean supportsHighlyAvailableStorage() {             return false.         }          @Override         public boolean hasDefaultSavepointLocation() {             return false.         }          @Override         public CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) {             return null.         }          @Override         public CheckpointStorageLocation initializeLocationForCheckpoint(long checkpointId) {             return new CheckpointStorageLocation() {                  @Override                 public CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) {                     return null.                 }                  @Override                 public CheckpointMetadataOutputStream createMetadataOutputStream() {                     return null.                 }                  @Override                 public void disposeOnFailure() {                 }                  @Override                 public CheckpointStorageLocationReference getLocationReference() {                     return null.                 }             }.         }          @Override         public CheckpointStorageLocation initializeLocationForSavepoint(long checkpointId, @Nullable String externalLocationPointer) {             return null.         }          @Override         public CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) {             return null.         }          @Override         public CheckpointStreamFactory.CheckpointStateOutputStream createTaskOwnedStateStream() {             return null.         }     }. }
false;public;10;22;;@Override public <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, MetricGroup metricGroup, Collection<KeyedStateHandle> stateHandles) {     return new MockKeyedStateBackend<>(new KvStateRegistry().createTaskRegistry(jobID, new JobVertexID()), keySerializer, env.getUserClassLoader(), numberOfKeyGroups, keyGroupRange, env.getExecutionConfig(), ttlTimeProvider, metricGroup). }
false;public;2;4;;@Override public OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) {     throw new UnsupportedOperationException(). }
