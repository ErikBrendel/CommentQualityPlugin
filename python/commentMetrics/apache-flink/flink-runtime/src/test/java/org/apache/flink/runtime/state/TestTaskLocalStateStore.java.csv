commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public void storeLocalState(long checkpointId, @Nullable TaskStateSnapshot localState) {     Preconditions.checkState(!disposed).     taskStateSnapshotsByCheckpointID.put(checkpointId, localState). }
false;public;1;6;;@Nullable @Override public TaskStateSnapshot retrieveLocalState(long checkpointID) {     Preconditions.checkState(!disposed).     return taskStateSnapshotsByCheckpointID.get(checkpointID). }
false;public;0;13;;public void dispose() {     if (!disposed) {         disposed = true.         for (TaskStateSnapshot stateSnapshot : taskStateSnapshotsByCheckpointID.values()) {             try {                 stateSnapshot.discardState().             } catch (Exception e) {                 throw new RuntimeException(e).             }         }         taskStateSnapshotsByCheckpointID.clear().     } }
false;public;0;6;;@Nonnull @Override public LocalRecoveryConfig getLocalRecoveryConfig() {     Preconditions.checkState(!disposed).     return Preconditions.checkNotNull(localRecoveryConfig). }
false;public;1;18;;@Override public void confirmCheckpoint(long confirmedCheckpointId) {     Preconditions.checkState(!disposed).     Iterator<Map.Entry<Long, TaskStateSnapshot>> iterator = taskStateSnapshotsByCheckpointID.entrySet().iterator().     while (iterator.hasNext()) {         Map.Entry<Long, TaskStateSnapshot> entry = iterator.next().         if (entry.getKey() < confirmedCheckpointId) {             iterator.remove().             try {                 entry.getValue().discardState().             } catch (Exception e) {                 throw new RuntimeException(e).             }         } else {             break.         }     } }
false;public;1;4;;@Override public void pruneMatchingCheckpoints(LongPredicate matcher) {     taskStateSnapshotsByCheckpointID.keySet().removeIf(matcher::test). }
false;public;0;3;;public boolean isDisposed() {     return disposed. }
false;public;0;3;;public SortedMap<Long, TaskStateSnapshot> getTaskStateSnapshotsByCheckpointID() {     return taskStateSnapshotsByCheckpointID. }
