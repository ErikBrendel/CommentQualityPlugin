commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testClientSideHighestPriority() {     RestartStrategy resolvedStrategy = RestartStrategyResolving.resolve(noRestart(), new FixedDelayRestartStrategy.FixedDelayRestartStrategyFactory(2, 1000L), true).     assertThat(resolvedStrategy, instanceOf(NoRestartStrategy.class)). }
false;public;0;8;;@Test public void testFixedStrategySetWhenCheckpointingEnabled() {     RestartStrategy resolvedStrategy = RestartStrategyResolving.resolve(fallBackRestart(), new NoOrFixedIfCheckpointingEnabledRestartStrategyFactory(), true).     assertThat(resolvedStrategy, instanceOf(FixedDelayRestartStrategy.class)). }
false;public;0;8;;@Test public void testServerStrategyIsUsedSetWhenCheckpointingEnabled() {     RestartStrategy resolvedStrategy = RestartStrategyResolving.resolve(fallBackRestart(), new FailureRateRestartStrategy.FailureRateRestartStrategyFactory(5, Time.seconds(5), Time.seconds(2)), true).     assertThat(resolvedStrategy, instanceOf(FailureRateRestartStrategy.class)). }
false;public;0;8;;@Test public void testServerStrategyIsUsedSetWhenCheckpointingDisabled() {     RestartStrategy resolvedStrategy = RestartStrategyResolving.resolve(fallBackRestart(), new FailureRateRestartStrategy.FailureRateRestartStrategyFactory(5, Time.seconds(5), Time.seconds(2)), false).     assertThat(resolvedStrategy, instanceOf(FailureRateRestartStrategy.class)). }
