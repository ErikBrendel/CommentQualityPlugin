commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CompletableFuture<DispatcherGateway> getFuture() {     return CompletableFuture.completedFuture(mockDispatcherGateway). }
false;public;0;24;;@Before public void setUp() {     MockitoAnnotations.initMocks(this).     final MetricStore metricStore = new MetricStore().     metricStore.add(new MetricDump.CounterDump(new QueryScopeInfo.JobManagerQueryScopeInfo(), TEST_METRIC_NAME, TEST_METRIC_VALUE)).     when(mockMetricFetcher.getMetricStore()).thenReturn(metricStore).     testMetricsHandler = new TestMetricsHandler(new GatewayRetriever<DispatcherGateway>() {          @Override         public CompletableFuture<DispatcherGateway> getFuture() {             return CompletableFuture.completedFuture(mockDispatcherGateway).         }     }, Time.milliseconds(50), Collections.emptyMap(), new TestMetricsHeaders(), mockMetricFetcher). }
false;public;0;20;;@Test public void testListMetrics() throws Exception {     final CompletableFuture<MetricCollectionResponseBody> completableFuture = testMetricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.emptyMap()), mockDispatcherGateway).     assertTrue(completableFuture.isDone()).     final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get().     assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1)).     final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next().     assertThat(metric.getId(), equalTo(TEST_METRIC_NAME)).     assertThat(metric.getValue(), equalTo(null)). }
false;public;0;18;;@Test public void testReturnEmptyListIfNoComponentMetricStore() throws Exception {     testMetricsHandler.returnComponentMetricStore = false.     final CompletableFuture<MetricCollectionResponseBody> completableFuture = testMetricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.emptyMap()), mockDispatcherGateway).     assertTrue(completableFuture.isDone()).     final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get().     assertThat(metricCollectionResponseBody.getMetrics(), empty()). }
false;public;0;20;;@Test public void testGetMetrics() throws Exception {     final CompletableFuture<MetricCollectionResponseBody> completableFuture = testMetricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.singletonMap(METRICS_FILTER_QUERY_PARAM, Collections.singletonList(TEST_METRIC_NAME))), mockDispatcherGateway).     assertTrue(completableFuture.isDone()).     final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get().     assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1)).     final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next().     assertThat(metric.getId(), equalTo(TEST_METRIC_NAME)).     assertThat(metric.getValue(), equalTo(Integer.toString(TEST_METRIC_VALUE))). }
false;public;0;16;;@Test public void testReturnEmptyListIfRequestedMetricIsUnknown() throws Exception {     final CompletableFuture<MetricCollectionResponseBody> completableFuture = testMetricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.singletonMap(METRICS_FILTER_QUERY_PARAM, Collections.singletonList("unknown_metric"))), mockDispatcherGateway).     assertTrue(completableFuture.isDone()).     final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get().     assertThat(metricCollectionResponseBody.getMetrics(), empty()). }
false;protected;2;8;;@Nullable @Override protected MetricStore.ComponentMetricStore getComponentMetricStore(HandlerRequest<EmptyRequestBody, TestMessageParameters> request, MetricStore metricStore) {     return returnComponentMetricStore ? metricStore.getJobManager() : null. }
false;public;0;4;;@Override public TestMessageParameters getUnresolvedMessageParameters() {     return new TestMessageParameters(). }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return "/". }
false;public;0;4;;@Override public String getDescription() {     return "". }
false;public;0;4;;@Override public Collection<MessagePathParameter<?>> getPathParameters() {     return Collections.emptyList(). }
false;public;0;4;;@Override public Collection<MessageQueryParameter<?>> getQueryParameters() {     return Collections.singletonList(new MetricsFilterParameter()). }
