commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void matchPreviousAllocationOverridesPreferredLocation() {     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml2), Collections.singleton(aid3)).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertEquals(ssc3, match.get().getSlotInfo()).     slotProfile = new SlotProfile(resourceProfile, Arrays.asList(tmlX, tml1), new HashSet<>(Arrays.asList(aidX, aid2))).     match = runMatching(slotProfile).     Assert.assertEquals(ssc2, match.get().getSlotInfo()). }
false;public;0;8;;@Test public void matchPreviousLocationNotAvailableButByLocality() {     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml4), Collections.singleton(aidX)).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertEquals(ssc4, match.get().getSlotInfo()). }
false;public;0;13;;@Test public void matchPreviousLocationNotAvailableAndAllOthersBlacklisted() {     HashSet<AllocationID> blacklisted = new HashSet<>(4).     blacklisted.add(aid1).     blacklisted.add(aid2).     blacklisted.add(aid3).     blacklisted.add(aid4).     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml4), Collections.singletonList(aidX), blacklisted).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     // there should be no valid option left and we expect null as return     Assert.assertFalse(match.isPresent()). }
false;public;0;12;;@Test public void matchPreviousLocationNotAvailableAndSomeOthersBlacklisted() {     HashSet<AllocationID> blacklisted = new HashSet<>(3).     blacklisted.add(aid1).     blacklisted.add(aid3).     blacklisted.add(aid4).     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml4), Collections.singletonList(aidX), blacklisted).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     // we expect that the candidate that is not blacklisted is returned     Assert.assertEquals(ssc2, match.get().getSlotInfo()). }
