commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Parameterized.Parameters(name = "Credit-based = {0}") public static List<Boolean> parameters() {     return Arrays.asList(Boolean.TRUE, Boolean.FALSE). }
true;public;0;63;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool  * instances for various types of input and output channels.  */ ;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool  * instances for various types of input and output channels.  */ @Test public void testRegisterTaskUsesBoundedBuffers() throws Exception {     final NetworkEnvironment network = new NetworkEnvironment(numBuffers, memorySegmentSize, 0, 0, 2, 8, enableCreditBasedFlowControl).     // result partitions     ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2).     ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2).     ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2).     ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8).     final ResultPartition[] resultPartitions = new ResultPartition[] { rp1, rp2, rp3, rp4 }.     // input gates     SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2).     SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2).     SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2).     SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 8).     final SingleInputGate[] inputGates = new SingleInputGate[] { ig1, ig2, ig3, ig4 }.     // overall task to register     Task task = mock(Task.class).     when(task.getProducedPartitions()).thenReturn(resultPartitions).     when(task.getAllInputGates()).thenReturn(inputGates).     network.registerTask(task).     // verify buffer pools for the result partitions     assertEquals(rp1.getNumberOfSubpartitions(), rp1.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(rp2.getNumberOfSubpartitions(), rp2.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(rp3.getNumberOfSubpartitions(), rp3.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(rp4.getNumberOfSubpartitions(), rp4.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments()).     // verify buffer pools for the input gates (NOTE: credit-based uses minimum required buffers     // for exclusive buffers not managed by the buffer pool)     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 8, ig4.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 8 : 8 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments()).     int invokations = enableCreditBasedFlowControl ? 1 : 0.     verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     for (ResultPartition rp : resultPartitions) {         rp.release().     }     for (SingleInputGate ig : inputGates) {         ig.releaseAllResources().     }     network.shutdown(). }
true;public;0;14;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool  * instances for various types of input and output channels working with the bare minimum of  * required buffers.  */ ;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool  * instances for various types of input and output channels working with the bare minimum of  * required buffers.  */ @Test public void testRegisterTaskWithLimitedBuffers() throws Exception {     final int bufferCount.     // outgoing: 1 buffer per channel (always)     if (!enableCreditBasedFlowControl) {         // incoming: 1 buffer per channel         bufferCount = 20.     } else {         // incoming: 2 exclusive buffers per channel         bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue().     }     testRegisterTaskWithLimitedBuffers(bufferCount). }
true;public;0;16;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of  * required buffers is not available (we are one buffer short).  */ ;/**  * Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of  * required buffers is not available (we are one buffer short).  */ @Test public void testRegisterTaskWithInsufficientBuffers() throws Exception {     final int bufferCount.     // outgoing: 1 buffer per channel (always)     if (!enableCreditBasedFlowControl) {         // incoming: 1 buffer per channel         bufferCount = 19.     } else {         // incoming: 2 exclusive buffers per channel         bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue() - 1.     }     expectedException.expect(IOException.class).     expectedException.expectMessage("Insufficient number of network buffers").     testRegisterTaskWithLimitedBuffers(bufferCount). }
false;private;1;82;;private void testRegisterTaskWithLimitedBuffers(int bufferPoolSize) throws Exception {     final NetworkEnvironment network = new NetworkEnvironment(bufferPoolSize, memorySegmentSize, 0, 0, 2, 8, enableCreditBasedFlowControl).     final ConnectionManager connManager = createDummyConnectionManager().     // result partitions     ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2).     ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2).     ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2).     ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 4).     final ResultPartition[] resultPartitions = new ResultPartition[] { rp1, rp2, rp3, rp4 }.     // input gates     SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2).     SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2).     SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2).     SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 4).     final SingleInputGate[] inputGates = new SingleInputGate[] { ig1, ig2, ig3, ig4 }.     // (note that this does not obey the partition types which is ok for the scope of the test)     if (enableCreditBasedFlowControl) {         createRemoteInputChannel(ig4, 0, rp1, connManager).         createRemoteInputChannel(ig4, 0, rp2, connManager).         createRemoteInputChannel(ig4, 0, rp3, connManager).         createRemoteInputChannel(ig4, 0, rp4, connManager).         createRemoteInputChannel(ig1, 1, rp1, connManager).         createRemoteInputChannel(ig1, 1, rp4, connManager).         createRemoteInputChannel(ig2, 1, rp2, connManager).         createRemoteInputChannel(ig2, 2, rp4, connManager).         createRemoteInputChannel(ig3, 1, rp3, connManager).         createRemoteInputChannel(ig3, 3, rp4, connManager).     }     // overall task to register     Task task = mock(Task.class).     when(task.getProducedPartitions()).thenReturn(resultPartitions).     when(task.getAllInputGates()).thenReturn(inputGates).     network.registerTask(task).     // verify buffer pools for the result partitions     assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(4 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments()).     for (ResultPartition rp : resultPartitions) {         assertEquals(rp.getNumberOfSubpartitions(), rp.getBufferPool().getNumberOfRequiredMemorySegments()).         assertEquals(rp.getNumberOfSubpartitions(), rp.getBufferPool().getNumBuffers()).     }     // verify buffer pools for the input gates (NOTE: credit-based uses minimum required buffers     // for exclusive buffers not managed by the buffer pool)     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 0 : 4, ig4.getBufferPool().getNumberOfRequiredMemorySegments()).     assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments()).     assertEquals(enableCreditBasedFlowControl ? 8 : 4 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments()).     int invokations = enableCreditBasedFlowControl ? 1 : 0.     verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2).     for (ResultPartition rp : resultPartitions) {         rp.release().     }     for (SingleInputGate ig : inputGates) {         ig.releaseAllResources().     }     network.shutdown(). }
true;private,static;2;15;/**  * Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside  * {@link NetworkEnvironment#registerTask(Task)}.  *  * @param partitionType  * 		the produced partition type  * @param channels  * 		the number of output channels  *  * @return instance with minimal data set and some mocks so that it is useful for {@link  * NetworkEnvironment#registerTask(Task)}  */ ;/**  * Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside  * {@link NetworkEnvironment#registerTask(Task)}.  *  * @param partitionType  * 		the produced partition type  * @param channels  * 		the number of output channels  *  * @return instance with minimal data set and some mocks so that it is useful for {@link  * NetworkEnvironment#registerTask(Task)}  */ private static ResultPartition createResultPartition(final ResultPartitionType partitionType, final int channels) {     return new ResultPartition("TestTask-" + partitionType + ":" + channels, mock(TaskActions.class), new JobID(), new ResultPartitionID(), partitionType, channels, channels, mock(ResultPartitionManager.class), new NoOpResultPartitionConsumableNotifier(), mock(IOManager.class), false). }
true;private;2;13;/**  * Helper to create spy of a {@link SingleInputGate} for use by a {@link Task} inside  * {@link NetworkEnvironment#registerTask(Task)}.  *  * @param partitionType  * 		the consumed partition type  * @param channels  * 		the number of input channels  *  * @return input gate with some fake settings  */ ;/**  * Helper to create spy of a {@link SingleInputGate} for use by a {@link Task} inside  * {@link NetworkEnvironment#registerTask(Task)}.  *  * @param partitionType  * 		the consumed partition type  * @param channels  * 		the number of input channels  *  * @return input gate with some fake settings  */ private SingleInputGate createSingleInputGate(final ResultPartitionType partitionType, final int channels) {     return spy(new SingleInputGate("Test Task Name", new JobID(), new IntermediateDataSetID(), partitionType, 0, channels, mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(), enableCreditBasedFlowControl)). }
false;private,static;4;16;;private static void createRemoteInputChannel(SingleInputGate inputGate, int channelIndex, ResultPartition resultPartition, ConnectionManager connManager) {     RemoteInputChannel channel = new RemoteInputChannel(inputGate, channelIndex, resultPartition.getPartitionId(), mock(ConnectionID.class), connManager, 0, 0, UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup()).     inputGate.setInputChannel(resultPartition.getPartitionId().getPartitionId(), channel). }
