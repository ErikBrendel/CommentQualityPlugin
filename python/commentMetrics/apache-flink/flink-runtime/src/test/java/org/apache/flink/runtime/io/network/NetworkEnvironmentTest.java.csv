# id;timestamp;commentText;codeText;commentWords;codeWords
NetworkEnvironmentTest -> private static ResultPartition createPartition( 		Task owningTask, 		String name, 		JobID jobId, 		boolean eagerlyDeployConsumers, 		NetworkEnvironment env, 		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier);1475219249;Helper to create a mock result partition.;private static ResultPartition createPartition(_		Task owningTask,_		String name,_		JobID jobId,_		boolean eagerlyDeployConsumers,_		NetworkEnvironment env,_		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier) {__		return new ResultPartition(_			name,_			owningTask,_			jobId,_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			eagerlyDeployConsumers,_			1,_			env.getResultPartitionManager(),_			resultPartitionConsumableNotifier,_			mock(IOManager.class),_			env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,task,owning,task,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,result,partition,consumable,notifier,result,partition,consumable,notifier,return,new,result,partition,name,owning,task,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,result,partition,manager,result,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> private static ResultPartition createPartition( 		Task owningTask, 		String name, 		JobID jobId, 		boolean eagerlyDeployConsumers, 		NetworkEnvironment env, 		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier);1478513533;Helper to create a mock result partition.;private static ResultPartition createPartition(_		Task owningTask,_		String name,_		JobID jobId,_		boolean eagerlyDeployConsumers,_		NetworkEnvironment env,_		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier) {__		return new ResultPartition(_			name,_			owningTask,_			jobId,_			new ResultPartitionID(),_			ResultPartitionType.PIPELINED,_			eagerlyDeployConsumers,_			1,_			env.getResultPartitionManager(),_			resultPartitionConsumableNotifier,_			mock(IOManager.class),_			env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,task,owning,task,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,result,partition,consumable,notifier,result,partition,consumable,notifier,return,new,result,partition,name,owning,task,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,result,partition,manager,result,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1489149058;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the nummer of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,nummer,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1507647199;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the nummer of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,nummer,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1507728812;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the nummer of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,nummer,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1511516912;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the nummer of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,nummer,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1513102147;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the nummer of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,nummer,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1515177485;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1515507952;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1518785736;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1518785736;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1524407315;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1525116906;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			mock(ResultPartitionConsumableNotifier.class),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,mock,result,partition,consumable,notifier,class,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1540207709;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			new NoOpResultPartitionConsumableNotifier(),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,new,no,op,result,partition,consumable,notifier,mock,iomanager,class,false
NetworkEnvironmentTest -> private static ResultPartition createResultPartition( 			final ResultPartitionType partitionType, final int channels);1540301035;Helper to create simple {@link ResultPartition} instance for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the produced partition type_@param channels_the number of output channels__@return instance with minimal data set and some mocks so that it is useful for {@link_NetworkEnvironment#registerTask(Task)};private static ResultPartition createResultPartition(_			final ResultPartitionType partitionType, final int channels) {_		return new ResultPartition(_			"TestTask-" + partitionType + ":" + channels,_			mock(TaskActions.class),_			new JobID(),_			new ResultPartitionID(),_			partitionType,_			channels,_			channels,_			mock(ResultPartitionManager.class),_			new NoOpResultPartitionConsumableNotifier(),_			mock(IOManager.class),_			false)__	};helper,to,create,simple,link,result,partition,instance,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,produced,partition,type,param,channels,the,number,of,output,channels,return,instance,with,minimal,data,set,and,some,mocks,so,that,it,is,useful,for,link,network,environment,register,task,task;private,static,result,partition,create,result,partition,final,result,partition,type,partition,type,final,int,channels,return,new,result,partition,test,task,partition,type,channels,mock,task,actions,class,new,job,id,new,result,partition,id,partition,type,channels,channels,mock,result,partition,manager,class,new,no,op,result,partition,consumable,notifier,mock,iomanager,class,false
NetworkEnvironmentTest -> private SingleInputGate createSingleInputGate( 			final ResultPartitionType partitionType, final int channels);1525116906;Helper to create spy of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return input gate with some fake settings;private SingleInputGate createSingleInputGate(_			final ResultPartitionType partitionType, final int channels) {_		return spy(new SingleInputGate(_			"Test Task Name",_			new JobID(),_			new IntermediateDataSetID(),_			partitionType,_			0,_			channels,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			enableCreditBasedFlowControl))__	};helper,to,create,spy,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,input,gate,with,some,fake,settings;private,single,input,gate,create,single,input,gate,final,result,partition,type,partition,type,final,int,channels,return,spy,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,partition,type,0,channels,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,enable,credit,based,flow,control
NetworkEnvironmentTest -> private SingleInputGate createSingleInputGate( 			final ResultPartitionType partitionType, final int channels);1540207709;Helper to create spy of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return input gate with some fake settings;private SingleInputGate createSingleInputGate(_			final ResultPartitionType partitionType, final int channels) {_		return spy(new SingleInputGate(_			"Test Task Name",_			new JobID(),_			new IntermediateDataSetID(),_			partitionType,_			0,_			channels,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			enableCreditBasedFlowControl))__	};helper,to,create,spy,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,input,gate,with,some,fake,settings;private,single,input,gate,create,single,input,gate,final,result,partition,type,partition,type,final,int,channels,return,spy,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,partition,type,0,channels,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,enable,credit,based,flow,control
NetworkEnvironmentTest -> private SingleInputGate createSingleInputGate( 			final ResultPartitionType partitionType, final int channels);1540301035;Helper to create spy of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return input gate with some fake settings;private SingleInputGate createSingleInputGate(_			final ResultPartitionType partitionType, final int channels) {_		return spy(new SingleInputGate(_			"Test Task Name",_			new JobID(),_			new IntermediateDataSetID(),_			partitionType,_			0,_			channels,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			enableCreditBasedFlowControl))__	};helper,to,create,spy,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,input,gate,with,some,fake,settings;private,single,input,gate,create,single,input,gate,final,result,partition,type,partition,type,final,int,channels,return,spy,new,single,input,gate,test,task,name,new,job,id,new,intermediate,data,set,id,partition,type,0,channels,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,enable,credit,based,flow,control
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1489149058;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the nummer of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))__		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,nummer,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1507647199;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the nummer of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,nummer,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1507728812;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the nummer of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,nummer,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1511516912;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the nummer of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,nummer,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1513102147;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the nummer of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,nummer,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1515177485;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1515507952;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(channels * 2 + 8, bp.getMaxNumberOfMemorySegments())__				} else if (partitionType == ResultPartitionType.PIPELINED_CREDIT_BASED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,channels,2,8,bp,get,max,number,of,memory,segments,else,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1518785736;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> private static SingleInputGate createSingleInputGateMock( 			final ResultPartitionType partitionType, final int channels);1518785736;Helper to create a mock of a {@link SingleInputGate} for use by a {@link Task} inside_{@link NetworkEnvironment#registerTask(Task)}.__@param partitionType_the consumed partition type_@param channels_the number of input channels__@return mock with minimal functionality necessary by {@link NetworkEnvironment#registerTask(Task)};private static SingleInputGate createSingleInputGateMock(_			final ResultPartitionType partitionType, final int channels) {_		SingleInputGate ig = mock(SingleInputGate.class)__		when(ig.getConsumedPartitionType()).thenReturn(partitionType)__		when(ig.getNumberOfInputChannels()).thenReturn(channels)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(final InvocationOnMock invocation) throws Throwable {_				BufferPool bp = invocation.getArgumentAt(0, BufferPool.class)__				if (partitionType == ResultPartitionType.PIPELINED_BOUNDED) {_					assertEquals(8, bp.getMaxNumberOfMemorySegments())__				} else {_					assertEquals(Integer.MAX_VALUE, bp.getMaxNumberOfMemorySegments())__				}_				return null__			}_		}).when(ig).setBufferPool(any(BufferPool.class))___		return ig__	};helper,to,create,a,mock,of,a,link,single,input,gate,for,use,by,a,link,task,inside,link,network,environment,register,task,task,param,partition,type,the,consumed,partition,type,param,channels,the,number,of,input,channels,return,mock,with,minimal,functionality,necessary,by,link,network,environment,register,task,task;private,static,single,input,gate,create,single,input,gate,mock,final,result,partition,type,partition,type,final,int,channels,single,input,gate,ig,mock,single,input,gate,class,when,ig,get,consumed,partition,type,then,return,partition,type,when,ig,get,number,of,input,channels,then,return,channels,do,answer,new,answer,void,override,public,void,answer,final,invocation,on,mock,invocation,throws,throwable,buffer,pool,bp,invocation,get,argument,at,0,buffer,pool,class,if,partition,type,result,partition,type,assert,equals,8,bp,get,max,number,of,memory,segments,else,assert,equals,integer,bp,get,max,number,of,memory,segments,return,null,when,ig,set,buffer,pool,any,buffer,pool,class,return,ig
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithLimitedBuffers() throws Exception;1524407315;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels working with the bare minimum of_required buffers.;@Test_	public void testRegisterTaskWithLimitedBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 20__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue()__		}__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels,working,with,the,bare,minimum,of,required,buffers;test,public,void,test,register,task,with,limited,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,20,else,buffer,count,10,10,task,manager,options,default,value,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithLimitedBuffers() throws Exception;1525116906;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels working with the bare minimum of_required buffers.;@Test_	public void testRegisterTaskWithLimitedBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 20__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue()__		}__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels,working,with,the,bare,minimum,of,required,buffers;test,public,void,test,register,task,with,limited,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,20,else,buffer,count,10,10,task,manager,options,default,value,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithLimitedBuffers() throws Exception;1540207709;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels working with the bare minimum of_required buffers.;@Test_	public void testRegisterTaskWithLimitedBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 20__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue()__		}__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels,working,with,the,bare,minimum,of,required,buffers;test,public,void,test,register,task,with,limited,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,20,else,buffer,count,10,10,task,manager,options,default,value,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithLimitedBuffers() throws Exception;1540301035;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels working with the bare minimum of_required buffers.;@Test_	public void testRegisterTaskWithLimitedBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 20__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue()__		}__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels,working,with,the,bare,minimum,of,required,buffers;test,public,void,test,register,task,with,limited,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,20,else,buffer,count,10,10,task,manager,options,default,value,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1452854660;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_				20,_				1024,_				MemoryType.HEAP,_				IOManager.IOMode.SYNC,_				Some.<NettyConfig>empty(),_				new Tuple2<>(0, 0))___		NetworkEnvironment env = new NetworkEnvironment(_				TestingUtils.defaultExecutionContext(),_				new FiniteDuration(30, TimeUnit.SECONDS),_				config)___		_		env.associateWithTaskManagerAndJobManager(_				jobManager,_				DummyActorGateway.INSTANCE)___		_		JobID jobId = new JobID()___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition("p1", jobId, true, env)__		partitions[1] = createPartition("p2", jobId, false, env)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		Task mockTask = mock(Task.class)__		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,some,netty,config,empty,new,tuple2,0,0,network,environment,env,new,network,environment,testing,utils,default,execution,context,new,finite,duration,30,time,unit,seconds,config,env,associate,with,task,manager,and,job,manager,job,manager,dummy,actor,gateway,instance,job,id,job,id,new,job,id,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,p1,job,id,true,env,partitions,1,create,partition,p2,job,id,false,env,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,task,mock,task,mock,task,class,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1454855326;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_				20,_				1024,_				MemoryType.HEAP,_				IOManager.IOMode.SYNC,_				Some.<NettyConfig>empty(),_				new Tuple2<>(0, 0))___		NetworkEnvironment env = new NetworkEnvironment(_				TestingUtils.defaultExecutionContext(),_				new FiniteDuration(30, TimeUnit.SECONDS),_				config)___		_		env.associateWithTaskManagerAndJobManager(_				jobManager,_				DummyActorGateway.INSTANCE)___		_		JobID jobId = new JobID()___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition("p1", jobId, true, env)__		partitions[1] = createPartition("p2", jobId, false, env)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		Task mockTask = mock(Task.class)__		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,some,netty,config,empty,new,tuple2,0,0,network,environment,env,new,network,environment,testing,utils,default,execution,context,new,finite,duration,30,time,unit,seconds,config,env,associate,with,task,manager,and,job,manager,job,manager,dummy,actor,gateway,instance,job,id,job,id,new,job,id,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,p1,job,id,true,env,partitions,1,create,partition,p2,job,id,false,env,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,task,mock,task,mock,task,class,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1470753725;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_				20,_				1024,_				MemoryType.HEAP,_				IOManager.IOMode.SYNC,_				Some.<NettyConfig>empty(),_				new Tuple2<>(0, 0))___		NetworkEnvironment env = new NetworkEnvironment(_				TestingUtils.defaultExecutionContext(),_				new FiniteDuration(30, TimeUnit.SECONDS),_				config,_				new InstanceConnectionInfo(InetAddress.getLocalHost(), 12232))___		_		env.associateWithTaskManagerAndJobManager(_				jobManager,_				DummyActorGateway.INSTANCE)___		_		JobID jobId = new JobID()___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition("p1", jobId, true, env)__		partitions[1] = createPartition("p2", jobId, false, env)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		Task mockTask = mock(Task.class)__		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,some,netty,config,empty,new,tuple2,0,0,network,environment,env,new,network,environment,testing,utils,default,execution,context,new,finite,duration,30,time,unit,seconds,config,new,instance,connection,info,inet,address,get,local,host,12232,env,associate,with,task,manager,and,job,manager,job,manager,dummy,actor,gateway,instance,job,id,job,id,new,job,id,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,p1,job,id,true,env,partitions,1,create,partition,p2,job,id,false,env,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,task,mock,task,mock,task,class,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1470753725;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_				20,_				1024,_				MemoryType.HEAP,_				IOManager.IOMode.SYNC,_				0,_				0,_				0,_				Some.<NettyConfig>empty(),_				new Tuple2<>(0, 0))___		NetworkEnvironment env = new NetworkEnvironment(_				TestingUtils.defaultExecutionContext(),_				new FiniteDuration(30, TimeUnit.SECONDS),_				config,_				new InstanceConnectionInfo(InetAddress.getLocalHost(), 12232))___		_		env.associateWithTaskManagerAndJobManager(_				jobManager,_				DummyActorGateway.INSTANCE)___		_		JobID jobId = new JobID()___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition("p1", jobId, true, env)__		partitions[1] = createPartition("p2", jobId, false, env)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		Task mockTask = mock(Task.class)__		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,0,0,0,some,netty,config,empty,new,tuple2,0,0,network,environment,env,new,network,environment,testing,utils,default,execution,context,new,finite,duration,30,time,unit,seconds,config,new,instance,connection,info,inet,address,get,local,host,12232,env,associate,with,task,manager,and,job,manager,job,manager,dummy,actor,gateway,instance,job,id,job,id,new,job,id,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,p1,job,id,true,env,partitions,1,create,partition,p2,job,id,false,env,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,task,mock,task,mock,task,class,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1472821521;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		final ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_			20,_			1024,_			MemoryType.HEAP,_			IOManager.IOMode.SYNC,_			0,_			0,_			0,_			Some.<NettyConfig>empty(),_			0,_			0)___		NetworkEnvironment env = new NetworkEnvironment(_			new NetworkBufferPool(config.numNetworkBuffers(), config.networkBufferSize(), config.memoryType()),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			config.ioMode(),_			config.partitionRequestInitialBackoff(),_			config.partitinRequestMaxBackoff())___		env.start()___		JobManagerCommunicationFactory jobManagerCommunicationFactory = mock(JobManagerCommunicationFactory.class)___		when(jobManagerCommunicationFactory.createResultPartitionConsumableNotifier(any(Task.class))).thenAnswer(new Answer<ResultPartitionConsumableNotifier>() {_			@Override_			public ResultPartitionConsumableNotifier answer(InvocationOnMock invocation) throws Throwable {_				return new ActorGatewayResultPartitionConsumableNotifier(_					TestingUtils.defaultExecutionContext(),_					jobManager,_					(Task)invocation.getArguments()[0],_					new FiniteDuration(30, TimeUnit.SECONDS))__			}_		})___		_		JobID jobId = new JobID()__		Task mockTask = mock(Task.class)___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition(mockTask, "p1", jobId, true, env, jobManagerCommunicationFactory)__		partitions[1] = createPartition(mockTask, "p2", jobId, false, env, jobManagerCommunicationFactory)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,final,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,0,0,0,some,netty,config,empty,0,0,network,environment,env,new,network,environment,new,network,buffer,pool,config,num,network,buffers,config,network,buffer,size,config,memory,type,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,config,io,mode,config,partition,request,initial,backoff,config,partitin,request,max,backoff,env,start,job,manager,communication,factory,job,manager,communication,factory,mock,job,manager,communication,factory,class,when,job,manager,communication,factory,create,result,partition,consumable,notifier,any,task,class,then,answer,new,answer,result,partition,consumable,notifier,override,public,result,partition,consumable,notifier,answer,invocation,on,mock,invocation,throws,throwable,return,new,actor,gateway,result,partition,consumable,notifier,testing,utils,default,execution,context,job,manager,task,invocation,get,arguments,0,new,finite,duration,30,time,unit,seconds,job,id,job,id,new,job,id,task,mock,task,mock,task,class,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,mock,task,p1,job,id,true,env,job,manager,communication,factory,partitions,1,create,partition,mock,task,p2,job,id,false,env,job,manager,communication,factory,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1475219249;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		final ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_			20,_			1024,_			MemoryType.HEAP,_			IOManager.IOMode.SYNC,_			0,_			0,_			0,_			Some.<NettyConfig>empty(),_			0,_			0)___		NetworkEnvironment env = new NetworkEnvironment(_			new NetworkBufferPool(config.numNetworkBuffers(), config.networkBufferSize(), config.memoryType()),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			config.ioMode(),_			config.partitionRequestInitialBackoff(),_			config.partitinRequestMaxBackoff())___		env.start()___		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier = new ActorGatewayResultPartitionConsumableNotifier(_			TestingUtils.defaultExecutionContext(),_			jobManager,_			new FiniteDuration(30L, TimeUnit.SECONDS))___		_		JobID jobId = new JobID()__		Task mockTask = mock(Task.class)___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition(mockTask, "p1", jobId, true, env, resultPartitionConsumableNotifier)__		partitions[1] = createPartition(mockTask, "p2", jobId, false, env, resultPartitionConsumableNotifier)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,final,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,0,0,0,some,netty,config,empty,0,0,network,environment,env,new,network,environment,new,network,buffer,pool,config,num,network,buffers,config,network,buffer,size,config,memory,type,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,config,io,mode,config,partition,request,initial,backoff,config,partitin,request,max,backoff,env,start,result,partition,consumable,notifier,result,partition,consumable,notifier,new,actor,gateway,result,partition,consumable,notifier,testing,utils,default,execution,context,job,manager,new,finite,duration,30l,time,unit,seconds,job,id,job,id,new,job,id,task,mock,task,mock,task,class,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,mock,task,p1,job,id,true,env,result,partition,consumable,notifier,partitions,1,create,partition,mock,task,p2,job,id,false,env,result,partition,consumable,notifier,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> @Test 	@SuppressWarnings("unchecked") 	public void testEagerlyDeployConsumers() throws Exception;1478513533;Registers a task with an eager and non-eager partition at the network_environment and verifies that there is exactly on schedule or update_message to the job manager for the eager partition.;@Test_	@SuppressWarnings("unchecked")_	public void testEagerlyDeployConsumers() throws Exception {_		_		final ActorGateway jobManager = mock(ActorGateway.class)__		when(jobManager.ask(anyObject(), any(FiniteDuration.class)))_				.thenReturn(new Promise.DefaultPromise<>().future())___		_		NetworkEnvironmentConfiguration config = new NetworkEnvironmentConfiguration(_			20,_			1024,_			MemoryType.HEAP,_			IOManager.IOMode.SYNC,_			Some.<NettyConfig>empty(),_			0,_			0)___		NetworkEnvironment env = new NetworkEnvironment(_			new NetworkBufferPool(config.numNetworkBuffers(), config.networkBufferSize(), config.memoryType()),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			config.ioMode(),_			config.partitionRequestInitialBackoff(),_			config.partitinRequestMaxBackoff())___		env.start()___		ResultPartitionConsumableNotifier resultPartitionConsumableNotifier = new ActorGatewayResultPartitionConsumableNotifier(_			TestingUtils.defaultExecutionContext(),_			jobManager,_			new FiniteDuration(30L, TimeUnit.SECONDS))___		_		JobID jobId = new JobID()__		Task mockTask = mock(Task.class)___		ResultPartition[] partitions = new ResultPartition[2]__		partitions[0] = createPartition(mockTask, "p1", jobId, true, env, resultPartitionConsumableNotifier)__		partitions[1] = createPartition(mockTask, "p2", jobId, false, env, resultPartitionConsumableNotifier)___		ResultPartitionWriter[] writers = new ResultPartitionWriter[2]__		writers[0] = new ResultPartitionWriter(partitions[0])__		writers[1] = new ResultPartitionWriter(partitions[1])___		when(mockTask.getAllInputGates()).thenReturn(new SingleInputGate[0])__		when(mockTask.getAllWriters()).thenReturn(writers)__		when(mockTask.getProducedPartitions()).thenReturn(partitions)___		env.registerTask(mockTask)___		_		ResultPartitionID eagerPartitionId = partitions[0].getPartitionId()___		verify(jobManager, times(1)).ask(_				eq(new ScheduleOrUpdateConsumers(jobId, eagerPartitionId)),_				any(FiniteDuration.class))__	};registers,a,task,with,an,eager,and,non,eager,partition,at,the,network,environment,and,verifies,that,there,is,exactly,on,schedule,or,update,message,to,the,job,manager,for,the,eager,partition;test,suppress,warnings,unchecked,public,void,test,eagerly,deploy,consumers,throws,exception,final,actor,gateway,job,manager,mock,actor,gateway,class,when,job,manager,ask,any,object,any,finite,duration,class,then,return,new,promise,default,promise,future,network,environment,configuration,config,new,network,environment,configuration,20,1024,memory,type,heap,iomanager,iomode,sync,some,netty,config,empty,0,0,network,environment,env,new,network,environment,new,network,buffer,pool,config,num,network,buffers,config,network,buffer,size,config,memory,type,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,config,io,mode,config,partition,request,initial,backoff,config,partitin,request,max,backoff,env,start,result,partition,consumable,notifier,result,partition,consumable,notifier,new,actor,gateway,result,partition,consumable,notifier,testing,utils,default,execution,context,job,manager,new,finite,duration,30l,time,unit,seconds,job,id,job,id,new,job,id,task,mock,task,mock,task,class,result,partition,partitions,new,result,partition,2,partitions,0,create,partition,mock,task,p1,job,id,true,env,result,partition,consumable,notifier,partitions,1,create,partition,mock,task,p2,job,id,false,env,result,partition,consumable,notifier,result,partition,writer,writers,new,result,partition,writer,2,writers,0,new,result,partition,writer,partitions,0,writers,1,new,result,partition,writer,partitions,1,when,mock,task,get,all,input,gates,then,return,new,single,input,gate,0,when,mock,task,get,all,writers,then,return,writers,when,mock,task,get,produced,partitions,then,return,partitions,env,register,task,mock,task,result,partition,id,eager,partition,id,partitions,0,get,partition,id,verify,job,manager,times,1,ask,eq,new,schedule,or,update,consumers,job,id,eager,partition,id,any,finite,duration,class
NetworkEnvironmentTest -> private static ResultPartition createPartition( 			String name, 			JobID jobId, 			boolean eagerlyDeployConsumers, 			NetworkEnvironment env);1452854660;Helper to create a mock result partition.;private static ResultPartition createPartition(_			String name,_			JobID jobId,_			boolean eagerlyDeployConsumers,_			NetworkEnvironment env) {__		return new ResultPartition(_				name,_				jobId,_				new ResultPartitionID(),_				ResultPartitionType.PIPELINED,_				eagerlyDeployConsumers,_				1,_				env.getPartitionManager(),_				env.getPartitionConsumableNotifier(),_				mock(IOManager.class),_				env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,return,new,result,partition,name,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,partition,manager,env,get,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> private static ResultPartition createPartition( 			String name, 			JobID jobId, 			boolean eagerlyDeployConsumers, 			NetworkEnvironment env);1454855326;Helper to create a mock result partition.;private static ResultPartition createPartition(_			String name,_			JobID jobId,_			boolean eagerlyDeployConsumers,_			NetworkEnvironment env) {__		return new ResultPartition(_				name,_				jobId,_				new ResultPartitionID(),_				ResultPartitionType.PIPELINED,_				eagerlyDeployConsumers,_				1,_				env.getPartitionManager(),_				env.getPartitionConsumableNotifier(),_				mock(IOManager.class),_				env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,return,new,result,partition,name,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,partition,manager,env,get,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> private static ResultPartition createPartition( 			String name, 			JobID jobId, 			boolean eagerlyDeployConsumers, 			NetworkEnvironment env);1470753725;Helper to create a mock result partition.;private static ResultPartition createPartition(_			String name,_			JobID jobId,_			boolean eagerlyDeployConsumers,_			NetworkEnvironment env) {__		return new ResultPartition(_				name,_				jobId,_				new ResultPartitionID(),_				ResultPartitionType.PIPELINED,_				eagerlyDeployConsumers,_				1,_				env.getPartitionManager(),_				env.getPartitionConsumableNotifier(),_				mock(IOManager.class),_				env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,return,new,result,partition,name,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,partition,manager,env,get,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> private static ResultPartition createPartition( 			String name, 			JobID jobId, 			boolean eagerlyDeployConsumers, 			NetworkEnvironment env);1470753725;Helper to create a mock result partition.;private static ResultPartition createPartition(_			String name,_			JobID jobId,_			boolean eagerlyDeployConsumers,_			NetworkEnvironment env) {__		return new ResultPartition(_				name,_				jobId,_				new ResultPartitionID(),_				ResultPartitionType.PIPELINED,_				eagerlyDeployConsumers,_				1,_				env.getPartitionManager(),_				env.getPartitionConsumableNotifier(),_				mock(IOManager.class),_				env.getDefaultIOMode())__	};helper,to,create,a,mock,result,partition;private,static,result,partition,create,partition,string,name,job,id,job,id,boolean,eagerly,deploy,consumers,network,environment,env,return,new,result,partition,name,job,id,new,result,partition,id,result,partition,type,pipelined,eagerly,deploy,consumers,1,env,get,partition,manager,env,get,partition,consumable,notifier,mock,iomanager,class,env,get,default,iomode
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1489149058;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize, MemoryType.HEAP),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}__		final ResultPartitionWriter[] resultPartitionWriters = new ResultPartitionWriter[] {_			new ResultPartitionWriter(rp1), new ResultPartitionWriter(rp2),_			new ResultPartitionWriter(rp3), new ResultPartitionWriter(rp4)}___		_		final SingleInputGate[] inputGates = new SingleInputGate[] {_			createSingleInputGateMock(ResultPartitionType.PIPELINED, 2),_			createSingleInputGateMock(ResultPartitionType.BLOCKING, 2),_			createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2),_			createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 8)}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllWriters()).thenReturn(resultPartitionWriters)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,memory,type,heap,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,final,result,partition,writer,result,partition,writers,new,result,partition,writer,new,result,partition,writer,rp1,new,result,partition,writer,rp2,new,result,partition,writer,rp3,new,result,partition,writer,rp4,final,single,input,gate,input,gates,new,single,input,gate,create,single,input,gate,mock,result,partition,type,pipelined,2,create,single,input,gate,mock,result,partition,type,blocking,2,create,single,input,gate,mock,result,partition,type,2,create,single,input,gate,mock,result,partition,type,8,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,writers,then,return,result,partition,writers,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1507647199;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize, MemoryType.HEAP),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}__		final ResultPartitionWriter[] resultPartitionWriters = new ResultPartitionWriter[] {_			new ResultPartitionWriter(rp1), new ResultPartitionWriter(rp2),_			new ResultPartitionWriter(rp3), new ResultPartitionWriter(rp4)}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllWriters()).thenReturn(resultPartitionWriters)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,memory,type,heap,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,final,result,partition,writer,result,partition,writers,new,result,partition,writer,new,result,partition,writer,rp1,new,result,partition,writer,rp2,new,result,partition,writer,rp3,new,result,partition,writer,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,writers,then,return,result,partition,writers,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1507728812;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize, MemoryType.HEAP),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}__		final ResultPartitionWriter[] resultPartitionWriters = new ResultPartitionWriter[] {_			new ResultPartitionWriter(rp1), new ResultPartitionWriter(rp2),_			new ResultPartitionWriter(rp3), new ResultPartitionWriter(rp4)}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllWriters()).thenReturn(resultPartitionWriters)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,memory,type,heap,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,final,result,partition,writer,result,partition,writers,new,result,partition,writer,new,result,partition,writer,rp1,new,result,partition,writer,rp2,new,result,partition,writer,rp3,new,result,partition,writer,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,writers,then,return,result,partition,writers,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1511516912;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}__		final ResultPartitionWriter[] resultPartitionWriters = new ResultPartitionWriter[] {_			new ResultPartitionWriter(rp1), new ResultPartitionWriter(rp2),_			new ResultPartitionWriter(rp3), new ResultPartitionWriter(rp4)}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllWriters()).thenReturn(resultPartitionWriters)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,final,result,partition,writer,result,partition,writers,new,result,partition,writer,new,result,partition,writer,rp1,new,result,partition,writer,rp2,new,result,partition,writer,rp3,new,result,partition,writer,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,writers,then,return,result,partition,writers,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1513102147;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1515177485;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1515507952;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGateMock(ResultPartitionType.PIPELINED_CREDIT_BASED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig4, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,mock,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig4,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1518785736;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig1, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig1,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1518785736;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8,_			true)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGateMock(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGateMock(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGateMock(ResultPartitionType.PIPELINED_BOUNDED, 2)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		verify(ig1, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(1)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,true,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,mock,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,mock,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,mock,result,partition,type,2,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,verify,ig1,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,1,assign,exclusive,segments,network,get,network,buffer,pool,2,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1524407315;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8,_			enableCreditBasedFlowControl)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		_		assertEquals(rp1.getNumberOfSubpartitions(), rp1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp2.getNumberOfSubpartitions(), rp2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp3.getNumberOfSubpartitions(), rp3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp4.getNumberOfSubpartitions(), rp4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		_		_		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 8, ig4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 8 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments())___		int invokations = enableCreditBasedFlowControl ? 1 : 0__		verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		for (ResultPartition rp : resultPartitions) {_			rp.release()__		}_		for (SingleInputGate ig : inputGates) {_			ig.releaseAllResources()__		}_		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,enable,credit,based,flow,control,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,rp1,get,number,of,subpartitions,rp1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp2,get,number,of,subpartitions,rp2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp3,get,number,of,subpartitions,rp3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp4,get,number,of,subpartitions,rp4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,8,ig4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,ig1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,ig2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,2,2,8,ig3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,8,2,8,ig4,get,buffer,pool,get,max,number,of,memory,segments,int,invokations,enable,credit,based,flow,control,1,0,verify,ig1,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig4,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,for,result,partition,rp,result,partitions,rp,release,for,single,input,gate,ig,input,gates,ig,release,all,resources,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1525116906;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8,_			enableCreditBasedFlowControl)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		_		assertEquals(rp1.getNumberOfSubpartitions(), rp1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp2.getNumberOfSubpartitions(), rp2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp3.getNumberOfSubpartitions(), rp3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp4.getNumberOfSubpartitions(), rp4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		_		_		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 8, ig4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 8 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments())___		int invokations = enableCreditBasedFlowControl ? 1 : 0__		verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		for (ResultPartition rp : resultPartitions) {_			rp.release()__		}_		for (SingleInputGate ig : inputGates) {_			ig.releaseAllResources()__		}_		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,enable,credit,based,flow,control,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,rp1,get,number,of,subpartitions,rp1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp2,get,number,of,subpartitions,rp2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp3,get,number,of,subpartitions,rp3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp4,get,number,of,subpartitions,rp4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,8,ig4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,ig1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,ig2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,2,2,8,ig3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,8,2,8,ig4,get,buffer,pool,get,max,number,of,memory,segments,int,invokations,enable,credit,based,flow,control,1,0,verify,ig1,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig4,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,for,result,partition,rp,result,partitions,rp,release,for,single,input,gate,ig,input,gates,ig,release,all,resources,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1540207709;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {__		final NetworkEnvironment network = new NetworkEnvironment(_			new NetworkBufferPool(numBuffers, memorySegmentSize),_			new LocalConnectionManager(),_			new ResultPartitionManager(),_			new TaskEventDispatcher(),_			new KvStateRegistry(),_			null,_			null,_			IOManager.IOMode.SYNC,_			0,_			0,_			2,_			8,_			enableCreditBasedFlowControl)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		_		assertEquals(rp1.getNumberOfSubpartitions(), rp1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp2.getNumberOfSubpartitions(), rp2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp3.getNumberOfSubpartitions(), rp3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp4.getNumberOfSubpartitions(), rp4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		_		_		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 8, ig4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 8 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments())___		int invokations = enableCreditBasedFlowControl ? 1 : 0__		verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		for (ResultPartition rp : resultPartitions) {_			rp.release()__		}_		for (SingleInputGate ig : inputGates) {_			ig.releaseAllResources()__		}_		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,new,network,buffer,pool,num,buffers,memory,segment,size,new,local,connection,manager,new,result,partition,manager,new,task,event,dispatcher,new,kv,state,registry,null,null,iomanager,iomode,sync,0,0,2,8,enable,credit,based,flow,control,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,rp1,get,number,of,subpartitions,rp1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp2,get,number,of,subpartitions,rp2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp3,get,number,of,subpartitions,rp3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp4,get,number,of,subpartitions,rp4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,8,ig4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,ig1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,ig2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,2,2,8,ig3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,8,2,8,ig4,get,buffer,pool,get,max,number,of,memory,segments,int,invokations,enable,credit,based,flow,control,1,0,verify,ig1,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig4,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,for,result,partition,rp,result,partitions,rp,release,for,single,input,gate,ig,input,gates,ig,release,all,resources,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskUsesBoundedBuffers() throws Exception;1540301035;Verifies that {@link NetworkEnvironment#registerTask(Task)} sets up (un)bounded buffer pool_instances for various types of input and output channels.;@Test_	public void testRegisterTaskUsesBoundedBuffers() throws Exception {_		final NetworkEnvironment network = new NetworkEnvironment(_			numBuffers, memorySegmentSize, 0, 0, 2, 8, enableCreditBasedFlowControl)___		_		ResultPartition rp1 = createResultPartition(ResultPartitionType.PIPELINED, 2)__		ResultPartition rp2 = createResultPartition(ResultPartitionType.BLOCKING, 2)__		ResultPartition rp3 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 2)__		ResultPartition rp4 = createResultPartition(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final ResultPartition[] resultPartitions = new ResultPartition[] {rp1, rp2, rp3, rp4}___		_		SingleInputGate ig1 = createSingleInputGate(ResultPartitionType.PIPELINED, 2)__		SingleInputGate ig2 = createSingleInputGate(ResultPartitionType.BLOCKING, 2)__		SingleInputGate ig3 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 2)__		SingleInputGate ig4 = createSingleInputGate(ResultPartitionType.PIPELINED_BOUNDED, 8)__		final SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4}___		_		Task task = mock(Task.class)__		when(task.getProducedPartitions()).thenReturn(resultPartitions)__		when(task.getAllInputGates()).thenReturn(inputGates)___		network.registerTask(task)___		_		assertEquals(rp1.getNumberOfSubpartitions(), rp1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp2.getNumberOfSubpartitions(), rp2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp3.getNumberOfSubpartitions(), rp3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(rp4.getNumberOfSubpartitions(), rp4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, rp1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, rp2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(2 * 2 + 8, rp3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(8 * 2 + 8, rp4.getBufferPool().getMaxNumberOfMemorySegments())___		_		_		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig1.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig2.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 2, ig3.getBufferPool().getNumberOfRequiredMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 0 : 8, ig4.getBufferPool().getNumberOfRequiredMemorySegments())___		assertEquals(Integer.MAX_VALUE, ig1.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(Integer.MAX_VALUE, ig2.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 2 * 2 + 8, ig3.getBufferPool().getMaxNumberOfMemorySegments())__		assertEquals(enableCreditBasedFlowControl ? 8 : 8 * 2 + 8, ig4.getBufferPool().getMaxNumberOfMemorySegments())___		int invokations = enableCreditBasedFlowControl ? 1 : 0__		verify(ig1, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig2, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig3, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)__		verify(ig4, times(invokations)).assignExclusiveSegments(network.getNetworkBufferPool(), 2)___		for (ResultPartition rp : resultPartitions) {_			rp.release()__		}_		for (SingleInputGate ig : inputGates) {_			ig.releaseAllResources()__		}_		network.shutdown()__	};verifies,that,link,network,environment,register,task,task,sets,up,un,bounded,buffer,pool,instances,for,various,types,of,input,and,output,channels;test,public,void,test,register,task,uses,bounded,buffers,throws,exception,final,network,environment,network,new,network,environment,num,buffers,memory,segment,size,0,0,2,8,enable,credit,based,flow,control,result,partition,rp1,create,result,partition,result,partition,type,pipelined,2,result,partition,rp2,create,result,partition,result,partition,type,blocking,2,result,partition,rp3,create,result,partition,result,partition,type,2,result,partition,rp4,create,result,partition,result,partition,type,8,final,result,partition,result,partitions,new,result,partition,rp1,rp2,rp3,rp4,single,input,gate,ig1,create,single,input,gate,result,partition,type,pipelined,2,single,input,gate,ig2,create,single,input,gate,result,partition,type,blocking,2,single,input,gate,ig3,create,single,input,gate,result,partition,type,2,single,input,gate,ig4,create,single,input,gate,result,partition,type,8,final,single,input,gate,input,gates,new,single,input,gate,ig1,ig2,ig3,ig4,task,task,mock,task,class,when,task,get,produced,partitions,then,return,result,partitions,when,task,get,all,input,gates,then,return,input,gates,network,register,task,task,assert,equals,rp1,get,number,of,subpartitions,rp1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp2,get,number,of,subpartitions,rp2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp3,get,number,of,subpartitions,rp3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,rp4,get,number,of,subpartitions,rp4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,rp1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,rp2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,2,2,8,rp3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,8,2,8,rp4,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig1,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig2,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,2,ig3,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,enable,credit,based,flow,control,0,8,ig4,get,buffer,pool,get,number,of,required,memory,segments,assert,equals,integer,ig1,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,integer,ig2,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,2,2,8,ig3,get,buffer,pool,get,max,number,of,memory,segments,assert,equals,enable,credit,based,flow,control,8,8,2,8,ig4,get,buffer,pool,get,max,number,of,memory,segments,int,invokations,enable,credit,based,flow,control,1,0,verify,ig1,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig2,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig3,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,verify,ig4,times,invokations,assign,exclusive,segments,network,get,network,buffer,pool,2,for,result,partition,rp,result,partitions,rp,release,for,single,input,gate,ig,input,gates,ig,release,all,resources,network,shutdown
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithInsufficientBuffers() throws Exception;1524407315;Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of_required buffers is not available (we are one buffer short).;@Test_	public void testRegisterTaskWithInsufficientBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 19__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue() - 1__		}__		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,fails,if,the,bare,minimum,of,required,buffers,is,not,available,we,are,one,buffer,short;test,public,void,test,register,task,with,insufficient,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,19,else,buffer,count,10,10,task,manager,options,default,value,1,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithInsufficientBuffers() throws Exception;1525116906;Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of_required buffers is not available (we are one buffer short).;@Test_	public void testRegisterTaskWithInsufficientBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 19__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue() - 1__		}__		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,fails,if,the,bare,minimum,of,required,buffers,is,not,available,we,are,one,buffer,short;test,public,void,test,register,task,with,insufficient,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,19,else,buffer,count,10,10,task,manager,options,default,value,1,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithInsufficientBuffers() throws Exception;1540207709;Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of_required buffers is not available (we are one buffer short).;@Test_	public void testRegisterTaskWithInsufficientBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 19__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue() - 1__		}__		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,fails,if,the,bare,minimum,of,required,buffers,is,not,available,we,are,one,buffer,short;test,public,void,test,register,task,with,insufficient,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,19,else,buffer,count,10,10,task,manager,options,default,value,1,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,test,register,task,with,limited,buffers,buffer,count
NetworkEnvironmentTest -> @Test 	public void testRegisterTaskWithInsufficientBuffers() throws Exception;1540301035;Verifies that {@link NetworkEnvironment#registerTask(Task)} fails if the bare minimum of_required buffers is not available (we are one buffer short).;@Test_	public void testRegisterTaskWithInsufficientBuffers() throws Exception {_		final int bufferCount__		_		if (!enableCreditBasedFlowControl) {_			_			bufferCount = 19__		} else {_			_			bufferCount = 10 + 10 * TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL.defaultValue() - 1__		}__		expectedException.expect(IOException.class)__		expectedException.expectMessage("Insufficient number of network buffers")__		testRegisterTaskWithLimitedBuffers(bufferCount)__	};verifies,that,link,network,environment,register,task,task,fails,if,the,bare,minimum,of,required,buffers,is,not,available,we,are,one,buffer,short;test,public,void,test,register,task,with,insufficient,buffers,throws,exception,final,int,buffer,count,if,enable,credit,based,flow,control,buffer,count,19,else,buffer,count,10,10,task,manager,options,default,value,1,expected,exception,expect,ioexception,class,expected,exception,expect,message,insufficient,number,of,network,buffers,test,register,task,with,limited,buffers,buffer,count
