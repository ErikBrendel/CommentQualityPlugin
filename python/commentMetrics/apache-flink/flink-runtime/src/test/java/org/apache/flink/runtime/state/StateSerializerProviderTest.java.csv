commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;// -------------------------------------------------------------------------------- // Tests for #currentSchemaSerializer() // -------------------------------------------------------------------------------- @Test public void testCurrentSchemaSerializerForEagerlyRegisteredStateSerializerProvider() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.V1TestTypeSerializer()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;6;;@Test public void testCurrentSchemaSerializerForLazilyRegisteredStateSerializerProvider() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;7;;// -------------------------------------------------------------------------------- // Tests for #previousSchemaSerializer() // -------------------------------------------------------------------------------- @Test(expected = UnsupportedOperationException.class) public void testPreviousSchemaSerializerForEagerlyRegisteredStateSerializerProvider() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.V1TestTypeSerializer()).     // this should fail with an exception     testProvider.previousSchemaSerializer(). }
false;public;0;6;;@Test public void testPreviousSchemaSerializerForLazilyRegisteredStateSerializerProvider() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     assertTrue(testProvider.previousSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;15;;@Test public void testLazyInstantiationOfPreviousSchemaSerializer() {     // create the provider with an exception throwing snapshot.     // this would throw an exception if the restore serializer was eagerly accessed     StateSerializerProvider<String> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(new ExceptionThrowingSerializerSnapshot()).     try {         // if we fail here, that means the restore serializer was indeed lazily accessed         testProvider.previousSchemaSerializer().         fail("expected to fail when accessing the restore serializer.").     } catch (Exception expected) {     // success     } }
false;public;0;5;;// -------------------------------------------------------------------------------- // Tests for #registerNewSerializerForRestoredState(TypeSerializer) // -------------------------------------------------------------------------------- @Test(expected = UnsupportedOperationException.class) public void testRegisterNewSerializerWithEagerlyRegisteredStateSerializerProviderShouldFail() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.V1TestTypeSerializer()).     testProvider.registerNewSerializerForRestoredState(new TestType.V2TestTypeSerializer()). }
false;public;0;10;;@Test(expected = UnsupportedOperationException.class) public void testRegisterNewSerializerTwiceWithLazilyRegisteredStateSerializerProviderShouldFail() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     testProvider.registerNewSerializerForRestoredState(new TestType.V2TestTypeSerializer()).     // second registration should fail     testProvider.registerNewSerializerForRestoredState(new TestType.V2TestTypeSerializer()). }
false;public;0;13;;@Test public void testLazilyRegisterNewCompatibleAsIsSerializer() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     // register compatible serializer for state     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.registerNewSerializerForRestoredState(new TestType.V1TestTypeSerializer()).     assertTrue(schemaCompatibility.isCompatibleAsIs()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V1TestTypeSerializer).     assertTrue(testProvider.previousSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;13;;@Test public void testLazilyRegisterNewCompatibleAfterMigrationSerializer() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     // register serializer that requires migration for state     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.registerNewSerializerForRestoredState(new TestType.V2TestTypeSerializer()).     assertTrue(schemaCompatibility.isCompatibleAfterMigration()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V2TestTypeSerializer).     assertTrue(testProvider.previousSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;12;;@Test public void testLazilyRegisterNewSerializerRequiringReconfiguration() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     // register serializer that requires reconfiguration, and verify that     // the resulting current schema serializer is the reconfigured one     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.registerNewSerializerForRestoredState(new TestType.ReconfigurationRequiringTestTypeSerializer()).     assertTrue(schemaCompatibility.isCompatibleWithReconfiguredSerializer()).     assertTrue(testProvider.currentSchemaSerializer().getClass() == TestType.V1TestTypeSerializer.class). }
false;public;0;19;;@Test public void testLazilyRegisterIncompatibleSerializer() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     // register serializer that requires migration for state     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.registerNewSerializerForRestoredState(new TestType.IncompatibleTestTypeSerializer()).     assertTrue(schemaCompatibility.isIncompatible()).     try {         // a serializer for the current schema will no longer be accessible         testProvider.currentSchemaSerializer().         fail().     } catch (Exception excepted) {     // success     } }
false;public;0;7;;// -------------------------------------------------------------------------------- // Tests for #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot) // -------------------------------------------------------------------------------- @Test(expected = UnsupportedOperationException.class) public void testSetSerializerSnapshotWithLazilyRegisteredSerializerProviderShouldFail() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromPreviousSerializerSnapshot(serializer.snapshotConfiguration()).     testProvider.setPreviousSerializerSnapshotForRestoredState(serializer.snapshotConfiguration()). }
false;public;0;10;;@Test(expected = UnsupportedOperationException.class) public void testSetSerializerSnapshotTwiceWithEagerlyRegisteredSerializerProviderShouldFail() {     TestType.V1TestTypeSerializer serializer = new TestType.V1TestTypeSerializer().     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(serializer).     testProvider.setPreviousSerializerSnapshotForRestoredState(serializer.snapshotConfiguration()).     // second registration should fail     testProvider.setPreviousSerializerSnapshotForRestoredState(serializer.snapshotConfiguration()). }
false;public;0;12;;@Test public void testEagerlyRegisterNewCompatibleAsIsSerializer() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.V1TestTypeSerializer()).     // set previous serializer snapshot for state, which should let the new serializer be considered compatible as is     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.setPreviousSerializerSnapshotForRestoredState(new TestType.V1TestTypeSerializer().snapshotConfiguration()).     assertTrue(schemaCompatibility.isCompatibleAsIs()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V1TestTypeSerializer).     assertTrue(testProvider.previousSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;12;;@Test public void testEagerlyRegisterCompatibleAfterMigrationSerializer() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.V2TestTypeSerializer()).     // set previous serializer snapshot for state, which should let the new serializer be considered compatible after migration     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.setPreviousSerializerSnapshotForRestoredState(new TestType.V1TestTypeSerializer().snapshotConfiguration()).     assertTrue(schemaCompatibility.isCompatibleAfterMigration()).     assertTrue(testProvider.currentSchemaSerializer() instanceof TestType.V2TestTypeSerializer).     assertTrue(testProvider.previousSchemaSerializer() instanceof TestType.V1TestTypeSerializer). }
false;public;0;11;;@Test public void testEagerlyRegisterNewSerializerRequiringReconfiguration() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.ReconfigurationRequiringTestTypeSerializer()).     // set previous serializer snapshot, which should let the new serializer be considered to require reconfiguration,     // and verify that the resulting current schema serializer is the reconfigured one     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.setPreviousSerializerSnapshotForRestoredState(new TestType.V1TestTypeSerializer().snapshotConfiguration()).     assertTrue(schemaCompatibility.isCompatibleWithReconfiguredSerializer()).     assertTrue(testProvider.currentSchemaSerializer().getClass() == TestType.V1TestTypeSerializer.class). }
false;public;0;18;;@Test public void testEagerlyRegisterIncompatibleSerializer() {     StateSerializerProvider<TestType> testProvider = StateSerializerProvider.fromNewRegisteredSerializer(new TestType.IncompatibleTestTypeSerializer()).     // set previous serializer snapshot for state, which should let the new serializer be considered incompatible     TypeSerializerSchemaCompatibility<TestType> schemaCompatibility = testProvider.setPreviousSerializerSnapshotForRestoredState(new TestType.V1TestTypeSerializer().snapshotConfiguration()).     assertTrue(schemaCompatibility.isIncompatible()).     try {         // a serializer for the current schema will no longer be accessible         testProvider.currentSchemaSerializer().         fail().     } catch (Exception excepted) {     // success     } }
false;public;0;4;;@Override public TypeSerializer<String> restoreSerializer() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void writeSnapshot(DataOutputView out) throws IOException {     throw new UnsupportedOperationException(). }
false;public;3;4;;@Override public void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public TypeSerializerSchemaCompatibility<String> resolveSchemaCompatibility(TypeSerializer<String> newSerializer) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int getCurrentVersion() {     throw new UnsupportedOperationException(). }
