commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "Dispatcher " + id. }
false;public;0;4;;@Override public String[] getJvmArgs() {     return jvmArgs. }
false;public;0;4;;@Override public String getEntryPointClassName() {     return DispatcherProcessEntryPoint.class.getName(). }
false;public;0;3;;public Configuration getConfig() {     return config. }
false;public;0;4;;@Override public String toString() {     return String.format("DispatcherProcess(id=%d)", id). }
true;public,static;1;18;/**  * Entrypoint of the DispatcherProcessEntryPoint.  *  * <p>Other arguments are parsed to a {@link Configuration} and passed to the Dispatcher,  * for instance: <code>--high-availability ZOOKEEPER --high-availability.zookeeper.quorum  * "xyz:123:456"</code>.  */ ;/**  * Entrypoint of the DispatcherProcessEntryPoint.  *  * <p>Other arguments are parsed to a {@link Configuration} and passed to the Dispatcher,  * for instance: <code>--high-availability ZOOKEEPER --high-availability.zookeeper.quorum  * "xyz:123:456"</code>.  */ public static void main(String[] args) {     try {         ParameterTool params = ParameterTool.fromArgs(args).         Configuration config = params.getConfiguration().         LOG.info("Configuration: {}.", config).         config.setInteger(JobManagerOptions.PORT, 0).         config.setString(RestOptions.BIND_PORT, "0").         final StandaloneSessionClusterEntrypoint clusterEntrypoint = new StandaloneSessionClusterEntrypoint(config).         ClusterEntrypoint.runClusterEntrypoint(clusterEntrypoint).     } catch (Throwable t) {         LOG.error("Failed to start Dispatcher process", t).         System.exit(1).     } }
