# id;timestamp;commentText;codeText;commentWords;codeWords
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1432625417;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_				.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferProvider.class)))_				.thenReturn(new InfiniteSubpartitionView(outboundBuffers, sync))___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_						partitionManager,_						mock(TaskEventDispatcher.class),_						mock(NetworkBufferPool.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[] {_						new NettyMessageEncoder(),_						_						new ChannelInboundHandlerAdapter() {_							@Override_							public void channelRead(ChannelHandlerContext ctx, Object msg)_									throws Exception {__								ctx.channel().close()__							}_						}_				}__			}_		}___		NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new PartitionRequest(new ResultPartitionID(), 0, new InputChannelID()))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_						" ms to be notified about released partition.")__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,then,return,new,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,mock,network,buffer,pool,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,partition,request,new,result,partition,id,0,new,input,channel,id,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1441011751;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_				.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferProvider.class)))_				.thenReturn(new InfiniteSubpartitionView(outboundBuffers, sync))___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_						partitionManager,_						mock(TaskEventDispatcher.class),_						mock(NetworkBufferPool.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[] {_						new NettyMessageEncoder(),_						_						new ChannelInboundHandlerAdapter() {_							@Override_							public void channelRead(ChannelHandlerContext ctx, Object msg)_									throws Exception {__								ctx.channel().close()__							}_						}_				}__			}_		}___		NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new PartitionRequest(new ResultPartitionID(), 0, new InputChannelID()))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_						" ms to be notified about released partition.")__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,then,return,new,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,mock,network,buffer,pool,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,partition,request,new,result,partition,id,0,new,input,channel,id,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1480624969;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferProvider.class), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[3]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_					partitionManager,_					mock(TaskEventDispatcher.class),_					mock(NetworkBufferPool.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID()))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,3,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,mock,network,buffer,pool,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1493724918;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_					partitionManager,_					mock(TaskEventDispatcher.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID()))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1502111816;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_					partitionManager,_					mock(TaskEventDispatcher.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID()))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1507752418;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new PartitionRequestProtocol(_					partitionManager,_					mock(TaskEventDispatcher.class)).getServerChannelHandlers()__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID(), 2))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,partition,request,protocol,partition,manager,mock,task,event,dispatcher,class,get,server,channel,handlers,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,2,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1515160618;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol(partitionManager, mock(TaskEventDispatcher.class)) {__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID(), 2))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,partition,manager,mock,task,event,dispatcher,class,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,2,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1518785736;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol(partitionManager, mock(TaskEventDispatcher.class)) {__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID(), Integer.MAX_VALUE))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,partition,manager,mock,task,event,dispatcher,class,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,integer,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1518785736;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyBuffersAvailable(Long.MAX_VALUE)__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol(partitionManager, mock(TaskEventDispatcher.class), true) {__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID(), Integer.MAX_VALUE))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,buffers,available,long,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,partition,manager,mock,task,event,dispatcher,class,true,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,integer,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
ServerTransportErrorHandlingTest -> @Test 	public void testRemoteClose() throws Exception;1519039301;Verifies remote closes trigger the release of all resources.;@Test_	public void testRemoteClose() throws Exception {_		final TestPooledBufferProvider outboundBuffers = new TestPooledBufferProvider(16)___		final CountDownLatch sync = new CountDownLatch(1)___		final ResultPartitionManager partitionManager = mock(ResultPartitionManager.class)___		when(partitionManager_			.createSubpartitionView(any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_			.thenAnswer(new Answer<ResultSubpartitionView>() {_				@Override_				public ResultSubpartitionView answer(InvocationOnMock invocationOnMock) throws Throwable {_					BufferAvailabilityListener listener = (BufferAvailabilityListener) invocationOnMock.getArguments()[2]__					listener.notifyDataAvailable()__					return new CancelPartitionRequestTest.InfiniteSubpartitionView(outboundBuffers, sync)__				}_			})___		NettyProtocol protocol = new NettyProtocol(partitionManager, mock(TaskEventDispatcher.class), true) {__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[]{_					new NettyMessage.NettyMessageEncoder(),_					_					new ChannelInboundHandlerAdapter() {_						@Override_						public void channelRead(ChannelHandlerContext ctx, Object msg)_							throws Exception {__							ctx.channel().close()__						}_					}_				}__			}_		}___		NettyTestUtil.NettyServerAndClient serverAndClient = null___		try {_			serverAndClient = initServerAndClient(protocol, createConfig())___			Channel ch = connect(serverAndClient)___			_			ch.writeAndFlush(new NettyMessage.PartitionRequest(new ResultPartitionID(), 0, new InputChannelID(), Integer.MAX_VALUE))___			_			if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(), TimeUnit.MILLISECONDS)) {_				fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() +_					" ms to be notified about released partition.")__			}_		} finally {_			shutdown(serverAndClient)__		}_	};verifies,remote,closes,trigger,the,release,of,all,resources;test,public,void,test,remote,close,throws,exception,final,test,pooled,buffer,provider,outbound,buffers,new,test,pooled,buffer,provider,16,final,count,down,latch,sync,new,count,down,latch,1,final,result,partition,manager,partition,manager,mock,result,partition,manager,class,when,partition,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,new,answer,result,subpartition,view,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,on,mock,throws,throwable,buffer,availability,listener,listener,buffer,availability,listener,invocation,on,mock,get,arguments,2,listener,notify,data,available,return,new,cancel,partition,request,test,infinite,subpartition,view,outbound,buffers,sync,netty,protocol,protocol,new,netty,protocol,partition,manager,mock,task,event,dispatcher,class,true,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,new,netty,message,netty,message,encoder,new,channel,inbound,handler,adapter,override,public,void,channel,read,channel,handler,context,ctx,object,msg,throws,exception,ctx,channel,close,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,init,server,and,client,protocol,create,config,channel,ch,connect,server,and,client,ch,write,and,flush,new,netty,message,partition,request,new,result,partition,id,0,new,input,channel,id,integer,if,sync,await,testing,utils,to,millis,time,unit,milliseconds,fail,timed,out,after,waiting,for,testing,utils,to,millis,ms,to,be,notified,about,released,partition,finally,shutdown,server,and,client
