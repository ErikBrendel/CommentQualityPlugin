commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testTriggerAndConfirmCheckpoint() {     try {         NotifyCheckpointComplete cc = new NotifyCheckpointComplete(new JobID(), new ExecutionAttemptID(), 45287698767345L, 467L).         testSerializabilityEqualsHashCode(cc).         TriggerCheckpoint tc = new TriggerCheckpoint(new JobID(), new ExecutionAttemptID(), 347652734L, 7576752L, CheckpointOptions.forCheckpointWithDefaultLocation()).         testSerializabilityEqualsHashCode(tc).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;33;;@Test public void testConfirmTaskCheckpointed() {     try {         AcknowledgeCheckpoint noState = new AcknowledgeCheckpoint(new JobID(), new ExecutionAttemptID(), 569345L).         KeyGroupRange keyGroupRange = KeyGroupRange.of(42, 42).         TaskStateSnapshot checkpointStateHandles = new TaskStateSnapshot().         checkpointStateHandles.putSubtaskStateByOperatorID(new OperatorID(), new OperatorSubtaskState(CheckpointCoordinatorTest.generatePartitionableStateHandle(new JobVertexID(), 0, 2, 8, false), null, CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, Collections.singletonList(new MyHandle())), null)).         AcknowledgeCheckpoint withState = new AcknowledgeCheckpoint(new JobID(), new ExecutionAttemptID(), 87658976143L, new CheckpointMetrics(), checkpointStateHandles).         testSerializabilityEqualsHashCode(noState).         testSerializabilityEqualsHashCode(withState).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;private,static;1;7;;private static void testSerializabilityEqualsHashCode(Serializable o) throws IOException {     Object copy = CommonTestUtils.createCopySerializable(o).     assertEquals(o, copy).     assertEquals(o.hashCode(), copy.hashCode()).     assertNotNull(o.toString()).     assertNotNull(copy.toString()). }
false;public;1;3;;public Serializable get(ClassLoader userCodeClassLoader) {     return null. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj.getClass() == this.getClass(). }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
false;public;0;2;;@Override public void discardState() throws Exception { }
false;public;0;4;;@Override public long getStateSize() {     return 0. }
false;public;0;4;;@Override public FSDataInputStream openInputStream() throws IOException {     return null. }
