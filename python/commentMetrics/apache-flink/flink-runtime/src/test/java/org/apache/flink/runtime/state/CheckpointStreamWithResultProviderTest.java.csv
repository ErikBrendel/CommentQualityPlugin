commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void beforeClass() throws IOException {     temporaryFolder = new TemporaryFolder().     temporaryFolder.create(). }
false;public,static;0;4;;@AfterClass public static void afterClass() {     temporaryFolder.delete(). }
false;public;0;25;;@Test public void testFactory() throws Exception {     CheckpointStreamFactory primaryFactory = createCheckpointStreamFactory().     try (CheckpointStreamWithResultProvider primaryOnly = CheckpointStreamWithResultProvider.createSimpleStream(CheckpointedStateScope.EXCLUSIVE, primaryFactory)) {         Assert.assertTrue(primaryOnly instanceof CheckpointStreamWithResultProvider.PrimaryStreamOnly).     }     LocalRecoveryDirectoryProvider directoryProvider = createLocalRecoveryDirectoryProvider().     try (CheckpointStreamWithResultProvider primaryAndSecondary = CheckpointStreamWithResultProvider.createDuplicatingStream(42L, CheckpointedStateScope.EXCLUSIVE, primaryFactory, directoryProvider)) {         Assert.assertTrue(primaryAndSecondary instanceof CheckpointStreamWithResultProvider.PrimaryAndSecondaryStream).     } }
false;public;0;17;;@Test public void testCloseAndFinalizeCheckpointStreamResultPrimaryOnly() throws Exception {     CheckpointStreamFactory primaryFactory = createCheckpointStreamFactory().     CheckpointStreamWithResultProvider resultProvider = CheckpointStreamWithResultProvider.createSimpleStream(CheckpointedStateScope.EXCLUSIVE, primaryFactory).     SnapshotResult<StreamStateHandle> result = writeCheckpointTestData(resultProvider).     Assert.assertNotNull(result.getJobManagerOwnedSnapshot()).     Assert.assertNull(result.getTaskLocalSnapshot()).     try (FSDataInputStream inputStream = result.getJobManagerOwnedSnapshot().openInputStream()) {         Assert.assertEquals(0x42, inputStream.read()).         Assert.assertEquals(-1, inputStream.read()).     } }
false;public;0;27;;@Test public void testCloseAndFinalizeCheckpointStreamResultPrimaryAndSecondary() throws Exception {     CheckpointStreamFactory primaryFactory = createCheckpointStreamFactory().     LocalRecoveryDirectoryProvider directoryProvider = createLocalRecoveryDirectoryProvider().     CheckpointStreamWithResultProvider resultProvider = CheckpointStreamWithResultProvider.createDuplicatingStream(42L, CheckpointedStateScope.EXCLUSIVE, primaryFactory, directoryProvider).     SnapshotResult<StreamStateHandle> result = writeCheckpointTestData(resultProvider).     Assert.assertNotNull(result.getJobManagerOwnedSnapshot()).     Assert.assertNotNull(result.getTaskLocalSnapshot()).     try (FSDataInputStream inputStream = result.getJobManagerOwnedSnapshot().openInputStream()) {         Assert.assertEquals(0x42, inputStream.read()).         Assert.assertEquals(-1, inputStream.read()).     }     try (FSDataInputStream inputStream = result.getTaskLocalSnapshot().openInputStream()) {         Assert.assertEquals(0x42, inputStream.read()).         Assert.assertEquals(-1, inputStream.read()).     } }
false;public;0;16;;@Test public void testCompletedAndCloseStateHandling() throws Exception {     CheckpointStreamFactory primaryFactory = createCheckpointStreamFactory().     testCloseBeforeComplete(new CheckpointStreamWithResultProvider.PrimaryStreamOnly(primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE))).     testCompleteBeforeClose(new CheckpointStreamWithResultProvider.PrimaryStreamOnly(primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE))).     testCloseBeforeComplete(new CheckpointStreamWithResultProvider.PrimaryAndSecondaryStream(primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE), primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE))).     testCompleteBeforeClose(new CheckpointStreamWithResultProvider.PrimaryAndSecondaryStream(primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE), primaryFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE))). }
false;public;0;28;;@Test public void testCloseMethodForwarding() throws Exception {     CheckpointStreamFactory streamFactory = createCheckpointStreamFactory().     MethodForwardingTestUtil.testMethodForwarding(Closeable.class, CheckpointStreamWithResultProvider.PrimaryStreamOnly::new, () -> {         try {             return streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE).         } catch (IOException e) {             throw new RuntimeException(e).         }     }).     MethodForwardingTestUtil.testMethodForwarding(Closeable.class, CheckpointStreamWithResultProvider.PrimaryAndSecondaryStream::new, () -> {         try {             return new DuplicatingCheckpointOutputStream(streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE), streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE)).         } catch (IOException e) {             throw new RuntimeException(e).         }     }). }
false;private;1;8;;private SnapshotResult<StreamStateHandle> writeCheckpointTestData(CheckpointStreamWithResultProvider resultProvider) throws IOException {     CheckpointStreamFactory.CheckpointStateOutputStream checkpointOutputStream = resultProvider.getCheckpointOutputStream().     checkpointOutputStream.write(0x42).     return resultProvider.closeAndFinalizeCheckpointStreamResult(). }
false;private;0;3;;private CheckpointStreamFactory createCheckpointStreamFactory() {     return new MemCheckpointStreamFactory(16 * 1024). }
true;private;1;9;/**  * Test that an exception is thrown if the stream was already closed before and we ask for a result later.  */ ;/**  * Test that an exception is thrown if the stream was already closed before and we ask for a result later.  */ private void testCloseBeforeComplete(CheckpointStreamWithResultProvider resultProvider) throws IOException {     resultProvider.getCheckpointOutputStream().write(0x42).     resultProvider.close().     try {         resultProvider.closeAndFinalizeCheckpointStreamResult().         Assert.fail().     } catch (IOException ignore) {     } }
false;private;1;5;;private void testCompleteBeforeClose(CheckpointStreamWithResultProvider resultProvider) throws IOException {     resultProvider.getCheckpointOutputStream().write(0x42).     Assert.assertNotNull(resultProvider.closeAndFinalizeCheckpointStreamResult()).     resultProvider.close(). }
false;private;0;7;;private LocalRecoveryDirectoryProvider createLocalRecoveryDirectoryProvider() throws IOException {     File localStateDir = temporaryFolder.newFolder().     JobID jobID = new JobID().     JobVertexID jobVertexID = new JobVertexID().     int subtaskIdx = 0.     return new LocalRecoveryDirectoryProviderImpl(localStateDir, jobID, jobVertexID, subtaskIdx). }
