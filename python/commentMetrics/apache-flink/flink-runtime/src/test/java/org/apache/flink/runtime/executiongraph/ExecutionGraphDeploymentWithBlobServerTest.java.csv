commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before public void setupBlobServer() throws IOException {     Configuration config = new Configuration().     // always offload the serialized job and task information     config.setInteger(BlobServerOptions.OFFLOAD_MINSIZE, 0).     blobServer = Mockito.spy(new BlobServer(config, new VoidBlobStore())).     blobWriter = blobServer.     blobCache = blobServer.     seenHashes.clear().     // verify that we do not upload the same content more than once     doAnswer(invocation -> {         PermanentBlobKey key = (PermanentBlobKey) invocation.callRealMethod().         assertTrue(seenHashes.add(key.getHash())).         return key.     }).when(blobServer).putPermanent(any(JobID.class), Matchers.<byte[]>any()).     blobServer.start(). }
false;public;0;6;;@After public void shutdownBlobServer() throws IOException {     if (blobServer != null) {         blobServer.close().     } }
false;protected;1;9;;@Override protected void checkJobOffloaded(ExecutionGraph eg) throws Exception {     Either<SerializedValue<JobInformation>, PermanentBlobKey> jobInformationOrBlobKey = eg.getJobInformationOrBlobKey().     assertTrue(jobInformationOrBlobKey.isRight()).     // must not throw:     blobServer.getFile(eg.getJobID(), jobInformationOrBlobKey.right()). }
false;protected;2;9;;@Override protected void checkTaskOffloaded(ExecutionGraph eg, JobVertexID jobVertexId) throws Exception {     Either<SerializedValue<TaskInformation>, PermanentBlobKey> taskInformationOrBlobKey = eg.getJobVertex(jobVertexId).getTaskInformationOrBlobKey().     assertTrue(taskInformationOrBlobKey.isRight()).     // must not throw:     blobServer.getFile(eg.getJobID(), taskInformationOrBlobKey.right()). }
