commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testTaskFailureRecovery() throws Exception {     runTaskFailureRecoveryTest(createjobGraph(false)). }
false;public;0;4;;@Test public void testTaskFailureWithSlotSharingRecovery() throws Exception {     runTaskFailureRecoveryTest(createjobGraph(true)). }
false;private;1;9;;private void runTaskFailureRecoveryTest(final JobGraph jobGraph) throws Exception {     final MiniCluster miniCluster = MINI_CLUSTER_RESOURCE.getMiniCluster().     miniCluster.submitJob(jobGraph).get().     final CompletableFuture<JobResult> jobResultFuture = miniCluster.requestJobResult(jobGraph.getJobID()).     assertThat(jobResultFuture.get().isSuccess(), is(true)). }
false;private;1;26;;private JobGraph createjobGraph(boolean slotSharingEnabled) throws IOException {     final JobVertex sender = new JobVertex("Sender").     sender.setParallelism(PARALLELISM).     sender.setInvokableClass(TestingAbstractInvokables.Sender.class).     final JobVertex receiver = new JobVertex("Receiver").     receiver.setParallelism(PARALLELISM).     receiver.setInvokableClass(FailingOnceReceiver.class).     FailingOnceReceiver.reset().     if (slotSharingEnabled) {         final SlotSharingGroup slotSharingGroup = new SlotSharingGroup().         receiver.setSlotSharingGroup(slotSharingGroup).         sender.setSlotSharingGroup(slotSharingGroup).     }     receiver.connectNewDataSetAsInput(sender, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED).     final ExecutionConfig executionConfig = new ExecutionConfig().     executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0L)).     final JobGraph jobGraph = new JobGraph(getClass().getSimpleName(), sender, receiver).     jobGraph.setExecutionConfig(executionConfig).     return jobGraph. }
false;public;0;9;;@Override public void invoke() throws Exception {     if (!failed && getEnvironment().getTaskInfo().getIndexOfThisSubtask() == 0) {         failed = true.         throw new FlinkRuntimeException(getClass().getSimpleName()).     } else {         super.invoke().     } }
false;private,static;0;3;;private static void reset() {     failed = false. }
