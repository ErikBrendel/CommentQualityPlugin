# id;timestamp;commentText;codeText;commentWords;codeWords
FlinkUntypedActorTest -> @Test 	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor();1441011751;Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered_out.;@Test_	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor() {_		final UUID leaderSessionID = UUID.randomUUID()__		final UUID oldSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			actor = TestActorRef.create(_					actorSystem, Props.create(PlainFlinkUntypedActor.class, leaderSessionID))___			final PlainFlinkUntypedActor underlyingActor = actor.underlyingActor()___			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(oldSessionID, 2), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 2), ActorRef.noSender())__			actor.tell(1, ActorRef.noSender())___			assertEquals(3, underlyingActor.getMessageCounter())___		} finally {_			stopActor(actor)__		}_	};tests,that,leader,session,message,messages,with,a,wrong,leader,session,id,are,filtered,out;test,public,void,test,leader,session,message,filtering,of,flink,untyped,actor,final,uuid,leader,session,id,uuid,random,uuid,final,uuid,old,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,actor,test,actor,ref,create,actor,system,props,create,plain,flink,untyped,actor,class,leader,session,id,final,plain,flink,untyped,actor,underlying,actor,actor,underlying,actor,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,1,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,old,session,id,2,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,2,actor,ref,no,sender,actor,tell,1,actor,ref,no,sender,assert,equals,3,underlying,actor,get,message,counter,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor();1499773775;Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered_out.;@Test_	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor() {_		final UUID leaderSessionID = UUID.randomUUID()__		final UUID oldSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			actor = TestActorRef.create(_					actorSystem, Props.create(PlainFlinkUntypedActor.class, leaderSessionID))___			final PlainFlinkUntypedActor underlyingActor = actor.underlyingActor()___			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(oldSessionID, 2), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 2), ActorRef.noSender())__			actor.tell(1, ActorRef.noSender())___			assertEquals(3, underlyingActor.getMessageCounter())___		} finally {_			stopActor(actor)__		}_	};tests,that,leader,session,message,messages,with,a,wrong,leader,session,id,are,filtered,out;test,public,void,test,leader,session,message,filtering,of,flink,untyped,actor,final,uuid,leader,session,id,uuid,random,uuid,final,uuid,old,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,actor,test,actor,ref,create,actor,system,props,create,plain,flink,untyped,actor,class,leader,session,id,final,plain,flink,untyped,actor,underlying,actor,actor,underlying,actor,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,1,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,old,session,id,2,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,2,actor,ref,no,sender,actor,tell,1,actor,ref,no,sender,assert,equals,3,underlying,actor,get,message,counter,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor();1534259516;Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered_out.;@Test_	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor() {_		final UUID leaderSessionID = UUID.randomUUID()__		final UUID oldSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			actor = TestActorRef.create(_					actorSystem, Props.create(PlainFlinkUntypedActor.class, leaderSessionID))___			final PlainFlinkUntypedActor underlyingActor = actor.underlyingActor()___			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(oldSessionID, 2), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 2), ActorRef.noSender())__			actor.tell(1, ActorRef.noSender())___			assertEquals(3, underlyingActor.getMessageCounter())___		} finally {_			stopActor(actor)__		}_	};tests,that,leader,session,message,messages,with,a,wrong,leader,session,id,are,filtered,out;test,public,void,test,leader,session,message,filtering,of,flink,untyped,actor,final,uuid,leader,session,id,uuid,random,uuid,final,uuid,old,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,actor,test,actor,ref,create,actor,system,props,create,plain,flink,untyped,actor,class,leader,session,id,final,plain,flink,untyped,actor,underlying,actor,actor,underlying,actor,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,1,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,old,session,id,2,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,2,actor,ref,no,sender,actor,tell,1,actor,ref,no,sender,assert,equals,3,underlying,actor,get,message,counter,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor();1534259516;Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered_out.;@Test_	public void testLeaderSessionMessageFilteringOfFlinkUntypedActor() {_		final UUID leaderSessionID = UUID.randomUUID()__		final UUID oldSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			actor = TestActorRef.create(_					actorSystem, Props.create(PlainFlinkUntypedActor.class, leaderSessionID))___			final PlainFlinkUntypedActor underlyingActor = actor.underlyingActor()___			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(oldSessionID, 2), ActorRef.noSender())__			actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 2), ActorRef.noSender())__			actor.tell(1, ActorRef.noSender())___			assertEquals(3, underlyingActor.getMessageCounter())___		} finally {_			stopActor(actor)__		}_	};tests,that,leader,session,message,messages,with,a,wrong,leader,session,id,are,filtered,out;test,public,void,test,leader,session,message,filtering,of,flink,untyped,actor,final,uuid,leader,session,id,uuid,random,uuid,final,uuid,old,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,actor,test,actor,ref,create,actor,system,props,create,plain,flink,untyped,actor,class,leader,session,id,final,plain,flink,untyped,actor,underlying,actor,actor,underlying,actor,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,1,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,old,session,id,2,actor,ref,no,sender,actor,tell,new,job,manager,messages,leader,session,message,leader,session,id,2,actor,ref,no,sender,actor,tell,1,actor,ref,no,sender,assert,equals,3,underlying,actor,get,message,counter,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage();1441011751;Tests that an exception is thrown, when the FlinkUntypedActore receives a message which_extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.;@Test_	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage() {_		final UUID leaderSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try{_			final Props props = Props.create(PlainFlinkUntypedActor.class, leaderSessionID)__			actor = TestActorRef.create(actorSystem, props)___			actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1))___			try {_				actor.receive(new PlainRequiresLeaderSessionID())___				fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" +_						"message was sent without being wrapped in LeaderSessionMessage.")__			} catch (Exception e) {_				assertEquals("Received a message PlainRequiresLeaderSessionID " +_						"without a leader session ID, even though the message requires a " +_						"leader session ID.",_						e.getMessage())__			}__		} finally {_			stopActor(actor)__		}_	};tests,that,an,exception,is,thrown,when,the,flink,untyped,actore,receives,a,message,which,extends,link,requires,leader,session,id,and,is,not,wrapped,in,a,leader,session,message;test,public,void,test,throwing,exception,when,receiving,non,wrapped,requires,leader,session,idmessage,final,uuid,leader,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,final,props,props,props,create,plain,flink,untyped,actor,class,leader,session,id,actor,test,actor,ref,create,actor,system,props,actor,receive,new,job,manager,messages,leader,session,message,leader,session,id,1,try,actor,receive,new,plain,requires,leader,session,id,fail,expected,an,exception,to,be,thrown,because,a,requires,leader,session,id,message,was,sent,without,being,wrapped,in,leader,session,message,catch,exception,e,assert,equals,received,a,message,plain,requires,leader,session,id,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,e,get,message,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage();1499773775;Tests that an exception is thrown, when the FlinkUntypedActore receives a message which_extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.;@Test_	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage() {_		final UUID leaderSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			final Props props = Props.create(PlainFlinkUntypedActor.class, leaderSessionID)__			actor = TestActorRef.create(actorSystem, props)___			actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1))___			try {_				actor.receive(new PlainRequiresLeaderSessionID())___				fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" +_						"message was sent without being wrapped in LeaderSessionMessage.")__			} catch (Exception e) {_				assertEquals("Received a message PlainRequiresLeaderSessionID " +_						"without a leader session ID, even though the message requires a " +_						"leader session ID.",_						e.getMessage())__			}__		} finally {_			stopActor(actor)__		}_	};tests,that,an,exception,is,thrown,when,the,flink,untyped,actore,receives,a,message,which,extends,link,requires,leader,session,id,and,is,not,wrapped,in,a,leader,session,message;test,public,void,test,throwing,exception,when,receiving,non,wrapped,requires,leader,session,idmessage,final,uuid,leader,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,final,props,props,props,create,plain,flink,untyped,actor,class,leader,session,id,actor,test,actor,ref,create,actor,system,props,actor,receive,new,job,manager,messages,leader,session,message,leader,session,id,1,try,actor,receive,new,plain,requires,leader,session,id,fail,expected,an,exception,to,be,thrown,because,a,requires,leader,session,id,message,was,sent,without,being,wrapped,in,leader,session,message,catch,exception,e,assert,equals,received,a,message,plain,requires,leader,session,id,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,e,get,message,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage();1534259516;Tests that an exception is thrown, when the FlinkUntypedActore receives a message which_extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.;@Test_	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage() {_		final UUID leaderSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			final Props props = Props.create(PlainFlinkUntypedActor.class, leaderSessionID)__			actor = TestActorRef.create(actorSystem, props)___			actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1))___			try {_				actor.receive(new PlainRequiresLeaderSessionID())___				fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" +_						"message was sent without being wrapped in LeaderSessionMessage.")__			} catch (Exception e) {_				assertEquals("Received a message PlainRequiresLeaderSessionID " +_						"without a leader session ID, even though the message requires a " +_						"leader session ID.",_						e.getMessage())__			}__		} finally {_			stopActor(actor)__		}_	};tests,that,an,exception,is,thrown,when,the,flink,untyped,actore,receives,a,message,which,extends,link,requires,leader,session,id,and,is,not,wrapped,in,a,leader,session,message;test,public,void,test,throwing,exception,when,receiving,non,wrapped,requires,leader,session,idmessage,final,uuid,leader,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,final,props,props,props,create,plain,flink,untyped,actor,class,leader,session,id,actor,test,actor,ref,create,actor,system,props,actor,receive,new,job,manager,messages,leader,session,message,leader,session,id,1,try,actor,receive,new,plain,requires,leader,session,id,fail,expected,an,exception,to,be,thrown,because,a,requires,leader,session,id,message,was,sent,without,being,wrapped,in,leader,session,message,catch,exception,e,assert,equals,received,a,message,plain,requires,leader,session,id,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,e,get,message,finally,stop,actor,actor
FlinkUntypedActorTest -> @Test 	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage();1534259516;Tests that an exception is thrown, when the FlinkUntypedActore receives a message which_extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.;@Test_	public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage() {_		final UUID leaderSessionID = UUID.randomUUID()___		TestActorRef<PlainFlinkUntypedActor> actor = null___		try {_			final Props props = Props.create(PlainFlinkUntypedActor.class, leaderSessionID)__			actor = TestActorRef.create(actorSystem, props)___			actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1))___			try {_				actor.receive(new PlainRequiresLeaderSessionID())___				fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" +_						"message was sent without being wrapped in LeaderSessionMessage.")__			} catch (Exception e) {_				assertEquals("Received a message PlainRequiresLeaderSessionID " +_						"without a leader session ID, even though the message requires a " +_						"leader session ID.",_						e.getMessage())__			}__		} finally {_			stopActor(actor)__		}_	};tests,that,an,exception,is,thrown,when,the,flink,untyped,actore,receives,a,message,which,extends,link,requires,leader,session,id,and,is,not,wrapped,in,a,leader,session,message;test,public,void,test,throwing,exception,when,receiving,non,wrapped,requires,leader,session,idmessage,final,uuid,leader,session,id,uuid,random,uuid,test,actor,ref,plain,flink,untyped,actor,actor,null,try,final,props,props,props,create,plain,flink,untyped,actor,class,leader,session,id,actor,test,actor,ref,create,actor,system,props,actor,receive,new,job,manager,messages,leader,session,message,leader,session,id,1,try,actor,receive,new,plain,requires,leader,session,id,fail,expected,an,exception,to,be,thrown,because,a,requires,leader,session,id,message,was,sent,without,being,wrapped,in,leader,session,message,catch,exception,e,assert,equals,received,a,message,plain,requires,leader,session,id,without,a,leader,session,id,even,though,the,message,requires,a,leader,session,id,e,get,message,finally,stop,actor,actor
