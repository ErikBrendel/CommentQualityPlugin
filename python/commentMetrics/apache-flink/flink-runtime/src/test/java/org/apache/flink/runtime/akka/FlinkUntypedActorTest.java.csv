commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setup() {     actorSystem = RobustActorSystem.create("TestingActorSystem", TestingUtils.testConfig()). }
false;public,static;0;4;;@AfterClass public static void teardown() {     JavaTestKit.shutdownActorSystem(actorSystem). }
true;public;0;24;/**  * Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered  * out.  */ ;/**  * Tests that LeaderSessionMessage messages with a wrong leader session ID are filtered  * out.  */ @Test public void testLeaderSessionMessageFilteringOfFlinkUntypedActor() {     final UUID leaderSessionID = UUID.randomUUID().     final UUID oldSessionID = UUID.randomUUID().     TestActorRef<PlainFlinkUntypedActor> actor = null.     try {         actor = TestActorRef.create(actorSystem, Props.create(PlainFlinkUntypedActor.class, leaderSessionID)).         final PlainFlinkUntypedActor underlyingActor = actor.underlyingActor().         actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1), ActorRef.noSender()).         actor.tell(new JobManagerMessages.LeaderSessionMessage(oldSessionID, 2), ActorRef.noSender()).         actor.tell(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 2), ActorRef.noSender()).         actor.tell(1, ActorRef.noSender()).         assertEquals(3, underlyingActor.getMessageCounter()).     } finally {         stopActor(actor).     } }
true;public;0;28;/**  * Tests that an exception is thrown, when the FlinkUntypedActore receives a message which  * extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.  */ ;/**  * Tests that an exception is thrown, when the FlinkUntypedActore receives a message which  * extends {@link RequiresLeaderSessionID} and is not wrapped in a LeaderSessionMessage.  */ @Test public void testThrowingExceptionWhenReceivingNonWrappedRequiresLeaderSessionIDMessage() {     final UUID leaderSessionID = UUID.randomUUID().     TestActorRef<PlainFlinkUntypedActor> actor = null.     try {         final Props props = Props.create(PlainFlinkUntypedActor.class, leaderSessionID).         actor = TestActorRef.create(actorSystem, props).         actor.receive(new JobManagerMessages.LeaderSessionMessage(leaderSessionID, 1)).         try {             actor.receive(new PlainRequiresLeaderSessionID()).             fail("Expected an exception to be thrown, because a RequiresLeaderSessionID" + "message was sent without being wrapped in LeaderSessionMessage.").         } catch (Exception e) {             assertEquals("Received a message PlainRequiresLeaderSessionID " + "without a leader session ID, even though the message requires a " + "leader session ID.", e.getMessage()).         }     } finally {         stopActor(actor).     } }
false;private,static;1;5;;private static void stopActor(ActorRef actor) {     if (actor != null) {         actor.tell(Kill.getInstance(), ActorRef.noSender()).     } }
false;protected;1;4;;@Override protected void handleMessage(Object message) throws Exception {     messageCounter++. }
false;protected;0;4;;@Override protected UUID getLeaderSessionID() {     return leaderSessionID. }
false;public;0;3;;public int getMessageCounter() {     return messageCounter. }
false;public;0;4;;@Override public String toString() {     return "PlainRequiresLeaderSessionID". }
