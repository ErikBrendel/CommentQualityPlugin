commented;modifiers;parameterAmount;loc;comment;code
false;static;3;13;;// --------------------------------------------------------------------------------------------- // NettyServer and NettyClient // --------------------------------------------------------------------------------------------- static NettyServer initServer(NettyConfig config, NettyProtocol protocol, NettyBufferPool bufferPool) throws Exception {     final NettyServer server = new NettyServer(config).     try {         server.init(protocol, bufferPool).     } catch (Exception e) {         server.shutdown().         throw e.     }     return server. }
false;static;3;13;;static NettyClient initClient(NettyConfig config, NettyProtocol protocol, NettyBufferPool bufferPool) throws Exception {     final NettyClient client = new NettyClient(config).     try {         client.init(protocol, bufferPool).     } catch (Exception e) {         client.shutdown().         throw e.     }     return client. }
false;static;1;3;;static NettyServerAndClient initServerAndClient(NettyProtocol protocol) throws Exception {     return initServerAndClient(protocol, createConfig()). }
false;static;2;10;;static NettyServerAndClient initServerAndClient(NettyProtocol protocol, NettyConfig config) throws Exception {     NettyBufferPool bufferPool = new NettyBufferPool(1).     final NettyClient client = initClient(config, protocol, bufferPool).     final NettyServer server = initServer(config, protocol, bufferPool).     return new NettyServerAndClient(server, client). }
false;static;1;3;;static Channel connect(NettyServerAndClient serverAndClient) throws Exception {     return connect(serverAndClient.client(), serverAndClient.server()). }
false;static;2;8;;static Channel connect(NettyClient client, NettyServer server) throws Exception {     final NettyConfig config = server.getConfig().     return client.connect(new InetSocketAddress(config.getServerAddress(), config.getServerPort())).sync().channel(). }
false;static;1;6;;static void awaitClose(Channel ch) throws InterruptedException {     // Wait for the channel to be closed     while (ch.isActive()) {         ch.closeFuture().await(1, TimeUnit.SECONDS).     } }
false;static;1;11;;static void shutdown(NettyServerAndClient serverAndClient) {     if (serverAndClient != null) {         if (serverAndClient.server() != null) {             serverAndClient.server().shutdown().         }         if (serverAndClient.client() != null) {             serverAndClient.client().shutdown().         }     } }
false;static;0;3;;// --------------------------------------------------------------------------------------------- // NettyConfig // --------------------------------------------------------------------------------------------- static NettyConfig createConfig() throws Exception {     return createConfig(DEFAULT_SEGMENT_SIZE, new Configuration()). }
false;static;1;3;;static NettyConfig createConfig(int segmentSize) throws Exception {     return createConfig(segmentSize, new Configuration()). }
false;static;1;3;;static NettyConfig createConfig(Configuration config) throws Exception {     return createConfig(DEFAULT_SEGMENT_SIZE, config). }
false;static;2;11;;static NettyConfig createConfig(int segmentSize, Configuration config) throws Exception {     checkArgument(segmentSize > 0).     checkNotNull(config).     return new NettyConfig(InetAddress.getLocalHost(), NetUtils.getAvailablePort(), segmentSize, 1, config). }
false;;0;3;;NettyServer server() {     return server. }
false;;0;3;;NettyClient client() {     return client. }
