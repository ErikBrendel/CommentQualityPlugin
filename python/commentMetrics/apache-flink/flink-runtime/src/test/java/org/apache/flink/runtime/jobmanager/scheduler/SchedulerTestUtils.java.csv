commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;28;;// -------------------------------------------------------------------------------------------- public static Instance getRandomInstance(int numSlots) {     if (numSlots <= 0) {         throw new IllegalArgumentException().     }     final ResourceID resourceID = ResourceID.generate().     final InetAddress address.     try {         address = InetAddress.getByName("127.0.0.1").     } catch (UnknownHostException e) {         throw new RuntimeException("Test could not create IP address for localhost loopback.").     }     int dataPort = port.getAndIncrement().     TaskManagerLocation ci = new TaskManagerLocation(resourceID, address, dataPort).     final long GB = 1024L * 1024 * 1024.     HardwareDescription resources = new HardwareDescription(4, 4 * GB, 3 * GB, 2 * GB).     return new Instance(new SimpleAckingTaskManagerGateway(), ci, new InstanceID(), resources, numSlots). }
false;public,static;0;14;;public static Execution getDummyTask() {     ExecutionJobVertex executionJobVertex = mock(ExecutionJobVertex.class).     ExecutionVertex vertex = mock(ExecutionVertex.class).     when(vertex.getJobId()).thenReturn(new JobID()).     when(vertex.toString()).thenReturn("TEST-VERTEX").     when(vertex.getJobVertex()).thenReturn(executionJobVertex).     when(vertex.getJobvertexId()).thenReturn(new JobVertexID()).     Execution execution = mock(Execution.class).     when(execution.getVertex()).thenReturn(vertex).     return execution. }
false;public,static;1;7;;public static Execution getTestVertex(Instance... preferredInstances) {     List<TaskManagerLocation> locations = new ArrayList<>(preferredInstances.length).     for (Instance i : preferredInstances) {         locations.add(i.getTaskManagerLocation()).     }     return getTestVertex(locations). }
false;public,static;1;3;;public static Execution getTestVertex(TaskManagerLocation... preferredLocations) {     return getTestVertex(Arrays.asList(preferredLocations)). }
false;public,static;1;9;;public static Execution getTestVertex(Iterable<TaskManagerLocation> preferredLocations) {     Collection<CompletableFuture<TaskManagerLocation>> preferredLocationFutures = new ArrayList<>(4).     for (TaskManagerLocation preferredLocation : preferredLocations) {         preferredLocationFutures.add(CompletableFuture.completedFuture(preferredLocation)).     }     return getTestVertex(preferredLocationFutures). }
false;public,static;1;17;;public static Execution getTestVertex(Collection<CompletableFuture<TaskManagerLocation>> preferredLocationFutures) {     ExecutionJobVertex executionJobVertex = mock(ExecutionJobVertex.class).     ExecutionVertex vertex = mock(ExecutionVertex.class).     when(vertex.getPreferredLocationsBasedOnInputs()).thenReturn(preferredLocationFutures).     when(vertex.getPreferredLocations()).thenReturn(preferredLocationFutures).     when(vertex.getJobId()).thenReturn(new JobID()).     when(vertex.toString()).thenReturn("TEST-VERTEX").     when(vertex.getJobVertex()).thenReturn(executionJobVertex).     when(vertex.getJobvertexId()).thenReturn(new JobVertexID()).     Execution execution = mock(Execution.class).     when(execution.getVertex()).thenReturn(vertex).     when(execution.calculatePreferredLocations(any(LocationPreferenceConstraint.class))).thenCallRealMethod().     return execution. }
false;public,static;4;20;;public static Execution getTestVertex(JobVertexID jid, int taskIndex, int numTasks, SlotSharingGroup slotSharingGroup) {     ExecutionJobVertex executionJobVertex = mock(ExecutionJobVertex.class).     ExecutionVertex vertex = mock(ExecutionVertex.class).     when(executionJobVertex.getSlotSharingGroup()).thenReturn(slotSharingGroup).     when(vertex.getPreferredLocationsBasedOnInputs()).thenReturn(Collections.emptyList()).     when(vertex.getJobId()).thenReturn(new JobID()).     when(vertex.getJobvertexId()).thenReturn(jid).     when(vertex.getParallelSubtaskIndex()).thenReturn(taskIndex).     when(vertex.getTotalNumberOfParallelSubtasks()).thenReturn(numTasks).     when(vertex.getMaxParallelism()).thenReturn(numTasks).     when(vertex.toString()).thenReturn("TEST-VERTEX").     when(vertex.getTaskNameWithSubtaskIndex()).thenReturn("TEST-VERTEX").     when(vertex.getJobVertex()).thenReturn(executionJobVertex).     Execution execution = mock(Execution.class).     when(execution.getVertex()).thenReturn(vertex).     return execution. }
false;public,static;5;33;;public static Execution getTestVertexWithLocation(JobVertexID jid, int taskIndex, int numTasks, SlotSharingGroup slotSharingGroup, TaskManagerLocation... locations) {     ExecutionJobVertex executionJobVertex = mock(ExecutionJobVertex.class).     when(executionJobVertex.getSlotSharingGroup()).thenReturn(slotSharingGroup).     ExecutionVertex vertex = mock(ExecutionVertex.class).     Collection<CompletableFuture<TaskManagerLocation>> preferredLocationFutures = new ArrayList<>(locations.length).     for (TaskManagerLocation location : locations) {         preferredLocationFutures.add(CompletableFuture.completedFuture(location)).     }     when(vertex.getJobVertex()).thenReturn(executionJobVertex).     when(vertex.getPreferredLocationsBasedOnInputs()).thenReturn(preferredLocationFutures).     when(vertex.getJobId()).thenReturn(new JobID()).     when(vertex.getJobvertexId()).thenReturn(jid).     when(vertex.getParallelSubtaskIndex()).thenReturn(taskIndex).     when(vertex.getTotalNumberOfParallelSubtasks()).thenReturn(numTasks).     when(vertex.getMaxParallelism()).thenReturn(numTasks).     when(vertex.toString()).thenReturn("TEST-VERTEX").     Execution execution = mock(Execution.class).     when(execution.getVertex()).thenReturn(vertex).     return execution. }
false;public,static;1;10;;// -------------------------------------------------------------------------------------------- public static boolean areAllDistinct(Object... obj) {     if (obj == null) {         return true.     }     HashSet<Object> set = new HashSet<Object>().     Collections.addAll(set, obj).     return set.size() == obj.length. }
