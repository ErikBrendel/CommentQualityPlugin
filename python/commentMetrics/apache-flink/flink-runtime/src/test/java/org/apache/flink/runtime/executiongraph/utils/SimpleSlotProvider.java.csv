commented;modifiers;parameterAmount;loc;comment;code
false;public;5;25;;@Override public CompletableFuture<LogicalSlot> allocateSlot(SlotRequestId slotRequestId, ScheduledUnit task, SlotProfile slotProfile, boolean allowQueued, Time allocationTimeout) {     final SlotContext slot.     synchronized (lock) {         if (slots.isEmpty()) {             slot = null.         } else {             slot = slots.removeFirst().         }         if (slot != null) {             SimpleSlot result = new SimpleSlot(slot, this, 0).             allocatedSlots.put(slotRequestId, slot).             return CompletableFuture.completedFuture(result).         } else {             return FutureUtils.completedExceptionally(new NoResourceAvailableException()).         }     } }
false;public;3;12;;@Override public void cancelSlotRequest(SlotRequestId slotRequestId, @Nullable SlotSharingGroupId slotSharingGroupId, Throwable cause) {     synchronized (lock) {         final SlotContext slotContext = allocatedSlots.remove(slotRequestId).         if (slotContext != null) {             slots.add(slotContext).         } else {             throw new FlinkRuntimeException("Unknown slot request id " + slotRequestId + '.').         }     } }
false;public;1;11;;@Override public void returnLogicalSlot(LogicalSlot logicalSlot) {     Preconditions.checkArgument(logicalSlot instanceof Slot).     final Slot slot = ((Slot) logicalSlot).     synchronized (lock) {         slots.add(slot.getSlotContext()).         allocatedSlots.remove(logicalSlot.getSlotRequestId()).     } }
false;public;0;5;;public int getNumberOfAvailableSlots() {     synchronized (lock) {         return slots.size().     } }
