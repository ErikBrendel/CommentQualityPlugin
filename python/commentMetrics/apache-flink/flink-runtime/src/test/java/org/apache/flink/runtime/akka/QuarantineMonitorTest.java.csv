# id;timestamp;commentText;codeText;commentWords;codeWords
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException;1493373054;Tests that the quarantine monitor detects if an actor system has been quarantined by another_actor system.;@Test(timeout = 5000L)_	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem2.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem1)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			Future<String> quarantineFuture = quarantineHandler.getWasQuarantinedByFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,has,been,quarantined,by,another,actor,system;test,timeout,5000l,public,void,test,watchee,quarantined,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system2,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system1,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,future,string,quarantine,future,quarantine,handler,get,was,quarantined,by,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException;1499773775;Tests that the quarantine monitor detects if an actor system has been quarantined by another_actor system.;@Test(timeout = 5000L)_	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem2.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem1)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			Future<String> quarantineFuture = quarantineHandler.getWasQuarantinedByFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,has,been,quarantined,by,another,actor,system;test,timeout,5000l,public,void,test,watchee,quarantined,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system2,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system1,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,future,string,quarantine,future,quarantine,handler,get,was,quarantined,by,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException;1501760738;Tests that the quarantine monitor detects if an actor system has been quarantined by another_actor system.;@Test(timeout = 5000L)_	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem2.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem1)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			CompletableFuture<String> quarantineFuture = quarantineHandler.getWasQuarantinedByFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,has,been,quarantined,by,another,actor,system;test,timeout,5000l,public,void,test,watchee,quarantined,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system2,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system1,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,completable,future,string,quarantine,future,quarantine,handler,get,was,quarantined,by,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException;1533829432;Tests that the quarantine monitor detects if an actor system has been quarantined by another_actor system.;@Test(timeout = 5000L)_	public void testWatcheeQuarantined() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem2.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem1)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			CompletableFuture<String> quarantineFuture = quarantineHandler.getWasQuarantinedByFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,has,been,quarantined,by,another,actor,system;test,timeout,5000l,public,void,test,watchee,quarantined,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system2,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system1,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,completable,future,string,quarantine,future,quarantine,handler,get,was,quarantined,by,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcherQuarantining() throws ExecutionException, InterruptedException;1493373054;Tests that the quarantine monitor detects if an actor system quarantines another actor_system.;@Test(timeout = 5000L)_	public void testWatcherQuarantining() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem1.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem2)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			Future<String> quarantineFuture = quarantineHandler.getHasQuarantinedFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,quarantines,another,actor,system;test,timeout,5000l,public,void,test,watcher,quarantining,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system1,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system2,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,future,string,quarantine,future,quarantine,handler,get,has,quarantined,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcherQuarantining() throws ExecutionException, InterruptedException;1499773775;Tests that the quarantine monitor detects if an actor system quarantines another actor_system.;@Test(timeout = 5000L)_	public void testWatcherQuarantining() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem1.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem2)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			Future<String> quarantineFuture = quarantineHandler.getHasQuarantinedFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,quarantines,another,actor,system;test,timeout,5000l,public,void,test,watcher,quarantining,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system1,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system2,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,future,string,quarantine,future,quarantine,handler,get,has,quarantined,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcherQuarantining() throws ExecutionException, InterruptedException;1501760738;Tests that the quarantine monitor detects if an actor system quarantines another actor_system.;@Test(timeout = 5000L)_	public void testWatcherQuarantining() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem1.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem2)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			CompletableFuture<String> quarantineFuture = quarantineHandler.getHasQuarantinedFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,quarantines,another,actor,system;test,timeout,5000l,public,void,test,watcher,quarantining,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system1,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system2,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,completable,future,string,quarantine,future,quarantine,handler,get,has,quarantined,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
QuarantineMonitorTest -> @Test(timeout = 5000L) 	public void testWatcherQuarantining() throws ExecutionException, InterruptedException;1533829432;Tests that the quarantine monitor detects if an actor system quarantines another actor_system.;@Test(timeout = 5000L)_	public void testWatcherQuarantining() throws ExecutionException, InterruptedException {_		TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler()___		ActorRef watchee = null__		ActorRef watcher = null__		ActorRef monitor = null___		FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS)__		FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS)___		try {_			_			monitor = actorSystem1.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor")___			watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee")__			watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher")___			final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem2)__			final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee)__			final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher)___			_			watchee.tell(new Ping(watcherAddress), ActorRef.noSender())__			_			watcher.tell(new Watch(watcheeAddress), ActorRef.noSender())___			CompletableFuture<String> quarantineFuture = quarantineHandler.getHasQuarantinedFuture()___			Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get())__		} finally {_			TestingUtils.stopActor(watchee)__			TestingUtils.stopActor(watcher)__			TestingUtils.stopActor(monitor)__		}_	};tests,that,the,quarantine,monitor,detects,if,an,actor,system,quarantines,another,actor,system;test,timeout,5000l,public,void,test,watcher,quarantining,throws,execution,exception,interrupted,exception,testing,quarantine,handler,quarantine,handler,new,testing,quarantine,handler,actor,ref,watchee,null,actor,ref,watcher,null,actor,ref,monitor,null,finite,duration,timeout,new,finite,duration,5,time,unit,seconds,finite,duration,interval,new,finite,duration,200,time,unit,milliseconds,try,monitor,actor,system1,actor,of,get,quarantine,monitor,props,quarantine,handler,quarantine,monitor,watchee,actor,system2,actor,of,get,watchee,props,timeout,interval,quarantine,handler,watchee,watcher,actor,system1,actor,of,get,watcher,props,timeout,interval,quarantine,handler,watcher,final,address,actor,system1address,akka,utils,get,address,actor,system2,final,string,watchee,address,akka,utils,get,akka,url,actor,system2,watchee,final,string,watcher,address,akka,utils,get,akka,url,actor,system1,watcher,watchee,tell,new,ping,watcher,address,actor,ref,no,sender,watcher,tell,new,watch,watchee,address,actor,ref,no,sender,completable,future,string,quarantine,future,quarantine,handler,get,has,quarantined,future,assert,assert,equals,actor,system1address,to,string,quarantine,future,get,finally,testing,utils,stop,actor,watchee,testing,utils,stop,actor,watcher,testing,utils,stop,actor,monitor
