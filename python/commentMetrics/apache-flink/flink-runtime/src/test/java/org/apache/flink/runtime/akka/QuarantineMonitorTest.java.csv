commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;11;;@BeforeClass public static void setup() {     Properties properties = new Properties().     properties.setProperty("akka.remote.watch-failure-detector.threshold", "0.00001").     properties.setProperty("akka.remote.watch-failure-detector.heartbeat-interval", "1 ms").     properties.setProperty("akka.remote.watch-failure-detector.acceptable-heartbeat-pause", "1 ms").     Config deathWatch = ConfigFactory.parseProperties(properties).     Config defaultConfig = AkkaUtils.getDefaultAkkaConfig().     actorSystem1 = AkkaUtils.createActorSystem(deathWatch.withFallback(defaultConfig)). }
false;public,static;0;7;;@AfterClass public static void tearDown() throws InterruptedException, TimeoutException {     if (actorSystem1 != null) {         actorSystem1.terminate().         Await.ready(actorSystem1.whenTerminated(), Duration.Inf()).     } }
false;public;0;4;;@Before public void setupTest() {     actorSystem2 = AkkaUtils.createDefaultActorSystem(). }
false;public;0;7;;@After public void tearDownTest() throws InterruptedException, TimeoutException {     if (actorSystem2 != null) {         actorSystem2.terminate().         Await.ready(actorSystem2.whenTerminated(), Duration.Inf()).     } }
true;public;0;36;/**  * Tests that the quarantine monitor detects if an actor system has been quarantined by another  * actor system.  */ ;/**  * Tests that the quarantine monitor detects if an actor system has been quarantined by another  * actor system.  */ @Test(timeout = 5000L) public void testWatcheeQuarantined() throws ExecutionException, InterruptedException {     TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler().     ActorRef watchee = null.     ActorRef watcher = null.     ActorRef monitor = null.     FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS).     FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS).     try {         // start the quarantine monitor in the watchee actor system         monitor = actorSystem2.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor").         watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee").         watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher").         final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem1).         final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee).         final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher).         // ping the watcher continuously         watchee.tell(new Ping(watcherAddress), ActorRef.noSender()).         // start watching the watchee         watcher.tell(new Watch(watcheeAddress), ActorRef.noSender()).         CompletableFuture<String> quarantineFuture = quarantineHandler.getWasQuarantinedByFuture().         Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get()).     } finally {         TestingUtils.stopActor(watchee).         TestingUtils.stopActor(watcher).         TestingUtils.stopActor(monitor).     } }
true;public;0;36;/**  * Tests that the quarantine monitor detects if an actor system quarantines another actor  * system.  */ ;/**  * Tests that the quarantine monitor detects if an actor system quarantines another actor  * system.  */ @Test(timeout = 5000L) public void testWatcherQuarantining() throws ExecutionException, InterruptedException {     TestingQuarantineHandler quarantineHandler = new TestingQuarantineHandler().     ActorRef watchee = null.     ActorRef watcher = null.     ActorRef monitor = null.     FiniteDuration timeout = new FiniteDuration(5, TimeUnit.SECONDS).     FiniteDuration interval = new FiniteDuration(200, TimeUnit.MILLISECONDS).     try {         // start the quarantine monitor in the watcher actor system         monitor = actorSystem1.actorOf(getQuarantineMonitorProps(quarantineHandler), "quarantineMonitor").         watchee = actorSystem2.actorOf(getWatcheeProps(timeout, interval, quarantineHandler), "watchee").         watcher = actorSystem1.actorOf(getWatcherProps(timeout, interval, quarantineHandler), "watcher").         final Address actorSystem1Address = AkkaUtils.getAddress(actorSystem2).         final String watcheeAddress = AkkaUtils.getAkkaURL(actorSystem2, watchee).         final String watcherAddress = AkkaUtils.getAkkaURL(actorSystem1, watcher).         // ping the watcher continuously         watchee.tell(new Ping(watcherAddress), ActorRef.noSender()).         // start watching the watchee         watcher.tell(new Watch(watcheeAddress), ActorRef.noSender()).         CompletableFuture<String> quarantineFuture = quarantineHandler.getHasQuarantinedFuture().         Assert.assertEquals(actorSystem1Address.toString(), quarantineFuture.get()).     } finally {         TestingUtils.stopActor(watchee).         TestingUtils.stopActor(watcher).         TestingUtils.stopActor(monitor).     } }
false;public;2;4;;@Override public void wasQuarantinedBy(String remoteSystem, ActorSystem actorSystem) {     wasQuarantinedByFuture.complete(remoteSystem). }
false;public;2;4;;@Override public void hasQuarantined(String remoteSystem, ActorSystem actorSystem) {     hasQuarantinedFuture.complete(remoteSystem). }
false;public;0;3;;public CompletableFuture<String> getWasQuarantinedByFuture() {     return wasQuarantinedByFuture. }
false;public;0;3;;public CompletableFuture<String> getHasQuarantinedFuture() {     return hasQuarantinedFuture. }
false;public;1;5;;@Override public void handleError(Throwable failure) {     wasQuarantinedByFuture.completeExceptionally(failure).     hasQuarantinedFuture.completeExceptionally(failure). }
false;;1;1;;void handleError(Throwable failure).
false;public;2;16;;@Override public void onComplete(Throwable failure, ActorRef success) throws Throwable {     if (success != null) {         getContext().watch(success).         // constantly ping the watchee         getContext().system().scheduler().schedule(zeroDelay, interval, success, "Watcher message", getContext().dispatcher(), getSelf()).     } else {         errorHandler.handleError(failure).     } }
false;public;1;25;;@Override public void onReceive(Object message) throws Exception {     if (message instanceof Watch) {         Watch watch = (Watch) message.         getContext().actorSelection(watch.getTarget()).resolveOne(timeout).onComplete(new OnComplete<ActorRef>() {              @Override             public void onComplete(Throwable failure, ActorRef success) throws Throwable {                 if (success != null) {                     getContext().watch(success).                     // constantly ping the watchee                     getContext().system().scheduler().schedule(zeroDelay, interval, success, "Watcher message", getContext().dispatcher(), getSelf()).                 } else {                     errorHandler.handleError(failure).                 }             }         }, getContext().dispatcher()).     } }
false;public;2;15;;@Override public void onComplete(Throwable failure, ActorRef success) throws Throwable {     if (success != null) {         // constantly ping the target         getContext().system().scheduler().schedule(zeroDelay, interval, success, "Watchee message", getContext().dispatcher(), getSelf()).     } else {         errorHandler.handleError(failure).     } }
false;public;1;24;;@Override public void onReceive(Object message) throws Exception {     if (message instanceof Ping) {         final Ping ping = (Ping) message.         getContext().actorSelection(ping.getTarget()).resolveOne(timeout).onComplete(new OnComplete<ActorRef>() {              @Override             public void onComplete(Throwable failure, ActorRef success) throws Throwable {                 if (success != null) {                     // constantly ping the target                     getContext().system().scheduler().schedule(zeroDelay, interval, success, "Watchee message", getContext().dispatcher(), getSelf()).                 } else {                     errorHandler.handleError(failure).                 }             }         }, getContext().dispatcher()).     } }
false;public;0;3;;public String getTarget() {     return target. }
false;public;0;3;;public String getTarget() {     return target. }
false;static;3;3;;static Props getWatcheeProps(FiniteDuration timeout, FiniteDuration interval, ErrorHandler errorHandler) {     return Props.create(Watchee.class, timeout, interval, errorHandler). }
false;static;3;3;;static Props getWatcherProps(FiniteDuration timeout, FiniteDuration interval, ErrorHandler errorHandler) {     return Props.create(Watcher.class, timeout, interval, errorHandler). }
false;static;1;3;;static Props getQuarantineMonitorProps(QuarantineHandler handler) {     return Props.create(QuarantineMonitor.class, handler, LOG). }
