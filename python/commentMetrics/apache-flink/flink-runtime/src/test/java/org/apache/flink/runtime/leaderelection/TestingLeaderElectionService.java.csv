commented;modifiers;parameterAmount;loc;comment;code
true;public,synchronized;0;3;/**  * Gets a future that completes when leadership is confirmed.  *  * <p>Note: the future is created upon calling {@link #isLeader(UUID)}.  */ ;/**  * Gets a future that completes when leadership is confirmed.  *  * <p>Note: the future is created upon calling {@link #isLeader(UUID)}.  */ public synchronized CompletableFuture<UUID> getConfirmationFuture() {     return confirmationFuture. }
false;public,synchronized;1;12;;@Override public synchronized void start(LeaderContender contender) {     assert (!getStartFuture().isDone()).     this.contender = contender.     if (hasLeadership) {         contender.grantLeadership(issuedLeaderSessionId).     }     startFuture.complete(null). }
false;public,synchronized;0;8;;@Override public synchronized void stop() throws Exception {     contender = null.     hasLeadership = false.     issuedLeaderSessionId = null.     startFuture.cancel(false).     startFuture = new CompletableFuture<>(). }
false;public,synchronized;1;6;;@Override public synchronized void confirmLeaderSessionID(UUID leaderSessionID) {     if (confirmationFuture != null) {         confirmationFuture.complete(leaderSessionID).     } }
false;public,synchronized;1;4;;@Override public synchronized boolean hasLeadership(@Nonnull UUID leaderSessionId) {     return hasLeadership && leaderSessionId.equals(issuedLeaderSessionId). }
false;public,synchronized;1;14;;public synchronized CompletableFuture<UUID> isLeader(UUID leaderSessionID) {     if (confirmationFuture != null) {         confirmationFuture.cancel(false).     }     confirmationFuture = new CompletableFuture<>().     hasLeadership = true.     issuedLeaderSessionId = leaderSessionID.     if (contender != null) {         contender.grantLeadership(leaderSessionID).     }     return confirmationFuture. }
false;public,synchronized;0;7;;public synchronized void notLeader() {     hasLeadership = false.     if (contender != null) {         contender.revokeLeadership().     } }
false;public,synchronized;0;7;;public synchronized String getAddress() {     if (contender != null) {         return contender.getAddress().     } else {         throw new IllegalStateException("TestingLeaderElectionService has not been started.").     } }
true;public,synchronized;0;3;/**  * Returns the start future indicating whether this leader election service  * has been started or not.  *  * @return Future which is completed once this service has been started  */ ;/**  * Returns the start future indicating whether this leader election service  * has been started or not.  *  * @return Future which is completed once this service has been started  */ public synchronized CompletableFuture<Void> getStartFuture() {     return startFuture. }
