commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void update(List<T> value) throws Exception {     ttlState.addAll(value). }
false;public;0;4;;@Override public Iterable<T> get() throws Exception {     return StreamSupport.stream(ttlState.get().spliterator(), false).collect(Collectors.toList()). }
false;public;0;4;;@Override public Object getOriginal() throws Exception {     return ttlState.original.get() == null ? emptyValue : ttlState.original.get(). }
false;public;0;5;;@SuppressWarnings("unchecked") @Override public <US extends State, SV> StateDescriptor<US, SV> createStateDescriptor() {     return (StateDescriptor<US, SV>) new ListStateDescriptor<>(getName(), serializer). }
false;;0;5;;@Override List<T> generateRandomUpdate() {     int size = RANDOM.nextInt(5).     return IntStream.range(0, size).mapToObj(this::generateRandomElement).collect(Collectors.toList()). }
false;abstract;1;1;;abstract T generateRandomElement(int i).
false;;2;8;;@Override Iterable<T> getMergeResult(List<Tuple2<String, List<T>>> unexpiredUpdatesToMerge, List<Tuple2<String, List<T>>> finalUpdatesToMerge) {     List<T> result = new ArrayList<>().     finalUpdatesToMerge.forEach(t -> result.addAll(t.f1)).     return result. }
