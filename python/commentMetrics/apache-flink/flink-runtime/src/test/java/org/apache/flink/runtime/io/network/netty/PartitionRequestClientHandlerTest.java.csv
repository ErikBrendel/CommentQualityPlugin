# id;timestamp;commentText;codeText;commentWords;codeWords
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1432295874;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1432625417;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1433740447;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1471602495;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1502111816;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1506583877;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1507316227;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1507647200;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_				new PartitionNotFoundException(new ResultPartitionID()),_				inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1516285456;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1516291532;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1518785736;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1518785736;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> @Test 	public void testReceivePartitionNotFoundException() throws Exception;1525116906;Verifies that {@link RemoteInputChannel#onFailedPartitionRequest()} is called when a_{@link PartitionNotFoundException} is received.;@Test_	public void testReceivePartitionNotFoundException() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final ErrorResponse partitionNotFound = new ErrorResponse(_			new PartitionNotFoundException(new ResultPartitionID()),_			inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		ChannelHandlerContext ctx = mock(ChannelHandlerContext.class)__		when(ctx.channel()).thenReturn(mock(Channel.class))___		client.channelActive(ctx)___		client.channelRead(ctx, partitionNotFound)___		verify(inputChannel, times(1)).onFailedPartitionRequest()__	};verifies,that,link,remote,input,channel,on,failed,partition,request,is,called,when,a,link,partition,not,found,exception,is,received;test,public,void,test,receive,partition,not,found,exception,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,error,response,partition,not,found,new,error,response,new,partition,not,found,exception,new,result,partition,id,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,channel,handler,context,ctx,mock,channel,handler,context,class,when,ctx,channel,then,return,mock,channel,class,client,channel,active,ctx,client,channel,read,ctx,partition,not,found,verify,input,channel,times,1,on,failed,partition,request
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel( 			SingleInputGate inputGate, 			PartitionRequestClient client, 			int initialBackoff, 			int maxBackoff) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@param initialBackoff initial back off (in ms) for retriggering subpartition requests (must be <tt>&gt_ 0</tt> to activate)_@param maxBackoff after which delay (in ms) to stop retriggering subpartition requests_@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(_			SingleInputGate inputGate,_			PartitionRequestClient client,_			int initialBackoff,_			int maxBackoff) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(client)___		ResultPartitionID partitionId = new ResultPartitionID()__		RemoteInputChannel inputChannel = new RemoteInputChannel(_			inputGate,_			0,_			partitionId,_			mock(ConnectionID.class),_			connectionManager,_			initialBackoff,_			maxBackoff,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(partitionId.getPartitionId(), inputChannel)__		return inputChannel__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,param,initial,backoff,initial,back,off,in,ms,for,retriggering,subpartition,requests,must,be,tt,gt,0,tt,to,activate,param,max,backoff,after,which,delay,in,ms,to,stop,retriggering,subpartition,requests,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,int,initial,backoff,int,max,backoff,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,client,result,partition,id,partition,id,new,result,partition,id,remote,input,channel,input,channel,new,remote,input,channel,input,gate,0,partition,id,mock,connection,id,class,connection,manager,initial,backoff,max,backoff,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,partition,id,get,partition,id,input,channel,return,input,channel
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel( 			SingleInputGate inputGate, 			PartitionRequestClient client, 			int initialBackoff, 			int maxBackoff) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@param initialBackoff initial back off (in ms) for retriggering subpartition requests (must be <tt>&gt_ 0</tt> to activate)_@param maxBackoff after which delay (in ms) to stop retriggering subpartition requests_@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(_			SingleInputGate inputGate,_			PartitionRequestClient client,_			int initialBackoff,_			int maxBackoff) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(client)___		ResultPartitionID partitionId = new ResultPartitionID()__		RemoteInputChannel inputChannel = new RemoteInputChannel(_			inputGate,_			0,_			partitionId,_			mock(ConnectionID.class),_			connectionManager,_			initialBackoff,_			maxBackoff,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(partitionId.getPartitionId(), inputChannel)__		return inputChannel__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,param,initial,backoff,initial,back,off,in,ms,for,retriggering,subpartition,requests,must,be,tt,gt,0,tt,to,activate,param,max,backoff,after,which,delay,in,ms,to,stop,retriggering,subpartition,requests,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,int,initial,backoff,int,max,backoff,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,client,result,partition,id,partition,id,new,result,partition,id,remote,input,channel,input,channel,new,remote,input,channel,input,gate,0,partition,id,mock,connection,id,class,connection,manager,initial,backoff,max,backoff,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,partition,id,get,partition,id,input,channel,return,input,channel
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel( 			SingleInputGate inputGate, 			PartitionRequestClient client, 			int initialBackoff, 			int maxBackoff) throws Exception;1525116906;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@param initialBackoff initial back off (in ms) for retriggering subpartition requests (must be <tt>&gt_ 0</tt> to activate)_@param maxBackoff after which delay (in ms) to stop retriggering subpartition requests_@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(_			SingleInputGate inputGate,_			PartitionRequestClient client,_			int initialBackoff,_			int maxBackoff) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(client)___		ResultPartitionID partitionId = new ResultPartitionID()__		RemoteInputChannel inputChannel = new RemoteInputChannel(_			inputGate,_			0,_			partitionId,_			mock(ConnectionID.class),_			connectionManager,_			initialBackoff,_			maxBackoff,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())___		inputGate.setInputChannel(partitionId.getPartitionId(), inputChannel)__		return inputChannel__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,param,initial,backoff,initial,back,off,in,ms,for,retriggering,subpartition,requests,must,be,tt,gt,0,tt,to,activate,param,max,backoff,after,which,delay,in,ms,to,stop,retriggering,subpartition,requests,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,int,initial,backoff,int,max,backoff,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,client,result,partition,id,partition,id,new,result,partition,id,remote,input,channel,input,channel,new,remote,input,channel,input,gate,0,partition,id,mock,connection,id,class,connection,manager,initial,backoff,max,backoff,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,input,gate,set,input,channel,partition,id,get,partition,id,input,channel,return,input,channel
PartitionRequestClientHandlerTest -> @Test 	public void testThrowExceptionForNoAvailableBuffer() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onError(Throwable)} is called when a_{@link BufferResponse} is received but no available buffer in input channel.;@Test_	public void testThrowExceptionForNoAvailableBuffer() throws Exception {_		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.requestBuffer()).thenReturn(null)___		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId(), 2)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onError(any(IllegalStateException.class))__	};verifies,that,link,remote,input,channel,on,error,throwable,is,called,when,a,link,buffer,response,is,received,but,no,available,buffer,in,input,channel;test,public,void,test,throw,exception,for,no,available,buffer,throws,exception,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,request,buffer,then,return,null,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,2,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,error,any,illegal,state,exception,class
PartitionRequestClientHandlerTest -> @Test 	public void testThrowExceptionForNoAvailableBuffer() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onError(Throwable)} is called when a_{@link BufferResponse} is received but no available buffer in input channel.;@Test_	public void testThrowExceptionForNoAvailableBuffer() throws Exception {_		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		final CreditBasedClientHandler handler = new CreditBasedClientHandler()__		handler.addInputChannel(inputChannel)___		assertEquals("There should be no buffers available in the channel.",_			0, inputChannel.getNumberOfAvailableBuffers())___		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId(), 2)__		handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onError(any(IllegalStateException.class))__	};verifies,that,link,remote,input,channel,on,error,throwable,is,called,when,a,link,buffer,response,is,received,but,no,available,buffer,in,input,channel;test,public,void,test,throw,exception,for,no,available,buffer,throws,exception,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,2,handler,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,error,any,illegal,state,exception,class
PartitionRequestClientHandlerTest -> @Test 	public void testThrowExceptionForNoAvailableBuffer() throws Exception;1516285456;Verifies that {@link RemoteInputChannel#onError(Throwable)} is called when a_{@link BufferResponse} is received but no available buffer in input channel.;@Test_	public void testThrowExceptionForNoAvailableBuffer() throws Exception {_		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		final CreditBasedClientHandler handler = new CreditBasedClientHandler()__		handler.addInputChannel(inputChannel)___		assertEquals("There should be no buffers available in the channel.",_			0, inputChannel.getNumberOfAvailableBuffers())___		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)__		handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onError(any(IllegalStateException.class))__	};verifies,that,link,remote,input,channel,on,error,throwable,is,called,when,a,link,buffer,response,is,received,but,no,available,buffer,in,input,channel;test,public,void,test,throw,exception,for,no,available,buffer,throws,exception,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,handler,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,error,any,illegal,state,exception,class
PartitionRequestClientHandlerTest -> @Test 	public void testThrowExceptionForNoAvailableBuffer() throws Exception;1516291532;Verifies that {@link RemoteInputChannel#onError(Throwable)} is called when a_{@link BufferResponse} is received but no available buffer in input channel.;@Test_	public void testThrowExceptionForNoAvailableBuffer() throws Exception {_		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		final CreditBasedClientHandler handler = new CreditBasedClientHandler()__		handler.addInputChannel(inputChannel)___		assertEquals("There should be no buffers available in the channel.",_			0, inputChannel.getNumberOfAvailableBuffers())___		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)__		handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onError(any(IllegalStateException.class))__	};verifies,that,link,remote,input,channel,on,error,throwable,is,called,when,a,link,buffer,response,is,received,but,no,available,buffer,in,input,channel;test,public,void,test,throw,exception,for,no,available,buffer,throws,exception,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,handler,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,error,any,illegal,state,exception,class
PartitionRequestClientHandlerTest -> @Test 	public void testThrowExceptionForNoAvailableBuffer() throws Exception;1518785736;Verifies that {@link RemoteInputChannel#onError(Throwable)} is called when a_{@link BufferResponse} is received but no available buffer in input channel.;@Test_	public void testThrowExceptionForNoAvailableBuffer() throws Exception {_		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		handler.addInputChannel(inputChannel)___		assertEquals("There should be no buffers available in the channel.",_			0, inputChannel.getNumberOfAvailableBuffers())___		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)__		handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onError(any(IllegalStateException.class))__	};verifies,that,link,remote,input,channel,on,error,throwable,is,called,when,a,link,buffer,response,is,received,but,no,available,buffer,in,input,channel;test,public,void,test,throw,exception,for,no,available,buffer,throws,exception,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,final,partition,request,client,handler,handler,new,partition,request,client,handler,handler,add,input,channel,input,channel,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,handler,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,error,any,illegal,state,exception,class
PartitionRequestClientHandlerTest -> private BufferResponse createMockReceivedBuffer(InputChannelID channelId) throws IOException;1425488284;Returns a mocked deserialized buffer message as it would be received during runtime.;private BufferResponse createMockReceivedBuffer(InputChannelID channelId) throws IOException {__		_		Buffer buffer = new Buffer(new MemorySegment(new byte[1024]), mock(BufferRecycler.class))__		BufferResponse resp = new BufferResponse(buffer, 0, channelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,mocked,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,mock,received,buffer,input,channel,id,channel,id,throws,ioexception,buffer,buffer,new,buffer,new,memory,segment,new,byte,1024,mock,buffer,recycler,class,buffer,response,resp,new,buffer,response,buffer,0,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createMockReceivedBuffer(InputChannelID channelId) throws IOException;1426697080;Returns a mocked deserialized buffer message as it would be received during runtime.;private BufferResponse createMockReceivedBuffer(InputChannelID channelId) throws IOException {__		_		Buffer buffer = new Buffer(new MemorySegment(new byte[1024]), mock(BufferRecycler.class))__		BufferResponse resp = new BufferResponse(buffer, 0, channelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,mocked,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,mock,received,buffer,input,channel,id,channel,id,throws,ioexception,buffer,buffer,new,buffer,new,memory,segment,new,byte,1024,mock,buffer,recycler,class,buffer,response,resp,new,buffer,response,buffer,0,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private SingleInputGate createSingleInputGate();1515408360;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;private SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;private,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> private SingleInputGate createSingleInputGate();1516285456;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;private SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;private,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> private SingleInputGate createSingleInputGate();1516291532;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;private SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED_CREDIT_BASED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;private,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final Buffer buffer = TestBufferFactory.createBuffer()__		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.requestBuffer()).thenReturn(buffer)___		final int backlog = 2__		final BufferResponse bufferResponse = createBufferResponse(_			TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId(), backlog)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___		verify(inputChannel, times(1)).onBuffer(buffer, 0, backlog)__	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,buffer,buffer,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,request,buffer,then,return,buffer,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,backlog,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,buffer,response,verify,input,channel,times,1,on,buffer,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1515408360;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__			assertEquals(2, inputChannel.getSenderBacklog())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,assert,equals,2,input,channel,get,sender,backlog,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1516285456;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__			assertEquals(2, inputChannel.getSenderBacklog())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,assert,equals,2,input,channel,get,sender,backlog,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1516291532;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__			assertEquals(2, inputChannel.getSenderBacklog())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,assert,equals,2,input,channel,get,sender,backlog,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1518785736;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__			assertEquals(2, inputChannel.getSenderBacklog())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,partition,request,client,handler,handler,new,partition,request,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,assert,equals,2,input,channel,get,sender,backlog,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1518785736;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,partition,request,client,handler,handler,new,partition,request,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveBuffer() throws Exception;1525116906;Verifies that {@link RemoteInputChannel#onBuffer(Buffer, int, int)} is called when a_{@link BufferResponse} is received.;@Test_	public void testReceiveBuffer() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(8, 8)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__			handler.addInputChannel(inputChannel)___			final int backlog = 2__			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), backlog)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(1, inputChannel.getNumberOfQueuedBuffers())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,on,buffer,buffer,int,int,is,called,when,a,link,buffer,response,is,received;test,public,void,test,receive,buffer,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,8,8,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,partition,request,client,handler,handler,new,partition,request,client,handler,handler,add,input,channel,input,channel,final,int,backlog,2,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,backlog,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,1,input,channel,get,number,of,queued,buffers,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test(timeout=60000) 	public void testReleaseInputChannelDuringDecode() throws Exception;1425488284;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released, the_handler did not notice this from the buffer provider.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout=60000)_	public void testReleaseInputChannelDuringDecode() throws Exception {__		final RemoteInputChannel mockInputChannel = createMockReleasedInputChannel(_				new InputChannelID())___		final BufferResponse mockReceivedBuffer = createMockReceivedBuffer(_				mockInputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(mockInputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), mockReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,the,handler,did,not,notice,this,from,the,buffer,provider,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,public,void,test,release,input,channel,during,decode,throws,exception,final,remote,input,channel,mock,input,channel,create,mock,released,input,channel,new,input,channel,id,final,buffer,response,mock,received,buffer,create,mock,received,buffer,mock,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,mock,input,channel,client,channel,read,mock,channel,handler,context,class,mock,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout=60000) 	public void testReleaseInputChannelDuringDecode() throws Exception;1426697080;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released, the_handler did not notice this from the buffer provider.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout=60000)_	public void testReleaseInputChannelDuringDecode() throws Exception {__		final RemoteInputChannel mockInputChannel = createMockReleasedInputChannel(_				new InputChannelID())___		final BufferResponse mockReceivedBuffer = createMockReceivedBuffer(_				mockInputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(mockInputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), mockReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,the,handler,did,not,notice,this,from,the,buffer,provider,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,public,void,test,release,input,channel,during,decode,throws,exception,final,remote,input,channel,mock,input,channel,create,mock,released,input,channel,new,input,channel,id,final,buffer,response,mock,received,buffer,create,mock,received,buffer,mock,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,mock,input,channel,client,channel,read,mock,channel,handler,context,class,mock,received,buffer
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1426971870;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()___		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1432295874;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1432625417;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1433740447;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1471602495;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1502111816;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1506583877;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1507316227;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1507647200;Tests a fix for FLINK-1761.__<p> FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final BufferResponse receivedBuffer = createBufferResponse(_				emptyBuffer, 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1515408360;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final int backlog = 2__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,int,backlog,2,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1515408360;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer())___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer()__		emptyBuffer.setSize(0)___		final int backlog = 2__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,empty,buffer,set,size,0,final,int,backlog,2,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1516285456;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer(0)___		final int backlog = 2__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,0,final,int,backlog,2,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1516291532;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer(0)___		final int backlog = 2__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final CreditBasedClientHandler client = new CreditBasedClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,0,final,int,backlog,2,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,credit,based,client,handler,client,new,credit,based,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1518785736;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer(0)___		final int backlog = 2__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,0,final,int,backlog,2,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1518785736;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer(0)___		final int backlog = -1__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,0,final,int,backlog,1,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testReceiveEmptyBuffer() throws Exception;1525116906;Tests a fix for FLINK-1761.__<p>FLINK-1761 discovered an IndexOutOfBoundsException, when receiving buffers of size 0.;@Test_	public void testReceiveEmptyBuffer() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(TestBufferFactory.createBuffer(0))___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		_		final Buffer emptyBuffer = TestBufferFactory.createBuffer(0)___		final int backlog = -1__		final BufferResponse receivedBuffer = createBufferResponse(_			emptyBuffer, 0, inputChannel.getInputChannelId(), backlog)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		_		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)___		_		verify(inputChannel, never()).onError(any(Throwable.class))__		verify(inputChannel, times(1)).onEmptyBuffer(0, backlog)__	};tests,a,fix,for,flink,1761,p,flink,1761,discovered,an,index,out,of,bounds,exception,when,receiving,buffers,of,size,0;test,public,void,test,receive,empty,buffer,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,test,buffer,factory,create,buffer,0,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,empty,buffer,test,buffer,factory,create,buffer,0,final,int,backlog,1,final,buffer,response,received,buffer,create,buffer,response,empty,buffer,0,input,channel,get,input,channel,id,backlog,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer,verify,input,channel,never,on,error,any,throwable,class,verify,input,channel,times,1,on,empty,buffer,0,backlog
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailable() throws Exception;1515408360;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,_and verifies the behaviour of credit notification by triggering channel's writability changed.;@Test_	public void testNotifyCreditAvailable() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate)__		final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1)__		inputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel1.requestSubpartition(0)__			inputChannel2.requestSubpartition(0)__			handler.addInputChannel(inputChannel1)__			handler.addInputChannel(inputChannel2)___			_			_			final BufferResponse bufferResponse1 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1)__			final BufferResponse bufferResponse2 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2)___			_			_			handler.notifyCreditAvailable(inputChannel1)__			handler.notifyCreditAvailable(inputChannel2)___			assertEquals(2, inputChannel1.getUnannouncedCredit())__			assertEquals(2, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertTrue(channel.isWritable())__			Object readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			assertNull(channel.readOutbound())___			final int highWaterMark = channel.config().getWriteBufferHighWaterMark()__			_			_			ByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark)__			channel.write(channelBlockingBuffer)___			_			final BufferResponse bufferResponse3 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3)__			handler.notifyCreditAvailable(inputChannel1)___			assertEquals(1, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertFalse(channel.isWritable())__			assertNull(channel.readOutbound())___			_			channel.flush()__			assertSame(channelBlockingBuffer, channel.readOutbound())___			_			assertTrue(channel.isWritable())__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(1, ((AddCredit) readFromOutbound).credit)__			assertEquals(0, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,for,notifying,credits,and,verifies,the,behaviour,of,credit,notification,by,triggering,channel,s,writability,changed;test,public,void,test,notify,credit,available,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel1,create,remote,input,channel,input,gate,final,remote,input,channel,input,channel2,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel1,get,partition,id,get,partition,id,input,channel1,input,gate,set,input,channel,input,channel2,get,partition,id,get,partition,id,input,channel2,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel1,request,subpartition,0,input,channel2,request,subpartition,0,handler,add,input,channel,input,channel1,handler,add,input,channel,input,channel2,final,buffer,response,buffer,response1,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel1,get,input,channel,id,1,final,buffer,response,buffer,response2,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel2,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response1,handler,channel,read,mock,channel,handler,context,class,buffer,response2,handler,notify,credit,available,input,channel1,handler,notify,credit,available,input,channel2,assert,equals,2,input,channel1,get,unannounced,credit,assert,equals,2,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,true,channel,is,writable,object,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,assert,null,channel,read,outbound,final,int,high,water,mark,channel,config,get,write,buffer,high,water,mark,byte,buf,channel,blocking,buffer,unpooled,buffer,high,water,mark,writer,index,high,water,mark,channel,write,channel,blocking,buffer,final,buffer,response,buffer,response3,create,buffer,response,test,buffer,factory,create,buffer,32,1,input,channel1,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response3,handler,notify,credit,available,input,channel1,assert,equals,1,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,false,channel,is,writable,assert,null,channel,read,outbound,channel,flush,assert,same,channel,blocking,buffer,channel,read,outbound,assert,true,channel,is,writable,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,1,add,credit,read,from,outbound,credit,assert,equals,0,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailable() throws Exception;1516285456;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,_and verifies the behaviour of credit notification by triggering channel's writability changed.;@Test_	public void testNotifyCreditAvailable() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate)__		final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1)__		inputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel1.requestSubpartition(0)__			inputChannel2.requestSubpartition(0)__			handler.addInputChannel(inputChannel1)__			handler.addInputChannel(inputChannel2)___			_			_			final BufferResponse bufferResponse1 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1)__			final BufferResponse bufferResponse2 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2)___			_			_			handler.notifyCreditAvailable(inputChannel1)__			handler.notifyCreditAvailable(inputChannel2)___			assertEquals(2, inputChannel1.getUnannouncedCredit())__			assertEquals(2, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertTrue(channel.isWritable())__			Object readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			assertNull(channel.readOutbound())___			final int highWaterMark = channel.config().getWriteBufferHighWaterMark()__			_			_			ByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark)__			channel.write(channelBlockingBuffer)___			_			final BufferResponse bufferResponse3 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3)__			handler.notifyCreditAvailable(inputChannel1)___			assertEquals(1, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertFalse(channel.isWritable())__			assertNull(channel.readOutbound())___			_			channel.flush()__			assertSame(channelBlockingBuffer, channel.readOutbound())___			_			assertTrue(channel.isWritable())__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(1, ((AddCredit) readFromOutbound).credit)__			assertEquals(0, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,for,notifying,credits,and,verifies,the,behaviour,of,credit,notification,by,triggering,channel,s,writability,changed;test,public,void,test,notify,credit,available,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel1,create,remote,input,channel,input,gate,final,remote,input,channel,input,channel2,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel1,get,partition,id,get,partition,id,input,channel1,input,gate,set,input,channel,input,channel2,get,partition,id,get,partition,id,input,channel2,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel1,request,subpartition,0,input,channel2,request,subpartition,0,handler,add,input,channel,input,channel1,handler,add,input,channel,input,channel2,final,buffer,response,buffer,response1,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel1,get,input,channel,id,1,final,buffer,response,buffer,response2,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel2,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response1,handler,channel,read,mock,channel,handler,context,class,buffer,response2,handler,notify,credit,available,input,channel1,handler,notify,credit,available,input,channel2,assert,equals,2,input,channel1,get,unannounced,credit,assert,equals,2,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,true,channel,is,writable,object,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,assert,null,channel,read,outbound,final,int,high,water,mark,channel,config,get,write,buffer,high,water,mark,byte,buf,channel,blocking,buffer,unpooled,buffer,high,water,mark,writer,index,high,water,mark,channel,write,channel,blocking,buffer,final,buffer,response,buffer,response3,create,buffer,response,test,buffer,factory,create,buffer,32,1,input,channel1,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response3,handler,notify,credit,available,input,channel1,assert,equals,1,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,false,channel,is,writable,assert,null,channel,read,outbound,channel,flush,assert,same,channel,blocking,buffer,channel,read,outbound,assert,true,channel,is,writable,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,1,add,credit,read,from,outbound,credit,assert,equals,0,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailable() throws Exception;1516291532;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,_and verifies the behaviour of credit notification by triggering channel's writability changed.;@Test_	public void testNotifyCreditAvailable() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate)__		final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel1.getPartitionId().getPartitionId(), inputChannel1)__		inputGate.setInputChannel(inputChannel2.getPartitionId().getPartitionId(), inputChannel2)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel1.requestSubpartition(0)__			inputChannel2.requestSubpartition(0)__			handler.addInputChannel(inputChannel1)__			handler.addInputChannel(inputChannel2)___			_			_			final BufferResponse bufferResponse1 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1)__			final BufferResponse bufferResponse2 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2)___			_			_			handler.notifyCreditAvailable(inputChannel1)__			handler.notifyCreditAvailable(inputChannel2)___			assertEquals(2, inputChannel1.getUnannouncedCredit())__			assertEquals(2, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertTrue(channel.isWritable())__			Object readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			assertNull(channel.readOutbound())___			final int highWaterMark = channel.config().getWriteBufferHighWaterMark()__			_			_			ByteBuf channelBlockingBuffer = Unpooled.buffer(highWaterMark).writerIndex(highWaterMark)__			channel.write(channelBlockingBuffer)___			_			final BufferResponse bufferResponse3 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3)__			handler.notifyCreditAvailable(inputChannel1)___			assertEquals(1, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertFalse(channel.isWritable())__			assertNull(channel.readOutbound())___			_			channel.flush()__			assertSame(channelBlockingBuffer, channel.readOutbound())___			_			assertTrue(channel.isWritable())__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(1, ((AddCredit) readFromOutbound).credit)__			assertEquals(0, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,for,notifying,credits,and,verifies,the,behaviour,of,credit,notification,by,triggering,channel,s,writability,changed;test,public,void,test,notify,credit,available,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel1,create,remote,input,channel,input,gate,final,remote,input,channel,input,channel2,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel1,get,partition,id,get,partition,id,input,channel1,input,gate,set,input,channel,input,channel2,get,partition,id,get,partition,id,input,channel2,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel1,request,subpartition,0,input,channel2,request,subpartition,0,handler,add,input,channel,input,channel1,handler,add,input,channel,input,channel2,final,buffer,response,buffer,response1,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel1,get,input,channel,id,1,final,buffer,response,buffer,response2,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel2,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response1,handler,channel,read,mock,channel,handler,context,class,buffer,response2,handler,notify,credit,available,input,channel1,handler,notify,credit,available,input,channel2,assert,equals,2,input,channel1,get,unannounced,credit,assert,equals,2,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,true,channel,is,writable,object,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,2,add,credit,read,from,outbound,credit,assert,null,channel,read,outbound,final,int,high,water,mark,channel,config,get,write,buffer,high,water,mark,byte,buf,channel,blocking,buffer,unpooled,buffer,high,water,mark,writer,index,high,water,mark,channel,write,channel,blocking,buffer,final,buffer,response,buffer,response3,create,buffer,response,test,buffer,factory,create,buffer,32,1,input,channel1,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response3,handler,notify,credit,available,input,channel1,assert,equals,1,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,false,channel,is,writable,assert,null,channel,read,outbound,channel,flush,assert,same,channel,blocking,buffer,channel,read,outbound,assert,true,channel,is,writable,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,1,add,credit,read,from,outbound,credit,assert,equals,0,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailable() throws Exception;1518785736;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline for notifying credits,_and verifies the behaviour of credit notification by triggering channel's writability changed.;@Test_	public void testNotifyCreditAvailable() throws Exception {_		final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		final EmbeddedChannel channel = new EmbeddedChannel(handler)__		final PartitionRequestClient client = new PartitionRequestClient(_			channel, handler, mock(ConnectionID.class), mock(PartitionRequestClientFactory.class))___		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel1 = createRemoteInputChannel(inputGate, client)__		final RemoteInputChannel inputChannel2 = createRemoteInputChannel(inputGate, client)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			inputChannel1.requestSubpartition(0)__			inputChannel2.requestSubpartition(0)___			_			assertTrue(channel.isWritable())__			Object readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(PartitionRequest.class))__			assertEquals(inputChannel1.getInputChannelId(), ((PartitionRequest) readFromOutbound).receiverId)__			assertEquals(2, ((PartitionRequest) readFromOutbound).credit)___			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(PartitionRequest.class))__			assertEquals(inputChannel2.getInputChannelId(), ((PartitionRequest) readFromOutbound).receiverId)__			assertEquals(2, ((PartitionRequest) readFromOutbound).credit)___			_			_			final BufferResponse bufferResponse1 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel1.getInputChannelId(), 1)__			final BufferResponse bufferResponse2 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel2.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse2)___			assertEquals(2, inputChannel1.getUnannouncedCredit())__			assertEquals(2, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(inputChannel1.getInputChannelId(), ((AddCredit) readFromOutbound).receiverId)__			assertEquals(2, ((AddCredit) readFromOutbound).credit)___			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(inputChannel2.getInputChannelId(), ((AddCredit) readFromOutbound).receiverId)__			assertEquals(2, ((AddCredit) readFromOutbound).credit)__			assertNull(channel.readOutbound())___			ByteBuf channelBlockingBuffer = blockChannel(channel)___			_			final BufferResponse bufferResponse3 = createBufferResponse(_				TestBufferFactory.createBuffer(32), 1, inputChannel1.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse3)___			assertEquals(1, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			channel.runPendingTasks()___			_			assertFalse(channel.isWritable())__			assertNull(channel.readOutbound())___			_			channel.flush()__			assertSame(channelBlockingBuffer, channel.readOutbound())___			_			assertTrue(channel.isWritable())__			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(AddCredit.class))__			assertEquals(1, ((AddCredit) readFromOutbound).credit)__			assertEquals(0, inputChannel1.getUnannouncedCredit())__			assertEquals(0, inputChannel2.getUnannouncedCredit())___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,for,notifying,credits,and,verifies,the,behaviour,of,credit,notification,by,triggering,channel,s,writability,changed;test,public,void,test,notify,credit,available,throws,exception,final,partition,request,client,handler,handler,new,partition,request,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,final,partition,request,client,client,new,partition,request,client,channel,handler,mock,connection,id,class,mock,partition,request,client,factory,class,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel1,create,remote,input,channel,input,gate,client,final,remote,input,channel,input,channel2,create,remote,input,channel,input,gate,client,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel1,request,subpartition,0,input,channel2,request,subpartition,0,assert,true,channel,is,writable,object,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,partition,request,class,assert,equals,input,channel1,get,input,channel,id,partition,request,read,from,outbound,receiver,id,assert,equals,2,partition,request,read,from,outbound,credit,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,partition,request,class,assert,equals,input,channel2,get,input,channel,id,partition,request,read,from,outbound,receiver,id,assert,equals,2,partition,request,read,from,outbound,credit,final,buffer,response,buffer,response1,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel1,get,input,channel,id,1,final,buffer,response,buffer,response2,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel2,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response1,handler,channel,read,mock,channel,handler,context,class,buffer,response2,assert,equals,2,input,channel1,get,unannounced,credit,assert,equals,2,input,channel2,get,unannounced,credit,channel,run,pending,tasks,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,input,channel1,get,input,channel,id,add,credit,read,from,outbound,receiver,id,assert,equals,2,add,credit,read,from,outbound,credit,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,input,channel2,get,input,channel,id,add,credit,read,from,outbound,receiver,id,assert,equals,2,add,credit,read,from,outbound,credit,assert,null,channel,read,outbound,byte,buf,channel,blocking,buffer,block,channel,channel,final,buffer,response,buffer,response3,create,buffer,response,test,buffer,factory,create,buffer,32,1,input,channel1,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response3,assert,equals,1,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,channel,run,pending,tasks,assert,false,channel,is,writable,assert,null,channel,read,outbound,channel,flush,assert,same,channel,blocking,buffer,channel,read,outbound,assert,true,channel,is,writable,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,add,credit,class,assert,equals,1,add,credit,read,from,outbound,credit,assert,equals,0,input,channel1,get,unannounced,credit,assert,equals,0,input,channel2,get,unannounced,credit,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception {_		return createRemoteInputChannel(inputGate, client, 0, 0)__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,throws,exception,return,create,remote,input,channel,input,gate,client,0,0
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception {_		return createRemoteInputChannel(inputGate, client, 0, 0)__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,throws,exception,return,create,remote,input,channel,input,gate,client,0,0
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception;1525116906;Creates and returns a remote input channel for the specific input gate with specific partition request client.__@param inputGate The input gate owns the created input channel._@param client The client is used to send partition request._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate, PartitionRequestClient client) throws Exception {_		return createRemoteInputChannel(inputGate, client, 0, 0)__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,with,specific,partition,request,client,param,input,gate,the,input,gate,owns,the,created,input,channel,param,client,the,client,is,used,to,send,partition,request,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,partition,request,client,client,throws,exception,return,create,remote,input,channel,input,gate,client,0,0
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1426971870;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1432295874;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1432625417;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1433740447;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1471602495;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1502111816;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1506583877;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1507316227;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1507647200;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse ReceivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId())___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), ReceivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1515408360;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_			TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1515408360;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1516285456;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1516291532;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1518785736;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1518785736;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test(timeout = 60000) 	@SuppressWarnings("unchecked") 	public void testReleaseInputChannelDuringDecode() throws Exception;1525116906;Tests a fix for FLINK-1627.__<p> FLINK-1627 discovered a race condition, which could lead to an infinite loop when a_receiver was cancelled during a certain time of decoding a message. The test reproduces the_input, which lead to the infinite loop: when the handler gets a reference to the buffer_provider of the receiving input channel, but the respective input channel is released (and_the corresponding buffer provider destroyed), the handler did not notice this.__@see <a href="https://issues.apache.org/jira/browse/FLINK-1627">FLINK-1627</a>;@Test(timeout = 60000)_	@SuppressWarnings("unchecked")_	public void testReleaseInputChannelDuringDecode() throws Exception {_		_		final BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.requestBuffer()).thenReturn(null)__		when(bufferProvider.isDestroyed()).thenReturn(true)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)___		final RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(new InputChannelID())__		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider)___		final BufferResponse receivedBuffer = createBufferResponse(_				TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE), 0, inputChannel.getInputChannelId(), 2)___		final PartitionRequestClientHandler client = new PartitionRequestClientHandler()__		client.addInputChannel(inputChannel)___		client.channelRead(mock(ChannelHandlerContext.class), receivedBuffer)__	};tests,a,fix,for,flink,1627,p,flink,1627,discovered,a,race,condition,which,could,lead,to,an,infinite,loop,when,a,receiver,was,cancelled,during,a,certain,time,of,decoding,a,message,the,test,reproduces,the,input,which,lead,to,the,infinite,loop,when,the,handler,gets,a,reference,to,the,buffer,provider,of,the,receiving,input,channel,but,the,respective,input,channel,is,released,and,the,corresponding,buffer,provider,destroyed,the,handler,did,not,notice,this,see,a,href,https,issues,apache,org,jira,browse,flink,1627,flink,1627,a;test,timeout,60000,suppress,warnings,unchecked,public,void,test,release,input,channel,during,decode,throws,exception,final,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,request,buffer,then,return,null,when,buffer,provider,is,destroyed,then,return,true,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,final,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,new,input,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,final,buffer,response,received,buffer,create,buffer,response,test,buffer,factory,create,buffer,test,buffer,factory,0,input,channel,get,input,channel,id,2,final,partition,request,client,handler,client,new,partition,request,client,handler,client,add,input,channel,input,channel,client,channel,read,mock,channel,handler,context,class,received,buffer
PartitionRequestClientHandlerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception;1471602495;Tests that an unsuccessful message decode call for a staged message_does not leave the channel with auto read set to false.;@Test_	@SuppressWarnings("unchecked")_	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception {_		PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		EmbeddedChannel channel = new EmbeddedChannel(handler)___		final AtomicReference<EventListener<Buffer>> listener = new AtomicReference<>()___		BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.addListener(any(EventListener.class))).thenAnswer(new Answer<Boolean>() {_			@Override_			@SuppressWarnings("unchecked")_			public Boolean answer(InvocationOnMock invocation) throws Throwable {_				listener.set((EventListener<Buffer>) invocation.getArguments()[0])__				return true__			}_		})___		when(bufferProvider.requestBuffer()).thenReturn(null)___		InputChannelID channelId = new InputChannelID(0, 0)__		RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(channelId)___		_		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider, bufferProvider, null)___		handler.addInputChannel(inputChannel)___		BufferResponse msg = createBufferResponse(createBuffer(true), 0, channelId)___		_		_		assertTrue(channel.config().isAutoRead())__		channel.writeInbound(msg)___		_		assertFalse(channel.config().isAutoRead())___		_		msg = createBufferResponse(createBuffer(true), 1, channelId)__		channel.writeInbound(msg)___		msg = createBufferResponse(createBuffer(true), 2, channelId)__		channel.writeInbound(msg)___		_		Buffer availableBuffer = createBuffer(false)__		listener.get().onEvent(availableBuffer)___		_		_		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)__		when(bufferProvider.isDestroyed()).thenReturn(true)___		_		_		_		channel.runPendingTasks()___		assertTrue(channel.config().isAutoRead())__	};tests,that,an,unsuccessful,message,decode,call,for,a,staged,message,does,not,leave,the,channel,with,auto,read,set,to,false;test,suppress,warnings,unchecked,public,void,test,auto,read,after,unsuccessful,staged,message,throws,exception,partition,request,client,handler,handler,new,partition,request,client,handler,embedded,channel,channel,new,embedded,channel,handler,final,atomic,reference,event,listener,buffer,listener,new,atomic,reference,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,add,listener,any,event,listener,class,then,answer,new,answer,boolean,override,suppress,warnings,unchecked,public,boolean,answer,invocation,on,mock,invocation,throws,throwable,listener,set,event,listener,buffer,invocation,get,arguments,0,return,true,when,buffer,provider,request,buffer,then,return,null,input,channel,id,channel,id,new,input,channel,id,0,0,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,buffer,provider,null,handler,add,input,channel,input,channel,buffer,response,msg,create,buffer,response,create,buffer,true,0,channel,id,assert,true,channel,config,is,auto,read,channel,write,inbound,msg,assert,false,channel,config,is,auto,read,msg,create,buffer,response,create,buffer,true,1,channel,id,channel,write,inbound,msg,msg,create,buffer,response,create,buffer,true,2,channel,id,channel,write,inbound,msg,buffer,available,buffer,create,buffer,false,listener,get,on,event,available,buffer,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,when,buffer,provider,is,destroyed,then,return,true,channel,run,pending,tasks,assert,true,channel,config,is,auto,read
PartitionRequestClientHandlerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception;1502111816;Tests that an unsuccessful message decode call for a staged message_does not leave the channel with auto read set to false.;@Test_	@SuppressWarnings("unchecked")_	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception {_		PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		EmbeddedChannel channel = new EmbeddedChannel(handler)___		final AtomicReference<EventListener<Buffer>> listener = new AtomicReference<>()___		BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.addListener(any(EventListener.class))).thenAnswer(new Answer<Boolean>() {_			@Override_			@SuppressWarnings("unchecked")_			public Boolean answer(InvocationOnMock invocation) throws Throwable {_				listener.set((EventListener<Buffer>) invocation.getArguments()[0])__				return true__			}_		})___		when(bufferProvider.requestBuffer()).thenReturn(null)___		InputChannelID channelId = new InputChannelID(0, 0)__		RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(channelId)___		_		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider, bufferProvider, null)___		handler.addInputChannel(inputChannel)___		BufferResponse msg = createBufferResponse(createBuffer(true), 0, channelId)___		_		_		assertTrue(channel.config().isAutoRead())__		channel.writeInbound(msg)___		_		assertFalse(channel.config().isAutoRead())___		_		msg = createBufferResponse(createBuffer(true), 1, channelId)__		channel.writeInbound(msg)___		msg = createBufferResponse(createBuffer(true), 2, channelId)__		channel.writeInbound(msg)___		_		Buffer availableBuffer = createBuffer(false)__		listener.get().onEvent(availableBuffer)___		_		_		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)__		when(bufferProvider.isDestroyed()).thenReturn(true)___		_		_		_		channel.runPendingTasks()___		assertTrue(channel.config().isAutoRead())__	};tests,that,an,unsuccessful,message,decode,call,for,a,staged,message,does,not,leave,the,channel,with,auto,read,set,to,false;test,suppress,warnings,unchecked,public,void,test,auto,read,after,unsuccessful,staged,message,throws,exception,partition,request,client,handler,handler,new,partition,request,client,handler,embedded,channel,channel,new,embedded,channel,handler,final,atomic,reference,event,listener,buffer,listener,new,atomic,reference,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,add,listener,any,event,listener,class,then,answer,new,answer,boolean,override,suppress,warnings,unchecked,public,boolean,answer,invocation,on,mock,invocation,throws,throwable,listener,set,event,listener,buffer,invocation,get,arguments,0,return,true,when,buffer,provider,request,buffer,then,return,null,input,channel,id,channel,id,new,input,channel,id,0,0,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,buffer,provider,null,handler,add,input,channel,input,channel,buffer,response,msg,create,buffer,response,create,buffer,true,0,channel,id,assert,true,channel,config,is,auto,read,channel,write,inbound,msg,assert,false,channel,config,is,auto,read,msg,create,buffer,response,create,buffer,true,1,channel,id,channel,write,inbound,msg,msg,create,buffer,response,create,buffer,true,2,channel,id,channel,write,inbound,msg,buffer,available,buffer,create,buffer,false,listener,get,on,event,available,buffer,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,when,buffer,provider,is,destroyed,then,return,true,channel,run,pending,tasks,assert,true,channel,config,is,auto,read
PartitionRequestClientHandlerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception;1506583877;Tests that an unsuccessful message decode call for a staged message_does not leave the channel with auto read set to false.;@Test_	@SuppressWarnings("unchecked")_	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception {_		PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		EmbeddedChannel channel = new EmbeddedChannel(handler)___		final AtomicReference<EventListener<Buffer>> listener = new AtomicReference<>()___		BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.addListener(any(EventListener.class))).thenAnswer(new Answer<Boolean>() {_			@Override_			@SuppressWarnings("unchecked")_			public Boolean answer(InvocationOnMock invocation) throws Throwable {_				listener.set((EventListener<Buffer>) invocation.getArguments()[0])__				return true__			}_		})___		when(bufferProvider.requestBuffer()).thenReturn(null)___		InputChannelID channelId = new InputChannelID(0, 0)__		RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(channelId)___		_		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider, bufferProvider, null)___		handler.addInputChannel(inputChannel)___		BufferResponse msg = createBufferResponse(createBuffer(true), 0, channelId)___		_		_		assertTrue(channel.config().isAutoRead())__		channel.writeInbound(msg)___		_		assertFalse(channel.config().isAutoRead())___		_		msg = createBufferResponse(createBuffer(true), 1, channelId)__		channel.writeInbound(msg)___		msg = createBufferResponse(createBuffer(true), 2, channelId)__		channel.writeInbound(msg)___		_		Buffer availableBuffer = createBuffer(false)__		listener.get().onEvent(availableBuffer)___		_		_		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)__		when(bufferProvider.isDestroyed()).thenReturn(true)___		_		_		_		channel.runPendingTasks()___		assertTrue(channel.config().isAutoRead())__	};tests,that,an,unsuccessful,message,decode,call,for,a,staged,message,does,not,leave,the,channel,with,auto,read,set,to,false;test,suppress,warnings,unchecked,public,void,test,auto,read,after,unsuccessful,staged,message,throws,exception,partition,request,client,handler,handler,new,partition,request,client,handler,embedded,channel,channel,new,embedded,channel,handler,final,atomic,reference,event,listener,buffer,listener,new,atomic,reference,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,add,listener,any,event,listener,class,then,answer,new,answer,boolean,override,suppress,warnings,unchecked,public,boolean,answer,invocation,on,mock,invocation,throws,throwable,listener,set,event,listener,buffer,invocation,get,arguments,0,return,true,when,buffer,provider,request,buffer,then,return,null,input,channel,id,channel,id,new,input,channel,id,0,0,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,buffer,provider,null,handler,add,input,channel,input,channel,buffer,response,msg,create,buffer,response,create,buffer,true,0,channel,id,assert,true,channel,config,is,auto,read,channel,write,inbound,msg,assert,false,channel,config,is,auto,read,msg,create,buffer,response,create,buffer,true,1,channel,id,channel,write,inbound,msg,msg,create,buffer,response,create,buffer,true,2,channel,id,channel,write,inbound,msg,buffer,available,buffer,create,buffer,false,listener,get,on,event,available,buffer,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,when,buffer,provider,is,destroyed,then,return,true,channel,run,pending,tasks,assert,true,channel,config,is,auto,read
PartitionRequestClientHandlerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception;1507316227;Tests that an unsuccessful message decode call for a staged message_does not leave the channel with auto read set to false.;@Test_	@SuppressWarnings("unchecked")_	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception {_		PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		EmbeddedChannel channel = new EmbeddedChannel(handler)___		final AtomicReference<EventListener<Buffer>> listener = new AtomicReference<>()___		BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.addListener(any(EventListener.class))).thenAnswer(new Answer<Boolean>() {_			@Override_			@SuppressWarnings("unchecked")_			public Boolean answer(InvocationOnMock invocation) throws Throwable {_				listener.set((EventListener<Buffer>) invocation.getArguments()[0])__				return true__			}_		})___		when(bufferProvider.requestBuffer()).thenReturn(null)___		InputChannelID channelId = new InputChannelID(0, 0)__		RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(channelId)___		_		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider, bufferProvider, null)___		handler.addInputChannel(inputChannel)___		BufferResponse msg = createBufferResponse(createBuffer(true), 0, channelId)___		_		_		assertTrue(channel.config().isAutoRead())__		channel.writeInbound(msg)___		_		assertFalse(channel.config().isAutoRead())___		_		msg = createBufferResponse(createBuffer(true), 1, channelId)__		channel.writeInbound(msg)___		msg = createBufferResponse(createBuffer(true), 2, channelId)__		channel.writeInbound(msg)___		_		Buffer availableBuffer = createBuffer(false)__		listener.get().onEvent(availableBuffer)___		_		_		when(bufferProvider.addListener(any(EventListener.class))).thenReturn(false)__		when(bufferProvider.isDestroyed()).thenReturn(true)___		_		_		_		channel.runPendingTasks()___		assertTrue(channel.config().isAutoRead())__	};tests,that,an,unsuccessful,message,decode,call,for,a,staged,message,does,not,leave,the,channel,with,auto,read,set,to,false;test,suppress,warnings,unchecked,public,void,test,auto,read,after,unsuccessful,staged,message,throws,exception,partition,request,client,handler,handler,new,partition,request,client,handler,embedded,channel,channel,new,embedded,channel,handler,final,atomic,reference,event,listener,buffer,listener,new,atomic,reference,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,add,listener,any,event,listener,class,then,answer,new,answer,boolean,override,suppress,warnings,unchecked,public,boolean,answer,invocation,on,mock,invocation,throws,throwable,listener,set,event,listener,buffer,invocation,get,arguments,0,return,true,when,buffer,provider,request,buffer,then,return,null,input,channel,id,channel,id,new,input,channel,id,0,0,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,buffer,provider,null,handler,add,input,channel,input,channel,buffer,response,msg,create,buffer,response,create,buffer,true,0,channel,id,assert,true,channel,config,is,auto,read,channel,write,inbound,msg,assert,false,channel,config,is,auto,read,msg,create,buffer,response,create,buffer,true,1,channel,id,channel,write,inbound,msg,msg,create,buffer,response,create,buffer,true,2,channel,id,channel,write,inbound,msg,buffer,available,buffer,create,buffer,false,listener,get,on,event,available,buffer,when,buffer,provider,add,listener,any,event,listener,class,then,return,false,when,buffer,provider,is,destroyed,then,return,true,channel,run,pending,tasks,assert,true,channel,config,is,auto,read
PartitionRequestClientHandlerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception;1507647200;Tests that an unsuccessful message decode call for a staged message_does not leave the channel with auto read set to false.;@Test_	@SuppressWarnings("unchecked")_	public void testAutoReadAfterUnsuccessfulStagedMessage() throws Exception {_		PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		EmbeddedChannel channel = new EmbeddedChannel(handler)___		final AtomicReference<BufferListener> listener = new AtomicReference<>()___		BufferProvider bufferProvider = mock(BufferProvider.class)__		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenAnswer(new Answer<Boolean>() {_			@Override_			@SuppressWarnings("unchecked")_			public Boolean answer(InvocationOnMock invocation) throws Throwable {_				listener.set((BufferListener) invocation.getArguments()[0])__				return true__			}_		})___		when(bufferProvider.requestBuffer()).thenReturn(null)___		InputChannelID channelId = new InputChannelID(0, 0)__		RemoteInputChannel inputChannel = mock(RemoteInputChannel.class)__		when(inputChannel.getInputChannelId()).thenReturn(channelId)___		_		when(inputChannel.getBufferProvider()).thenReturn(bufferProvider, bufferProvider, null)___		handler.addInputChannel(inputChannel)___		BufferResponse msg = createBufferResponse(createBuffer(true), 0, channelId)___		_		_		assertTrue(channel.config().isAutoRead())__		channel.writeInbound(msg)___		_		assertFalse(channel.config().isAutoRead())___		_		msg = createBufferResponse(createBuffer(true), 1, channelId)__		channel.writeInbound(msg)___		msg = createBufferResponse(createBuffer(true), 2, channelId)__		channel.writeInbound(msg)___		_		Buffer availableBuffer = createBuffer(false)__		listener.get().notifyBufferAvailable(availableBuffer)___		_		_		when(bufferProvider.addBufferListener(any(BufferListener.class))).thenReturn(false)__		when(bufferProvider.isDestroyed()).thenReturn(true)___		_		_		_		channel.runPendingTasks()___		assertTrue(channel.config().isAutoRead())__	};tests,that,an,unsuccessful,message,decode,call,for,a,staged,message,does,not,leave,the,channel,with,auto,read,set,to,false;test,suppress,warnings,unchecked,public,void,test,auto,read,after,unsuccessful,staged,message,throws,exception,partition,request,client,handler,handler,new,partition,request,client,handler,embedded,channel,channel,new,embedded,channel,handler,final,atomic,reference,buffer,listener,listener,new,atomic,reference,buffer,provider,buffer,provider,mock,buffer,provider,class,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,answer,new,answer,boolean,override,suppress,warnings,unchecked,public,boolean,answer,invocation,on,mock,invocation,throws,throwable,listener,set,buffer,listener,invocation,get,arguments,0,return,true,when,buffer,provider,request,buffer,then,return,null,input,channel,id,channel,id,new,input,channel,id,0,0,remote,input,channel,input,channel,mock,remote,input,channel,class,when,input,channel,get,input,channel,id,then,return,channel,id,when,input,channel,get,buffer,provider,then,return,buffer,provider,buffer,provider,null,handler,add,input,channel,input,channel,buffer,response,msg,create,buffer,response,create,buffer,true,0,channel,id,assert,true,channel,config,is,auto,read,channel,write,inbound,msg,assert,false,channel,config,is,auto,read,msg,create,buffer,response,create,buffer,true,1,channel,id,channel,write,inbound,msg,msg,create,buffer,response,create,buffer,true,2,channel,id,channel,write,inbound,msg,buffer,available,buffer,create,buffer,false,listener,get,notify,buffer,available,available,buffer,when,buffer,provider,add,buffer,listener,any,buffer,listener,class,then,return,false,when,buffer,provider,is,destroyed,then,return,true,channel,run,pending,tasks,assert,true,channel,config,is,auto,read
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		return createRemoteInputChannel(inputGate, mock(PartitionRequestClient.class))__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,return,create,remote,input,channel,input,gate,mock,partition,request,client,class
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1518785736;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		return createRemoteInputChannel(inputGate, mock(PartitionRequestClient.class))__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,return,create,remote,input,channel,input,gate,mock,partition,request,client,class
PartitionRequestClientHandlerTest -> static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1525116906;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;static RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		return createRemoteInputChannel(inputGate, mock(PartitionRequestClient.class))__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;static,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,return,create,remote,input,channel,input,gate,mock,partition,request,client,class
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1515408360;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1515408360;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1516285456;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1516291532;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.FRAME_HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1518785736;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.FRAME_HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1515408360;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		final PartitionRequestClient partitionRequestClient = mock(PartitionRequestClient.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(partitionRequestClient)___		return new RemoteInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			mock(ConnectionID.class),_			connectionManager,_			0,_			0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;private,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,final,partition,request,client,partition,request,client,mock,partition,request,client,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,partition,request,client,return,new,remote,input,channel,input,gate,0,new,result,partition,id,mock,connection,id,class,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1516285456;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		final PartitionRequestClient partitionRequestClient = mock(PartitionRequestClient.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(partitionRequestClient)___		return new RemoteInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			mock(ConnectionID.class),_			connectionManager,_			0,_			0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;private,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,final,partition,request,client,partition,request,client,mock,partition,request,client,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,partition,request,client,return,new,remote,input,channel,input,gate,0,new,result,partition,id,mock,connection,id,class,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception;1516291532;Creates and returns a remote input channel for the specific input gate.__@param inputGate The input gate owns the created input channel._@return The new created remote input channel.;private RemoteInputChannel createRemoteInputChannel(SingleInputGate inputGate) throws Exception {_		final ConnectionManager connectionManager = mock(ConnectionManager.class)__		final PartitionRequestClient partitionRequestClient = mock(PartitionRequestClient.class)__		when(connectionManager.createPartitionRequestClient(any(ConnectionID.class)))_			.thenReturn(partitionRequestClient)___		return new RemoteInputChannel(_			inputGate,_			0,_			new ResultPartitionID(),_			mock(ConnectionID.class),_			connectionManager,_			0,_			0,_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,a,remote,input,channel,for,the,specific,input,gate,param,input,gate,the,input,gate,owns,the,created,input,channel,return,the,new,created,remote,input,channel;private,remote,input,channel,create,remote,input,channel,single,input,gate,input,gate,throws,exception,final,connection,manager,connection,manager,mock,connection,manager,class,final,partition,request,client,partition,request,client,mock,partition,request,client,class,when,connection,manager,create,partition,request,client,any,connection,id,class,then,return,partition,request,client,return,new,remote,input,channel,input,gate,0,new,result,partition,id,mock,connection,id,class,connection,manager,0,0,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> static BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1518785736;Returns a deserialized buffer message as it would be received during runtime.;static BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.FRAME_HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;static,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> static BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId, 			int backlog) throws IOException;1525116906;Returns a deserialized buffer message as it would be received during runtime.;static BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId,_			int backlog) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId, backlog)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.FRAME_HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;static,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,int,backlog,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,backlog,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1426971870;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1432295874;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1432625417;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1433740447;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1471602495;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1502111816;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		BufferResponse deserialized = new BufferResponse()___		_		_		_		deserialized.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,new,buffer,response,deserialized,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1506583877;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1507316227;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> private BufferResponse createBufferResponse( 			Buffer buffer, 			int sequenceNumber, 			InputChannelID receivingChannelId) throws IOException;1507647200;Returns a deserialized buffer message as it would be received during runtime.;private BufferResponse createBufferResponse(_			Buffer buffer,_			int sequenceNumber,_			InputChannelID receivingChannelId) throws IOException {__		_		BufferResponse resp = new BufferResponse(buffer, sequenceNumber, receivingChannelId)___		ByteBuf serialized = resp.write(UnpooledByteBufAllocator.DEFAULT)___		_		serialized.readBytes(NettyMessage.HEADER_LENGTH)___		_		_		_		BufferResponse deserialized = BufferResponse.readFrom(serialized)___		return deserialized__	};returns,a,deserialized,buffer,message,as,it,would,be,received,during,runtime;private,buffer,response,create,buffer,response,buffer,buffer,int,sequence,number,input,channel,id,receiving,channel,id,throws,ioexception,buffer,response,resp,new,buffer,response,buffer,sequence,number,receiving,channel,id,byte,buf,serialized,resp,write,unpooled,byte,buf,allocator,default,serialized,read,bytes,netty,message,buffer,response,deserialized,buffer,response,read,from,serialized,return,deserialized
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailableAfterReleased() throws Exception;1515408360;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}_message is not sent actually when this input channel is released.;@Test_	public void testNotifyCreditAvailableAfterReleased() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel.requestSubpartition(0)__			handler.addInputChannel(inputChannel)___			_			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(2, inputChannel.getUnannouncedCredit())___			_			_			handler.notifyCreditAvailable(inputChannel)___			_			inputGate.releaseAllResources()___			channel.runPendingTasks()___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,but,link,add,credit,message,is,not,sent,actually,when,this,input,channel,is,released;test,public,void,test,notify,credit,available,after,released,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel,request,subpartition,0,handler,add,input,channel,input,channel,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,2,input,channel,get,unannounced,credit,handler,notify,credit,available,input,channel,input,gate,release,all,resources,channel,run,pending,tasks,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailableAfterReleased() throws Exception;1516285456;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}_message is not sent actually when this input channel is released.;@Test_	public void testNotifyCreditAvailableAfterReleased() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel.requestSubpartition(0)__			handler.addInputChannel(inputChannel)___			_			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(2, inputChannel.getUnannouncedCredit())___			_			_			handler.notifyCreditAvailable(inputChannel)___			_			inputGate.releaseAllResources()___			channel.runPendingTasks()___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,but,link,add,credit,message,is,not,sent,actually,when,this,input,channel,is,released;test,public,void,test,notify,credit,available,after,released,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel,request,subpartition,0,handler,add,input,channel,input,channel,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,2,input,channel,get,unannounced,credit,handler,notify,credit,available,input,channel,input,gate,release,all,resources,channel,run,pending,tasks,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailableAfterReleased() throws Exception;1516291532;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}_message is not sent actually when this input channel is released.;@Test_	public void testNotifyCreditAvailableAfterReleased() throws Exception {_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.getPartitionId().getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final CreditBasedClientHandler handler = new CreditBasedClientHandler()__			final EmbeddedChannel channel = new EmbeddedChannel(handler)___			_			_			inputChannel.requestSubpartition(0)__			handler.addInputChannel(inputChannel)___			_			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(2, inputChannel.getUnannouncedCredit())___			_			_			handler.notifyCreditAvailable(inputChannel)___			_			inputGate.releaseAllResources()___			channel.runPendingTasks()___			_			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,but,link,add,credit,message,is,not,sent,actually,when,this,input,channel,is,released;test,public,void,test,notify,credit,available,after,released,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,get,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,credit,based,client,handler,handler,new,credit,based,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,input,channel,request,subpartition,0,handler,add,input,channel,input,channel,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,2,input,channel,get,unannounced,credit,handler,notify,credit,available,input,channel,input,gate,release,all,resources,channel,run,pending,tasks,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> @Test 	public void testNotifyCreditAvailableAfterReleased() throws Exception;1518785736;Verifies that {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}_message is not sent actually when this input channel is released.;@Test_	public void testNotifyCreditAvailableAfterReleased() throws Exception {_		final PartitionRequestClientHandler handler = new PartitionRequestClientHandler()__		final EmbeddedChannel channel = new EmbeddedChannel(handler)__		final PartitionRequestClient client = new PartitionRequestClient(_			channel, handler, mock(ConnectionID.class), mock(PartitionRequestClientFactory.class))___		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32)__		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate, client)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(6, 6)__			inputGate.setBufferPool(bufferPool)__			final int numExclusiveBuffers = 2__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			inputChannel.requestSubpartition(0)___			_			Object readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(PartitionRequest.class))__			assertEquals(2, ((PartitionRequest) readFromOutbound).credit)___			_			final BufferResponse bufferResponse = createBufferResponse(_				TestBufferFactory.createBuffer(32), 0, inputChannel.getInputChannelId(), 1)__			handler.channelRead(mock(ChannelHandlerContext.class), bufferResponse)___			assertEquals(2, inputChannel.getUnannouncedCredit())___			_			inputGate.releaseAllResources()___			_			_			readFromOutbound = channel.readOutbound()__			assertThat(readFromOutbound, instanceOf(CloseRequest.class))___			channel.runPendingTasks()___			assertNull(channel.readOutbound())__		} finally {_			_			inputGate.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};verifies,that,link,remote,input,channel,is,enqueued,in,the,pipeline,but,link,add,credit,message,is,not,sent,actually,when,this,input,channel,is,released;test,public,void,test,notify,credit,available,after,released,throws,exception,final,partition,request,client,handler,handler,new,partition,request,client,handler,final,embedded,channel,channel,new,embedded,channel,handler,final,partition,request,client,client,new,partition,request,client,channel,handler,mock,connection,id,class,mock,partition,request,client,factory,class,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,10,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,client,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,6,6,input,gate,set,buffer,pool,buffer,pool,final,int,num,exclusive,buffers,2,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,object,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,partition,request,class,assert,equals,2,partition,request,read,from,outbound,credit,final,buffer,response,buffer,response,create,buffer,response,test,buffer,factory,create,buffer,32,0,input,channel,get,input,channel,id,1,handler,channel,read,mock,channel,handler,context,class,buffer,response,assert,equals,2,input,channel,get,unannounced,credit,input,gate,release,all,resources,read,from,outbound,channel,read,outbound,assert,that,read,from,outbound,instance,of,close,request,class,channel,run,pending,tasks,assert,null,channel,read,outbound,finally,input,gate,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
PartitionRequestClientHandlerTest -> static SingleInputGate createSingleInputGate();1518785736;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;static SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;static,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> static SingleInputGate createSingleInputGate();1518785736;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;static SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup())__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;static,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group
PartitionRequestClientHandlerTest -> static SingleInputGate createSingleInputGate();1525116906;Creates and returns the single input gate for credit-based testing.__@return The new created single input gate.;static SingleInputGate createSingleInputGate() {_		return new SingleInputGate(_			"InputGate",_			new JobID(),_			new IntermediateDataSetID(),_			ResultPartitionType.PIPELINED,_			0,_			1,_			mock(TaskActions.class),_			UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),_			true)__	};creates,and,returns,the,single,input,gate,for,credit,based,testing,return,the,new,created,single,input,gate;static,single,input,gate,create,single,input,gate,return,new,single,input,gate,input,gate,new,job,id,new,intermediate,data,set,id,result,partition,type,pipelined,0,1,mock,task,actions,class,unregistered,metric,groups,create,unregistered,task,metric,group,get,iometric,group,true
