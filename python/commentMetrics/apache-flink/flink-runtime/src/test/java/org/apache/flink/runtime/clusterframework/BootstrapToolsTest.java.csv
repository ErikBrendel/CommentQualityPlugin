# id;timestamp;commentText;codeText;commentWords;codeWords
BootstrapToolsTest -> @Test 	public void testConcurrentActorSystemCreation() throws Exception;1539855294;Tests that we can concurrently create two {@link ActorSystem} without port conflicts._This effectively tests that we don't open a socket to check for a ports availability._See FLINK-10580 for more details.;@Test_	public void testConcurrentActorSystemCreation() throws Exception {_		final int concurrentCreations = 10__		final ExecutorService executorService = Executors.newFixedThreadPool(concurrentCreations)__		final CyclicBarrier cyclicBarrier = new CyclicBarrier(concurrentCreations)___		try {_			final List<CompletableFuture<Void>> actorSystemFutures = IntStream.range(0, concurrentCreations)_				.mapToObj(_					ignored ->_						CompletableFuture.supplyAsync(_							CheckedSupplier.unchecked(() -> {_								cyclicBarrier.await()___								return BootstrapTools.startActorSystem(_									new Configuration(),_									"localhost",_									"0",_									LOG)__							})))_				.map(_					_					actorSystemFuture ->_						actorSystemFuture.thenCompose(AkkaUtils::terminateActorSystem)_				).collect(Collectors.toList())___			FutureUtils.completeAll(actorSystemFutures).get()__		} finally {_			ExecutorUtils.gracefulShutdown(10000L, TimeUnit.MILLISECONDS, executorService)__		}_	};tests,that,we,can,concurrently,create,two,link,actor,system,without,port,conflicts,this,effectively,tests,that,we,don,t,open,a,socket,to,check,for,a,ports,availability,see,flink,10580,for,more,details;test,public,void,test,concurrent,actor,system,creation,throws,exception,final,int,concurrent,creations,10,final,executor,service,executor,service,executors,new,fixed,thread,pool,concurrent,creations,final,cyclic,barrier,cyclic,barrier,new,cyclic,barrier,concurrent,creations,try,final,list,completable,future,void,actor,system,futures,int,stream,range,0,concurrent,creations,map,to,obj,ignored,completable,future,supply,async,checked,supplier,unchecked,cyclic,barrier,await,return,bootstrap,tools,start,actor,system,new,configuration,localhost,0,log,map,actor,system,future,actor,system,future,then,compose,akka,utils,terminate,actor,system,collect,collectors,to,list,future,utils,complete,all,actor,system,futures,get,finally,executor,utils,graceful,shutdown,10000l,time,unit,milliseconds,executor,service
BootstrapToolsTest -> @Test 	public void testConcurrentActorSystemCreation() throws Exception;1540450611;Tests that we can concurrently create two {@link ActorSystem} without port conflicts._This effectively tests that we don't open a socket to check for a ports availability._See FLINK-10580 for more details.;@Test_	public void testConcurrentActorSystemCreation() throws Exception {_		final int concurrentCreations = 10__		final ExecutorService executorService = Executors.newFixedThreadPool(concurrentCreations)__		final CyclicBarrier cyclicBarrier = new CyclicBarrier(concurrentCreations)___		try {_			final List<CompletableFuture<Void>> actorSystemFutures = IntStream.range(0, concurrentCreations)_				.mapToObj(_					ignored ->_						CompletableFuture.supplyAsync(_							CheckedSupplier.unchecked(() -> {_								cyclicBarrier.await()___								return BootstrapTools.startActorSystem(_									new Configuration(),_									"localhost",_									"0",_									LOG)__							}), executorService))_				.map(_					_					actorSystemFuture ->_						actorSystemFuture.thenCompose(AkkaUtils::terminateActorSystem)_				).collect(Collectors.toList())___			FutureUtils.completeAll(actorSystemFutures).get()__		} finally {_			ExecutorUtils.gracefulShutdown(10000L, TimeUnit.MILLISECONDS, executorService)__		}_	};tests,that,we,can,concurrently,create,two,link,actor,system,without,port,conflicts,this,effectively,tests,that,we,don,t,open,a,socket,to,check,for,a,ports,availability,see,flink,10580,for,more,details;test,public,void,test,concurrent,actor,system,creation,throws,exception,final,int,concurrent,creations,10,final,executor,service,executor,service,executors,new,fixed,thread,pool,concurrent,creations,final,cyclic,barrier,cyclic,barrier,new,cyclic,barrier,concurrent,creations,try,final,list,completable,future,void,actor,system,futures,int,stream,range,0,concurrent,creations,map,to,obj,ignored,completable,future,supply,async,checked,supplier,unchecked,cyclic,barrier,await,return,bootstrap,tools,start,actor,system,new,configuration,localhost,0,log,executor,service,map,actor,system,future,actor,system,future,then,compose,akka,utils,terminate,actor,system,collect,collectors,to,list,future,utils,complete,all,actor,system,futures,get,finally,executor,utils,graceful,shutdown,10000l,time,unit,milliseconds,executor,service
BootstrapToolsTest -> @Test 	public void testConcurrentActorSystemCreation() throws Exception;1548316608;Tests that we can concurrently create two {@link ActorSystem} without port conflicts._This effectively tests that we don't open a socket to check for a ports availability._See FLINK-10580 for more details.;@Test_	public void testConcurrentActorSystemCreation() throws Exception {_		final int concurrentCreations = 10__		final ExecutorService executorService = Executors.newFixedThreadPool(concurrentCreations)__		final CyclicBarrier cyclicBarrier = new CyclicBarrier(concurrentCreations)___		try {_			final List<CompletableFuture<Void>> actorSystemFutures = IntStream.range(0, concurrentCreations)_				.mapToObj(_					ignored ->_						CompletableFuture.supplyAsync(_							CheckedSupplier.unchecked(() -> {_								cyclicBarrier.await()___								return BootstrapTools.startActorSystem(_									new Configuration(),_									"localhost",_									"0",_									LOG)__							}), executorService))_				.map(_					_					actorSystemFuture ->_						actorSystemFuture.thenCompose(AkkaUtils::terminateActorSystem)_				).collect(Collectors.toList())___			FutureUtils.completeAll(actorSystemFutures).get()__		} finally {_			ExecutorUtils.gracefulShutdown(10000L, TimeUnit.MILLISECONDS, executorService)__		}_	};tests,that,we,can,concurrently,create,two,link,actor,system,without,port,conflicts,this,effectively,tests,that,we,don,t,open,a,socket,to,check,for,a,ports,availability,see,flink,10580,for,more,details;test,public,void,test,concurrent,actor,system,creation,throws,exception,final,int,concurrent,creations,10,final,executor,service,executor,service,executors,new,fixed,thread,pool,concurrent,creations,final,cyclic,barrier,cyclic,barrier,new,cyclic,barrier,concurrent,creations,try,final,list,completable,future,void,actor,system,futures,int,stream,range,0,concurrent,creations,map,to,obj,ignored,completable,future,supply,async,checked,supplier,unchecked,cyclic,barrier,await,return,bootstrap,tools,start,actor,system,new,configuration,localhost,0,log,executor,service,map,actor,system,future,actor,system,future,then,compose,akka,utils,terminate,actor,system,collect,collectors,to,list,future,utils,complete,all,actor,system,futures,get,finally,executor,utils,graceful,shutdown,10000l,time,unit,milliseconds,executor,service
