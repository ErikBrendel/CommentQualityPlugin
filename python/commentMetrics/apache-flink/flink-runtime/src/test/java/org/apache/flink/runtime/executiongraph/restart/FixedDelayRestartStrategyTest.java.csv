commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void shutdownExecutor() {     executorService.shutdownNow(). }
false;public;0;17;;// ------------------------------------------------------------------------ @Test public void testNumberOfRestarts() throws Exception {     final int numberRestarts = 10.     final FixedDelayRestartStrategy strategy = new FixedDelayRestartStrategy(numberRestarts, 0L).     for (int restartsLeft = numberRestarts. restartsLeft > 0. --restartsLeft) {         // two calls to 'canRestart()' to make sure this is not used to maintain the counter         assertTrue(strategy.canRestart()).         assertTrue(strategy.canRestart()).         strategy.restart(new NoOpRestarter(), executor).     }     assertFalse(strategy.canRestart()). }
false;public;0;24;;@Test public void testDelay() throws Exception {     final long restartDelay = 10.     final int numberRestarts = 10.     final FixedDelayRestartStrategy strategy = new FixedDelayRestartStrategy(numberRestarts, restartDelay).     for (int restartsLeft = numberRestarts. restartsLeft > 0. --restartsLeft) {         assertTrue(strategy.canRestart()).         final OneShotLatch sync = new OneShotLatch().         final RestartCallback restarter = new LatchedRestarter(sync).         final long time = System.nanoTime().         strategy.restart(restarter, executor).         sync.await().         final long elapsed = System.nanoTime() - time.         assertTrue("Not enough delay", elapsed >= restartDelay * 1_000_000).     }     assertFalse(strategy.canRestart()). }
