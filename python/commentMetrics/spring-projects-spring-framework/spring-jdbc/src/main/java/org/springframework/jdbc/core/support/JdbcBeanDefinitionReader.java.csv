commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the DataSource to use to obtain database connections.  * Will implicitly create a new JdbcTemplate with the given DataSource.  */ ;/**  * Set the DataSource to use to obtain database connections.  * Will implicitly create a new JdbcTemplate with the given DataSource.  */ public void setDataSource(DataSource dataSource) {     this.jdbcTemplate = new JdbcTemplate(dataSource). }
true;public;1;4;/**  * Set the JdbcTemplate to be used by this bean factory.  * Contains settings for DataSource, SQLExceptionTranslator, etc.  */ ;/**  * Set the JdbcTemplate to be used by this bean factory.  * Contains settings for DataSource, SQLExceptionTranslator, etc.  */ public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {     Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null").     this.jdbcTemplate = jdbcTemplate. }
true;public;1;12;/**  * Load bean definitions from the database via the given SQL string.  * @param sql the SQL query to use for loading bean definitions.  * The first three columns must be bean name, property name and value.  * Any join and any other columns are permitted: e.g.  * {@code SELECT BEAN_NAME, PROPERTY, VALUE FROM CONFIG WHERE CONFIG.APP_ID = 1}  * It's also possible to perform a join. Column names are not significant --  * only the ordering of these first three columns.  */ ;/**  * Load bean definitions from the database via the given SQL string.  * @param sql the SQL query to use for loading bean definitions.  * The first three columns must be bean name, property name and value.  * Any join and any other columns are permitted: e.g.  * {@code SELECT BEAN_NAME, PROPERTY, VALUE FROM CONFIG WHERE CONFIG.APP_ID = 1}  * It's also possible to perform a join. Column names are not significant --  * only the ordering of these first three columns.  */ public void loadBeanDefinitions(String sql) {     Assert.notNull(this.jdbcTemplate, "Not fully configured - specify DataSource or JdbcTemplate").     final Properties props = new Properties().     this.jdbcTemplate.query(sql, rs -> {         String beanName = rs.getString(1).         String property = rs.getString(2).         String value = rs.getString(3).         // Make a properties entry by combining bean name and property.         props.setProperty(beanName + '.' + property, value).     }).     this.propReader.registerBeanDefinitions(props). }
