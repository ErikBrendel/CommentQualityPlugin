commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Override @Nullable public Number getKey() throws InvalidDataAccessApiUsageException, DataRetrievalFailureException {     if (this.keyList.isEmpty()) {         return null.     }     if (this.keyList.size() > 1 || this.keyList.get(0).size() > 1) {         throw new InvalidDataAccessApiUsageException("The getKey method should only be used when a single key is returned.  " + "The current key entry contains multiple keys: " + this.keyList).     }     Iterator<Object> keyIter = this.keyList.get(0).values().iterator().     if (keyIter.hasNext()) {         Object key = keyIter.next().         if (!(key instanceof Number)) {             throw new DataRetrievalFailureException("The generated key is not of a supported numeric type. " + "Unable to cast [" + (key != null ? key.getClass().getName() : null) + "] to [" + Number.class.getName() + "]").         }         return (Number) key.     } else {         throw new DataRetrievalFailureException("Unable to retrieve the generated key. " + "Check that the table has an identity column enabled.").     } }
false;public;0;13;;@Override @Nullable public Map<String, Object> getKeys() throws InvalidDataAccessApiUsageException {     if (this.keyList.isEmpty()) {         return null.     }     if (this.keyList.size() > 1) {         throw new InvalidDataAccessApiUsageException("The getKeys method should only be used when keys for a single row are returned.  " + "The current key list contains keys for multiple rows: " + this.keyList).     }     return this.keyList.get(0). }
false;public;0;4;;@Override public List<Map<String, Object>> getKeyList() {     return this.keyList. }
