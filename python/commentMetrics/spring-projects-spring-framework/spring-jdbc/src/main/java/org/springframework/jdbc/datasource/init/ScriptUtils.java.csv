# id;timestamp;commentText;codeText;commentWords;codeWords
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1394708749;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (StringUtils.hasText(currentStatement)_					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		maybeAddSeparatorToScript(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,string,utils,has,text,current,statement,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,maybe,add,separator,to,script,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1394984468;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1395068709;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1397231067;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1397233161;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1397385067;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1413848647;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {_		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1424885303;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1425069712;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1429045243;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1436876971;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1455813442;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1467730834;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1483462930;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1491480646;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1492013234;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator) 			throws IOException;1496259743;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, String commentPrefix, String separator)_			throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,string,comment,prefix,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1394708749;Read a script from the provided resource, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1394984468;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1395068709;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1397231067;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1397233161;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1397385067;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1413848647;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {_		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1424885303;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1425069712;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1429045243;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1436876971;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1455813442;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1467730834;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1483462930;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1491480646;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1492013234;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, String commentPrefix, String separator) 			throws IOException;1496259743;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, String commentPrefix, String separator)_			throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,string,comment,prefix,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1394984468;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1395068709;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1397231067;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1397233161;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1397385067;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1413848647;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1424885303;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1425069712;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1429045243;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1436876971;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1455813442;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1467730834;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1483462930;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1491480646;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1492013234;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1496259743;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1496837955;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1519588127;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1521222552;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1530174524;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1531945062;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1532091916;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement &mdash_ typically a '_'_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,mdash,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException;1549646187;Split an SQL script into separate statements delimited by the provided_separator character. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator character separating each statement (typically a '_')_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, String, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {_		splitSqlScript(script, String.valueOf(separator), statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,character,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,character,separating,each,statement,typically,a,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,string,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,char,separator,list,string,statements,throws,script,exception,split,sql,script,script,string,value,of,separator,statements
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1496259743;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1496837955;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1519588127;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1395068709;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1397231067;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1397233161;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1397385067;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1413848647;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1424885303;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1425069712;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1429045243;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1436876971;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1455813442;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1467730834;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1483462930;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1491480646;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1492013234;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1496259743;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1496837955;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1519588127;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1521222552;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1530174524;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1531945062;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1532091916;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1534164004;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1534164004;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException;1549646187;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource to load the SQL script from_ encoded with the_current platform's default encoding_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, Resource resource) throws ScriptException {_		executeSqlScript(connection, new EncodedResource(resource))__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,to,load,the,sql,script,from,encoded,with,the,current,platform,s,default,encoding,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,resource,resource,throws,script,exception,execute,sql,script,connection,new,encoded,resource,resource
ScriptUtils -> private ScriptUtils();1394708749;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1394984468;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1395068709;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1397231067;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1397233161;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1397385067;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> private ScriptUtils();1413848647;Prevent instantiation of this utility class.;private ScriptUtils() {_		_	};prevent,instantiation,of,this,utility,class;private,script,utils
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1496837955;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1519588127;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1521222552;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1530174524;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1531945062;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1532091916;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1534164004;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1534164004;Read a script from the provided {@code LineNumberReader}, using the supplied_comment prefix and statement separator, and build a {@code String} containing_the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param lineNumberReader the {@code LineNumberReader} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;public static String readScript(LineNumberReader lineNumberReader, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		String currentStatement = lineNumberReader.readLine()__		StringBuilder scriptBuilder = new StringBuilder()__		while (currentStatement != null) {_			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {_				if (scriptBuilder.length() > 0) {_					scriptBuilder.append('\n')__				}_				scriptBuilder.append(currentStatement)__			}_			currentStatement = lineNumberReader.readLine()__		}_		appendSeparatorToScriptIfNecessary(scriptBuilder, separator)__		return scriptBuilder.toString()__	};read,a,script,from,the,provided,code,line,number,reader,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,line,number,reader,the,code,line,number,reader,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;public,static,string,read,script,line,number,reader,line,number,reader,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,string,current,statement,line,number,reader,read,line,string,builder,script,builder,new,string,builder,while,current,statement,null,if,comment,prefix,null,current,statement,starts,with,comment,prefix,if,script,builder,length,0,script,builder,append,n,script,builder,append,current,statement,current,statement,line,number,reader,read,line,append,separator,to,script,if,necessary,script,builder,separator,return,script,builder,to,string
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1394708749;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1394984468;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1395068709;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1397231067;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1397233161;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1397385067;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1413848647;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1424885303;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1425069712;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1429045243;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1436876971;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1455813442;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1467730834;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			if (content[i] == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,if,content,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1483462930;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1491480646;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1492013234;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1496259743;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1496837955;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1519588127;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1521222552;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim String delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1530174524;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1531945062;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1532091916;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		for (int i = 0_ i < script.length()_ i++) {_			if (script.charAt(i) == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,for,int,i,0,i,script,length,i,if,script,char,at,i,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1534164004;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {__			char c = script.charAt(i)__			if (c == '\\') {_				inEscape = !inEscape__				continue__			}_			else if (inEscape) {_				inEscape = false__				continue__			}__			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}_		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,c,in,escape,in,escape,continue,else,if,in,escape,in,escape,false,continue,if,c,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1534164004;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}__		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,continue,if,c,in,escape,true,continue,if,c,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static boolean containsSqlScriptDelimiters(String script, String delim);1549646187;Does the provided SQL script contain the specified delimiter?_@param script the SQL script_@param delim the string delimiting each statement - typically a '_' character;public static boolean containsSqlScriptDelimiters(String script, String delim) {_		boolean inLiteral = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral && script.startsWith(delim, i)) {_				return true__			}_		}__		return false__	};does,the,provided,sql,script,contain,the,specified,delimiter,param,script,the,sql,script,param,delim,the,string,delimiting,each,statement,typically,a,character;public,static,boolean,contains,sql,script,delimiters,string,script,string,delim,boolean,in,literal,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,continue,if,c,in,escape,true,continue,if,c,in,literal,in,literal,if,in,literal,script,starts,with,delim,i,return,true,return,false
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1521222552;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1530174524;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1531945062;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1532091916;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(@Nullable EncodedResource resource, String script, 			String separator, String commentPrefix, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter, List<String> statements) throws ScriptException;1549646187;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_@param separator text separating each statement_(typically a '_' or newline character)_@param commentPrefix the prefix that identifies SQL line comments_(typically "--")_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(@Nullable EncodedResource resource, String script,_			String separator, String commentPrefix, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter, List<String> statements) throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false___		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf('\n', i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}__		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,param,separator,text,separating,each,statement,typically,a,or,newline,character,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,typically,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,nullable,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1394708749;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1394984468;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1395068709;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1397231067;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1397233161;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1397385067;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1413848647;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1424885303;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1425069712;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1429045243;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1436876971;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1455813442;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1467730834;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1483462930;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1491480646;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1492013234;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1496259743;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1496837955;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1519588127;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1521222552;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1530174524;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1531945062;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1532091916;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1534164004;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1534164004;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> static String readScript(EncodedResource resource) throws IOException;1549646187;Read a script from the given resource, using "{@code --}" as the comment prefix_and "{@code _}" as the statement separator, and build a String containing the lines._@param resource the {@code EncodedResource} to be read_@return {@code String} containing the script lines_@throws IOException in case of I/O errors;static String readScript(EncodedResource resource) throws IOException {_		return readScript(resource, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};read,a,script,from,the,given,resource,using,code,as,the,comment,prefix,and,code,as,the,statement,separator,and,build,a,string,containing,the,lines,param,resource,the,code,encoded,resource,to,be,read,return,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;static,string,read,script,encoded,resource,resource,throws,ioexception,return,read,script,resource
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1394984468;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1395068709;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1397231067;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1397233161;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1397385067;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1413848647;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1424885303;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1425069712;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1429045243;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inLiteral = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (c == '\'') {_				inLiteral = !inLiteral__			}_			if (!inLiteral) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,literal,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,c,in,literal,in,literal,if,in,literal,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1436876971;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1455813442;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1467730834;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		char[] content = script.toCharArray()__		for (int i = 0_ i < script.length()_ i++) {_			char c = content[i]__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,char,content,script,to,char,array,for,int,i,0,i,script,length,i,char,c,content,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1483462930;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(String.format("Missing block comment end delimiter [%s].",_							blockCommentEndDelimiter), resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,string,format,missing,block,comment,end,delimiter,s,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1491480646;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "script must not be null or empty")__		Assert.notNull(separator, "separator must not be null")__		Assert.hasText(commentPrefix, "commentPrefix must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements) 			throws ScriptException;1492013234;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the provided_{@code List}._<p>Within the script, the provided {@code commentPrefix} will be honored:_any text beginning with the comment prefix and extending to the end of the_line will be omitted from the output. Similarly, the provided_{@code blockCommentStartDelimiter} and {@code blockCommentEndDelimiter}_delimiters will be honored: any text enclosed in a block comment will be_omitted from the output. In addition, multiple adjacent whitespace characters_will be collapsed into a single space._@param resource the resource from which the script was read_@param script the SQL script_ never {@code null} or empty_@param separator text separating each statement &mdash_ typically a '_' or_newline character_ never {@code null}_@param commentPrefix the prefix that identifies SQL line comments &mdash__typically "--"_ never {@code null} or empty_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter__never {@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter__never {@code null} or empty_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script;public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter, List<String> statements)_			throws ScriptException {__		Assert.hasText(script, "'script' must not be null or empty")__		Assert.notNull(separator, "'separator' must not be null")__		Assert.hasText(commentPrefix, "'commentPrefix' must not be null or empty")__		Assert.hasText(blockCommentStartDelimiter, "'blockCommentStartDelimiter' must not be null or empty")__		Assert.hasText(blockCommentEndDelimiter, "'blockCommentEndDelimiter' must not be null or empty")___		StringBuilder sb = new StringBuilder()__		boolean inSingleQuote = false__		boolean inDoubleQuote = false__		boolean inEscape = false__		for (int i = 0_ i < script.length()_ i++) {_			char c = script.charAt(i)__			if (inEscape) {_				inEscape = false__				sb.append(c)__				continue__			}_			_			if (c == '\\') {_				inEscape = true__				sb.append(c)__				continue__			}_			if (!inDoubleQuote && (c == '\'')) {_				inSingleQuote = !inSingleQuote__			}_			else if (!inSingleQuote && (c == '"')) {_				inDoubleQuote = !inDoubleQuote__			}_			if (!inSingleQuote && !inDoubleQuote) {_				if (script.startsWith(separator, i)) {_					_					if (sb.length() > 0) {_						statements.add(sb.toString())__						sb = new StringBuilder()__					}_					i += separator.length() - 1__					continue__				}_				else if (script.startsWith(commentPrefix, i)) {_					_					int indexOfNextNewline = script.indexOf("\n", i)__					if (indexOfNextNewline > i) {_						i = indexOfNextNewline__						continue__					}_					else {_						_						break__					}_				}_				else if (script.startsWith(blockCommentStartDelimiter, i)) {_					_					int indexOfCommentEnd = script.indexOf(blockCommentEndDelimiter, i)__					if (indexOfCommentEnd > i) {_						i = indexOfCommentEnd + blockCommentEndDelimiter.length() - 1__						continue__					}_					else {_						throw new ScriptParseException(_								"Missing block comment end delimiter: " + blockCommentEndDelimiter, resource)__					}_				}_				else if (c == ' ' || c == '\n' || c == '\t') {_					_					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {_						c = ' '__					}_					else {_						continue__					}_				}_			}_			sb.append(c)__		}_		if (StringUtils.hasText(sb)) {_			statements.add(sb.toString())__		}_	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,the,provided,code,comment,prefix,will,be,honored,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,the,provided,code,block,comment,start,delimiter,and,code,block,comment,end,delimiter,delimiters,will,be,honored,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,resource,the,resource,from,which,the,script,was,read,param,script,the,sql,script,never,code,null,or,empty,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,never,code,null,param,comment,prefix,the,prefix,that,identifies,sql,line,comments,mdash,typically,never,code,null,or,empty,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script;public,static,void,split,sql,script,encoded,resource,resource,string,script,string,separator,string,comment,prefix,string,block,comment,start,delimiter,string,block,comment,end,delimiter,list,string,statements,throws,script,exception,assert,has,text,script,script,must,not,be,null,or,empty,assert,not,null,separator,separator,must,not,be,null,assert,has,text,comment,prefix,comment,prefix,must,not,be,null,or,empty,assert,has,text,block,comment,start,delimiter,block,comment,start,delimiter,must,not,be,null,or,empty,assert,has,text,block,comment,end,delimiter,block,comment,end,delimiter,must,not,be,null,or,empty,string,builder,sb,new,string,builder,boolean,in,single,quote,false,boolean,in,double,quote,false,boolean,in,escape,false,for,int,i,0,i,script,length,i,char,c,script,char,at,i,if,in,escape,in,escape,false,sb,append,c,continue,if,c,in,escape,true,sb,append,c,continue,if,in,double,quote,c,in,single,quote,in,single,quote,else,if,in,single,quote,c,in,double,quote,in,double,quote,if,in,single,quote,in,double,quote,if,script,starts,with,separator,i,if,sb,length,0,statements,add,sb,to,string,sb,new,string,builder,i,separator,length,1,continue,else,if,script,starts,with,comment,prefix,i,int,index,of,next,newline,script,index,of,n,i,if,index,of,next,newline,i,i,index,of,next,newline,continue,else,break,else,if,script,starts,with,block,comment,start,delimiter,i,int,index,of,comment,end,script,index,of,block,comment,end,delimiter,i,if,index,of,comment,end,i,i,index,of,comment,end,block,comment,end,delimiter,length,1,continue,else,throw,new,script,parse,exception,missing,block,comment,end,delimiter,block,comment,end,delimiter,resource,else,if,c,c,n,c,t,if,sb,length,0,sb,char,at,sb,length,1,c,else,continue,sb,append,c,if,string,utils,has,text,sb,statements,add,sb,to,string
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1496837955;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1519588127;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1521222552;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1530174524;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1531945062;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1532091916;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1534164004;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> private static String readScript(EncodedResource resource, @Nullable String commentPrefix, 			@Nullable String separator) throws IOException;1534164004;Read a script from the provided resource, using the supplied comment prefix_and statement separator, and build a {@code String} containing the lines._<p>Lines <em>beginning</em> with the comment prefix are excluded from the_results_ however, line comments anywhere else &mdash_ for example, within_a statement &mdash_ will be included in the results._@param resource the {@code EncodedResource} containing the script_to be processed_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the statement separator in the SQL script &mdash_ typically "_"_@return a {@code String} containing the script lines_@throws IOException in case of I/O errors;private static String readScript(EncodedResource resource, @Nullable String commentPrefix,_			@Nullable String separator) throws IOException {__		LineNumberReader lnr = new LineNumberReader(resource.getReader())__		try {_			return readScript(lnr, commentPrefix, separator)__		}_		finally {_			lnr.close()__		}_	};read,a,script,from,the,provided,resource,using,the,supplied,comment,prefix,and,statement,separator,and,build,a,code,string,containing,the,lines,p,lines,em,beginning,em,with,the,comment,prefix,are,excluded,from,the,results,however,line,comments,anywhere,else,mdash,for,example,within,a,statement,mdash,will,be,included,in,the,results,param,resource,the,code,encoded,resource,containing,the,script,to,be,processed,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,statement,separator,in,the,sql,script,mdash,typically,return,a,code,string,containing,the,script,lines,throws,ioexception,in,case,of,i,o,errors;private,static,string,read,script,encoded,resource,resource,nullable,string,comment,prefix,nullable,string,separator,throws,ioexception,line,number,reader,lnr,new,line,number,reader,resource,get,reader,try,return,read,script,lnr,comment,prefix,separator,finally,lnr,close
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1395068709;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1397231067;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1397233161;Execute the given SQL script using default settings for separator separators,_comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,separator,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1397385067;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1413848647;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1424885303;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1425069712;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1429045243;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1436876971;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1455813442;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1467730834;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1483462930;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1491480646;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1492013234;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1496259743;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1496837955;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1519588127;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1521222552;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1530174524;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1531945062;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1532091916;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1534164004;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1534164004;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException;1549646187;Execute the given SQL script using default settings for statement_separators, comment delimiters, and exception handling flags._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@throws ScriptException if an error occurred while executing the SQL script_@see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String)_@see #DEFAULT_STATEMENT_SEPARATOR_@see #DEFAULT_COMMENT_PREFIX_@see #DEFAULT_BLOCK_COMMENT_START_DELIMITER_@see #DEFAULT_BLOCK_COMMENT_END_DELIMITER_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource) throws ScriptException {_		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,_				DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER)__	};execute,the,given,sql,script,using,default,settings,for,statement,separators,comment,delimiters,and,exception,handling,flags,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,execute,sql,script,connection,encoded,resource,boolean,boolean,string,string,string,string,see,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,throws,script,exception,execute,sql,script,connection,resource,false,false
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1394984468;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1395068709;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1397231067;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1397233161;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1397385067;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1413848647;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1424885303;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1425069712;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1429045243;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1436876971;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1455813442;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1467730834;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1483462930;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1491480646;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1492013234;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1496259743;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1496837955;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1519588127;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1521222552;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1530174524;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1531945062;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1532091916;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1534164004;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement &mdash_ typically a '_' or newline character_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,mdash,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException;1549646187;Split an SQL script into separate statements delimited by the provided_separator string. Each individual statement will be added to the_provided {@code List}._<p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the_comment prefix_ any text beginning with the comment prefix and extending to_the end of the line will be omitted from the output. Similarly,_{@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and_{@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the_<em>start</em> and <em>end</em> block comment delimiters: any text enclosed_in a block comment will be omitted from the output. In addition, multiple_adjacent whitespace characters will be collapsed into a single space._@param script the SQL script_@param separator text separating each statement_(typically a '_' or newline character)_@param statements the list that will contain the individual statements_@throws ScriptException if an error occurred while splitting the SQL script_@see #splitSqlScript(String, char, List)_@see #splitSqlScript(EncodedResource, String, String, String, String, String, List);public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {_		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,_				DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements)__	};split,an,sql,script,into,separate,statements,delimited,by,the,provided,separator,string,each,individual,statement,will,be,added,to,the,provided,code,list,p,within,the,script,value,will,be,used,as,the,comment,prefix,any,text,beginning,with,the,comment,prefix,and,extending,to,the,end,of,the,line,will,be,omitted,from,the,output,similarly,value,and,value,will,be,used,as,the,em,start,em,and,em,end,em,block,comment,delimiters,any,text,enclosed,in,a,block,comment,will,be,omitted,from,the,output,in,addition,multiple,adjacent,whitespace,characters,will,be,collapsed,into,a,single,space,param,script,the,sql,script,param,separator,text,separating,each,statement,typically,a,or,newline,character,param,statements,the,list,that,will,contain,the,individual,statements,throws,script,exception,if,an,error,occurred,while,splitting,the,sql,script,see,split,sql,script,string,char,list,see,split,sql,script,encoded,resource,string,string,string,string,string,list;public,static,void,split,sql,script,string,script,string,separator,list,string,statements,throws,script,exception,split,sql,script,null,script,separator,statements
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1395068709;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}__			long startTime = System.currentTimeMillis()__			List<String> statements = new LinkedList<String>()__			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_				blockCommentEndDelimiter, statements)__			int lineNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					lineNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement at line " + lineNumber_										+ " of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}__			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1397231067;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}__			long startTime = System.currentTimeMillis()__			List<String> statements = new LinkedList<String>()__			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_				blockCommentEndDelimiter, statements)__			int lineNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					lineNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement at line " + lineNumber_										+ " of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}__			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1397233161;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}__			long startTime = System.currentTimeMillis()__			List<String> statements = new LinkedList<String>()__			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_				blockCommentEndDelimiter, statements)__			int lineNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					lineNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement at line " + lineNumber_										+ " of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}__			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1397385067;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}__			long startTime = System.currentTimeMillis()__			List<String> statements = new LinkedList<String>()__			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_				blockCommentEndDelimiter, statements)__			int lineNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					lineNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement at line " + lineNumber_										+ " of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}__			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1413848647;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}__			long startTime = System.currentTimeMillis()__			List<String> statements = new LinkedList<String>()__			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_				blockCommentEndDelimiter, statements)__			int lineNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					lineNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement at line " + lineNumber_										+ " of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}__			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1424885303;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<String>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug("Failed to execute SQL script statement #" + stmtNumber +_										" of resource " + resource + ": " + statement, ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,string,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,stmt,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1425069712;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<String>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,string,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1429045243;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<String>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,string,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1436876971;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<String>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,string,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1455813442;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<String>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,string,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1467730834;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1483462930;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1491480646;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1492013234;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws ScriptException;1496259743;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1496837955;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1519588127;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1521222552;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1530174524;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new LinkedList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,linked,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1531945062;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isInfoEnabled()) {_				logger.info("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new ArrayList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.debug("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isInfoEnabled()) {_				logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,array,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1532091916;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new ArrayList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.trace("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isDebugEnabled()) {_				logger.debug("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,debug,enabled,logger,debug,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,array,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,trace,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,debug,enabled,logger,debug,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1534164004;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new ArrayList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.trace("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isDebugEnabled()) {_				logger.debug("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,debug,enabled,logger,debug,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,array,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,trace,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,debug,enabled,logger,debug,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1534164004;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script &mdash_ typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new ArrayList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.trace("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isDebugEnabled()) {_				logger.debug("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,debug,enabled,logger,debug,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,array,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,trace,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,debug,enabled,logger,debug,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator, 			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException;1549646187;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><strong>Warning</strong>: this method does <em>not</em> release the_provided {@link Connection}._@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies single-line comments in the_SQL script (typically "--")_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_ may be set to_{@value #EOF_STATEMENT_SEPARATOR} to signal that the script contains a_single statement without a separator_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_@throws ScriptException if an error occurred while executing the SQL script_@see #DEFAULT_STATEMENT_SEPARATOR_@see #FALLBACK_STATEMENT_SEPARATOR_@see #EOF_STATEMENT_SEPARATOR_@see org.springframework.jdbc.datasource.DataSourceUtils#getConnection_@see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, @Nullable String separator,_			String blockCommentStartDelimiter, String blockCommentEndDelimiter) throws ScriptException {__		try {_			if (logger.isDebugEnabled()) {_				logger.debug("Executing SQL script from " + resource)__			}_			long startTime = System.currentTimeMillis()___			String script__			try {_				script = readScript(resource, commentPrefix, separator, blockCommentEndDelimiter)__			}_			catch (IOException ex) {_				throw new CannotReadScriptException(resource, ex)__			}__			if (separator == null) {_				separator = DEFAULT_STATEMENT_SEPARATOR__			}_			if (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {_				separator = FALLBACK_STATEMENT_SEPARATOR__			}__			List<String> statements = new ArrayList<>()__			splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_					blockCommentEndDelimiter, statements)___			int stmtNumber = 0__			Statement stmt = connection.createStatement()__			try {_				for (String statement : statements) {_					stmtNumber++__					try {_						stmt.execute(statement)__						int rowsAffected = stmt.getUpdateCount()__						if (logger.isDebugEnabled()) {_							logger.debug(rowsAffected + " returned as update count for SQL: " + statement)__							SQLWarning warningToLog = stmt.getWarnings()__							while (warningToLog != null) {_								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +_										"', error code '" + warningToLog.getErrorCode() +_										"', message [" + warningToLog.getMessage() + "]")__								warningToLog = warningToLog.getNextWarning()__							}_						}_					}_					catch (SQLException ex) {_						boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__						if (continueOnError || (dropStatement && ignoreFailedDrops)) {_							if (logger.isDebugEnabled()) {_								logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex)__							}_						}_						else {_							throw new ScriptStatementFailedException(statement, stmtNumber, resource, ex)__						}_					}_				}_			}_			finally {_				try {_					stmt.close()__				}_				catch (Throwable ex) {_					logger.trace("Could not close JDBC Statement", ex)__				}_			}__			long elapsedTime = System.currentTimeMillis() - startTime__			if (logger.isDebugEnabled()) {_				logger.debug("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__			}_		}_		catch (Exception ex) {_			if (ex instanceof ScriptException) {_				throw (ScriptException) ex__			}_			throw new UncategorizedScriptException(_				"Failed to execute database script from resource [" + resource + "]", ex)__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,strong,warning,strong,this,method,does,em,not,em,release,the,provided,link,connection,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,single,line,comments,in,the,sql,script,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,may,be,set,to,value,to,signal,that,the,script,contains,a,single,statement,without,a,separator,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,throws,script,exception,if,an,error,occurred,while,executing,the,sql,script,see,see,see,see,org,springframework,jdbc,datasource,data,source,utils,get,connection,see,org,springframework,jdbc,datasource,data,source,utils,release,connection;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,nullable,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,script,exception,try,if,logger,is,debug,enabled,logger,debug,executing,sql,script,from,resource,long,start,time,system,current,time,millis,string,script,try,script,read,script,resource,comment,prefix,separator,block,comment,end,delimiter,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,equals,separator,contains,sql,script,delimiters,script,separator,separator,list,string,statements,new,array,list,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,stmt,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,stmt,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,sqlwarning,warning,to,log,stmt,get,warnings,while,warning,to,log,null,logger,debug,sqlwarning,ignored,sql,state,warning,to,log,get,sqlstate,error,code,warning,to,log,get,error,code,message,warning,to,log,get,message,warning,to,log,warning,to,log,get,next,warning,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,script,statement,failed,exception,build,error,message,statement,stmt,number,resource,ex,else,throw,new,script,statement,failed,exception,statement,stmt,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,trace,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,debug,enabled,logger,debug,executed,sql,script,from,resource,in,elapsed,time,ms,catch,exception,ex,if,ex,instanceof,script,exception,throw,script,exception,ex,throw,new,uncategorized,script,exception,failed,to,execute,database,script,from,resource,resource,ex
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws SQLException, ScriptException;1394708749;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws SQLException, ScriptException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		String script__		try {_			script = readScript(resource, commentPrefix, separator)__		}_		catch (IOException ex) {_			throw new CannotReadScriptException(resource, ex)__		}__		if (separator == null) {_			separator = DEFAULT_STATEMENT_SEPARATOR__			if (!containsSqlScriptDelimiters(script, separator)) {_				separator = "\n"__			}_		}__		splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_			blockCommentEndDelimiter, statements)__		int lineNumber = 0__		Statement stmt = connection.createStatement()__		try {_			for (String statement : statements) {_				lineNumber++__				try {_					stmt.execute(statement)__					int rowsAffected = stmt.getUpdateCount()__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__					}_				}_				catch (SQLException ex) {_					boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__					if (continueOnError || (dropStatement && ignoreFailedDrops)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__					}_				}_			}_		}_		finally {_			try {_				stmt.close()__			}_			catch (Throwable ex) {_				logger.debug("Could not close JDBC Statement", ex)__			}_		}__		long elapsedTime = System.currentTimeMillis() - startTime__		if (logger.isInfoEnabled()) {_			logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,sqlexception,script,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,contains,sql,script,delimiters,script,separator,separator,n,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms
ScriptUtils -> public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError, 			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter, 			String blockCommentEndDelimiter) throws SQLException, ScriptException;1394984468;Execute the given SQL script._<p>Statement separators and comments will be removed before executing_individual statements within the supplied script._<p><b>Do not use this method to execute DDL if you expect rollback.</b>_@param connection the JDBC connection to use to execute the script_ already_configured and ready to use_@param resource the resource (potentially associated with a specific encoding)_to load the SQL script from_@param continueOnError whether or not to continue without throwing an exception_in the event of an error_@param ignoreFailedDrops whether or not to continue in the event of specifically_an error on a {@code DROP} statement_@param commentPrefix the prefix that identifies comments in the SQL script &mdash__typically "--"_@param separator the script statement separator_ defaults to_{@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to_{@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort_@param blockCommentStartDelimiter the <em>start</em> block comment delimiter_ never_{@code null} or empty_@param blockCommentEndDelimiter the <em>end</em> block comment delimiter_ never_{@code null} or empty;public static void executeSqlScript(Connection connection, EncodedResource resource, boolean continueOnError,_			boolean ignoreFailedDrops, String commentPrefix, String separator, String blockCommentStartDelimiter,_			String blockCommentEndDelimiter) throws SQLException, ScriptException {__		if (logger.isInfoEnabled()) {_			logger.info("Executing SQL script from " + resource)__		}_		long startTime = System.currentTimeMillis()__		List<String> statements = new LinkedList<String>()__		String script__		try {_			script = readScript(resource, commentPrefix, separator)__		}_		catch (IOException ex) {_			throw new CannotReadScriptException(resource, ex)__		}__		if (separator == null) {_			separator = DEFAULT_STATEMENT_SEPARATOR__		}_		if (!containsSqlScriptDelimiters(script, separator)) {_			separator = FALLBACK_STATEMENT_SEPARATOR__		}__		splitSqlScript(resource, script, separator, commentPrefix, blockCommentStartDelimiter,_			blockCommentEndDelimiter, statements)__		int lineNumber = 0__		Statement stmt = connection.createStatement()__		try {_			for (String statement : statements) {_				lineNumber++__				try {_					stmt.execute(statement)__					int rowsAffected = stmt.getUpdateCount()__					if (logger.isDebugEnabled()) {_						logger.debug(rowsAffected + " returned as updateCount for SQL: " + statement)__					}_				}_				catch (SQLException ex) {_					boolean dropStatement = StringUtils.startsWithIgnoreCase(statement.trim(), "drop")__					if (continueOnError || (dropStatement && ignoreFailedDrops)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Failed to execute SQL script statement at line " + lineNumber_									+ " of resource " + resource + ": " + statement, ex)__						}_					}_					else {_						throw new ScriptStatementFailedException(statement, lineNumber, resource, ex)__					}_				}_			}_		}_		finally {_			try {_				stmt.close()__			}_			catch (Throwable ex) {_				logger.debug("Could not close JDBC Statement", ex)__			}_		}__		long elapsedTime = System.currentTimeMillis() - startTime__		if (logger.isInfoEnabled()) {_			logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.")__		}_	};execute,the,given,sql,script,p,statement,separators,and,comments,will,be,removed,before,executing,individual,statements,within,the,supplied,script,p,b,do,not,use,this,method,to,execute,ddl,if,you,expect,rollback,b,param,connection,the,jdbc,connection,to,use,to,execute,the,script,already,configured,and,ready,to,use,param,resource,the,resource,potentially,associated,with,a,specific,encoding,to,load,the,sql,script,from,param,continue,on,error,whether,or,not,to,continue,without,throwing,an,exception,in,the,event,of,an,error,param,ignore,failed,drops,whether,or,not,to,continue,in,the,event,of,specifically,an,error,on,a,code,drop,statement,param,comment,prefix,the,prefix,that,identifies,comments,in,the,sql,script,mdash,typically,param,separator,the,script,statement,separator,defaults,to,value,if,not,specified,and,falls,back,to,value,as,a,last,resort,param,block,comment,start,delimiter,the,em,start,em,block,comment,delimiter,never,code,null,or,empty,param,block,comment,end,delimiter,the,em,end,em,block,comment,delimiter,never,code,null,or,empty;public,static,void,execute,sql,script,connection,connection,encoded,resource,resource,boolean,continue,on,error,boolean,ignore,failed,drops,string,comment,prefix,string,separator,string,block,comment,start,delimiter,string,block,comment,end,delimiter,throws,sqlexception,script,exception,if,logger,is,info,enabled,logger,info,executing,sql,script,from,resource,long,start,time,system,current,time,millis,list,string,statements,new,linked,list,string,string,script,try,script,read,script,resource,comment,prefix,separator,catch,ioexception,ex,throw,new,cannot,read,script,exception,resource,ex,if,separator,null,separator,if,contains,sql,script,delimiters,script,separator,separator,split,sql,script,resource,script,separator,comment,prefix,block,comment,start,delimiter,block,comment,end,delimiter,statements,int,line,number,0,statement,stmt,connection,create,statement,try,for,string,statement,statements,line,number,try,stmt,execute,statement,int,rows,affected,stmt,get,update,count,if,logger,is,debug,enabled,logger,debug,rows,affected,returned,as,update,count,for,sql,statement,catch,sqlexception,ex,boolean,drop,statement,string,utils,starts,with,ignore,case,statement,trim,drop,if,continue,on,error,drop,statement,ignore,failed,drops,if,logger,is,debug,enabled,logger,debug,failed,to,execute,sql,script,statement,at,line,line,number,of,resource,resource,statement,ex,else,throw,new,script,statement,failed,exception,statement,line,number,resource,ex,finally,try,stmt,close,catch,throwable,ex,logger,debug,could,not,close,jdbc,statement,ex,long,elapsed,time,system,current,time,millis,start,time,if,logger,is,info,enabled,logger,info,executed,sql,script,from,resource,in,elapsed,time,ms
