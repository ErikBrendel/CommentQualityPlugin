# id;timestamp;commentText;codeText;commentWords;codeWords
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1328020251;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1356735495;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1467730834;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1469102800;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1498780456;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1530174524;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setUsername(String username);1544617266;Set the default username that this adapter should use for retrieving Connections._<p>Default is no specific user. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setPassword_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setUsername(String username) {_		this.username = username__	};set,the,default,username,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,user,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,password,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,username,string,username,this,username,username
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1328020251;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_<code>getConnection()</code> calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,code,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1356735495;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1467730834;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1469102800;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1498780456;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1530174524;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCredentialsForCurrentThread(String username, String password);1544617266;Set user credententials for this proxy and the current thread._The given username and password will be applied to all subsequent_{@code getConnection()} calls on this DataSource proxy._<p>This will override any statically specified user credentials,_that is, values of the "username" and "password" bean properties._@param username the username to apply_@param password the password to apply_@see #removeCredentialsFromCurrentThread;public void setCredentialsForCurrentThread(String username, String password) {_		this.threadBoundCredentials.set(new JdbcUserCredentials(username, password))__	};set,user,credententials,for,this,proxy,and,the,current,thread,the,given,username,and,password,will,be,applied,to,all,subsequent,code,get,connection,calls,on,this,data,source,proxy,p,this,will,override,any,statically,specified,user,credentials,that,is,values,of,the,username,and,password,bean,properties,param,username,the,username,to,apply,param,password,the,password,to,apply,see,remove,credentials,from,current,thread;public,void,set,credentials,for,current,thread,string,username,string,password,this,thread,bound,credentials,set,new,jdbc,user,credentials,username,password
UserCredentialsDataSourceAdapter -> public void setCatalog(String catalog);1469102800;Specify a database catalog to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
UserCredentialsDataSourceAdapter -> public void setCatalog(String catalog);1498780456;Specify a database catalog to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
UserCredentialsDataSourceAdapter -> public void setCatalog(String catalog);1530174524;Specify a database catalog to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
UserCredentialsDataSourceAdapter -> public void setCatalog(String catalog);1544617266;Specify a database catalog to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException;1498780456;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,nullable,string,username,nullable,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException;1530174524;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,nullable,string,username,nullable,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException;1544617266;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,nullable,string,username,nullable,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1328020251;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doGetConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doGetConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,get,connection,thread,credentials,username,thread,credentials,password,else,return,do,get,connection,this,username,this,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1356735495;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doGetConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doGetConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,get,connection,thread,credentials,username,thread,credentials,password,else,return,do,get,connection,this,username,this,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1467730834;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		if (threadCredentials != null) {_			return doGetConnection(threadCredentials.username, threadCredentials.password)__		}_		else {_			return doGetConnection(this.username, this.password)__		}_	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,if,thread,credentials,null,return,do,get,connection,thread,credentials,username,thread,credentials,password,else,return,do,get,connection,this,username,this,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1469102800;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		Connection con = (threadCredentials != null ?_				doGetConnection(threadCredentials.username, threadCredentials.password) :_				doGetConnection(this.username, this.password))___		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,connection,con,thread,credentials,null,do,get,connection,thread,credentials,username,thread,credentials,password,do,get,connection,this,username,this,password,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1498780456;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		Connection con = (threadCredentials != null ?_				doGetConnection(threadCredentials.username, threadCredentials.password) :_				doGetConnection(this.username, this.password))___		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,connection,con,thread,credentials,null,do,get,connection,thread,credentials,username,thread,credentials,password,do,get,connection,this,username,this,password,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1530174524;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) else._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters.;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		Connection con = (threadCredentials != null ?_				doGetConnection(threadCredentials.username, threadCredentials.password) :_				doGetConnection(this.username, this.password))___		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,else,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,connection,con,thread,credentials,null,do,get,connection,thread,credentials,username,thread,credentials,password,do,get,connection,this,username,this,password,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection() throws SQLException;1544617266;Determine whether there are currently thread-bound credentials,_using them if available, falling back to the statically specified_username and password (i.e. values of the bean properties) otherwise._<p>Delegates to {@link #doGetConnection(String, String)} with the_determined credentials as parameters._@see #doGetConnection;@Override_	public Connection getConnection() throws SQLException {_		JdbcUserCredentials threadCredentials = this.threadBoundCredentials.get()__		Connection con = (threadCredentials != null ?_				doGetConnection(threadCredentials.username, threadCredentials.password) :_				doGetConnection(this.username, this.password))___		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};determine,whether,there,are,currently,thread,bound,credentials,using,them,if,available,falling,back,to,the,statically,specified,username,and,password,i,e,values,of,the,bean,properties,otherwise,p,delegates,to,link,do,get,connection,string,string,with,the,determined,credentials,as,parameters,see,do,get,connection;override,public,connection,get,connection,throws,sqlexception,jdbc,user,credentials,thread,credentials,this,thread,bound,credentials,get,connection,con,thread,credentials,null,do,get,connection,thread,credentials,username,thread,credentials,password,do,get,connection,this,username,this,password,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1328020251;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1356735495;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1467730834;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1469102800;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1498780456;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1530174524;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void setPassword(String password);1544617266;Set the default user's password that this adapter should use for retrieving Connections._<p>Default is no specific password. Note that an explicitly specified username_will always override any username/password specified at the DataSource level._@see #setUsername_@see #setCredentialsForCurrentThread(String, String)_@see #getConnection(String, String);public void setPassword(String password) {_		this.password = password__	};set,the,default,user,s,password,that,this,adapter,should,use,for,retrieving,connections,p,default,is,no,specific,password,note,that,an,explicitly,specified,username,will,always,override,any,username,password,specified,at,the,data,source,level,see,set,username,see,set,credentials,for,current,thread,string,string,see,get,connection,string,string;public,void,set,password,string,password,this,password,password
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1328020251;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1356735495;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1467730834;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1469102800;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1498780456;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1530174524;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> public void removeCredentialsFromCurrentThread();1544617266;Remove any user credentials for this proxy from the current thread._Statically specified user credentials apply again afterwards._@see #setCredentialsForCurrentThread;public void removeCredentialsFromCurrentThread() {_		this.threadBoundCredentials.remove()__	};remove,any,user,credentials,for,this,proxy,from,the,current,thread,statically,specified,user,credentials,apply,again,afterwards,see,set,credentials,for,current,thread;public,void,remove,credentials,from,current,thread,this,thread,bound,credentials,remove
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1328020251;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1356735495;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1467730834;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1469102800;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1498780456;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1530174524;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1544617266;Simply delegates to {@link #doGetConnection(String, String)},_keeping the given user credentials as-is.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return doGetConnection(username, password)__	};simply,delegates,to,link,do,get,connection,string,string,keeping,the,given,user,credentials,as,is;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,do,get,connection,username,password
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(String username, String password) throws SQLException;1328020251;This implementation delegates to the <code>getConnection(username, password)</code>_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_<code>getConnection()</code> method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(String username, String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,code,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,code,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(String username, String password) throws SQLException;1356735495;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(String username, String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(String username, String password) throws SQLException;1467730834;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(String username, String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> protected Connection doGetConnection(String username, String password) throws SQLException;1469102800;This implementation delegates to the {@code getConnection(username, password)}_method of the target DataSource, passing in the specified user credentials._If the specified username is empty, it will simply delegate to the standard_{@code getConnection()} method of the target DataSource._@param username the username to use_@param password the password to use_@return the Connection_@see javax.sql.DataSource#getConnection(String, String)_@see javax.sql.DataSource#getConnection();protected Connection doGetConnection(String username, String password) throws SQLException {_		Assert.state(getTargetDataSource() != null, "'targetDataSource' is required")__		if (StringUtils.hasLength(username)) {_			return getTargetDataSource().getConnection(username, password)__		}_		else {_			return getTargetDataSource().getConnection()__		}_	};this,implementation,delegates,to,the,code,get,connection,username,password,method,of,the,target,data,source,passing,in,the,specified,user,credentials,if,the,specified,username,is,empty,it,will,simply,delegate,to,the,standard,code,get,connection,method,of,the,target,data,source,param,username,the,username,to,use,param,password,the,password,to,use,return,the,connection,see,javax,sql,data,source,get,connection,string,string,see,javax,sql,data,source,get,connection;protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,assert,state,get,target,data,source,null,target,data,source,is,required,if,string,utils,has,length,username,return,get,target,data,source,get,connection,username,password,else,return,get,target,data,source,get,connection
UserCredentialsDataSourceAdapter -> public void setSchema(String schema);1469102800;Specify a database schema to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
UserCredentialsDataSourceAdapter -> public void setSchema(String schema);1498780456;Specify a database schema to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
UserCredentialsDataSourceAdapter -> public void setSchema(String schema);1530174524;Specify a database schema to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
UserCredentialsDataSourceAdapter -> public void setSchema(String schema);1544617266;Specify a database schema to be applied to each retrieved Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,retrieved,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
