commented;modifiers;parameterAmount;loc;comment;code
true;private,static;1;26;/* 	 * Oracle-based implementation for detecting the current schema. 	 */ ;/* 	 * Oracle-based implementation for detecting the current schema. 	 */ @Nullable private static String lookupDefaultSchema(DatabaseMetaData databaseMetaData) {     try {         CallableStatement cstmt = null.         try {             Connection con = databaseMetaData.getConnection().             if (con == null) {                 logger.debug("Cannot check default schema - no Connection from DatabaseMetaData").                 return null.             }             cstmt = con.prepareCall("{? = call sys_context('USERENV', 'CURRENT_SCHEMA')}").             cstmt.registerOutParameter(1, Types.VARCHAR).             cstmt.execute().             return cstmt.getString(1).         } finally {             if (cstmt != null) {                 cstmt.close().             }         }     } catch (SQLException ex) {         logger.debug("Exception encountered during default schema lookup", ex).         return null.     } }
false;protected;0;8;;@Override @Nullable protected String getDefaultSchema() {     if (this.defaultSchema != null) {         return this.defaultSchema.     }     return super.getDefaultSchema(). }
false;public;4;56;;@Override public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) throws SQLException {     if (!this.includeSynonyms) {         logger.debug("Defaulting to no synonyms in table meta-data lookup").         super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName).         return.     }     Connection con = databaseMetaData.getConnection().     if (con == null) {         logger.info("Unable to include synonyms in table meta-data lookup - no Connection from DatabaseMetaData").         super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName).         return.     }     try {         Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection").         con = (Connection) con.unwrap(oracleConClass).     } catch (ClassNotFoundException | SQLException ex) {         if (logger.isInfoEnabled()) {             logger.info("Unable to include synonyms in table meta-data lookup - no Oracle Connection: " + ex).         }         super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName).         return.     }     logger.debug("Including synonyms in table meta-data lookup").     Method setIncludeSynonyms.     Boolean originalValueForIncludeSynonyms.     try {         Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms").         ReflectionUtils.makeAccessible(getIncludeSynonyms).         originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con).         setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class).         ReflectionUtils.makeAccessible(setIncludeSynonyms).         setIncludeSynonyms.invoke(con, Boolean.TRUE).     } catch (Throwable ex) {         throw new InvalidDataAccessApiUsageException("Could not prepare Oracle Connection", ex).     }     super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName).     try {         setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms).     } catch (Throwable ex) {         throw new InvalidDataAccessApiUsageException("Could not reset Oracle Connection", ex).     } }
