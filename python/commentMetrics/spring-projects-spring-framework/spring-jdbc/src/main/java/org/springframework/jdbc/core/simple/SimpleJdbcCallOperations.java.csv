commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Specify the procedure name to be used - this implies that we will be calling a stored procedure.  * @param procedureName the name of the stored procedure  * @return the instance of this SimpleJdbcCall  */ ;/**  * Specify the procedure name to be used - this implies that we will be calling a stored procedure.  * @param procedureName the name of the stored procedure  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withProcedureName(String procedureName).
true;;1;1;/**  * Specify the procedure name to be used - this implies that we will be calling a stored function.  * @param functionName the name of the stored function  * @return the instance of this SimpleJdbcCall  */ ;/**  * Specify the procedure name to be used - this implies that we will be calling a stored function.  * @param functionName the name of the stored function  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withFunctionName(String functionName).
true;;1;1;/**  * Optionally, specify the name of the schema that contins the stored procedure.  * @param schemaName the name of the schema  * @return the instance of this SimpleJdbcCall  */ ;/**  * Optionally, specify the name of the schema that contins the stored procedure.  * @param schemaName the name of the schema  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withSchemaName(String schemaName).
true;;1;1;/**  * Optionally, specify the name of the catalog that contins the stored procedure.  * <p>To provide consistency with the Oracle DatabaseMetaData, this is used to specify the  * package name if the procedure is declared as part of a package.  * @param catalogName the catalog or package name  * @return the instance of this SimpleJdbcCall  */ ;/**  * Optionally, specify the name of the catalog that contins the stored procedure.  * <p>To provide consistency with the Oracle DatabaseMetaData, this is used to specify the  * package name if the procedure is declared as part of a package.  * @param catalogName the catalog or package name  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withCatalogName(String catalogName).
true;;0;1;/**  * Indicates the procedure's return value should be included in the results returned.  * @return the instance of this SimpleJdbcCall  */ ;/**  * Indicates the procedure's return value should be included in the results returned.  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withReturnValue().
true;;1;1;/**  * Specify one or more parameters if desired. These parameters will be supplemented with  * any parameter information retrieved from the database meta-data.  * <p>Note that only parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}  * will be used to provide input values. This is different from the {@code StoredProcedure}  * class which - for backwards compatibility reasons - allows input values to be provided  * for parameters declared as {@code SqlOutParameter}.  * @param sqlParameters the parameters to use  * @return the instance of this SimpleJdbcCall  */ ;/**  * Specify one or more parameters if desired. These parameters will be supplemented with  * any parameter information retrieved from the database meta-data.  * <p>Note that only parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}  * will be used to provide input values. This is different from the {@code StoredProcedure}  * class which - for backwards compatibility reasons - allows input values to be provided  * for parameters declared as {@code SqlOutParameter}.  * @param sqlParameters the parameters to use  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations declareParameters(SqlParameter... sqlParameters).
true;;1;1;/**  * Not used yet.  */ ;/**  * Not used yet.  */ SimpleJdbcCallOperations useInParameterNames(String... inParameterNames).
true;;2;1;/**  * Used to specify when a ResultSet is returned by the stored procedure and you want it  * mapped by a {@link RowMapper}. The results will be returned using the parameter name  * specified. Multiple ResultSets must be declared in the correct order.  * <p>If the database you are using uses ref cursors then the name specified must match  * the name of the parameter declared for the procedure in the database.  * @param parameterName the name of the returned results and/or the name of the ref cursor parameter  * @param rowMapper the RowMapper implementation that will map the data returned for each row  */ ;/**  * Used to specify when a ResultSet is returned by the stored procedure and you want it  * mapped by a {@link RowMapper}. The results will be returned using the parameter name  * specified. Multiple ResultSets must be declared in the correct order.  * <p>If the database you are using uses ref cursors then the name specified must match  * the name of the parameter declared for the procedure in the database.  * @param parameterName the name of the returned results and/or the name of the ref cursor parameter  * @param rowMapper the RowMapper implementation that will map the data returned for each row  */ SimpleJdbcCallOperations returningResultSet(String parameterName, RowMapper<?> rowMapper).
true;;0;1;/**  * Turn off any processing of parameter meta-data information obtained via JDBC.  * @return the instance of this SimpleJdbcCall  */ ;/**  * Turn off any processing of parameter meta-data information obtained via JDBC.  * @return the instance of this SimpleJdbcCall  */ SimpleJdbcCallOperations withoutProcedureColumnMetaDataAccess().
true;;0;1;/**  * Indicates that parameters should be bound by name.  * @return the instance of this SimpleJdbcCall  * @since 4.2  */ ;/**  * Indicates that parameters should be bound by name.  * @return the instance of this SimpleJdbcCall  * @since 4.2  */ SimpleJdbcCallOperations withNamedBinding().
true;;2;1;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined  * for the stored procedure.  */ ;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined  * for the stored procedure.  */ <T> T executeFunction(Class<T> returnType, Object... args).
true;;2;1;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args a Map containing the parameter values to be used in the call  */ ;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args a Map containing the parameter values to be used in the call  */ <T> T executeFunction(Class<T> returnType, Map<String, ?> args).
true;;2;1;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args the MapSqlParameterSource containing the parameter values to be used in the call  */ ;/**  * Execute the stored function and return the results obtained as an Object of the  * specified return type.  * @param returnType the type of the value to return  * @param args the MapSqlParameterSource containing the parameter values to be used in the call  */ <T> T executeFunction(Class<T> returnType, SqlParameterSource args).
true;;2;1;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined for  * the stored procedure.  */ ;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined for  * the stored procedure.  */ <T> T executeObject(Class<T> returnType, Object... args).
true;;2;1;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args a Map containing the parameter values to be used in the call  */ ;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args a Map containing the parameter values to be used in the call  */ <T> T executeObject(Class<T> returnType, Map<String, ?> args).
true;;2;1;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args the MapSqlParameterSource containing the parameter values to be used in the call  */ ;/**  * Execute the stored procedure and return the single out parameter as an Object  * of the specified return type. In the case where there are multiple out parameters,  * the first one is returned and additional out parameters are ignored.  * @param returnType the type of the value to return  * @param args the MapSqlParameterSource containing the parameter values to be used in the call  */ <T> T executeObject(Class<T> returnType, SqlParameterSource args).
true;;1;1;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined for  * the stored procedure.  * @return a Map of output params  */ ;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args optional array containing the in parameter values to be used in the call.  * Parameter values must be provided in the same order as the parameters are defined for  * the stored procedure.  * @return a Map of output params  */ Map<String, Object> execute(Object... args).
true;;1;1;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args a Map containing the parameter values to be used in the call  * @return a Map of output params  */ ;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args a Map containing the parameter values to be used in the call  * @return a Map of output params  */ Map<String, Object> execute(Map<String, ?> args).
true;;1;1;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args the SqlParameterSource containing the parameter values to be used in the call  * @return a Map of output params  */ ;/**  * Execute the stored procedure and return a map of output params, keyed by name  * as in parameter declarations.  * @param args the SqlParameterSource containing the parameter values to be used in the call  * @return a Map of output params  */ Map<String, Object> execute(SqlParameterSource args).
