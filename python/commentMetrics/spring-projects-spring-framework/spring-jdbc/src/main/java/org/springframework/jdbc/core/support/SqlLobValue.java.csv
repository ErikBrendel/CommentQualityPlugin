commented;modifiers;parameterAmount;loc;comment;code
true;public;4;38;/**  * Set the specified content via the LobCreator.  */ ;/**  * Set the specified content via the LobCreator.  */ @Override public void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, @Nullable String typeName) throws SQLException {     if (sqlType == Types.BLOB) {         if (this.content instanceof byte[] || this.content == null) {             this.lobCreator.setBlobAsBytes(ps, paramIndex, (byte[]) this.content).         } else if (this.content instanceof String) {             this.lobCreator.setBlobAsBytes(ps, paramIndex, ((String) this.content).getBytes()).         } else if (this.content instanceof InputStream) {             this.lobCreator.setBlobAsBinaryStream(ps, paramIndex, (InputStream) this.content, this.length).         } else {             throw new IllegalArgumentException("Content type [" + this.content.getClass().getName() + "] not supported for BLOB columns").         }     } else if (sqlType == Types.CLOB) {         if (this.content instanceof String || this.content == null) {             this.lobCreator.setClobAsString(ps, paramIndex, (String) this.content).         } else if (this.content instanceof InputStream) {             this.lobCreator.setClobAsAsciiStream(ps, paramIndex, (InputStream) this.content, this.length).         } else if (this.content instanceof Reader) {             this.lobCreator.setClobAsCharacterStream(ps, paramIndex, (Reader) this.content, this.length).         } else {             throw new IllegalArgumentException("Content type [" + this.content.getClass().getName() + "] not supported for CLOB columns").         }     } else {         throw new IllegalArgumentException("SqlLobValue only supports SQL types BLOB and CLOB").     } }
true;public;0;4;/**  * Close the LobCreator, if any.  */ ;/**  * Close the LobCreator, if any.  */ @Override public void cleanup() {     this.lobCreator.close(). }
