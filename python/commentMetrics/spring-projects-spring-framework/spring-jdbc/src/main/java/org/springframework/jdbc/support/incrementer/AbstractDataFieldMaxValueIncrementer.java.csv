commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the data source to retrieve the value from.  */ ;/**  * Set the data source to retrieve the value from.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
true;public;0;3;/**  * Return the data source to retrieve the value from.  */ ;/**  * Return the data source to retrieve the value from.  */ public DataSource getDataSource() {     return this.dataSource. }
true;public;1;3;/**  * Set the name of the sequence/table.  */ ;/**  * Set the name of the sequence/table.  */ public void setIncrementerName(String incrementerName) {     this.incrementerName = incrementerName. }
true;public;0;3;/**  * Return the name of the sequence/table.  */ ;/**  * Return the name of the sequence/table.  */ public String getIncrementerName() {     return this.incrementerName. }
true;public;1;3;/**  * Set the padding length, i.e. the length to which a string result  * should be pre-pended with zeroes.  */ ;/**  * Set the padding length, i.e. the length to which a string result  * should be pre-pended with zeroes.  */ public void setPaddingLength(int paddingLength) {     this.paddingLength = paddingLength. }
true;public;0;3;/**  * Return the padding length for String values.  */ ;/**  * Return the padding length for String values.  */ public int getPaddingLength() {     return this.paddingLength. }
false;public;0;9;;@Override public void afterPropertiesSet() {     if (this.dataSource == null) {         throw new IllegalArgumentException("Property 'dataSource' is required").     }     if (this.incrementerName == null) {         throw new IllegalArgumentException("Property 'incrementerName' is required").     } }
false;public;0;4;;@Override public int nextIntValue() throws DataAccessException {     return (int) getNextKey(). }
false;public;0;4;;@Override public long nextLongValue() throws DataAccessException {     return getNextKey(). }
false;public;0;14;;@Override public String nextStringValue() throws DataAccessException {     String s = Long.toString(getNextKey()).     int len = s.length().     if (len < this.paddingLength) {         StringBuilder sb = new StringBuilder(this.paddingLength).         for (int i = 0. i < this.paddingLength - len. i++) {             sb.append('0').         }         sb.append(s).         s = sb.toString().     }     return s. }
true;protected,abstract;0;1;/**  * Determine the next key to use, as a long.  * @return the key to use as a long. It will eventually be converted later  * in another format by the public concrete methods of this class.  */ ;/**  * Determine the next key to use, as a long.  * @return the key to use as a long. It will eventually be converted later  * in another format by the public concrete methods of this class.  */ protected abstract long getNextKey().
