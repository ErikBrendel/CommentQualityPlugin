commented;modifiers;parameterAmount;loc;comment;code
true;public,static,synchronized;0;9;/**  * Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance.  * @return the configurer instance  */ ;/**  * Get the singleton {@link DerbyEmbeddedDatabaseConfigurer} instance.  * @return the configurer instance  */ public static synchronized DerbyEmbeddedDatabaseConfigurer getInstance() {     if (instance == null) {         // disable log file         System.setProperty("derby.stream.error.method", OutputStreamFactory.class.getName() + ".getNoopOutputStream").         instance = new DerbyEmbeddedDatabaseConfigurer().     }     return instance. }
false;public;2;7;;@Override public void configureConnectionProperties(ConnectionProperties properties, String databaseName) {     properties.setDriverClass(EmbeddedDriver.class).     properties.setUrl(String.format(URL_TEMPLATE, databaseName, "create=true")).     properties.setUsername("sa").     properties.setPassword(""). }
false;public;2;13;;@Override public void shutdown(DataSource dataSource, String databaseName) {     try {         new EmbeddedDriver().connect(String.format(URL_TEMPLATE, databaseName, "drop=true"), new Properties()).     } catch (SQLException ex) {         // Error code that indicates successful shutdown         if (!"08006".equals(ex.getSQLState())) {             LogFactory.getLog(getClass()).warn("Could not shut down embedded Derby database", ex).         }     } }
