commented;modifiers;parameterAmount;loc;comment;code
true;public;2;8;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ ;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ public MapSqlParameterSource addValue(String paramName, @Nullable Object value) {     Assert.notNull(paramName, "Parameter name must not be null").     this.values.put(paramName, value).     if (value instanceof SqlParameterValue) {         registerSqlType(paramName, ((SqlParameterValue) value).getSqlType()).     }     return this. }
true;public;3;6;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @param sqlType the SQL type of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ ;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @param sqlType the SQL type of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ public MapSqlParameterSource addValue(String paramName, @Nullable Object value, int sqlType) {     Assert.notNull(paramName, "Parameter name must not be null").     this.values.put(paramName, value).     registerSqlType(paramName, sqlType).     return this. }
true;public;4;7;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @param sqlType the SQL type of the parameter  * @param typeName the type name of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ ;/**  * Add a parameter to this parameter source.  * @param paramName the name of the parameter  * @param value the value of the parameter  * @param sqlType the SQL type of the parameter  * @param typeName the type name of the parameter  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ public MapSqlParameterSource addValue(String paramName, @Nullable Object value, int sqlType, String typeName) {     Assert.notNull(paramName, "Parameter name must not be null").     this.values.put(paramName, value).     registerSqlType(paramName, sqlType).     registerTypeName(paramName, typeName).     return this. }
true;public;1;11;/**  * Add a Map of parameters to this parameter source.  * @param values a Map holding existing parameter values (can be {@code null})  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ ;/**  * Add a Map of parameters to this parameter source.  * @param values a Map holding existing parameter values (can be {@code null})  * @return a reference to this parameter source,  * so it's possible to chain several calls together  */ public MapSqlParameterSource addValues(@Nullable Map<String, ?> values) {     if (values != null) {         values.forEach((key, value) -> {             this.values.put(key, value).             if (value instanceof SqlParameterValue) {                 registerSqlType(key, ((SqlParameterValue) value).getSqlType()).             }         }).     }     return this. }
true;public;0;3;/**  * Expose the current parameter values as read-only Map.  */ ;/**  * Expose the current parameter values as read-only Map.  */ public Map<String, Object> getValues() {     return Collections.unmodifiableMap(this.values). }
false;public;1;4;;@Override public boolean hasValue(String paramName) {     return this.values.containsKey(paramName). }
false;public;1;8;;@Override @Nullable public Object getValue(String paramName) {     if (!hasValue(paramName)) {         throw new IllegalArgumentException("No value registered for key '" + paramName + "'").     }     return this.values.get(paramName). }
false;public;0;5;;@Override @Nullable public String[] getParameterNames() {     return StringUtils.toStringArray(this.values.keySet()). }
