commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;/**  * Checks that the specified 'targetDataSource' actually is  * a WebSphere WSDataSource.  */ ;/**  * Checks that the specified 'targetDataSource' actually is  * a WebSphere WSDataSource.  */ @Override public void afterPropertiesSet() {     super.afterPropertiesSet().     if (!this.wsDataSourceClass.isInstance(getTargetDataSource())) {         throw new IllegalStateException("Specified 'targetDataSource' is not a WebSphere WSDataSource: " + getTargetDataSource()).     } }
true;protected;2;15;/**  * Builds a WebSphere JDBCConnectionSpec object for the current settings  * and calls {@code WSDataSource.getConnection(JDBCConnectionSpec)}.  * @see #createConnectionSpec  * @see com.ibm.websphere.rsadapter.WSDataSource#getConnection(com.ibm.websphere.rsadapter.JDBCConnectionSpec)  */ ;/**  * Builds a WebSphere JDBCConnectionSpec object for the current settings  * and calls {@code WSDataSource.getConnection(JDBCConnectionSpec)}.  * @see #createConnectionSpec  * @see com.ibm.websphere.rsadapter.WSDataSource#getConnection(com.ibm.websphere.rsadapter.JDBCConnectionSpec)  */ @Override protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {     // Create JDBCConnectionSpec using current isolation level value and read-only flag.     Object connSpec = createConnectionSpec(getCurrentIsolationLevel(), getCurrentReadOnlyFlag(), username, password).     if (logger.isDebugEnabled()) {         logger.debug("Obtaining JDBC Connection from WebSphere DataSource [" + getTargetDataSource() + "], using ConnectionSpec [" + connSpec + "]").     }     // Create Connection through invoking WSDataSource.getConnection(JDBCConnectionSpec)     Connection con = (Connection) invokeJdbcMethod(this.wsDataSourceGetConnectionMethod, obtainTargetDataSource(), connSpec).     Assert.state(con != null, "No Connection").     return con. }
true;protected;4;19;/**  * Create a WebSphere {@code JDBCConnectionSpec} object for the given characteristics.  * <p>The default implementation uses reflection to apply the given settings.  * Can be overridden in subclasses to customize the JDBCConnectionSpec object  * (<a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html">JDBCConnectionSpec javadoc</a>.  * <a href="http://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html">IBM developerWorks article</a>).  * @param isolationLevel the isolation level to apply (or {@code null} if none)  * @param readOnlyFlag the read-only flag to apply (or {@code null} if none)  * @param username the username to apply ({@code null} or empty indicates the default)  * @param password the password to apply (may be {@code null} or empty)  * @throws SQLException if thrown by JDBCConnectionSpec API methods  * @see com.ibm.websphere.rsadapter.JDBCConnectionSpec  */ ;/**  * Create a WebSphere {@code JDBCConnectionSpec} object for the given characteristics.  * <p>The default implementation uses reflection to apply the given settings.  * Can be overridden in subclasses to customize the JDBCConnectionSpec object  * (<a href="http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html">JDBCConnectionSpec javadoc</a>.  * <a href="http://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html">IBM developerWorks article</a>).  * @param isolationLevel the isolation level to apply (or {@code null} if none)  * @param readOnlyFlag the read-only flag to apply (or {@code null} if none)  * @param username the username to apply ({@code null} or empty indicates the default)  * @param password the password to apply (may be {@code null} or empty)  * @throws SQLException if thrown by JDBCConnectionSpec API methods  * @see com.ibm.websphere.rsadapter.JDBCConnectionSpec  */ protected Object createConnectionSpec(@Nullable Integer isolationLevel, @Nullable Boolean readOnlyFlag, @Nullable String username, @Nullable String password) throws SQLException {     Object connSpec = invokeJdbcMethod(this.newJdbcConnSpecMethod, null).     Assert.state(connSpec != null, "No JDBCConnectionSpec").     if (isolationLevel != null) {         invokeJdbcMethod(this.setTransactionIsolationMethod, connSpec, isolationLevel).     }     if (readOnlyFlag != null) {         invokeJdbcMethod(this.setReadOnlyMethod, connSpec, readOnlyFlag).     }     // use its default credentials.     if (StringUtils.hasLength(username)) {         invokeJdbcMethod(this.setUserNameMethod, connSpec, username).         invokeJdbcMethod(this.setPasswordMethod, connSpec, password).     }     return connSpec. }
false;private,static;3;17;;@Nullable private static Object invokeJdbcMethod(Method method, @Nullable Object target, @Nullable Object... args) throws SQLException {     try {         return method.invoke(target, args).     } catch (IllegalAccessException ex) {         ReflectionUtils.handleReflectionException(ex).     } catch (InvocationTargetException ex) {         if (ex.getTargetException() instanceof SQLException) {             throw (SQLException) ex.getTargetException().         }         ReflectionUtils.handleInvocationTargetException(ex).     }     throw new IllegalStateException("Should never get here"). }
