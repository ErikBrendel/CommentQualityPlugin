# id;timestamp;commentText;codeText;commentWords;codeWords
DataSourceUtils -> public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException;1328020251;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}__		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}__		_		_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			logger.debug("Returning JDBC Connection to DataSource")__			con.close()__		}_	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,logger,debug,returning,jdbc,connection,to,data,source,con,close
DataSourceUtils -> public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException;1352414234;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException;1356735495;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException;1413568470;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException;1486062666;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition) 			throws SQLException;1328020251;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_			catch (RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;public,static,integer,prepare,connection,for,transaction,connection,con,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,catch,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition) 			throws SQLException;1352414234;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_			catch (RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;public,static,integer,prepare,connection,for,transaction,connection,con,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,catch,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition) 			throws SQLException;1356735495;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_			catch (RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;public,static,integer,prepare,connection,for,transaction,connection,con,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,catch,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition) 			throws SQLException;1413568470;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_			catch (RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;public,static,integer,prepare,connection,for,transaction,connection,con,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,catch,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition) 			throws SQLException;1486062666;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;public static Integer prepareConnectionForTransaction(Connection con, TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException | RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;public,static,integer,prepare,connection,for,transaction,connection,con,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1328020251;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout > 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1352414234;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout > 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1356735495;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout > 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1413568470;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1486062666;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException;1495868221;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		Assert.notNull(dataSource, "No DataSource specified")__		ConnectionHolder holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,assert,not,null,data,source,no,data,source,specified,connection,holder,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException;1496837955;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException;1496955101;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		logger.debug("Returning JDBC Connection to DataSource")__		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,logger,debug,returning,jdbc,connection,to,data,source,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException;1543877450;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,do,close,connection,con,data,source
DataSourceUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException;1543886147;Actually close the given Connection, obtained from the given DataSource._Same as {@link #releaseConnection}, but throwing the original SQLException._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@throws SQLException if thrown by JDBC methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (con == null) {_			return__		}_		if (dataSource != null) {_			ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__			if (conHolder != null && connectionEquals(conHolder, con)) {_				_				conHolder.released()__				return__			}_		}_		doCloseConnection(con, dataSource)__	};actually,close,the,given,connection,obtained,from,the,given,data,source,same,as,link,release,connection,but,throwing,the,original,sqlexception,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,data,source,data,source,throws,sqlexception,if,con,null,return,if,data,source,null,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,connection,equals,con,holder,con,con,holder,released,return,do,close,connection,con,data,source
DataSourceUtils -> private static Connection fetchConnection(DataSource dataSource) throws SQLException;1496955101;Actually fetch a {@link Connection} from the given {@link DataSource},_defensively turning an unexpected {@code null} return value from_{@link DataSource#getConnection()} into an {@link IllegalStateException}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource (never {@code null})_@throws SQLException if thrown by JDBC methods_@throws IllegalStateException if the DataSource returned a null value_@see DataSource#getConnection();private static Connection fetchConnection(DataSource dataSource) throws SQLException {_		Connection con = dataSource.getConnection()__		if (con == null) {_			throw new IllegalStateException("DataSource returned null from getConnection(): " + dataSource)__		}_		return con__	};actually,fetch,a,link,connection,from,the,given,link,data,source,defensively,turning,an,unexpected,code,null,return,value,from,link,data,source,get,connection,into,an,link,illegal,state,exception,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,never,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,throws,illegal,state,exception,if,the,data,source,returned,a,null,value,see,data,source,get,connection;private,static,connection,fetch,connection,data,source,data,source,throws,sqlexception,connection,con,data,source,get,connection,if,con,null,throw,new,illegal,state,exception,data,source,returned,null,from,get,connection,data,source,return,con
DataSourceUtils -> private static Connection fetchConnection(DataSource dataSource) throws SQLException;1543877450;Actually fetch a {@link Connection} from the given {@link DataSource},_defensively turning an unexpected {@code null} return value from_{@link DataSource#getConnection()} into an {@link IllegalStateException}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource (never {@code null})_@throws SQLException if thrown by JDBC methods_@throws IllegalStateException if the DataSource returned a null value_@see DataSource#getConnection();private static Connection fetchConnection(DataSource dataSource) throws SQLException {_		Connection con = dataSource.getConnection()__		if (con == null) {_			throw new IllegalStateException("DataSource returned null from getConnection(): " + dataSource)__		}_		return con__	};actually,fetch,a,link,connection,from,the,given,link,data,source,defensively,turning,an,unexpected,code,null,return,value,from,link,data,source,get,connection,into,an,link,illegal,state,exception,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,never,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,throws,illegal,state,exception,if,the,data,source,returned,a,null,value,see,data,source,get,connection;private,static,connection,fetch,connection,data,source,data,source,throws,sqlexception,connection,con,data,source,get,connection,if,con,null,throw,new,illegal,state,exception,data,source,returned,null,from,get,connection,data,source,return,con
DataSourceUtils -> private static Connection fetchConnection(DataSource dataSource) throws SQLException;1543886147;Actually fetch a {@link Connection} from the given {@link DataSource},_defensively turning an unexpected {@code null} return value from_{@link DataSource#getConnection()} into an {@link IllegalStateException}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource (never {@code null})_@throws SQLException if thrown by JDBC methods_@throws IllegalStateException if the DataSource returned a null value_@see DataSource#getConnection();private static Connection fetchConnection(DataSource dataSource) throws SQLException {_		Connection con = dataSource.getConnection()__		if (con == null) {_			throw new IllegalStateException("DataSource returned null from getConnection(): " + dataSource)__		}_		return con__	};actually,fetch,a,link,connection,from,the,given,link,data,source,defensively,turning,an,unexpected,code,null,return,value,from,link,data,source,get,connection,into,an,link,illegal,state,exception,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,never,code,null,throws,sqlexception,if,thrown,by,jdbc,methods,throws,illegal,state,exception,if,the,data,source,returned,a,null,value,see,data,source,get,connection;private,static,connection,fetch,connection,data,source,data,source,throws,sqlexception,connection,con,data,source,get,connection,if,con,null,throw,new,illegal,state,exception,data,source,returned,null,from,get,connection,data,source,return,con
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1328020251;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1352414234;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1356735495;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1413568470;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1486062666;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1495868221;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1496837955;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1496955101;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1543877450;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getTargetConnection(Connection con);1543886147;Return the innermost target Connection of the given Connection. If the given_Connection is a proxy, it will be unwrapped until a non-proxy Connection is_found. Otherwise, the passed-in Connection will be returned as-is._@param con the Connection proxy to unwrap_@return the innermost target Connection, or the passed-in one if no proxy_@see ConnectionProxy#getTargetConnection();public static Connection getTargetConnection(Connection con) {_		Connection conToUse = con__		while (conToUse instanceof ConnectionProxy) {_			conToUse = ((ConnectionProxy) conToUse).getTargetConnection()__		}_		return conToUse__	};return,the,innermost,target,connection,of,the,given,connection,if,the,given,connection,is,a,proxy,it,will,be,unwrapped,until,a,non,proxy,connection,is,found,otherwise,the,passed,in,connection,will,be,returned,as,is,param,con,the,connection,proxy,to,unwrap,return,the,innermost,target,connection,or,the,passed,in,one,if,no,proxy,see,connection,proxy,get,target,connection;public,static,connection,get,target,connection,connection,con,connection,con,to,use,con,while,con,to,use,instanceof,connection,proxy,con,to,use,connection,proxy,con,to,use,get,target,connection,return,con,to,use
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1328020251;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1352414234;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1356735495;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1413568470;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1486062666;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1495868221;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1496837955;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex)__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,could,not,get,jdbc,connection,ex
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1496955101;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection", ex)__		}_		catch (IllegalStateException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection: " + ex.getMessage())__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,catch,illegal,state,exception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,get,message
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1543877450;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection", ex)__		}_		catch (IllegalStateException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection: " + ex.getMessage())__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,catch,illegal,state,exception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,get,message
DataSourceUtils -> public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException;1543886147;Obtain a Connection from the given DataSource. Translates SQLExceptions into_the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the_thread if transaction synchronization is active, e.g. when running within a_{@link org.springframework.transaction.jta.JtaTransactionManager JTA} transaction)._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws org.springframework.jdbc.CannotGetJdbcConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {_		try {_			return doGetConnection(dataSource)__		}_		catch (SQLException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection", ex)__		}_		catch (IllegalStateException ex) {_			throw new CannotGetJdbcConnectionException("Failed to obtain JDBC Connection: " + ex.getMessage())__		}_	};obtain,a,connection,from,the,given,data,source,translates,sqlexceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,when,running,within,a,link,org,springframework,transaction,jta,jta,transaction,manager,jta,transaction,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,org,springframework,jdbc,cannot,get,jdbc,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,data,source,data,source,throws,cannot,get,jdbc,connection,exception,try,return,do,get,connection,data,source,catch,sqlexception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,catch,illegal,state,exception,ex,throw,new,cannot,get,jdbc,connection,exception,failed,to,obtain,jdbc,connection,ex,get,message
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1328020251;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, 0)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,0
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1352414234;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, 0)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,0
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1356735495;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, 0)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,0
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1413568470;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1486062666;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException;1495868221;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException;1496837955;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		ConnectionHolder holder = null__		if (dataSource != null) {_			holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		}_		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,nullable,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,connection,holder,holder,null,if,data,source,null,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException;1496955101;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		ConnectionHolder holder = null__		if (dataSource != null) {_			holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		}_		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,nullable,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,connection,holder,holder,null,if,data,source,null,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException;1543877450;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		ConnectionHolder holder = null__		if (dataSource != null) {_			holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		}_		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,nullable,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,connection,holder,holder,null,if,data,source,null,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException;1543886147;Apply the specified timeout - overridden by the current transaction timeout,_if any - to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@param timeout the timeout to apply (or 0 for no timeout outside of a transaction)_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTimeout(Statement stmt, @Nullable DataSource dataSource, int timeout) throws SQLException {_		Assert.notNull(stmt, "No Statement specified")__		ConnectionHolder holder = null__		if (dataSource != null) {_			holder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		}_		if (holder != null && holder.hasTimeout()) {_			_			stmt.setQueryTimeout(holder.getTimeToLiveInSeconds())__		}_		else if (timeout >= 0) {_			_			stmt.setQueryTimeout(timeout)__		}_	};apply,the,specified,timeout,overridden,by,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,param,timeout,the,timeout,to,apply,or,0,for,no,timeout,outside,of,a,transaction,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,timeout,statement,stmt,nullable,data,source,data,source,int,timeout,throws,sqlexception,assert,not,null,stmt,no,statement,specified,connection,holder,holder,null,if,data,source,null,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,holder,null,holder,has,timeout,stmt,set,query,timeout,holder,get,time,to,live,in,seconds,else,if,timeout,0,stmt,set,query,timeout,timeout
DataSourceUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource);1496837955;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource);1496955101;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource);1543877450;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource);1543886147;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1328020251;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1352414234;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1356735495;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1413568470;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1486062666;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1495868221;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1496837955;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(dataSource.getConnection())__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = dataSource.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,data,source,get,connection,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,data,source,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1496955101;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(fetchConnection(dataSource))__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = fetchConnection(dataSource)___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JDBC Connection")__			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,fetch,connection,data,source,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,fetch,connection,data,source,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jdbc,connection,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1543877450;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(fetchConnection(dataSource))__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = fetchConnection(dataSource)___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			_			_			ConnectionHolder holderToUse = conHolder__			if (holderToUse == null) {_				holderToUse = new ConnectionHolder(con)__			}_			else {_				holderToUse.setConnection(con)__			}_			holderToUse.requested()__			TransactionSynchronizationManager.registerSynchronization(_					new ConnectionSynchronization(holderToUse, dataSource))__			holderToUse.setSynchronizedWithTransaction(true)__			if (holderToUse != conHolder) {_				TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,fetch,connection,data,source,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,fetch,connection,data,source,if,transaction,synchronization,manager,is,synchronization,active,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,return,con
DataSourceUtils -> public static Connection doGetConnection(DataSource dataSource) throws SQLException;1543886147;Actually obtain a JDBC Connection from the given DataSource._Same as {@link #getConnection}, but throwing the original SQLException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link DataSourceTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareDataSourceProxy}._@param dataSource the DataSource to obtain Connections from_@return a JDBC Connection from the given DataSource_@throws SQLException if thrown by JDBC methods_@see #doReleaseConnection;public static Connection doGetConnection(DataSource dataSource) throws SQLException {_		Assert.notNull(dataSource, "No DataSource specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		if (conHolder != null && (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) {_			conHolder.requested()__			if (!conHolder.hasConnection()) {_				logger.debug("Fetching resumed JDBC Connection from DataSource")__				conHolder.setConnection(fetchConnection(dataSource))__			}_			return conHolder.getConnection()__		}_		__		logger.debug("Fetching JDBC Connection from DataSource")__		Connection con = fetchConnection(dataSource)___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			try {_				_				_				ConnectionHolder holderToUse = conHolder__				if (holderToUse == null) {_					holderToUse = new ConnectionHolder(con)__				}_				else {_					holderToUse.setConnection(con)__				}_				holderToUse.requested()__				TransactionSynchronizationManager.registerSynchronization(_						new ConnectionSynchronization(holderToUse, dataSource))__				holderToUse.setSynchronizedWithTransaction(true)__				if (holderToUse != conHolder) {_					TransactionSynchronizationManager.bindResource(dataSource, holderToUse)__				}_			}_			catch (RuntimeException ex) {_				_				releaseConnection(con, dataSource)__				throw ex__			}_		}__		return con__	};actually,obtain,a,jdbc,connection,from,the,given,data,source,same,as,link,get,connection,but,throwing,the,original,sqlexception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,data,source,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,data,source,proxy,param,data,source,the,data,source,to,obtain,connections,from,return,a,jdbc,connection,from,the,given,data,source,throws,sqlexception,if,thrown,by,jdbc,methods,see,do,release,connection;public,static,connection,do,get,connection,data,source,data,source,throws,sqlexception,assert,not,null,data,source,no,data,source,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,if,con,holder,null,con,holder,has,connection,con,holder,is,synchronized,with,transaction,con,holder,requested,if,con,holder,has,connection,logger,debug,fetching,resumed,jdbc,connection,from,data,source,con,holder,set,connection,fetch,connection,data,source,return,con,holder,get,connection,logger,debug,fetching,jdbc,connection,from,data,source,connection,con,fetch,connection,data,source,if,transaction,synchronization,manager,is,synchronization,active,try,connection,holder,holder,to,use,con,holder,if,holder,to,use,null,holder,to,use,new,connection,holder,con,else,holder,to,use,set,connection,con,holder,to,use,requested,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,holder,to,use,data,source,holder,to,use,set,synchronized,with,transaction,true,if,holder,to,use,con,holder,transaction,synchronization,manager,bind,resource,data,source,holder,to,use,catch,runtime,exception,ex,release,connection,con,data,source,throw,ex,return,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1328020251;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1352414234;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1356735495;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1413568470;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1486062666;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1495868221;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1496837955;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1496955101;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1543877450;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon);1543886147;Determine whether the given two Connections are equal, asking the target_Connection in case of a proxy. Used to detect equality even if the_user passed in a raw target Connection while the held one is a proxy._@param conHolder the ConnectionHolder for the held Connection (potentially a proxy)_@param passedInCon the Connection passed-in by the user_(potentially a target Connection without proxy)_@return whether the given Connections are equal_@see #getTargetConnection;private static boolean connectionEquals(ConnectionHolder conHolder, Connection passedInCon) {_		if (!conHolder.hasConnection()) {_			return false__		}_		Connection heldCon = conHolder.getConnection()__		_		_		return (heldCon == passedInCon || heldCon.equals(passedInCon) ||_				getTargetConnection(heldCon).equals(passedInCon))__	};determine,whether,the,given,two,connections,are,equal,asking,the,target,connection,in,case,of,a,proxy,used,to,detect,equality,even,if,the,user,passed,in,a,raw,target,connection,while,the,held,one,is,a,proxy,param,con,holder,the,connection,holder,for,the,held,connection,potentially,a,proxy,param,passed,in,con,the,connection,passed,in,by,the,user,potentially,a,target,connection,without,proxy,return,whether,the,given,connections,are,equal,see,get,target,connection;private,static,boolean,connection,equals,connection,holder,con,holder,connection,passed,in,con,if,con,holder,has,connection,return,false,connection,held,con,con,holder,get,connection,return,held,con,passed,in,con,held,con,equals,passed,in,con,get,target,connection,held,con,equals,passed,in,con
DataSourceUtils -> public static void releaseConnection(Connection con, DataSource dataSource);1328020251;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@see #getConnection;public static void releaseConnection(Connection con, DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,see,get,connection;public,static,void,release,connection,connection,con,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(Connection con, DataSource dataSource);1352414234;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@see #getConnection;public static void releaseConnection(Connection con, DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,see,get,connection;public,static,void,release,connection,connection,con,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(Connection con, DataSource dataSource);1356735495;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(Connection con, DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,connection,con,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(Connection con, DataSource dataSource);1413568470;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(Connection con, DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,connection,con,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> public static void releaseConnection(Connection con, DataSource dataSource);1486062666;Close the given Connection, obtained from the given DataSource,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@see #getConnection;public static void releaseConnection(Connection con, DataSource dataSource) {_		try {_			doReleaseConnection(con, dataSource)__		}_		catch (SQLException ex) {_			logger.debug("Could not close JDBC Connection", ex)__		}_		catch (Throwable ex) {_			logger.debug("Unexpected exception on closing JDBC Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,data,source,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,see,get,connection;public,static,void,release,connection,connection,con,data,source,data,source,try,do,release,connection,con,data,source,catch,sqlexception,ex,logger,debug,could,not,close,jdbc,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jdbc,connection,ex
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1328020251;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1352414234;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1356735495;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1413568470;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1486062666;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1495868221;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1496837955;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1496955101;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1543877450;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> private static int getConnectionSynchronizationOrder(DataSource dataSource);1543886147;Determine the connection synchronization order to use for the given_DataSource. Decreased for every level of nesting that a DataSource_has, checked through the level of DelegatingDataSource nesting._@param dataSource the DataSource to check_@return the connection synchronization order to use_@see #CONNECTION_SYNCHRONIZATION_ORDER;private static int getConnectionSynchronizationOrder(DataSource dataSource) {_		int order = CONNECTION_SYNCHRONIZATION_ORDER__		DataSource currDs = dataSource__		while (currDs instanceof DelegatingDataSource) {_			order--__			currDs = ((DelegatingDataSource) currDs).getTargetDataSource()__		}_		return order__	};determine,the,connection,synchronization,order,to,use,for,the,given,data,source,decreased,for,every,level,of,nesting,that,a,data,source,has,checked,through,the,level,of,delegating,data,source,nesting,param,data,source,the,data,source,to,check,return,the,connection,synchronization,order,to,use,see;private,static,int,get,connection,synchronization,order,data,source,data,source,int,order,data,source,curr,ds,data,source,while,curr,ds,instanceof,delegating,data,source,order,curr,ds,delegating,data,source,curr,ds,get,target,data,source,return,order
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel);1328020251;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel);1352414234;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel);1356735495;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel);1413568470;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel);1486062666;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> @Nullable 	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition) 			throws SQLException;1496837955;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;@Nullable_	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException | RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;nullable,public,static,integer,prepare,connection,for,transaction,connection,con,nullable,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> @Nullable 	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition) 			throws SQLException;1496955101;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;@Nullable_	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException | RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;nullable,public,static,integer,prepare,connection,for,transaction,connection,con,nullable,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> @Nullable 	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition) 			throws SQLException;1543877450;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;@Nullable_	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException | RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;nullable,public,static,integer,prepare,connection,for,transaction,connection,con,nullable,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> @Nullable 	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition) 			throws SQLException;1543886147;Prepare the given Connection with the given transaction semantics._@param con the Connection to prepare_@param definition the transaction definition to apply_@return the previous isolation level, if any_@throws SQLException if thrown by JDBC methods_@see #resetConnectionAfterTransaction;@Nullable_	public static Integer prepareConnectionForTransaction(Connection con, @Nullable TransactionDefinition definition)_			throws SQLException {__		Assert.notNull(con, "No Connection specified")___		_		if (definition != null && definition.isReadOnly()) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Setting JDBC Connection [" + con + "] read-only")__				}_				con.setReadOnly(true)__			}_			catch (SQLException | RuntimeException ex) {_				Throwable exToCheck = ex__				while (exToCheck != null) {_					if (exToCheck.getClass().getSimpleName().contains("Timeout")) {_						_						throw ex__					}_					exToCheck = exToCheck.getCause()__				}_				_				logger.debug("Could not set JDBC Connection read-only", ex)__			}_		}__		_		Integer previousIsolationLevel = null__		if (definition != null && definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {_			if (logger.isDebugEnabled()) {_				logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " +_						definition.getIsolationLevel())__			}_			int currentIsolation = con.getTransactionIsolation()__			if (currentIsolation != definition.getIsolationLevel()) {_				previousIsolationLevel = currentIsolation__				con.setTransactionIsolation(definition.getIsolationLevel())__			}_		}__		return previousIsolationLevel__	};prepare,the,given,connection,with,the,given,transaction,semantics,param,con,the,connection,to,prepare,param,definition,the,transaction,definition,to,apply,return,the,previous,isolation,level,if,any,throws,sqlexception,if,thrown,by,jdbc,methods,see,reset,connection,after,transaction;nullable,public,static,integer,prepare,connection,for,transaction,connection,con,nullable,transaction,definition,definition,throws,sqlexception,assert,not,null,con,no,connection,specified,if,definition,null,definition,is,read,only,try,if,logger,is,debug,enabled,logger,debug,setting,jdbc,connection,con,read,only,con,set,read,only,true,catch,sqlexception,runtime,exception,ex,throwable,ex,to,check,ex,while,ex,to,check,null,if,ex,to,check,get,class,get,simple,name,contains,timeout,throw,ex,ex,to,check,ex,to,check,get,cause,logger,debug,could,not,set,jdbc,connection,read,only,ex,integer,previous,isolation,level,null,if,definition,null,definition,get,isolation,level,transaction,definition,if,logger,is,debug,enabled,logger,debug,changing,isolation,level,of,jdbc,connection,con,to,definition,get,isolation,level,int,current,isolation,con,get,transaction,isolation,if,current,isolation,definition,get,isolation,level,previous,isolation,level,current,isolation,con,set,transaction,isolation,definition,get,isolation,level,return,previous,isolation,level
DataSourceUtils -> public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException;1496837955;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,nullable,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException;1496955101;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,nullable,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException;1543877450;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,nullable,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException;1543886147;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, @Nullable DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,nullable,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException;1352414234;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException;1356735495;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException;1413568470;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException;1486062666;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException;1495868221;Close the Connection, unless a {@link SmartDataSource} doesn't want us to._@param con the Connection to close if necessary_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see Connection#close()_@see SmartDataSource#shouldClose(Connection);public static void doCloseConnection(Connection con, DataSource dataSource) throws SQLException {_		if (!(dataSource instanceof SmartDataSource) || ((SmartDataSource) dataSource).shouldClose(con)) {_			con.close()__		}_	};close,the,connection,unless,a,link,smart,data,source,doesn,t,want,us,to,param,con,the,connection,to,close,if,necessary,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,connection,close,see,smart,data,source,should,close,connection;public,static,void,do,close,connection,connection,con,data,source,data,source,throws,sqlexception,if,data,source,instanceof,smart,data,source,smart,data,source,data,source,should,close,con,con,close
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, DataSource dataSource);1328020251;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, DataSource dataSource);1352414234;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be <code>null</code>)_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,code,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, DataSource dataSource);1356735495;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, DataSource dataSource);1413568470;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, DataSource dataSource);1486062666;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource);1495868221;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource);1496837955;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource);1496955101;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource);1543877450;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource);1543886147;Determine whether the given JDBC Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param dataSource the DataSource that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable DataSource dataSource) {_		if (dataSource == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource)__		return (conHolder != null && connectionEquals(conHolder, con))__	};determine,whether,the,given,jdbc,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,data,source,the,data,source,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,data,source,data,source,if,data,source,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,data,source,return,con,holder,null,connection,equals,con,holder,con
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel);1495868221;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,nullable,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel);1496837955;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,nullable,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel);1496955101;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,nullable,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel);1543877450;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,nullable,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel);1543886147;Reset the given Connection after a transaction,_regarding read-only flag and isolation level._@param con the Connection to reset_@param previousIsolationLevel the isolation level to restore, if any_@see #prepareConnectionForTransaction;public static void resetConnectionAfterTransaction(Connection con, @Nullable Integer previousIsolationLevel) {_		Assert.notNull(con, "No Connection specified")__		try {_			_			if (previousIsolationLevel != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting isolation level of JDBC Connection [" +_							con + "] to " + previousIsolationLevel)__				}_				con.setTransactionIsolation(previousIsolationLevel)__			}__			_			if (con.isReadOnly()) {_				if (logger.isDebugEnabled()) {_					logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]")__				}_				con.setReadOnly(false)__			}_		}_		catch (Throwable ex) {_			logger.debug("Could not reset JDBC Connection after transaction", ex)__		}_	};reset,the,given,connection,after,a,transaction,regarding,read,only,flag,and,isolation,level,param,con,the,connection,to,reset,param,previous,isolation,level,the,isolation,level,to,restore,if,any,see,prepare,connection,for,transaction;public,static,void,reset,connection,after,transaction,connection,con,nullable,integer,previous,isolation,level,assert,not,null,con,no,connection,specified,try,if,previous,isolation,level,null,if,logger,is,debug,enabled,logger,debug,resetting,isolation,level,of,jdbc,connection,con,to,previous,isolation,level,con,set,transaction,isolation,previous,isolation,level,if,con,is,read,only,if,logger,is,debug,enabled,logger,debug,resetting,read,only,flag,of,jdbc,connection,con,con,set,read,only,false,catch,throwable,ex,logger,debug,could,not,reset,jdbc,connection,after,transaction,ex
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException;1496837955;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,nullable,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException;1496955101;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,nullable,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException;1543877450;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,nullable,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
DataSourceUtils -> public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException;1543886147;Apply the current transaction timeout, if any,_to the given JDBC Statement object._@param stmt the JDBC Statement object_@param dataSource the DataSource that the Connection was obtained from_@throws SQLException if thrown by JDBC methods_@see java.sql.Statement#setQueryTimeout;public static void applyTransactionTimeout(Statement stmt, @Nullable DataSource dataSource) throws SQLException {_		applyTimeout(stmt, dataSource, -1)__	};apply,the,current,transaction,timeout,if,any,to,the,given,jdbc,statement,object,param,stmt,the,jdbc,statement,object,param,data,source,the,data,source,that,the,connection,was,obtained,from,throws,sqlexception,if,thrown,by,jdbc,methods,see,java,sql,statement,set,query,timeout;public,static,void,apply,transaction,timeout,statement,stmt,nullable,data,source,data,source,throws,sqlexception,apply,timeout,stmt,data,source,1
