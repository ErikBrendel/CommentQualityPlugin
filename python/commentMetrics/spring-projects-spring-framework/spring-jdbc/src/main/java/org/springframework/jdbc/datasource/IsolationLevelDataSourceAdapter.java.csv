# id;timestamp;commentText;codeText;commentWords;codeWords
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1328020251;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (constantName == null || !constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,null,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1356735495;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (constantName == null || !constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,null,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1495868221;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (constantName == null || !constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,null,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1496837955;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1498780456;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1500495740;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> public final void setIsolationLevelName(String constantName) throws IllegalArgumentException;1530174524;Set the default isolation level by the name of the corresponding constant_in {@link org.springframework.transaction.TransactionDefinition}, e.g._"ISOLATION_SERIALIZABLE"._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@param constantName name of the constant_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see #setIsolationLevel;public final void setIsolationLevelName(String constantName) throws IllegalArgumentException {_		if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {_			throw new IllegalArgumentException("Only isolation constants allowed")__		}_		setIsolationLevel(constants.asNumber(constantName).intValue())__	};set,the,default,isolation,level,by,the,name,of,the,corresponding,constant,in,link,org,springframework,transaction,transaction,definition,e,g,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,param,constant,name,name,of,the,constant,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,set,isolation,level;public,final,void,set,isolation,level,name,string,constant,name,throws,illegal,argument,exception,if,constant,name,starts,with,default,transaction,definition,throw,new,illegal,argument,exception,only,isolation,constants,allowed,set,isolation,level,constants,as,number,constant,name,int,value
IsolationLevelDataSourceAdapter -> @Nullable 	protected Boolean getCurrentReadOnlyFlag();1496837955;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();@Nullable_	protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;nullable,protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> @Nullable 	protected Boolean getCurrentReadOnlyFlag();1498780456;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();@Nullable_	protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;nullable,protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> @Nullable 	protected Boolean getCurrentReadOnlyFlag();1500495740;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();@Nullable_	protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;nullable,protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> @Nullable 	protected Boolean getCurrentReadOnlyFlag();1530174524;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();@Nullable_	protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;nullable,protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> protected Integer getCurrentIsolationLevel();1328020251;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or <code>null</code> if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,code,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> protected Integer getCurrentIsolationLevel();1356735495;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> protected Boolean getCurrentReadOnlyFlag();1328020251;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> protected Boolean getCurrentReadOnlyFlag();1356735495;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> protected Boolean getCurrentReadOnlyFlag();1495868221;Determine the current read-only flag: by default,_the transaction's read-only hint._@return whether there is a read-only hint for the current scope_@see org.springframework.transaction.support.TransactionSynchronizationManager#isCurrentTransactionReadOnly();protected Boolean getCurrentReadOnlyFlag() {_		boolean txReadOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly()__		return (txReadOnly ? Boolean.TRUE : null)__	};determine,the,current,read,only,flag,by,default,the,transaction,s,read,only,hint,return,whether,there,is,a,read,only,hint,for,the,current,scope,see,org,springframework,transaction,support,transaction,synchronization,manager,is,current,transaction,read,only;protected,boolean,get,current,read,only,flag,boolean,tx,read,only,transaction,synchronization,manager,is,current,transaction,read,only,return,tx,read,only,boolean,true,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1328020251;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1356735495;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1495868221;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1496837955;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1498780456;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1500495740;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> public void setIsolationLevel(int isolationLevel);1530174524;Specify the default isolation level to use for Connection retrieval,_according to the JDBC {@link java.sql.Connection} constants_(equivalent to the corresponding Spring_{@link org.springframework.transaction.TransactionDefinition} constants)._<p>If not specified, the target DataSource's default will be used._Note that a transaction-specific isolation value will always override_any isolation setting specified at the DataSource level._@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel()_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel();public void setIsolationLevel(int isolationLevel) {_		if (!constants.getValues(DefaultTransactionDefinition.PREFIX_ISOLATION).contains(isolationLevel)) {_			throw new IllegalArgumentException("Only values of isolation constants allowed")__		}_		this.isolationLevel = (isolationLevel != TransactionDefinition.ISOLATION_DEFAULT ? isolationLevel : null)__	};specify,the,default,isolation,level,to,use,for,connection,retrieval,according,to,the,jdbc,link,java,sql,connection,constants,equivalent,to,the,corresponding,spring,link,org,springframework,transaction,transaction,definition,constants,p,if,not,specified,the,target,data,source,s,default,will,be,used,note,that,a,transaction,specific,isolation,value,will,always,override,any,isolation,setting,specified,at,the,data,source,level,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level;public,void,set,isolation,level,int,isolation,level,if,constants,get,values,default,transaction,definition,contains,isolation,level,throw,new,illegal,argument,exception,only,values,of,isolation,constants,allowed,this,isolation,level,isolation,level,transaction,definition,isolation,level,null
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(String username, String password) throws SQLException;1328020251;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(String username, String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(String username, String password) throws SQLException;1356735495;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(String username, String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(String username, String password) throws SQLException;1495868221;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(String username, String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(String username, String password) throws SQLException;1496837955;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(String username, String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(String username, String password) throws SQLException;1498780456;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(String username, String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,string,username,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getIsolationLevel();1495868221;Return the statically specified isolation level,_or {@code null} if none.;@Nullable_	protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;nullable,protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getIsolationLevel();1496837955;Return the statically specified isolation level,_or {@code null} if none.;@Nullable_	protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;nullable,protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getIsolationLevel();1498780456;Return the statically specified isolation level,_or {@code null} if none.;@Nullable_	protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;nullable,protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getIsolationLevel();1500495740;Return the statically specified isolation level,_or {@code null} if none.;@Nullable_	protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;nullable,protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getIsolationLevel();1530174524;Return the statically specified isolation level,_or {@code null} if none.;@Nullable_	protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;nullable,protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException;1500495740;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,nullable,string,username,nullable,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> @Override 	protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException;1530174524;Applies the current isolation level value and read-only flag_to the returned Connection._@see #getCurrentIsolationLevel()_@see #getCurrentReadOnlyFlag();@Override_	protected Connection doGetConnection(@Nullable String username, @Nullable String password) throws SQLException {_		Connection con = super.doGetConnection(username, password)__		Boolean readOnlyToUse = getCurrentReadOnlyFlag()__		if (readOnlyToUse != null) {_			con.setReadOnly(readOnlyToUse)__		}_		Integer isolationLevelToUse = getCurrentIsolationLevel()__		if (isolationLevelToUse != null) {_			con.setTransactionIsolation(isolationLevelToUse)__		}_		return con__	};applies,the,current,isolation,level,value,and,read,only,flag,to,the,returned,connection,see,get,current,isolation,level,see,get,current,read,only,flag;override,protected,connection,do,get,connection,nullable,string,username,nullable,string,password,throws,sqlexception,connection,con,super,do,get,connection,username,password,boolean,read,only,to,use,get,current,read,only,flag,if,read,only,to,use,null,con,set,read,only,read,only,to,use,integer,isolation,level,to,use,get,current,isolation,level,if,isolation,level,to,use,null,con,set,transaction,isolation,isolation,level,to,use,return,con
IsolationLevelDataSourceAdapter -> protected Integer getIsolationLevel();1328020251;Return the statically specified isolation level,_or <code>null</code> if none.;protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,code,if,none;protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> protected Integer getIsolationLevel();1356735495;Return the statically specified isolation level,_or {@code null} if none.;protected Integer getIsolationLevel() {_		return this.isolationLevel__	};return,the,statically,specified,isolation,level,or,code,null,if,none;protected,integer,get,isolation,level,return,this,isolation,level
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getCurrentIsolationLevel();1495868221;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;@Nullable_	protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;nullable,protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getCurrentIsolationLevel();1496837955;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;@Nullable_	protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;nullable,protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getCurrentIsolationLevel();1498780456;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;@Nullable_	protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;nullable,protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getCurrentIsolationLevel();1500495740;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;@Nullable_	protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;nullable,protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
IsolationLevelDataSourceAdapter -> @Nullable 	protected Integer getCurrentIsolationLevel();1530174524;Determine the current isolation level: either the transaction's_isolation level or a statically defined isolation level._@return the current isolation level, or {@code null} if none_@see org.springframework.transaction.support.TransactionSynchronizationManager#getCurrentTransactionIsolationLevel()_@see #setIsolationLevel;@Nullable_	protected Integer getCurrentIsolationLevel() {_		Integer isolationLevelToUse = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel()__		if (isolationLevelToUse == null) {_			isolationLevelToUse = getIsolationLevel()__		}_		return isolationLevelToUse__	};determine,the,current,isolation,level,either,the,transaction,s,isolation,level,or,a,statically,defined,isolation,level,return,the,current,isolation,level,or,code,null,if,none,see,org,springframework,transaction,support,transaction,synchronization,manager,get,current,transaction,isolation,level,see,set,isolation,level;nullable,protected,integer,get,current,isolation,level,integer,isolation,level,to,use,transaction,synchronization,manager,get,current,transaction,isolation,level,if,isolation,level,to,use,null,isolation,level,to,use,get,isolation,level,return,isolation,level,to,use
