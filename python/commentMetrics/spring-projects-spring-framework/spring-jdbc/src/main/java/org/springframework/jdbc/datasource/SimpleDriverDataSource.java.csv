commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the JDBC Driver implementation class to use.  * <p>An instance of this Driver class will be created and held  * within the SimpleDriverDataSource.  * @see #setDriver  */ ;/**  * Specify the JDBC Driver implementation class to use.  * <p>An instance of this Driver class will be created and held  * within the SimpleDriverDataSource.  * @see #setDriver  */ public void setDriverClass(Class<? extends Driver> driverClass) {     this.driver = BeanUtils.instantiateClass(driverClass). }
true;public;1;3;/**  * Specify the JDBC Driver instance to use.  * <p>This allows for passing in a shared, possibly pre-configured  * Driver instance.  * @see #setDriverClass  */ ;/**  * Specify the JDBC Driver instance to use.  * <p>This allows for passing in a shared, possibly pre-configured  * Driver instance.  * @see #setDriverClass  */ public void setDriver(@Nullable Driver driver) {     this.driver = driver. }
true;public;0;4;/**  * Return the JDBC Driver instance to use.  */ ;/**  * Return the JDBC Driver instance to use.  */ @Nullable public Driver getDriver() {     return this.driver. }
false;protected;1;10;;@Override protected Connection getConnectionFromDriver(Properties props) throws SQLException {     Driver driver = getDriver().     String url = getUrl().     Assert.notNull(driver, "Driver must not be null").     if (logger.isDebugEnabled()) {         logger.debug("Creating new JDBC Driver Connection to [" + url + "]").     }     return driver.connect(url, props). }
