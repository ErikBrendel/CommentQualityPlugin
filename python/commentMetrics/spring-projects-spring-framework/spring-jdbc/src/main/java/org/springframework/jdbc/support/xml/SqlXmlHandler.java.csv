commented;modifiers;parameterAmount;loc;comment;code
true;;2;2;/**  * Retrieve the given column as String from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getString} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as String, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getString  * @see java.sql.ResultSet#getSQLXML  */ ;// ------------------------------------------------------------------------- // Convenience methods for accessing XML content // ------------------------------------------------------------------------- /**  * Retrieve the given column as String from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getString} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as String, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getString  * @see java.sql.ResultSet#getSQLXML  */ @Nullable String getXmlAsString(ResultSet rs, String columnName) throws SQLException.
true;;2;2;/**  * Retrieve the given column as String from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getString} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as String, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getString  * @see java.sql.ResultSet#getSQLXML  */ ;/**  * Retrieve the given column as String from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getString} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as String, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getString  * @see java.sql.ResultSet#getSQLXML  */ @Nullable String getXmlAsString(ResultSet rs, int columnIndex) throws SQLException.
true;;2;2;/**  * Retrieve the given column as binary stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as a binary stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getBinaryStream  */ ;/**  * Retrieve the given column as binary stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as a binary stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getBinaryStream  */ @Nullable InputStream getXmlAsBinaryStream(ResultSet rs, String columnName) throws SQLException.
true;;2;2;/**  * Retrieve the given column as binary stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as binary stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getBinaryStream  */ ;/**  * Retrieve the given column as binary stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getAsciiStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as binary stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getBinaryStream  */ @Nullable InputStream getXmlAsBinaryStream(ResultSet rs, int columnIndex) throws SQLException.
true;;2;2;/**  * Retrieve the given column as character stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getCharacterStream  */ ;/**  * Retrieve the given column as character stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getCharacterStream  */ @Nullable Reader getXmlAsCharacterStream(ResultSet rs, String columnName) throws SQLException.
true;;2;2;/**  * Retrieve the given column as character stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getCharacterStream  */ ;/**  * Retrieve the given column as character stream from the given ResultSet.  * <p>Might simply invoke {@code ResultSet.getCharacterStream} or work with  * {@code SQLXML} or database-specific classes depending on the  * database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getCharacterStream  */ @Nullable Reader getXmlAsCharacterStream(ResultSet rs, int columnIndex) throws SQLException.
true;;3;2;/**  * Retrieve the given column as Source implemented using the specified source class  * from the given ResultSet.  * <p>Might work with {@code SQLXML} or database-specific classes depending  * on the database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @param sourceClass the implementation class to be used  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getSource  */ ;/**  * Retrieve the given column as Source implemented using the specified source class  * from the given ResultSet.  * <p>Might work with {@code SQLXML} or database-specific classes depending  * on the database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnName the column name to use  * @param sourceClass the implementation class to be used  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getSource  */ @Nullable Source getXmlAsSource(ResultSet rs, String columnName, @Nullable Class<? extends Source> sourceClass) throws SQLException.
true;;3;2;/**  * Retrieve the given column as Source implemented using the specified source class  * from the given ResultSet.  * <p>Might work with {@code SQLXML} or database-specific classes depending  * on the database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @param sourceClass the implementation class to be used  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getSource  */ ;/**  * Retrieve the given column as Source implemented using the specified source class  * from the given ResultSet.  * <p>Might work with {@code SQLXML} or database-specific classes depending  * on the database and driver.  * @param rs the ResultSet to retrieve the content from  * @param columnIndex the column index to use  * @param sourceClass the implementation class to be used  * @return the content as character stream, or {@code null} in case of SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.ResultSet#getSQLXML  * @see java.sql.SQLXML#getSource  */ @Nullable Source getXmlAsSource(ResultSet rs, int columnIndex, @Nullable Class<? extends Source> sourceClass) throws SQLException.
true;;1;1;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param value the XML String value providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setString(String)  */ ;// ------------------------------------------------------------------------- // Convenience methods for building XML content // ------------------------------------------------------------------------- /**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param value the XML String value providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setString(String)  */ SqlXmlValue newSqlXmlValue(String value).
true;;1;1;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param provider the {@code XmlBinaryStreamProvider} providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setBinaryStream()  */ ;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param provider the {@code XmlBinaryStreamProvider} providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setBinaryStream()  */ SqlXmlValue newSqlXmlValue(XmlBinaryStreamProvider provider).
true;;1;1;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param provider the {@code XmlCharacterStreamProvider} providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setCharacterStream()  */ ;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param provider the {@code XmlCharacterStreamProvider} providing XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setCharacterStream()  */ SqlXmlValue newSqlXmlValue(XmlCharacterStreamProvider provider).
true;;2;1;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param resultClass the Result implementation class to be used  * @param provider the {@code XmlResultProvider} that will provide the XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setResult(Class)  */ ;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param resultClass the Result implementation class to be used  * @param provider the {@code XmlResultProvider} that will provide the XML data  * @return the implementation specific instance  * @see SqlXmlValue  * @see java.sql.SQLXML#setResult(Class)  */ SqlXmlValue newSqlXmlValue(Class<? extends Result> resultClass, XmlResultProvider provider).
true;;1;1;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param doc the XML Document to be used  * @return the implementation specific instance  * @see SqlXmlValue  */ ;/**  * Create a {@code SqlXmlValue} instance for the given XML data,  * as supported by the underlying JDBC driver.  * @param doc the XML Document to be used  * @return the implementation specific instance  * @see SqlXmlValue  */ SqlXmlValue newSqlXmlValue(Document doc).
