commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the name of the parameter, or {@code null} if anonymous.  */ ;/**  * Return the name of the parameter, or {@code null} if anonymous.  */ @Nullable public String getName() {     return this.name. }
true;public;0;3;/**  * Return the SQL type of the parameter.  */ ;/**  * Return the SQL type of the parameter.  */ public int getSqlType() {     return this.sqlType. }
true;public;0;4;/**  * Return the type name of the parameter, if any.  */ ;/**  * Return the type name of the parameter, if any.  */ @Nullable public String getTypeName() {     return this.typeName. }
true;public;0;4;/**  * Return the scale of the parameter, if any.  */ ;/**  * Return the scale of the parameter, if any.  */ @Nullable public Integer getScale() {     return this.scale. }
true;public;0;3;/**  * Return whether this parameter holds input values that should be set  * before execution even if they are {@code null}.  * <p>This implementation always returns {@code true}.  */ ;/**  * Return whether this parameter holds input values that should be set  * before execution even if they are {@code null}.  * <p>This implementation always returns {@code true}.  */ public boolean isInputValueProvided() {     return true. }
true;public;0;3;/**  * Return whether this parameter is an implicit return parameter used during the  * results processing of {@code CallableStatement.getMoreResults/getUpdateCount}.  * <p>This implementation always returns {@code false}.  */ ;/**  * Return whether this parameter is an implicit return parameter used during the  * results processing of {@code CallableStatement.getMoreResults/getUpdateCount}.  * <p>This implementation always returns {@code false}.  */ public boolean isResultsParameter() {     return false. }
true;public,static;1;10;/**  * Convert a list of JDBC types, as defined in {@code java.sql.Types},  * to a List of SqlParameter objects as used in this package.  */ ;/**  * Convert a list of JDBC types, as defined in {@code java.sql.Types},  * to a List of SqlParameter objects as used in this package.  */ public static List<SqlParameter> sqlTypesToAnonymousParameterList(@Nullable int... types) {     if (types == null) {         return new LinkedList<>().     }     List<SqlParameter> result = new ArrayList<>(types.length).     for (int type : types) {         result.add(new SqlParameter(type)).     }     return result. }
