commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the SQL statement to execute.  * @since 5.1.3  */ ;/**  * Return the SQL statement to execute.  * @since 5.1.3  */ public final String getSql() {     return this.sql. }
true;public;1;3;/**  * Add a new declared parameter.  * <p>Order of parameter addition is significant.  * @param param the parameter to add to the list of declared parameters  */ ;/**  * Add a new declared parameter.  * <p>Order of parameter addition is significant.  * @param param the parameter to add to the list of declared parameters  */ public void addParameter(SqlParameter param) {     this.declaredParameters.add(param). }
true;public;1;3;/**  * Set whether to use prepared statements that return a specific type of ResultSet.  * @param resultSetType the ResultSet type  * @see java.sql.ResultSet#TYPE_FORWARD_ONLY  * @see java.sql.ResultSet#TYPE_SCROLL_INSENSITIVE  * @see java.sql.ResultSet#TYPE_SCROLL_SENSITIVE  */ ;/**  * Set whether to use prepared statements that return a specific type of ResultSet.  * @param resultSetType the ResultSet type  * @see java.sql.ResultSet#TYPE_FORWARD_ONLY  * @see java.sql.ResultSet#TYPE_SCROLL_INSENSITIVE  * @see java.sql.ResultSet#TYPE_SCROLL_SENSITIVE  */ public void setResultSetType(int resultSetType) {     this.resultSetType = resultSetType. }
true;public;1;3;/**  * Set whether to use prepared statements capable of returning updatable ResultSets.  */ ;/**  * Set whether to use prepared statements capable of returning updatable ResultSets.  */ public void setUpdatableResults(boolean updatableResults) {     this.updatableResults = updatableResults. }
true;public;1;3;/**  * Set whether prepared statements should be capable of returning auto-generated keys.  */ ;/**  * Set whether prepared statements should be capable of returning auto-generated keys.  */ public void setReturnGeneratedKeys(boolean returnGeneratedKeys) {     this.returnGeneratedKeys = returnGeneratedKeys. }
true;public;1;3;/**  * Set the column names of the auto-generated keys.  */ ;/**  * Set the column names of the auto-generated keys.  */ public void setGeneratedKeysColumnNames(String... names) {     this.generatedKeysColumnNames = names. }
true;public;1;3;/**  * Return a new PreparedStatementSetter for the given parameters.  * @param params list of parameters (may be {@code null})  */ ;/**  * Return a new PreparedStatementSetter for the given parameters.  * @param params list of parameters (may be {@code null})  */ public PreparedStatementSetter newPreparedStatementSetter(@Nullable List<?> params) {     return new PreparedStatementCreatorImpl(params != null ? params : Collections.emptyList()). }
true;public;1;3;/**  * Return a new PreparedStatementSetter for the given parameters.  * @param params the parameter array (may be {@code null})  */ ;/**  * Return a new PreparedStatementSetter for the given parameters.  * @param params the parameter array (may be {@code null})  */ public PreparedStatementSetter newPreparedStatementSetter(@Nullable Object[] params) {     return new PreparedStatementCreatorImpl(params != null ? Arrays.asList(params) : Collections.emptyList()). }
true;public;1;3;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param params list of parameters (may be {@code null})  */ ;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param params list of parameters (may be {@code null})  */ public PreparedStatementCreator newPreparedStatementCreator(@Nullable List<?> params) {     return new PreparedStatementCreatorImpl(params != null ? params : Collections.emptyList()). }
true;public;1;3;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param params the parameter array (may be {@code null})  */ ;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param params the parameter array (may be {@code null})  */ public PreparedStatementCreator newPreparedStatementCreator(@Nullable Object[] params) {     return new PreparedStatementCreatorImpl(params != null ? Arrays.asList(params) : Collections.emptyList()). }
true;public;2;4;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param sqlToUse the actual SQL statement to use (if different from  * the factory's, for example because of named parameter expanding)  * @param params the parameter array (may be {@code null})  */ ;/**  * Return a new PreparedStatementCreator for the given parameters.  * @param sqlToUse the actual SQL statement to use (if different from  * the factory's, for example because of named parameter expanding)  * @param params the parameter array (may be {@code null})  */ public PreparedStatementCreator newPreparedStatementCreator(String sqlToUse, @Nullable Object[] params) {     return new PreparedStatementCreatorImpl(sqlToUse, params != null ? Arrays.asList(params) : Collections.emptyList()). }
false;public;1;21;;@Override public PreparedStatement createPreparedStatement(Connection con) throws SQLException {     PreparedStatement ps.     if (generatedKeysColumnNames != null || returnGeneratedKeys) {         if (generatedKeysColumnNames != null) {             ps = con.prepareStatement(this.actualSql, generatedKeysColumnNames).         } else {             ps = con.prepareStatement(this.actualSql, PreparedStatement.RETURN_GENERATED_KEYS).         }     } else if (resultSetType == ResultSet.TYPE_FORWARD_ONLY && !updatableResults) {         ps = con.prepareStatement(this.actualSql).     } else {         ps = con.prepareStatement(this.actualSql, resultSetType, updatableResults ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY).     }     setValues(ps).     return ps. }
false;public;1;42;;@Override public void setValues(PreparedStatement ps) throws SQLException {     // Set arguments: Does nothing if there are no parameters.     int sqlColIndx = 1.     for (int i = 0. i < this.parameters.size(). i++) {         Object in = this.parameters.get(i).         SqlParameter declaredParameter.         // independence from the declared parameter position in case of named parameters.         if (in instanceof SqlParameterValue) {             SqlParameterValue paramValue = (SqlParameterValue) in.             in = paramValue.getValue().             declaredParameter = paramValue.         } else {             if (declaredParameters.size() <= i) {                 throw new InvalidDataAccessApiUsageException("SQL [" + sql + "]: unable to access parameter number " + (i + 1) + " given only " + declaredParameters.size() + " parameters").             }             declaredParameter = declaredParameters.get(i).         }         if (in instanceof Collection && declaredParameter.getSqlType() != Types.ARRAY) {             Collection<?> entries = (Collection<?>) in.             for (Object entry : entries) {                 if (entry instanceof Object[]) {                     Object[] valueArray = ((Object[]) entry).                     for (Object argValue : valueArray) {                         StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, argValue).                     }                 } else {                     StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, entry).                 }             }         } else {             StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, in).         }     } }
false;public;0;4;;@Override public String getSql() {     return sql. }
false;public;0;4;;@Override public void cleanupParameters() {     StatementCreatorUtils.cleanupParameters(this.parameters). }
false;public;0;4;;@Override public String toString() {     return "PreparedStatementCreator: sql=[" + sql + "]. parameters=" + this.parameters. }
