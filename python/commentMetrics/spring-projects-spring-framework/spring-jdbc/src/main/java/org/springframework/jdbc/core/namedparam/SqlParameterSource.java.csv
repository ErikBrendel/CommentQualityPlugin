commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determine whether there is a value for the specified named parameter.  * @param paramName the name of the parameter  * @return whether there is a value defined  */ ;/**  * Determine whether there is a value for the specified named parameter.  * @param paramName the name of the parameter  * @return whether there is a value defined  */ boolean hasValue(String paramName).
true;;1;2;/**  * Return the parameter value for the requested named parameter.  * @param paramName the name of the parameter  * @return the value of the specified parameter  * @throws IllegalArgumentException if there is no value for the requested parameter  */ ;/**  * Return the parameter value for the requested named parameter.  * @param paramName the name of the parameter  * @return the value of the specified parameter  * @throws IllegalArgumentException if there is no value for the requested parameter  */ @Nullable Object getValue(String paramName) throws IllegalArgumentException.
true;default;1;3;/**  * Determine the SQL type for the specified named parameter.  * @param paramName the name of the parameter  * @return the SQL type of the specified parameter,  * or {@code TYPE_UNKNOWN} if not known  * @see #TYPE_UNKNOWN  */ ;/**  * Determine the SQL type for the specified named parameter.  * @param paramName the name of the parameter  * @return the SQL type of the specified parameter,  * or {@code TYPE_UNKNOWN} if not known  * @see #TYPE_UNKNOWN  */ default int getSqlType(String paramName) {     return TYPE_UNKNOWN. }
true;default;1;4;/**  * Determine the type name for the specified named parameter.  * @param paramName the name of the parameter  * @return the type name of the specified parameter,  * or {@code null} if not known  */ ;/**  * Determine the type name for the specified named parameter.  * @param paramName the name of the parameter  * @return the type name of the specified parameter,  * or {@code null} if not known  */ @Nullable default String getTypeName(String paramName) {     return null. }
true;default;0;4;/**  * Extract all available parameter names if possible.  * <p>This is an optional operation, primarily for use with  * {@link org.springframework.jdbc.core.simple.SimpleJdbcInsert}  * and {@link org.springframework.jdbc.core.simple.SimpleJdbcCall}.  * @return the array of parameter names, or {@code null} if not determinable  * @since 5.0.3  * @see SqlParameterSourceUtils#extractCaseInsensitiveParameterNames  */ ;/**  * Extract all available parameter names if possible.  * <p>This is an optional operation, primarily for use with  * {@link org.springframework.jdbc.core.simple.SimpleJdbcInsert}  * and {@link org.springframework.jdbc.core.simple.SimpleJdbcCall}.  * @return the array of parameter names, or {@code null} if not determinable  * @since 5.0.3  * @see SqlParameterSourceUtils#extractCaseInsensitiveParameterNames  */ @Nullable default String[] getParameterNames() {     return null. }
