# id;timestamp;commentText;codeText;commentWords;codeWords
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1328020251;Create a CallMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1356735495;Create a CallMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1357119239;Create a CallMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1368482696;Create a CallMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1385423968;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1413848647;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(_								databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retreiving database metadata", ex)__		}__	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retreiving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1429214043;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(databaseMetaData,_								context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1431375743;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(databaseMetaData,_								context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1440518078;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, new DatabaseMetaDataCallback() {_				@Override_				public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException, MetaDataAccessException {_					String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__					boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__					if (context.isFunction()) {_						if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_										"-- supported are: " + supportedDatabaseProductsForFunctions)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}_					else {_						if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_							if (logger.isWarnEnabled()) {_								logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_										"-- supported are: " + supportedDatabaseProductsForProcedures)__							}_							if (accessProcedureColumnMetaData) {_								logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__								accessProcedureColumnMetaData = false__							}_						}_					}__					CallMetaDataProvider provider__					if ("Oracle".equals(databaseProductName)) {_						provider = new OracleCallMetaDataProvider(databaseMetaData)__					}_					else if ("DB2".equals(databaseProductName)) {_						provider = new Db2CallMetaDataProvider((databaseMetaData))__					}_					else if ("Apache Derby".equals(databaseProductName)) {_						provider = new DerbyCallMetaDataProvider((databaseMetaData))__					}_					else if ("PostgreSQL".equals(databaseProductName)) {_						provider = new PostgresCallMetaDataProvider((databaseMetaData))__					}_					else if ("Sybase".equals(databaseProductName)) {_						provider = new SybaseCallMetaDataProvider((databaseMetaData))__					}_					else if ("Microsoft SQL Server".equals(databaseProductName)) {_						provider = new SqlServerCallMetaDataProvider((databaseMetaData))__					}_					else if ("HDB".equals(databaseProductName)) {_						provider = new HanaCallMetaDataProvider((databaseMetaData))__					}_					else {_						provider = new GenericCallMetaDataProvider(databaseMetaData)__					}_					if (logger.isDebugEnabled()) {_						logger.debug("Using " + provider.getClass().getName())__					}_					provider.initializeWithMetaData(databaseMetaData)__					if (accessProcedureColumnMetaData) {_						provider.initializeWithProcedureColumnMetaData(databaseMetaData,_								context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__					}_					return provider__				}_			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,meta,data,access,exception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1496837955;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			CallMetaDataProvider result = (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__			Assert.state(result != null, "No CallMetaDataProvider")__			return result__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,call,meta,data,provider,result,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,assert,state,result,null,no,call,meta,data,provider,return,result,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1506097334;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			CallMetaDataProvider result = (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__			return result__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,call,meta,data,provider,result,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,return,result,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1520339775;Create a CallMetaDataProvider based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;static public CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;static,public,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1520438949;Create a {@link CallMetaDataProvider} based on the database metadata_@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1521457504;Create a {@link CallMetaDataProvider} based on the database meta-data_@param dataSource used to retrieve meta-data_@param context the class that holds configuration and meta-data_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,meta,data,param,data,source,used,to,retrieve,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1522231598;Create a {@link CallMetaDataProvider} based on the database meta-data._@param dataSource the JDBC DataSource to use for retrieving meta-data_@param context the class that holds configuration and meta-data_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,meta,data,param,data,source,the,jdbc,data,source,to,use,for,retrieving,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1530174524;Create a {@link CallMetaDataProvider} based on the database meta-data._@param dataSource the JDBC DataSource to use for retrieving meta-data_@param context the class that holds configuration and meta-data_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,meta,data,param,data,source,the,jdbc,data,source,to,use,for,retrieving,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1530174524;Create a {@link CallMetaDataProvider} based on the database meta-data._@param dataSource the JDBC DataSource to use for retrieving meta-data_@param context the class that holds configuration and meta-data_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isWarnEnabled()) {_							logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.warn("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,meta,data,param,data,source,the,jdbc,data,source,to,use,for,retrieving,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,warn,enabled,logger,warn,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,warn,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
CallMetaDataProviderFactory -> public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context);1532091916;Create a {@link CallMetaDataProvider} based on the database meta-data._@param dataSource the JDBC DataSource to use for retrieving meta-data_@param context the class that holds configuration and meta-data_@return instance of the CallMetaDataProvider implementation to be used;public static CallMetaDataProvider createMetaDataProvider(DataSource dataSource, final CallMetaDataContext context) {_		try {_			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessProcedureColumnMetaData = context.isAccessCallParameterMetaData()__				if (context.isFunction()) {_					if (!supportedDatabaseProductsForFunctions.contains(databaseProductName)) {_						if (logger.isInfoEnabled()) {_							logger.info(databaseProductName + " is not one of the databases fully supported for function calls " +_									"-- supported are: " + supportedDatabaseProductsForFunctions)__						}_						if (accessProcedureColumnMetaData) {_							logger.info("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}_				else {_					if (!supportedDatabaseProductsForProcedures.contains(databaseProductName)) {_						if (logger.isInfoEnabled()) {_							logger.info(databaseProductName + " is not one of the databases fully supported for procedure calls " +_									"-- supported are: " + supportedDatabaseProductsForProcedures)__						}_						if (accessProcedureColumnMetaData) {_							logger.info("Metadata processing disabled - you must specify all parameters explicitly")__							accessProcedureColumnMetaData = false__						}_					}_				}__				CallMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleCallMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresCallMetaDataProvider((databaseMetaData))__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyCallMetaDataProvider((databaseMetaData))__				}_				else if ("DB2".equals(databaseProductName)) {_					provider = new Db2CallMetaDataProvider((databaseMetaData))__				}_				else if ("HDB".equals(databaseProductName)) {_					provider = new HanaCallMetaDataProvider((databaseMetaData))__				}_				else if ("Microsoft SQL Server".equals(databaseProductName)) {_					provider = new SqlServerCallMetaDataProvider((databaseMetaData))__				}_				else if ("Sybase".equals(databaseProductName)) {_					provider = new SybaseCallMetaDataProvider((databaseMetaData))__				}_				else {_					provider = new GenericCallMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessProcedureColumnMetaData) {_					provider.initializeWithProcedureColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getProcedureName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,call,meta,data,provider,based,on,the,database,meta,data,param,data,source,the,jdbc,data,source,to,use,for,retrieving,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,call,meta,data,provider,implementation,to,be,used;public,static,call,meta,data,provider,create,meta,data,provider,data,source,data,source,final,call,meta,data,context,context,try,return,call,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,procedure,column,meta,data,context,is,access,call,parameter,meta,data,if,context,is,function,if,supported,database,products,for,functions,contains,database,product,name,if,logger,is,info,enabled,logger,info,database,product,name,is,not,one,of,the,databases,fully,supported,for,function,calls,supported,are,supported,database,products,for,functions,if,access,procedure,column,meta,data,logger,info,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,else,if,supported,database,products,for,procedures,contains,database,product,name,if,logger,is,info,enabled,logger,info,database,product,name,is,not,one,of,the,databases,fully,supported,for,procedure,calls,supported,are,supported,database,products,for,procedures,if,access,procedure,column,meta,data,logger,info,metadata,processing,disabled,you,must,specify,all,parameters,explicitly,access,procedure,column,meta,data,false,call,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,call,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,call,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,call,meta,data,provider,database,meta,data,else,if,db2,equals,database,product,name,provider,new,db2call,meta,data,provider,database,meta,data,else,if,hdb,equals,database,product,name,provider,new,hana,call,meta,data,provider,database,meta,data,else,if,microsoft,sql,server,equals,database,product,name,provider,new,sql,server,call,meta,data,provider,database,meta,data,else,if,sybase,equals,database,product,name,provider,new,sybase,call,meta,data,provider,database,meta,data,else,provider,new,generic,call,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,name,provider,initialize,with,meta,data,database,meta,data,if,access,procedure,column,meta,data,provider,initialize,with,procedure,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,procedure,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
