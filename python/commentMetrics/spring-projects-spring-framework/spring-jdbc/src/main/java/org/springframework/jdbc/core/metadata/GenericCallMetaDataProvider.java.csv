# id;timestamp;commentText;codeText;commentWords;codeWords
GenericCallMetaDataProvider -> public boolean isSupportsCatalogsInProcedureCalls();1328020251;Does the database support the use of catalog name in procedure calls;public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> public boolean isSupportsCatalogsInProcedureCalls();1357119239;Does the database support the use of catalog name in procedure calls;public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1328020251;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: "_							+ columnName +_							" " + columnType +_							" " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") +_							" " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() +_								" " + meta.getTypeName() + " " + meta.isNullable()_						)__					}_				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for procedure columns: " + ex)__		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1356735495;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: "_							+ columnName +_							" " + columnType +_							" " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") +_							" " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() +_								" " + meta.getTypeName() + " " + meta.isNullable()_						)__					}_				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for procedure columns: " + ex)__		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1357119239;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: "_							+ columnName +_							" " + columnType +_							" " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") +_							" " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() +_								" " + meta.getTypeName() + " " + meta.isNullable()_						)__					}_				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for procedure columns: " + ex)__		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1368482696;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: "_							+ columnName +_							" " + columnType +_							" " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") +_							" " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() +_								" " + meta.getTypeName() + " " + meta.isNullable()_						)__					}_				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for procedure columns: " + ex)__		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1405696918;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: "_							+ columnName +_							" " + columnType +_							" " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") +_							" " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() +_								" " + meta.getTypeName() + " " + meta.isNullable()_						)__					}_				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for procedure columns: " + ex)__		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1406626957;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {_		ResultSet procs = null__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}_		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()__			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - " +_						"multiple procedures/functions/signatures for " + metaDataProcedureName + " found " + found)__			}_			if (found.size() < 1) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for " +_							metaDataProcedureName + " - package name should be specified separately using " +_							"'.withCatalogName(\"" + packageName + "\")'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,result,set,procs,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,if,found,size,1,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1328020251;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1356735495;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1357119239;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1368482696;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1405696918;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1406626957;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1447285666;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1467730834;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1477045587;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1489501153;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1496242568;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1496837955;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1500495740;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1502974979;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1518179431;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1519588127;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1520339775;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1521457504;Specify whether the database uses upper case for identifiers;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1522231598;Specify whether the database uses upper case for identifiers.;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1530174524;Specify whether the database uses upper case for identifiers.;protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,the,database,uses,upper,case,for,identifiers;protected,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1328020251;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1356735495;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1357119239;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1368482696;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1405696918;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1406626957;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1447285666;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1467730834;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1477045587;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1489501153;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1496242568;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1496837955;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1500495740;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1502974979;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1518179431;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1519588127;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1520339775;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1521457504;Specify whether the database uses lower case for identifiers;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1522231598;Specify whether the database uses lower case for identifiers.;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1530174524;Specify whether the database uses lower case for identifiers.;protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,the,database,uses,lower,case,for,identifiers;protected,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericCallMetaDataProvider -> private void processProcedureColumns( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1447285666;Process the procedure column metadata;private void processProcedureColumns(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<String>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,string,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1467730834;Process the procedure column metadata;private void processProcedureColumns(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + "." + procs.getString("PROCEDURE_SCHEM") +_						"." + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1477045587;Process the procedure column metadata;private void processProcedureColumns(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getBoolean("NULLABLE") +_							" (probably a member of a collection)"_						)__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getBoolean("NULLABLE")_					)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,boolean,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1489501153;Process the procedure column metadata;private void processProcedureColumns(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName);1496242568;Process the procedure column metadata;private void processProcedureColumns(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1328020251;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1356735495;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1357119239;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1368482696;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1405696918;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1406626957;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1447285666;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1467730834;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1477045587;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1489501153;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1496242568;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1496837955;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1500495740;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1502974979;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1518179431;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1519588127;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1520339775;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1521457504;Does the database use upper case for identifiers;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1522231598;Does the database use upper case for identifiers?;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresUpperCaseIdentifiers();1530174524;Does the database use upper case for identifiers?;protected boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};does,the,database,use,upper,case,for,identifiers;protected,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1496837955;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1500495740;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1502974979;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1518179431;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf("."))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1519588127;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.'))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1520339775;Process the procedure column metadata;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.'))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping metadata for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column metadata: " + ex)__				}_			}_		}_	};process,the,procedure,column,metadata;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,metadata,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,metadata,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1521457504;Process the procedure column meta-data;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.'))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping meta-data for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column meta-data: " + ex)__				}_			}_		}_	};process,the,procedure,column,meta,data;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,meta,data,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,meta,data,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1522231598;Process the procedure column meta-data.;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.'))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping meta-data for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column meta-data: " + ex)__				}_			}_		}_	};process,the,procedure,column,meta,data;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,meta,data,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,meta,data,ex
GenericCallMetaDataProvider -> private void processProcedureColumns(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName);1530174524;Process the procedure column meta-data.;private void processProcedureColumns(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {__		String metaDataCatalogName = metaDataCatalogNameToUse(catalogName)__		String metaDataSchemaName = metaDataSchemaNameToUse(schemaName)__		String metaDataProcedureName = procedureNameToUse(procedureName)__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataProcedureName)__		}__		ResultSet procs = null__		try {_			procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName)__			List<String> found = new ArrayList<>()__			while (procs.next()) {_				found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") +_						'.' + procs.getString("PROCEDURE_NAME"))__			}_			procs.close()___			if (found.size() > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Unable to determine the correct call signature - multiple " +_						"procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found)__			}_			else if (found.isEmpty()) {_				if (metaDataProcedureName != null && metaDataProcedureName.contains(".") &&_						!StringUtils.hasText(metaDataCatalogName)) {_					String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.'))__					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature for '" + metaDataProcedureName +_							"' - package name should be specified separately using '.withCatalogName(\"" +_							packageName + "\")'")__				}_				else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" +_								metaDataProcedureName + "' - assuming a non-exposed synonym")__					}_				}_				else {_					throw new InvalidDataAccessApiUsageException(_							"Unable to determine the correct call signature - no " +_							"procedure/function/signature for '" + metaDataProcedureName + "'")__				}_			}__			procs = databaseMetaData.getProcedureColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null)__			while (procs.next()) {_				String columnName = procs.getString("COLUMN_NAME")__				int columnType = procs.getInt("COLUMN_TYPE")__				if (columnName == null && (_						columnType == DatabaseMetaData.procedureColumnIn  ||_						columnType == DatabaseMetaData.procedureColumnInOut ||_						columnType == DatabaseMetaData.procedureColumnOut)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Skipping meta-data for: " + columnType + " " + procs.getInt("DATA_TYPE") +_							" " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") +_							" (probably a member of a collection)")__					}_				}_				else {_					CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType,_							procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"),_							procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable)__					this.callParameterMetaData.add(meta)__					if (logger.isDebugEnabled()) {_						logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_								meta.getParameterType() + " " + meta.getSqlType() + " " +_								meta.getTypeName() + " " + meta.isNullable())__					}_				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for procedure columns: " + ex)__			}_		}_		finally {_			try {_				if (procs != null) {_					procs.close()__				}_			}_			catch (SQLException ex) {_				if (logger.isWarnEnabled()) {_					logger.warn("Problem closing ResultSet for procedure column meta-data: " + ex)__				}_			}_		}_	};process,the,procedure,column,meta,data;private,void,process,procedure,columns,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,procedure,name,string,meta,data,catalog,name,meta,data,catalog,name,to,use,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,schema,name,string,meta,data,procedure,name,procedure,name,to,use,procedure,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,result,set,procs,null,try,procs,database,meta,data,get,procedures,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,list,string,found,new,array,list,while,procs,next,found,add,procs,get,string,procs,get,string,procs,get,string,procs,close,if,found,size,1,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,multiple,procedures,functions,signatures,for,meta,data,procedure,name,found,found,else,if,found,is,empty,if,meta,data,procedure,name,null,meta,data,procedure,name,contains,string,utils,has,text,meta,data,catalog,name,string,package,name,meta,data,procedure,name,substring,0,meta,data,procedure,name,index,of,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,for,meta,data,procedure,name,package,name,should,be,specified,separately,using,with,catalog,name,package,name,else,if,oracle,equals,database,meta,data,get,database,product,name,if,logger,is,debug,enabled,logger,debug,oracle,jdbc,driver,did,not,return,procedure,function,signature,for,meta,data,procedure,name,assuming,a,non,exposed,synonym,else,throw,new,invalid,data,access,api,usage,exception,unable,to,determine,the,correct,call,signature,no,procedure,function,signature,for,meta,data,procedure,name,procs,database,meta,data,get,procedure,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,procedure,name,null,while,procs,next,string,column,name,procs,get,string,int,column,type,procs,get,int,if,column,name,null,column,type,database,meta,data,procedure,column,in,column,type,database,meta,data,procedure,column,in,out,column,type,database,meta,data,procedure,column,out,if,logger,is,debug,enabled,logger,debug,skipping,meta,data,for,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,probably,a,member,of,a,collection,else,call,parameter,meta,data,meta,new,call,parameter,meta,data,column,name,column,type,procs,get,int,procs,get,string,procs,get,int,nullable,database,meta,data,procedure,nullable,this,call,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,parameter,type,meta,get,sql,type,meta,get,type,name,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,procedure,columns,ex,finally,try,if,procs,null,procs,close,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,problem,closing,result,set,for,procedure,column,meta,data,ex
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1328020251;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1356735495;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1357119239;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1368482696;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1405696918;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1406626957;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1447285666;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1467730834;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1477045587;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1489501153;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1496242568;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1496837955;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1500495740;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1502974979;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1518179431;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1519588127;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1520339775;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1521457504;Does the database use lower case for identifiers;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1522231598;Does the database use lower case for identifiers?;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected boolean isStoresLowerCaseIdentifiers();1530174524;Does the database use lower case for identifiers?;protected boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};does,the,database,use,lower,case,for,identifiers;protected,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1328020251;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1356735495;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1357119239;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1368482696;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1405696918;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1406626957;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1447285666;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1467730834;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1477045587;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1489501153;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1496242568;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1496837955;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1500495740;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1502974979;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1518179431;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1519588127;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1520339775;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1521457504;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1522231598;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1530174524;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericCallMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,call,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1328020251;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1356735495;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1357119239;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1368482696;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1405696918;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1406626957;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1447285666;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1467730834;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1477045587;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1489501153;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1496242568;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1496837955;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1500495740;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1502974979;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1518179431;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1519588127;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1520339775;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1521457504;Specify whether the database supports the use of schema name in procedure calls;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1522231598;Specify whether the database supports the use of schema name in procedure calls.;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls);1530174524;Specify whether the database supports the use of schema name in procedure calls.;protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {_		this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,schema,name,in,procedure,calls;protected,void,set,supports,schemas,in,procedure,calls,boolean,supports,schemas,in,procedure,calls,this,supports,schemas,in,procedure,calls,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> public boolean isSupportsSchemasInProcedureCalls();1328020251;Does the database support the use of schema name in procedure calls;public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> public boolean isSupportsSchemasInProcedureCalls();1357119239;Does the database support the use of schema name in procedure calls;public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1356735495;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1368482696;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1405696918;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1406626957;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1447285666;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1467730834;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1477045587;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1489501153;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1496242568;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1496837955;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1500495740;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1502974979;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1518179431;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1519588127;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1520339775;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1521457504;Does the database support the use of schema name in procedure calls;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1522231598;Does the database support the use of schema name in procedure calls?;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsSchemasInProcedureCalls();1530174524;Does the database support the use of schema name in procedure calls?;@Override_	public boolean isSupportsSchemasInProcedureCalls() {_		return this.supportsSchemasInProcedureCalls__	};does,the,database,support,the,use,of,schema,name,in,procedure,calls;override,public,boolean,is,supports,schemas,in,procedure,calls,return,this,supports,schemas,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1328020251;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1356735495;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1357119239;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1368482696;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1405696918;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1406626957;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1447285666;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1467730834;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1477045587;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1489501153;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1496242568;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1496837955;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1500495740;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1502974979;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1518179431;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1519588127;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1520339775;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1521457504;Specify whether the database supports the use of catalog name in procedure calls;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1522231598;Specify whether the database supports the use of catalog name in procedure calls.;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls);1530174524;Specify whether the database supports the use of catalog name in procedure calls.;protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {_		this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls__	};specify,whether,the,database,supports,the,use,of,catalog,name,in,procedure,calls;protected,void,set,supports,catalogs,in,procedure,calls,boolean,supports,catalogs,in,procedure,calls,this,supports,catalogs,in,procedure,calls,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1356735495;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1368482696;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1405696918;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1406626957;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1447285666;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1467730834;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1477045587;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1489501153;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1496242568;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1496837955;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1500495740;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1502974979;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1518179431;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1519588127;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1520339775;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1521457504;Does the database support the use of catalog name in procedure calls;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1522231598;Does the database support the use of catalog name in procedure calls?;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
GenericCallMetaDataProvider -> @Override 	public boolean isSupportsCatalogsInProcedureCalls();1530174524;Does the database support the use of catalog name in procedure calls?;@Override_	public boolean isSupportsCatalogsInProcedureCalls() {_		return this.supportsCatalogsInProcedureCalls__	};does,the,database,support,the,use,of,catalog,name,in,procedure,calls;override,public,boolean,is,supports,catalogs,in,procedure,calls,return,this,supports,catalogs,in,procedure,calls
