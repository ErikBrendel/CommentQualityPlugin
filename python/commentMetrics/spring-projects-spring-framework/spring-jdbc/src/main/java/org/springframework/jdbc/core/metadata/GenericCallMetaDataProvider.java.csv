commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;@Override public void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQLException {     try {         setSupportsCatalogsInProcedureCalls(databaseMetaData.supportsCatalogsInProcedureCalls()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.supportsCatalogsInProcedureCalls': " + ex.getMessage()).         }     }     try {         setSupportsSchemasInProcedureCalls(databaseMetaData.supportsSchemasInProcedureCalls()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.supportsSchemasInProcedureCalls': " + ex.getMessage()).         }     }     try {         setStoresUpperCaseIdentifiers(databaseMetaData.storesUpperCaseIdentifiers()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.storesUpperCaseIdentifiers': " + ex.getMessage()).         }     }     try {         setStoresLowerCaseIdentifiers(databaseMetaData.storesLowerCaseIdentifiers()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.storesLowerCaseIdentifiers': " + ex.getMessage()).         }     } }
false;public;4;7;;@Override public void initializeWithProcedureColumnMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) throws SQLException {     this.procedureColumnMetaDataUsed = true.     processProcedureColumns(databaseMetaData, catalogName, schemaName, procedureName). }
false;public;0;4;;@Override public List<CallParameterMetaData> getCallParameterMetaData() {     return this.callParameterMetaData. }
false;public;1;16;;@Override @Nullable public String procedureNameToUse(@Nullable String procedureName) {     if (procedureName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return procedureName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return procedureName.toLowerCase().     } else {         return procedureName.     } }
false;public;1;16;;@Override @Nullable public String catalogNameToUse(@Nullable String catalogName) {     if (catalogName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return catalogName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return catalogName.toLowerCase().     } else {         return catalogName.     } }
false;public;1;16;;@Override @Nullable public String schemaNameToUse(@Nullable String schemaName) {     if (schemaName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return schemaName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return schemaName.toLowerCase().     } else {         return schemaName.     } }
false;public;1;10;;@Override @Nullable public String metaDataCatalogNameToUse(@Nullable String catalogName) {     if (isSupportsCatalogsInProcedureCalls()) {         return catalogNameToUse(catalogName).     } else {         return null.     } }
false;public;1;10;;@Override @Nullable public String metaDataSchemaNameToUse(@Nullable String schemaName) {     if (isSupportsSchemasInProcedureCalls()) {         return schemaNameToUse(schemaName).     } else {         return null.     } }
false;public;1;16;;@Override @Nullable public String parameterNameToUse(@Nullable String parameterName) {     if (parameterName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return parameterName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return parameterName.toLowerCase().     } else {         return parameterName.     } }
false;public;1;4;;@Override public boolean byPassReturnParameter(String parameterName) {     return false. }
false;public;2;4;;@Override public SqlParameter createDefaultOutParameter(String parameterName, CallParameterMetaData meta) {     return new SqlOutParameter(parameterName, meta.getSqlType()). }
false;public;2;4;;@Override public SqlParameter createDefaultInOutParameter(String parameterName, CallParameterMetaData meta) {     return new SqlInOutParameter(parameterName, meta.getSqlType()). }
false;public;2;4;;@Override public SqlParameter createDefaultInParameter(String parameterName, CallParameterMetaData meta) {     return new SqlParameter(parameterName, meta.getSqlType()). }
false;public;0;4;;@Override public String getUserName() {     return this.userName. }
false;public;0;4;;@Override public boolean isReturnResultSetSupported() {     return true. }
false;public;0;4;;@Override public boolean isRefCursorSupported() {     return false. }
false;public;0;4;;@Override public int getRefCursorSqlType() {     return Types.OTHER. }
false;public;0;4;;@Override public boolean isProcedureColumnMetaDataUsed() {     return this.procedureColumnMetaDataUsed. }
true;protected;1;3;/**  * Specify whether the database supports the use of catalog name in procedure calls.  */ ;/**  * Specify whether the database supports the use of catalog name in procedure calls.  */ protected void setSupportsCatalogsInProcedureCalls(boolean supportsCatalogsInProcedureCalls) {     this.supportsCatalogsInProcedureCalls = supportsCatalogsInProcedureCalls. }
true;public;0;4;/**  * Does the database support the use of catalog name in procedure calls?  */ ;/**  * Does the database support the use of catalog name in procedure calls?  */ @Override public boolean isSupportsCatalogsInProcedureCalls() {     return this.supportsCatalogsInProcedureCalls. }
true;protected;1;3;/**  * Specify whether the database supports the use of schema name in procedure calls.  */ ;/**  * Specify whether the database supports the use of schema name in procedure calls.  */ protected void setSupportsSchemasInProcedureCalls(boolean supportsSchemasInProcedureCalls) {     this.supportsSchemasInProcedureCalls = supportsSchemasInProcedureCalls. }
true;public;0;4;/**  * Does the database support the use of schema name in procedure calls?  */ ;/**  * Does the database support the use of schema name in procedure calls?  */ @Override public boolean isSupportsSchemasInProcedureCalls() {     return this.supportsSchemasInProcedureCalls. }
true;protected;1;3;/**  * Specify whether the database uses upper case for identifiers.  */ ;/**  * Specify whether the database uses upper case for identifiers.  */ protected void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {     this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers. }
true;protected;0;3;/**  * Does the database use upper case for identifiers?  */ ;/**  * Does the database use upper case for identifiers?  */ protected boolean isStoresUpperCaseIdentifiers() {     return this.storesUpperCaseIdentifiers. }
true;protected;1;3;/**  * Specify whether the database uses lower case for identifiers.  */ ;/**  * Specify whether the database uses lower case for identifiers.  */ protected void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {     this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers. }
true;protected;0;3;/**  * Does the database use lower case for identifiers?  */ ;/**  * Does the database use lower case for identifiers?  */ protected boolean isStoresLowerCaseIdentifiers() {     return this.storesLowerCaseIdentifiers. }
true;private;4;94;/**  * Process the procedure column meta-data.  */ ;/**  * Process the procedure column meta-data.  */ private void processProcedureColumns(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String procedureName) {     String metaDataCatalogName = metaDataCatalogNameToUse(catalogName).     String metaDataSchemaName = metaDataSchemaNameToUse(schemaName).     String metaDataProcedureName = procedureNameToUse(procedureName).     if (logger.isDebugEnabled()) {         logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' + metaDataSchemaName + '/' + metaDataProcedureName).     }     ResultSet procs = null.     try {         procs = databaseMetaData.getProcedures(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName).         List<String> found = new ArrayList<>().         while (procs.next()) {             found.add(procs.getString("PROCEDURE_CAT") + '.' + procs.getString("PROCEDURE_SCHEM") + '.' + procs.getString("PROCEDURE_NAME")).         }         procs.close().         if (found.size() > 1) {             throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - multiple " + "procedures/functions/signatures for '" + metaDataProcedureName + "': found " + found).         } else if (found.isEmpty()) {             if (metaDataProcedureName != null && metaDataProcedureName.contains(".") && !StringUtils.hasText(metaDataCatalogName)) {                 String packageName = metaDataProcedureName.substring(0, metaDataProcedureName.indexOf('.')).                 throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature for '" + metaDataProcedureName + "' - package name should be specified separately using '.withCatalogName(\"" + packageName + "\")'").             } else if ("Oracle".equals(databaseMetaData.getDatabaseProductName())) {                 if (logger.isDebugEnabled()) {                     logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" + metaDataProcedureName + "' - assuming a non-exposed synonym").                 }             } else {                 throw new InvalidDataAccessApiUsageException("Unable to determine the correct call signature - no " + "procedure/function/signature for '" + metaDataProcedureName + "'").             }         }         procs = databaseMetaData.getProcedureColumns(metaDataCatalogName, metaDataSchemaName, metaDataProcedureName, null).         while (procs.next()) {             String columnName = procs.getString("COLUMN_NAME").             int columnType = procs.getInt("COLUMN_TYPE").             if (columnName == null && (columnType == DatabaseMetaData.procedureColumnIn || columnType == DatabaseMetaData.procedureColumnInOut || columnType == DatabaseMetaData.procedureColumnOut)) {                 if (logger.isDebugEnabled()) {                     logger.debug("Skipping meta-data for: " + columnType + " " + procs.getInt("DATA_TYPE") + " " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") + " (probably a member of a collection)").                 }             } else {                 CallParameterMetaData meta = new CallParameterMetaData(columnName, columnType, procs.getInt("DATA_TYPE"), procs.getString("TYPE_NAME"), procs.getInt("NULLABLE") == DatabaseMetaData.procedureNullable).                 this.callParameterMetaData.add(meta).                 if (logger.isDebugEnabled()) {                     logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " + meta.getParameterType() + " " + meta.getSqlType() + " " + meta.getTypeName() + " " + meta.isNullable()).                 }             }         }     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error while retrieving meta-data for procedure columns: " + ex).         }     } finally {         try {             if (procs != null) {                 procs.close().             }         } catch (SQLException ex) {             if (logger.isWarnEnabled()) {                 logger.warn("Problem closing ResultSet for procedure column meta-data: " + ex).             }         }     } }
