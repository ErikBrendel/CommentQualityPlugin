commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * The {@link DataSource} for the database to populate when this component  * is initialized and to clean up when this component is shut down.  * <p>This property is mandatory with no default provided.  * @param dataSource the DataSource  */ ;/**  * The {@link DataSource} for the database to populate when this component  * is initialized and to clean up when this component is shut down.  * <p>This property is mandatory with no default provided.  * @param dataSource the DataSource  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
true;public;1;3;/**  * Set the {@link DatabasePopulator} to execute during the bean initialization phase.  * @param databasePopulator the {@code DatabasePopulator} to use during initialization  * @see #setDatabaseCleaner  */ ;/**  * Set the {@link DatabasePopulator} to execute during the bean initialization phase.  * @param databasePopulator the {@code DatabasePopulator} to use during initialization  * @see #setDatabaseCleaner  */ public void setDatabasePopulator(DatabasePopulator databasePopulator) {     this.databasePopulator = databasePopulator. }
true;public;1;3;/**  * Set the {@link DatabasePopulator} to execute during the bean destruction  * phase, cleaning up the database and leaving it in a known state for others.  * @param databaseCleaner the {@code DatabasePopulator} to use during destruction  * @see #setDatabasePopulator  */ ;/**  * Set the {@link DatabasePopulator} to execute during the bean destruction  * phase, cleaning up the database and leaving it in a known state for others.  * @param databaseCleaner the {@code DatabasePopulator} to use during destruction  * @see #setDatabasePopulator  */ public void setDatabaseCleaner(DatabasePopulator databaseCleaner) {     this.databaseCleaner = databaseCleaner. }
true;public;1;3;/**  * Flag to explicitly enable or disable the {@linkplain #setDatabasePopulator  * database populator} and {@linkplain #setDatabaseCleaner database cleaner}.  * @param enabled {@code true} if the database populator and database cleaner  * should be called on startup and shutdown, respectively  */ ;/**  * Flag to explicitly enable or disable the {@linkplain #setDatabasePopulator  * database populator} and {@linkplain #setDatabaseCleaner database cleaner}.  * @param enabled {@code true} if the database populator and database cleaner  * should be called on startup and shutdown, respectively  */ public void setEnabled(boolean enabled) {     this.enabled = enabled. }
true;public;0;4;/**  * Use the {@linkplain #setDatabasePopulator database populator} to set up  * the database.  */ ;/**  * Use the {@linkplain #setDatabasePopulator database populator} to set up  * the database.  */ @Override public void afterPropertiesSet() {     execute(this.databasePopulator). }
true;public;0;4;/**  * Use the {@linkplain #setDatabaseCleaner database cleaner} to clean up the  * database.  */ ;/**  * Use the {@linkplain #setDatabaseCleaner database cleaner} to clean up the  * database.  */ @Override public void destroy() {     execute(this.databaseCleaner). }
false;private;1;6;;private void execute(@Nullable DatabasePopulator populator) {     Assert.state(this.dataSource != null, "DataSource must be set").     if (this.enabled && populator != null) {         DatabasePopulatorUtils.execute(populator, this.dataSource).     } }
