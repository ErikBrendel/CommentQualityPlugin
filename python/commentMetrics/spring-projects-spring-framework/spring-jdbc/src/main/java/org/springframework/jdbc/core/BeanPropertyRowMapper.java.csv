# id;timestamp;commentText;codeText;commentWords;codeWords
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1328020251;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1356735495;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1357119239;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1368482696;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1368707595;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1403630813;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1436792383;Create a new BeanPropertyRowMapper for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1436815857;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1440518066;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1449660489;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1465492748;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1467730834;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1468948866;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1477690745;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1479997757;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1495868221;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1496837955;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1498780456;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1521457504;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1530174524;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> public BeanPropertyRowMapper();1537186939;Create a new {@code BeanPropertyRowMapper} for bean-style configuration._@see #setMappedClass_@see #setCheckFullyPopulated;public BeanPropertyRowMapper() {_	};create,a,new,code,bean,property,row,mapper,for,bean,style,configuration,see,set,mapped,class,see,set,check,fully,populated;public,bean,property,row,mapper
BeanPropertyRowMapper -> private String underscoreName(String name);1328020251;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		StringBuilder result = new StringBuilder()__		if (name != null && name.length() > 0) {_			result.append(name.substring(0, 1).toLowerCase())__			for (int i = 1_ i < name.length()_ i++) {_				String s = name.substring(i, i + 1)__				if (s.equals(s.toUpperCase())) {_					result.append("_")__					result.append(s.toLowerCase())__				}_				else {_					result.append(s)__				}_			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,string,builder,result,new,string,builder,if,name,null,name,length,0,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,if,s,equals,s,to,upper,case,result,append,result,append,s,to,lower,case,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> private String underscoreName(String name);1356735495;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		StringBuilder result = new StringBuilder()__		if (name != null && name.length() > 0) {_			result.append(name.substring(0, 1).toLowerCase())__			for (int i = 1_ i < name.length()_ i++) {_				String s = name.substring(i, i + 1)__				if (s.equals(s.toUpperCase())) {_					result.append("_")__					result.append(s.toLowerCase())__				}_				else {_					result.append(s)__				}_			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,string,builder,result,new,string,builder,if,name,null,name,length,0,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,if,s,equals,s,to,upper,case,result,append,result,append,s,to,lower,case,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> private String underscoreName(String name);1357119239;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		StringBuilder result = new StringBuilder()__		if (name != null && name.length() > 0) {_			result.append(name.substring(0, 1).toLowerCase())__			for (int i = 1_ i < name.length()_ i++) {_				String s = name.substring(i, i + 1)__				if (s.equals(s.toUpperCase())) {_					result.append("_")__					result.append(s.toLowerCase())__				}_				else {_					result.append(s)__				}_			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,string,builder,result,new,string,builder,if,name,null,name,length,0,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,if,s,equals,s,to,upper,case,result,append,result,append,s,to,lower,case,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> private String underscoreName(String name);1368482696;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		StringBuilder result = new StringBuilder()__		if (name != null && name.length() > 0) {_			result.append(name.substring(0, 1).toLowerCase())__			for (int i = 1_ i < name.length()_ i++) {_				String s = name.substring(i, i + 1)__				if (s.equals(s.toUpperCase())) {_					result.append("_")__					result.append(s.toLowerCase())__				}_				else {_					result.append(s)__				}_			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,string,builder,result,new,string,builder,if,name,null,name,length,0,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,if,s,equals,s,to,upper,case,result,append,result,append,s,to,lower,case,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> private String underscoreName(String name);1368707595;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(name.substring(0, 1).toLowerCase())__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = s.toLowerCase()__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,s,to,lower,case,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> private String underscoreName(String name);1403630813;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the string containing original name_@return the converted name;private String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(name.substring(0, 1).toLowerCase())__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = s.toLowerCase()__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,string,containing,original,name,return,the,converted,name;private,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,name,substring,0,1,to,lower,case,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,s,to,lower,case,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1328020251;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1356735495;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1357119239;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1368482696;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1368707595;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1403630813;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1436792383;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1436815857;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1440518066;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1449660489;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation is empty. Can be overridden in subclasses._@param bw the BeanWrapper to initialize;protected void initBeanWrapper(BeanWrapper bw) {_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize;protected,void,init,bean,wrapper,bean,wrapper,bw
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1465492748;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1467730834;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1468948866;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1477690745;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1479997757;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1495868221;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1496837955;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1498780456;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1521457504;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1530174524;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> protected void initBeanWrapper(BeanWrapper bw);1537186939;Initialize the given BeanWrapper to be used for row mapping._To be called for each row._<p>The default implementation applies the configured {@link ConversionService},_if any. Can be overridden in subclasses._@param bw the BeanWrapper to initialize_@see #getConversionService()_@see BeanWrapper#setConversionService;protected void initBeanWrapper(BeanWrapper bw) {_		ConversionService cs = getConversionService()__		if (cs != null) {_			bw.setConversionService(cs)__		}_	};initialize,the,given,bean,wrapper,to,be,used,for,row,mapping,to,be,called,for,each,row,p,the,default,implementation,applies,the,configured,link,conversion,service,if,any,can,be,overridden,in,subclasses,param,bw,the,bean,wrapper,to,initialize,see,get,conversion,service,see,bean,wrapper,set,conversion,service;protected,void,init,bean,wrapper,bean,wrapper,bw,conversion,service,cs,get,conversion,service,if,cs,null,bw,set,conversion,service,cs
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1328020251;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1356735495;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1357119239;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1368482696;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1368707595;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1403630813;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1436792383;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1436815857;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1440518066;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1449660489;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1465492748;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1467730834;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1468948866;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1477690745;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1479997757;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1495868221;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public final Class<T> getMappedClass();1496837955;Get the class that we are mapping to.;public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public void setConversionService(ConversionService conversionService);1465492748;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(ConversionService conversionService);1467730834;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(ConversionService conversionService);1468948866;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(ConversionService conversionService);1477690745;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(ConversionService conversionService);1479997757;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public ConversionService getConversionService();1465492748;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public ConversionService getConversionService();1467730834;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public ConversionService getConversionService();1468948866;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public ConversionService getConversionService();1477690745;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public ConversionService getConversionService();1479997757;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1328020251;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1356735495;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1357119239;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1368482696;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1368707595;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1403630813;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1436792383;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1436815857;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1440518066;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1449660489;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1465492748;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1467730834;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1468948866;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1477690745;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1479997757;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1495868221;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1496837955;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1498780456;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1521457504;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1530174524;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public boolean isPrimitivesDefaultedForNullValue();1537186939;Return whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields.;public boolean isPrimitivesDefaultedForNullValue() {_		return this.primitivesDefaultedForNullValue__	};return,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields;public,boolean,is,primitives,defaulted,for,null,value,return,this,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1328020251;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is <code>false</code>, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,code,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1356735495;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1357119239;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1368482696;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1368707595;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1403630813;Set whether we're strictly validating that all bean properties have been_mapped from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the_target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1436792383;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1436815857;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1440518066;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1449660489;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1465492748;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1467730834;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1468948866;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1477690745;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1479997757;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1495868221;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1496837955;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1498780456;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1521457504;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1530174524;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public void setCheckFullyPopulated(boolean checkFullyPopulated);1537186939;Set whether we're strictly validating that all bean properties have been mapped_from corresponding database fields._<p>Default is {@code false}, accepting unpopulated properties in the target bean.;public void setCheckFullyPopulated(boolean checkFullyPopulated) {_		this.checkFullyPopulated = checkFullyPopulated__	};set,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields,p,default,is,code,false,accepting,unpopulated,properties,in,the,target,bean;public,void,set,check,fully,populated,boolean,check,fully,populated,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1356735495;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1368482696;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1368707595;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1403630813;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1436792383;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(lowerCaseName(column.replaceAll(" ", "")))__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" +_									column + "' with null value when setting property '" + pd.getName() +_									"' of type " + pd.getPropertyType() + " on object: " + mappedObject)__						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,lower,case,name,column,replace,all,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1436815857;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(lowerCaseName(column.replaceAll(" ", "")))__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" +_									column + "' with null value when setting property '" + pd.getName() +_									"' of type " + pd.getPropertyType() + " on object: " + mappedObject)__						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,lower,case,name,column,replace,all,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1440518066;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type [" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"] on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1449660489;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type [" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"] on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1465492748;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type [" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"] on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1467730834;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type [" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"] on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1468948866;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type [" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "]")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type [" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"] on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1477690745;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1479997757;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1495868221;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1496837955;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = this.mappedFields.get(field)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,get,field,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1498780456;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = (this.mappedFields != null ? this.mappedFields.get(field) : null)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,null,this,mapped,fields,get,field,null,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1521457504;Extract the values for all columns in the current row._<p>Utilizes public setters and result set meta-data._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = (this.mappedFields != null ? this.mappedFields.get(field) : null)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,meta,data,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,null,this,mapped,fields,get,field,null,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1530174524;Extract the values for all columns in the current row._<p>Utilizes public setters and result set meta-data._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(column.replaceAll(" ", ""))__			PropertyDescriptor pd = (this.mappedFields != null ? this.mappedFields.get(field) : null)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,meta,data,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,column,replace,all,property,descriptor,pd,this,mapped,fields,null,this,mapped,fields,get,field,null,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> @Override 	public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1537186939;Extract the values for all columns in the current row._<p>Utilizes public setters and result set meta-data._@see java.sql.ResultSetMetaData;@Override_	public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiateClass(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			String field = lowerCaseName(StringUtils.delete(column, " "))__			PropertyDescriptor pd = (this.mappedFields != null ? this.mappedFields.get(field) : null)__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (rowNumber == 0 && logger.isDebugEnabled()) {_						logger.debug("Mapping column '" + column + "' to property '" + pd.getName() +_								"' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'")__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException ex) {_						if (value == null && this.primitivesDefaultedForNullValue) {_							if (logger.isDebugEnabled()) {_								logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_										" and column '" + column + "' with null value when setting property '" +_										pd.getName() + "' of type '" +_										ClassUtils.getQualifiedName(pd.getPropertyType()) +_										"' on object: " + mappedObject, ex)__							}_						}_						else {_							throw ex__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column '" + column + "' to property '" + pd.getName() + "'", ex)__				}_			}_			else {_				_				if (rowNumber == 0 && logger.isDebugEnabled()) {_					logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'")__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass.getName() + "]: " +_					this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,meta,data,see,java,sql,result,set,meta,data;override,public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,class,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,string,field,lower,case,name,string,utils,delete,column,property,descriptor,pd,this,mapped,fields,null,this,mapped,fields,get,field,null,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,row,number,0,logger,is,debug,enabled,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,ex,if,value,null,this,primitives,defaulted,for,null,value,if,logger,is,debug,enabled,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,null,value,when,setting,property,pd,get,name,of,type,class,utils,get,qualified,name,pd,get,property,type,on,object,mapped,object,ex,else,throw,ex,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,else,if,row,number,0,logger,is,debug,enabled,logger,debug,no,property,found,for,column,column,mapped,to,field,field,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,get,name,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1328020251;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1356735495;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1357119239;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1368482696;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1368707595;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1403630813;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1436792383;Create a new BeanPropertyRowMapper._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1436815857;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1440518066;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1449660489;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1465492748;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1467730834;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1468948866;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1477690745;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1479997757;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1495868221;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1496837955;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1498780456;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1521457504;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1530174524;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated);1537186939;Create a new {@code BeanPropertyRowMapper}._@param mappedClass the class that each row should be mapped to_@param checkFullyPopulated whether we're strictly validating that_all bean properties have been mapped from corresponding database fields;public BeanPropertyRowMapper(Class<T> mappedClass, boolean checkFullyPopulated) {_		initialize(mappedClass)__		this.checkFullyPopulated = checkFullyPopulated__	};create,a,new,code,bean,property,row,mapper,param,mapped,class,the,class,that,each,row,should,be,mapped,to,param,check,fully,populated,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,bean,property,row,mapper,class,t,mapped,class,boolean,check,fully,populated,initialize,mapped,class,this,check,fully,populated,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1328020251;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1356735495;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1357119239;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1368482696;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1368707595;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1403630813;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1436792383;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1436815857;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1440518066;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1449660489;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1465492748;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1467730834;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1468948866;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1477690745;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1479997757;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1495868221;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1496837955;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1498780456;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1521457504;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1530174524;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public boolean isCheckFullyPopulated();1537186939;Return whether we're strictly validating that all bean properties have been_mapped from corresponding database fields.;public boolean isCheckFullyPopulated() {_		return this.checkFullyPopulated__	};return,whether,we,re,strictly,validating,that,all,bean,properties,have,been,mapped,from,corresponding,database,fields;public,boolean,is,check,fully,populated,return,this,check,fully,populated
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1328020251;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is <code>false</code>, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,code,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1356735495;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1357119239;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1368482696;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1368707595;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1403630813;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1436792383;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1436815857;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1440518066;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1449660489;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1465492748;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1467730834;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1468948866;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1477690745;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1479997757;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1495868221;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1496837955;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1498780456;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1521457504;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1530174524;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue);1537186939;Set whether we're defaulting Java primitives in the case of mapping a null value_from corresponding database fields._<p>Default is {@code false}, throwing an exception when nulls are mapped to Java primitives.;public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {_		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue__	};set,whether,we,re,defaulting,java,primitives,in,the,case,of,mapping,a,null,value,from,corresponding,database,fields,p,default,is,code,false,throwing,an,exception,when,nulls,are,mapped,to,java,primitives;public,void,set,primitives,defaulted,for,null,value,boolean,primitives,defaulted,for,null,value,this,primitives,defaulted,for,null,value,primitives,defaulted,for,null,value
BeanPropertyRowMapper -> @Nullable 	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1496837955;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);@Nullable_	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;nullable,protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> @Nullable 	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1498780456;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);@Nullable_	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;nullable,protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> @Nullable 	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1521457504;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);@Nullable_	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;nullable,protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> @Nullable 	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1530174524;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);@Nullable_	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;nullable,protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> @Nullable 	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1537186939;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);@Nullable_	protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;nullable,protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1436792383;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1436815857;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1440518066;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1449660489;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1465492748;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1467730834;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1468948866;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1477690745;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1479997757;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1495868221;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1496837955;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1498780456;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1521457504;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1530174524;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected String lowerCaseName(String name);1537186939;Convert the given name to lower case._By default, conversions will happen within the US locale._@param name the original name_@return the converted name_@since 4.2;protected String lowerCaseName(String name) {_		return name.toLowerCase(Locale.US)__	};convert,the,given,name,to,lower,case,by,default,conversions,will,happen,within,the,us,locale,param,name,the,original,name,return,the,converted,name,since,4,2;protected,string,lower,case,name,string,name,return,name,to,lower,case,locale,us
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1328020251;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from <code>getResultSetValue</code>._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or <code>null</code> if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,code,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,code,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1356735495;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1357119239;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1368482696;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1368707595;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1403630813;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1436792383;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1436815857;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1440518066;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1449660489;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1465492748;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1467730834;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1468948866;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1477690745;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException;1479997757;Retrieve a JDBC object value for the specified column._<p>The default implementation calls_{@link JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class)}._Subclasses may override this to check specific value types upfront,_or to post-process values return from {@code getResultSetValue}._@param rs is the ResultSet holding the data_@param index is the column index_@param pd the bean property that each result object is expected to match_(or {@code null} if none specified)_@return the Object value_@throws SQLException in case of extraction failure_@see org.springframework.jdbc.support.JdbcUtils#getResultSetValue(java.sql.ResultSet, int, Class);protected Object getColumnValue(ResultSet rs, int index, PropertyDescriptor pd) throws SQLException {_		return JdbcUtils.getResultSetValue(rs, index, pd.getPropertyType())__	};retrieve,a,jdbc,object,value,for,the,specified,column,p,the,default,implementation,calls,link,jdbc,utils,get,result,set,value,java,sql,result,set,int,class,subclasses,may,override,this,to,check,specific,value,types,upfront,or,to,post,process,values,return,from,code,get,result,set,value,param,rs,is,the,result,set,holding,the,data,param,index,is,the,column,index,param,pd,the,bean,property,that,each,result,object,is,expected,to,match,or,code,null,if,none,specified,return,the,object,value,throws,sqlexception,in,case,of,extraction,failure,see,org,springframework,jdbc,support,jdbc,utils,get,result,set,value,java,sql,result,set,int,class;protected,object,get,column,value,result,set,rs,int,index,property,descriptor,pd,throws,sqlexception,return,jdbc,utils,get,result,set,value,rs,index,pd,get,property,type
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1328020251;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1356735495;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1357119239;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1368482696;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1368707595;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1403630813;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1436792383;Static factory method to create a new BeanPropertyRowMapper_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		BeanPropertyRowMapper<T> newInstance = new BeanPropertyRowMapper<T>()__		newInstance.setMappedClass(mappedClass)__		return newInstance__	};static,factory,method,to,create,a,new,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,bean,property,row,mapper,t,new,instance,new,bean,property,row,mapper,t,new,instance,set,mapped,class,mapped,class,return,new,instance
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1436815857;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<T>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,t,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1440518066;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<T>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,t,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1449660489;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<T>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,t,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1465492748;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<T>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,t,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1467730834;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1468948866;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1477690745;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1479997757;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1495868221;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1496837955;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1498780456;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1521457504;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1530174524;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass);1537186939;Static factory method to create a new {@code BeanPropertyRowMapper}_(with the mapped class specified only once)._@param mappedClass the class that each row should be mapped to;public static <T> BeanPropertyRowMapper<T> newInstance(Class<T> mappedClass) {_		return new BeanPropertyRowMapper<>(mappedClass)__	};static,factory,method,to,create,a,new,code,bean,property,row,mapper,with,the,mapped,class,specified,only,once,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,static,t,bean,property,row,mapper,t,new,instance,class,t,mapped,class,return,new,bean,property,row,mapper,mapped,class
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1495868221;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1496837955;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1498780456;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1521457504;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1530174524;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> @Nullable 	public ConversionService getConversionService();1537186939;Return a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} if none._@since 4.3;@Nullable_	public ConversionService getConversionService() {_		return this.conversionService__	};return,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,if,none,since,4,3;nullable,public,conversion,service,get,conversion,service,return,this,conversion,service
BeanPropertyRowMapper -> public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1328020251;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> public T mapRow(ResultSet rs, int rowNumber) throws SQLException;1357119239;Extract the values for all columns in the current row._<p>Utilizes public setters and result set metadata._@see java.sql.ResultSetMetaData;public T mapRow(ResultSet rs, int rowNumber) throws SQLException {_		Assert.state(this.mappedClass != null, "Mapped class was not specified")__		T mappedObject = BeanUtils.instantiate(this.mappedClass)__		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(mappedObject)__		initBeanWrapper(bw)___		ResultSetMetaData rsmd = rs.getMetaData()__		int columnCount = rsmd.getColumnCount()__		Set<String> populatedProperties = (isCheckFullyPopulated() ? new HashSet<String>() : null)___		for (int index = 1_ index <= columnCount_ index++) {_			String column = JdbcUtils.lookupColumnName(rsmd, index)__			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase())__			if (pd != null) {_				try {_					Object value = getColumnValue(rs, index, pd)__					if (logger.isDebugEnabled() && rowNumber == 0) {_						logger.debug("Mapping column '" + column + "' to property '" +_								pd.getName() + "' of type " + pd.getPropertyType())__					}_					try {_						bw.setPropertyValue(pd.getName(), value)__					}_					catch (TypeMismatchException e) {_						if (value == null && primitivesDefaultedForNullValue) {_							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +_									" and column '" + column + "' with value " + value +_									" when setting property '" + pd.getName() + "' of type " + pd.getPropertyType() +_									" on object: " + mappedObject)__						}_						else {_							throw e__						}_					}_					if (populatedProperties != null) {_						populatedProperties.add(pd.getName())__					}_				}_				catch (NotWritablePropertyException ex) {_					throw new DataRetrievalFailureException(_							"Unable to map column " + column + " to property " + pd.getName(), ex)__				}_			}_		}__		if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {_			throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " +_					"necessary to populate object of class [" + this.mappedClass + "]: " + this.mappedProperties)__		}__		return mappedObject__	};extract,the,values,for,all,columns,in,the,current,row,p,utilizes,public,setters,and,result,set,metadata,see,java,sql,result,set,meta,data;public,t,map,row,result,set,rs,int,row,number,throws,sqlexception,assert,state,this,mapped,class,null,mapped,class,was,not,specified,t,mapped,object,bean,utils,instantiate,this,mapped,class,bean,wrapper,bw,property,accessor,factory,for,bean,property,access,mapped,object,init,bean,wrapper,bw,result,set,meta,data,rsmd,rs,get,meta,data,int,column,count,rsmd,get,column,count,set,string,populated,properties,is,check,fully,populated,new,hash,set,string,null,for,int,index,1,index,column,count,index,string,column,jdbc,utils,lookup,column,name,rsmd,index,property,descriptor,pd,this,mapped,fields,get,column,replace,all,to,lower,case,if,pd,null,try,object,value,get,column,value,rs,index,pd,if,logger,is,debug,enabled,row,number,0,logger,debug,mapping,column,column,to,property,pd,get,name,of,type,pd,get,property,type,try,bw,set,property,value,pd,get,name,value,catch,type,mismatch,exception,e,if,value,null,primitives,defaulted,for,null,value,logger,debug,intercepted,type,mismatch,exception,for,row,row,number,and,column,column,with,value,value,when,setting,property,pd,get,name,of,type,pd,get,property,type,on,object,mapped,object,else,throw,e,if,populated,properties,null,populated,properties,add,pd,get,name,catch,not,writable,property,exception,ex,throw,new,data,retrieval,failure,exception,unable,to,map,column,column,to,property,pd,get,name,ex,if,populated,properties,null,populated,properties,equals,this,mapped,properties,throw,new,invalid,data,access,api,usage,exception,given,result,set,does,not,contain,all,fields,necessary,to,populate,object,of,class,this,mapped,class,this,mapped,properties,return,mapped,object
BeanPropertyRowMapper -> protected String underscoreName(String name);1436792383;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1436815857;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1440518066;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1449660489;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1465492748;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1467730834;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1468948866;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1477690745;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1479997757;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1495868221;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1496837955;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1498780456;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1521457504;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1530174524;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected String underscoreName(String name);1537186939;Convert a name in camelCase to an underscored name in lower case._Any upper case letters are converted to lower case with a preceding underscore._@param name the original name_@return the converted name_@since 4.2_@see #lowerCaseName;protected String underscoreName(String name) {_		if (!StringUtils.hasLength(name)) {_			return ""__		}_		StringBuilder result = new StringBuilder()__		result.append(lowerCaseName(name.substring(0, 1)))__		for (int i = 1_ i < name.length()_ i++) {_			String s = name.substring(i, i + 1)__			String slc = lowerCaseName(s)__			if (!s.equals(slc)) {_				result.append("_").append(slc)__			}_			else {_				result.append(s)__			}_		}_		return result.toString()__	};convert,a,name,in,camel,case,to,an,underscored,name,in,lower,case,any,upper,case,letters,are,converted,to,lower,case,with,a,preceding,underscore,param,name,the,original,name,return,the,converted,name,since,4,2,see,lower,case,name;protected,string,underscore,name,string,name,if,string,utils,has,length,name,return,string,builder,result,new,string,builder,result,append,lower,case,name,name,substring,0,1,for,int,i,1,i,name,length,i,string,s,name,substring,i,i,1,string,slc,lower,case,name,s,if,s,equals,slc,result,append,append,slc,else,result,append,s,return,result,to,string
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1328020251;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1356735495;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1357119239;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1368482696;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1368707595;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1403630813;Initialize the mapping metadata for the given class._@param mappedClass the mapped class.;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(pd.getName().toLowerCase(), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!pd.getName().toLowerCase().equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,pd,get,name,to,lower,case,pd,string,underscored,name,underscore,name,pd,get,name,if,pd,get,name,to,lower,case,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1436792383;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1436815857;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1440518066;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1449660489;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1465492748;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<String, PropertyDescriptor>()__		this.mappedProperties = new HashSet<String>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,string,property,descriptor,this,mapped,properties,new,hash,set,string,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1467730834;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1468948866;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1477690745;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1479997757;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1495868221;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1496837955;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1498780456;Initialize the mapping metadata for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,metadata,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1521457504;Initialize the mapping meta-data for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,meta,data,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1530174524;Initialize the mapping meta-data for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,meta,data,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> protected void initialize(Class<T> mappedClass);1537186939;Initialize the mapping meta-data for the given class._@param mappedClass the mapped class;protected void initialize(Class<T> mappedClass) {_		this.mappedClass = mappedClass__		this.mappedFields = new HashMap<>()__		this.mappedProperties = new HashSet<>()__		PropertyDescriptor[] pds = BeanUtils.getPropertyDescriptors(mappedClass)__		for (PropertyDescriptor pd : pds) {_			if (pd.getWriteMethod() != null) {_				this.mappedFields.put(lowerCaseName(pd.getName()), pd)__				String underscoredName = underscoreName(pd.getName())__				if (!lowerCaseName(pd.getName()).equals(underscoredName)) {_					this.mappedFields.put(underscoredName, pd)__				}_				this.mappedProperties.add(pd.getName())__			}_		}_	};initialize,the,mapping,meta,data,for,the,given,class,param,mapped,class,the,mapped,class;protected,void,initialize,class,t,mapped,class,this,mapped,class,mapped,class,this,mapped,fields,new,hash,map,this,mapped,properties,new,hash,set,property,descriptor,pds,bean,utils,get,property,descriptors,mapped,class,for,property,descriptor,pd,pds,if,pd,get,write,method,null,this,mapped,fields,put,lower,case,name,pd,get,name,pd,string,underscored,name,underscore,name,pd,get,name,if,lower,case,name,pd,get,name,equals,underscored,name,this,mapped,fields,put,underscored,name,pd,this,mapped,properties,add,pd,get,name
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1328020251;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1356735495;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1357119239;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1368482696;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1368707595;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1403630813;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1436792383;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1436815857;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1440518066;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (!this.mappedClass.equals(mappedClass)) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,equals,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1449660489;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1465492748;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1467730834;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1468948866;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1477690745;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1479997757;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1495868221;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1496837955;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1498780456;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1521457504;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1530174524;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> public void setMappedClass(Class<T> mappedClass);1537186939;Set the class that each row should be mapped to.;public void setMappedClass(Class<T> mappedClass) {_		if (this.mappedClass == null) {_			initialize(mappedClass)__		}_		else {_			if (this.mappedClass != mappedClass) {_				throw new InvalidDataAccessApiUsageException("The mapped class can not be reassigned to map to " +_						mappedClass + " since it is already providing mapping for " + this.mappedClass)__			}_		}_	};set,the,class,that,each,row,should,be,mapped,to;public,void,set,mapped,class,class,t,mapped,class,if,this,mapped,class,null,initialize,mapped,class,else,if,this,mapped,class,mapped,class,throw,new,invalid,data,access,api,usage,exception,the,mapped,class,can,not,be,reassigned,to,map,to,mapped,class,since,it,is,already,providing,mapping,for,this,mapped,class
BeanPropertyRowMapper -> @Nullable 	public final Class<T> getMappedClass();1498780456;Get the class that we are mapping to.;@Nullable_	public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;nullable,public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> @Nullable 	public final Class<T> getMappedClass();1521457504;Get the class that we are mapping to.;@Nullable_	public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;nullable,public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> @Nullable 	public final Class<T> getMappedClass();1530174524;Get the class that we are mapping to.;@Nullable_	public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;nullable,public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> @Nullable 	public final Class<T> getMappedClass();1537186939;Get the class that we are mapping to.;@Nullable_	public final Class<T> getMappedClass() {_		return this.mappedClass__	};get,the,class,that,we,are,mapping,to;nullable,public,final,class,t,get,mapped,class,return,this,mapped,class
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1495868221;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1496837955;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1498780456;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1521457504;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1530174524;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public void setConversionService(@Nullable ConversionService conversionService);1537186939;Set a {@link ConversionService} for binding JDBC values to bean properties,_or {@code null} for none._<p>Default is a {@link DefaultConversionService}, as of Spring 4.3. This_provides support for {@code java.time} conversion and other special types._@since 4.3_@see #initBeanWrapper(BeanWrapper);public void setConversionService(@Nullable ConversionService conversionService) {_		this.conversionService = conversionService__	};set,a,link,conversion,service,for,binding,jdbc,values,to,bean,properties,or,code,null,for,none,p,default,is,a,link,default,conversion,service,as,of,spring,4,3,this,provides,support,for,code,java,time,conversion,and,other,special,types,since,4,3,see,init,bean,wrapper,bean,wrapper;public,void,set,conversion,service,nullable,conversion,service,conversion,service,this,conversion,service,conversion,service
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1328020251;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1356735495;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1357119239;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1368482696;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1368707595;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1403630813;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1436792383;Create a new BeanPropertyRowMapper, accepting unpopulated properties_in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1436815857;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1440518066;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1449660489;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1465492748;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1467730834;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1468948866;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1477690745;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1479997757;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1495868221;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1496837955;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1498780456;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1521457504;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1530174524;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
BeanPropertyRowMapper -> public BeanPropertyRowMapper(Class<T> mappedClass);1537186939;Create a new {@code BeanPropertyRowMapper}, accepting unpopulated_properties in the target bean._<p>Consider using the {@link #newInstance} factory method instead,_which allows for specifying the mapped type once only._@param mappedClass the class that each row should be mapped to;public BeanPropertyRowMapper(Class<T> mappedClass) {_		initialize(mappedClass)__	};create,a,new,code,bean,property,row,mapper,accepting,unpopulated,properties,in,the,target,bean,p,consider,using,the,link,new,instance,factory,method,instead,which,allows,for,specifying,the,mapped,type,once,only,param,mapped,class,the,class,that,each,row,should,be,mapped,to;public,bean,property,row,mapper,class,t,mapped,class,initialize,mapped,class
