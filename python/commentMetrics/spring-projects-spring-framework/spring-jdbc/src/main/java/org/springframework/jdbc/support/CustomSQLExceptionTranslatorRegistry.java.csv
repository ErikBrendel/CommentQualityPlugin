commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Return the singleton instance.  */ ;/**  * Return the singleton instance.  */ public static CustomSQLExceptionTranslatorRegistry getInstance() {     return instance. }
true;public;2;11;/**  * Register a new custom translator for the specified database name.  * @param dbName the database name  * @param translator the custom translator  */ ;/**  * Register a new custom translator for the specified database name.  * @param dbName the database name  * @param translator the custom translator  */ public void registerTranslator(String dbName, SQLExceptionTranslator translator) {     SQLExceptionTranslator replaced = this.translatorMap.put(dbName, translator).     if (replaced != null) {         logger.debug("Replacing custom translator [" + replaced + "] for database '" + dbName + "' with [" + translator + "]").     } else {         logger.debug("Adding custom translator of type [" + translator.getClass().getName() + "] for database '" + dbName + "'").     } }
true;public;1;4;/**  * Find a custom translator for the specified database.  * @param dbName the database name  * @return the custom translator, or {@code null} if none found  */ ;/**  * Find a custom translator for the specified database.  * @param dbName the database name  * @return the custom translator, or {@code null} if none found  */ @Nullable public SQLExceptionTranslator findTranslatorForDatabase(String dbName) {     return this.translatorMap.get(dbName). }
