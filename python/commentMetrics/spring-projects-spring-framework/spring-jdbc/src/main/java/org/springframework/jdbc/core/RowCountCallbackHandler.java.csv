commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;15;/**  * Implementation of ResultSetCallbackHandler.  * Work out column size if this is the first row, otherwise just count rows.  * <p>Subclasses can perform custom extraction or processing  * by overriding the {@code processRow(ResultSet, int)} method.  * @see #processRow(java.sql.ResultSet, int)  */ ;/**  * Implementation of ResultSetCallbackHandler.  * Work out column size if this is the first row, otherwise just count rows.  * <p>Subclasses can perform custom extraction or processing  * by overriding the {@code processRow(ResultSet, int)} method.  * @see #processRow(java.sql.ResultSet, int)  */ @Override public final void processRow(ResultSet rs) throws SQLException {     if (this.rowCount == 0) {         ResultSetMetaData rsmd = rs.getMetaData().         this.columnCount = rsmd.getColumnCount().         this.columnTypes = new int[this.columnCount].         this.columnNames = new String[this.columnCount].         for (int i = 0. i < this.columnCount. i++) {             this.columnTypes[i] = rsmd.getColumnType(i + 1).             this.columnNames[i] = JdbcUtils.lookupColumnName(rsmd, i + 1).         }     // could also get column names     }     processRow(rs, this.rowCount++). }
true;protected;2;2;/**  * Subclasses may override this to perform custom extraction  * or processing. This class's implementation does nothing.  * @param rs the ResultSet to extract data from. This method is  * invoked for each row  * @param rowNum number of the current row (starting from 0)  */ ;/**  * Subclasses may override this to perform custom extraction  * or processing. This class's implementation does nothing.  * @param rs the ResultSet to extract data from. This method is  * invoked for each row  * @param rowNum number of the current row (starting from 0)  */ protected void processRow(ResultSet rs, int rowNum) throws SQLException { }
true;public,final;0;4;/**  * Return the types of the columns as java.sql.Types constants  * Valid after processRow is invoked the first time.  * @return the types of the columns as java.sql.Types constants.  * <b>Indexed from 0 to n-1.</b>  */ ;/**  * Return the types of the columns as java.sql.Types constants  * Valid after processRow is invoked the first time.  * @return the types of the columns as java.sql.Types constants.  * <b>Indexed from 0 to n-1.</b>  */ @Nullable public final int[] getColumnTypes() {     return this.columnTypes. }
true;public,final;0;4;/**  * Return the names of the columns.  * Valid after processRow is invoked the first time.  * @return the names of the columns.  * <b>Indexed from 0 to n-1.</b>  */ ;/**  * Return the names of the columns.  * Valid after processRow is invoked the first time.  * @return the names of the columns.  * <b>Indexed from 0 to n-1.</b>  */ @Nullable public final String[] getColumnNames() {     return this.columnNames. }
true;public,final;0;3;/**  * Return the row count of this ResultSet.  * Only valid after processing is complete  * @return the number of rows in this ResultSet  */ ;/**  * Return the row count of this ResultSet.  * Only valid after processing is complete  * @return the number of rows in this ResultSet  */ public final int getRowCount() {     return this.rowCount. }
true;public,final;0;3;/**  * Return the number of columns in this result set.  * Valid once we've seen the first row,  * so subclasses can use it during processing  * @return the number of columns in this result set  */ ;/**  * Return the number of columns in this result set.  * Valid once we've seen the first row,  * so subclasses can use it during processing  * @return the number of columns in this result set  */ public final int getColumnCount() {     return this.columnCount. }
