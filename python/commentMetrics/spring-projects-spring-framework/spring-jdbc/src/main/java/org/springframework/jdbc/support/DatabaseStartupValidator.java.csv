commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the DataSource to validate.  */ ;/**  * Set the DataSource to validate.  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource. }
true;public;1;3;/**  * Set the SQL query string to use for validation.  */ ;/**  * Set the SQL query string to use for validation.  */ public void setValidationQuery(String validationQuery) {     this.validationQuery = validationQuery. }
true;public;1;3;/**  * Set the interval between validation runs (in seconds).  * Default is {@value #DEFAULT_INTERVAL}.  */ ;/**  * Set the interval between validation runs (in seconds).  * Default is {@value #DEFAULT_INTERVAL}.  */ public void setInterval(int interval) {     this.interval = interval. }
true;public;1;3;/**  * Set the timeout (in seconds) after which a fatal exception  * will be thrown. Default is {@value #DEFAULT_TIMEOUT}.  */ ;/**  * Set the timeout (in seconds) after which a fatal exception  * will be thrown. Default is {@value #DEFAULT_TIMEOUT}.  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
true;public;0;66;/**  * Check whether the validation query can be executed on a Connection  * from the specified DataSource, with the specified interval between  * checks, until the specified timeout.  */ ;/**  * Check whether the validation query can be executed on a Connection  * from the specified DataSource, with the specified interval between  * checks, until the specified timeout.  */ @Override public void afterPropertiesSet() {     if (this.dataSource == null) {         throw new IllegalArgumentException("Property 'dataSource' is required").     }     if (this.validationQuery == null) {         throw new IllegalArgumentException("Property 'validationQuery' is required").     }     try {         boolean validated = false.         long beginTime = System.currentTimeMillis().         long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout).         SQLException latestEx = null.         while (!validated && System.currentTimeMillis() < deadLine) {             Connection con = null.             Statement stmt = null.             try {                 con = this.dataSource.getConnection().                 if (con == null) {                     throw new CannotGetJdbcConnectionException("Failed to execute validation query: " + "DataSource returned null from getConnection(): " + this.dataSource).                 }                 stmt = con.createStatement().                 stmt.execute(this.validationQuery).                 validated = true.             } catch (SQLException ex) {                 latestEx = ex.                 if (logger.isDebugEnabled()) {                     logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex).                 }                 if (logger.isInfoEnabled()) {                     float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000.                     if (rest > this.interval) {                         logger.info("Database has not started up yet - retrying in " + this.interval + " seconds (timeout in " + rest + " seconds)").                     }                 }             } finally {                 JdbcUtils.closeStatement(stmt).                 JdbcUtils.closeConnection(con).             }             if (!validated) {                 TimeUnit.SECONDS.sleep(this.interval).             }         }         if (!validated) {             throw new CannotGetJdbcConnectionException("Database has not started up within " + this.timeout + " seconds", latestEx).         }         if (logger.isInfoEnabled()) {             float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000.             logger.info("Database startup detected after " + duration + " seconds").         }     } catch (InterruptedException ex) {         // Re-interrupt current thread, to allow other threads to react.         Thread.currentThread().interrupt().     } }
