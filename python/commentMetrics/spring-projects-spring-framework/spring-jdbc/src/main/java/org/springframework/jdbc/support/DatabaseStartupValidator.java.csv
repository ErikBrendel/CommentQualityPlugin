# id;timestamp;commentText;codeText;commentWords;codeWords
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1328020251;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1356735495;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1357119239;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1368482696;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1413848647;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1496955101;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1498780456;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1506097334;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1520537868;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1525511240;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1530174524;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1532091916;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1532612255;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setDataSource(DataSource dataSource);1532612742;Set the DataSource to validate.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,data,source,to,validate;public,void,set,data,source,data,source,data,source,this,data,source,data,source
DatabaseStartupValidator -> public void setTimeout(int timeout);1328020251;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1356735495;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1357119239;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1368482696;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1413848647;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1496955101;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1498780456;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1506097334;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1520537868;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is 60.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,60;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1525511240;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is {@value #DEFAULT_TIMEOUT}.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,value;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1530174524;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is {@value #DEFAULT_TIMEOUT}.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,value;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1532091916;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is {@value #DEFAULT_TIMEOUT}.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,value;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1532612255;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is {@value #DEFAULT_TIMEOUT}.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,value;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void setTimeout(int timeout);1532612742;Set the timeout (in seconds) after which a fatal exception_will be thrown. Default is {@value #DEFAULT_TIMEOUT}.;public void setTimeout(int timeout) {_		this.timeout = timeout__	};set,the,timeout,in,seconds,after,which,a,fatal,exception,will,be,thrown,default,is,value;public,void,set,timeout,int,timeout,this,timeout,timeout
DatabaseStartupValidator -> public void afterPropertiesSet();1328020251;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> public void afterPropertiesSet();1357119239;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> public void setInterval(int interval);1328020251;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1356735495;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1357119239;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1368482696;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1413848647;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1496955101;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1498780456;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1506097334;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1520537868;Set the interval between validation runs (in seconds)._Default is 1.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,1;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1525511240;Set the interval between validation runs (in seconds)._Default is {@value #DEFAULT_INTERVAL}.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,value;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1530174524;Set the interval between validation runs (in seconds)._Default is {@value #DEFAULT_INTERVAL}.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,value;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1532091916;Set the interval between validation runs (in seconds)._Default is {@value #DEFAULT_INTERVAL}.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,value;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1532612255;Set the interval between validation runs (in seconds)._Default is {@value #DEFAULT_INTERVAL}.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,value;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> public void setInterval(int interval);1532612742;Set the interval between validation runs (in seconds)._Default is {@value #DEFAULT_INTERVAL}.;public void setInterval(int interval) {_		this.interval = interval__	};set,the,interval,between,validation,runs,in,seconds,default,is,value;public,void,set,interval,int,interval,this,interval,interval
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1356735495;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1368482696;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1413848647;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1496955101;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + this.dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,this,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1498780456;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("dataSource is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("validationQuery is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + this.dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,this,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1506097334;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		DataSource dataSource = this.dataSource__		if (dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + this.timeout * 1000__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(this.interval * 1000)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime) / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,data,source,data,source,this,data,source,if,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,this,timeout,1000,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,this,interval,1000,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1520537868;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		DataSource dataSource = this.dataSource__		if (dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__					if (rest > this.interval) {_						logger.warn("Database has not started up yet - retrying in " + this.interval +_								" seconds (timeout in " + rest + " seconds)")__					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval))__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			float duration = (System.currentTimeMillis() - beginTime)*1f / 1000__			if (logger.isInfoEnabled()) {_				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,data,source,data,source,this,data,source,if,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,logger,debug,validation,query,this,validation,query,threw,exception,ex,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,time,unit,seconds,to,millis,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,float,duration,system,current,time,millis,begin,time,1f,1000,if,logger,is,info,enabled,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1525511240;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		DataSource dataSource = this.dataSource__		if (dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					if (logger.isDebugEnabled()) {_						logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					}_					if (logger.isWarnEnabled()) {_						float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__						if (rest > this.interval) {_							logger.warn("Database has not started up yet - retrying in " + this.interval +_									" seconds (timeout in " + rest + " seconds)")__						}_					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval))__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			if (logger.isInfoEnabled()) {_				float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000__				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,data,source,data,source,this,data,source,if,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,if,logger,is,debug,enabled,logger,debug,validation,query,this,validation,query,threw,exception,ex,if,logger,is,warn,enabled,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,time,unit,seconds,to,millis,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,if,logger,is,info,enabled,float,duration,float,system,current,time,millis,begin,time,1000,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1530174524;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		DataSource dataSource = this.dataSource__		if (dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					if (logger.isDebugEnabled()) {_						logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					}_					if (logger.isWarnEnabled()) {_						float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__						if (rest > this.interval) {_							logger.warn("Database has not started up yet - retrying in " + this.interval +_									" seconds (timeout in " + rest + " seconds)")__						}_					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval))__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			if (logger.isInfoEnabled()) {_				float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000__				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,data,source,data,source,this,data,source,if,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,if,logger,is,debug,enabled,logger,debug,validation,query,this,validation,query,threw,exception,ex,if,logger,is,warn,enabled,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,warn,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,time,unit,seconds,to,millis,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,if,logger,is,info,enabled,float,duration,float,system,current,time,millis,begin,time,1000,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1532091916;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		DataSource dataSource = this.dataSource__		if (dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					if (logger.isDebugEnabled()) {_						logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					}_					if (logger.isWarnEnabled()) {_						float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__						if (rest > this.interval) {_							logger.info("Database has not started up yet - retrying in " + this.interval +_									" seconds (timeout in " + rest + " seconds)")__						}_					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval))__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			if (logger.isInfoEnabled()) {_				float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000__				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,data,source,data,source,this,data,source,if,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,if,logger,is,debug,enabled,logger,debug,validation,query,this,validation,query,threw,exception,ex,if,logger,is,warn,enabled,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,info,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,thread,sleep,time,unit,seconds,to,millis,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,if,logger,is,info,enabled,float,duration,float,system,current,time,millis,begin,time,1000,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1532612255;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + this.dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					if (logger.isDebugEnabled()) {_						logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					}_					if (logger.isWarnEnabled()) {_						float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__						if (rest > this.interval) {_							logger.info("Database has not started up yet - retrying in " + this.interval +_									" seconds (timeout in " + rest + " seconds)")__						}_					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					TimeUnit.SECONDS.sleep(this.interval)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			if (logger.isInfoEnabled()) {_				float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000__				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,this,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,if,logger,is,debug,enabled,logger,debug,validation,query,this,validation,query,threw,exception,ex,if,logger,is,warn,enabled,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,info,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,time,unit,seconds,sleep,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,if,logger,is,info,enabled,float,duration,float,system,current,time,millis,begin,time,1000,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> @Override 	public void afterPropertiesSet();1532612742;Check whether the validation query can be executed on a Connection_from the specified DataSource, with the specified interval between_checks, until the specified timeout.;@Override_	public void afterPropertiesSet() {_		if (this.dataSource == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (this.validationQuery == null) {_			throw new IllegalArgumentException("Property 'validationQuery' is required")__		}__		try {_			boolean validated = false__			long beginTime = System.currentTimeMillis()__			long deadLine = beginTime + TimeUnit.SECONDS.toMillis(this.timeout)__			SQLException latestEx = null___			while (!validated && System.currentTimeMillis() < deadLine) {_				Connection con = null__				Statement stmt = null__				try {_					con = this.dataSource.getConnection()__					if (con == null) {_						throw new CannotGetJdbcConnectionException("Failed to execute validation query: " +_								"DataSource returned null from getConnection(): " + this.dataSource)__					}_					stmt = con.createStatement()__					stmt.execute(this.validationQuery)__					validated = true__				}_				catch (SQLException ex) {_					latestEx = ex__					if (logger.isDebugEnabled()) {_						logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex)__					}_					if (logger.isInfoEnabled()) {_						float rest = ((float) (deadLine - System.currentTimeMillis())) / 1000__						if (rest > this.interval) {_							logger.info("Database has not started up yet - retrying in " + this.interval +_									" seconds (timeout in " + rest + " seconds)")__						}_					}_				}_				finally {_					JdbcUtils.closeStatement(stmt)__					JdbcUtils.closeConnection(con)__				}__				if (!validated) {_					TimeUnit.SECONDS.sleep(this.interval)__				}_			}__			if (!validated) {_				throw new CannotGetJdbcConnectionException(_						"Database has not started up within " + this.timeout + " seconds", latestEx)__			}__			if (logger.isInfoEnabled()) {_				float duration = ((float) (System.currentTimeMillis() - beginTime)) / 1000__				logger.info("Database startup detected after " + duration + " seconds")__			}_		}_		catch (InterruptedException ex) {_			_			Thread.currentThread().interrupt()__		}_	};check,whether,the,validation,query,can,be,executed,on,a,connection,from,the,specified,data,source,with,the,specified,interval,between,checks,until,the,specified,timeout;override,public,void,after,properties,set,if,this,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,this,validation,query,null,throw,new,illegal,argument,exception,property,validation,query,is,required,try,boolean,validated,false,long,begin,time,system,current,time,millis,long,dead,line,begin,time,time,unit,seconds,to,millis,this,timeout,sqlexception,latest,ex,null,while,validated,system,current,time,millis,dead,line,connection,con,null,statement,stmt,null,try,con,this,data,source,get,connection,if,con,null,throw,new,cannot,get,jdbc,connection,exception,failed,to,execute,validation,query,data,source,returned,null,from,get,connection,this,data,source,stmt,con,create,statement,stmt,execute,this,validation,query,validated,true,catch,sqlexception,ex,latest,ex,ex,if,logger,is,debug,enabled,logger,debug,validation,query,this,validation,query,threw,exception,ex,if,logger,is,info,enabled,float,rest,float,dead,line,system,current,time,millis,1000,if,rest,this,interval,logger,info,database,has,not,started,up,yet,retrying,in,this,interval,seconds,timeout,in,rest,seconds,finally,jdbc,utils,close,statement,stmt,jdbc,utils,close,connection,con,if,validated,time,unit,seconds,sleep,this,interval,if,validated,throw,new,cannot,get,jdbc,connection,exception,database,has,not,started,up,within,this,timeout,seconds,latest,ex,if,logger,is,info,enabled,float,duration,float,system,current,time,millis,begin,time,1000,logger,info,database,startup,detected,after,duration,seconds,catch,interrupted,exception,ex,thread,current,thread,interrupt
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1328020251;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1356735495;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1357119239;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1368482696;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1413848647;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1496955101;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1498780456;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1506097334;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1520537868;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1525511240;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1530174524;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1532091916;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1532612255;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
DatabaseStartupValidator -> public void setValidationQuery(String validationQuery);1532612742;Set the SQL query string to use for validation.;public void setValidationQuery(String validationQuery) {_		this.validationQuery = validationQuery__	};set,the,sql,query,string,to,use,for,validation;public,void,set,validation,query,string,validation,query,this,validation,query,validation,query
