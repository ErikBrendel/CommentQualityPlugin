# id;timestamp;commentText;codeText;commentWords;codeWords
SingleConnectionDataSource -> protected boolean isSuppressClose();1328020251;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1356735495;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1357119239;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1367508310;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1368482696;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1385412762;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1487178248;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1495868221;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1496837955;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1498780456;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1530174524;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> protected boolean isSuppressClose();1532091916;Return whether the returned Connection will be a close-suppressing proxy_or the physical Connection.;protected boolean isSuppressClose() {_		return this.suppressClose__	};return,whether,the,returned,connection,will,be,a,close,suppressing,proxy,or,the,physical,connection;protected,boolean,is,suppress,close,return,this,suppress,close
SingleConnectionDataSource -> @Override 	public void destroy();1356735495;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1368482696;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1385412762;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1487178248;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1495868221;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1496837955;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1498780456;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1530174524;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public void destroy();1532091916;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;@Override_	public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;override,public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1328020251;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1356735495;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1357119239;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1367508310;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1368482696;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1385412762;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1487178248;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1495868221;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1496837955;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1498780456;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1530174524;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1532091916;Specifying a custom username and password doesn't make sense_with a single Connection. Returns the single Connection if given_the same username and password_ throws a SQLException else.;@Override_	public Connection getConnection(String username, String password) throws SQLException {_		if (ObjectUtils.nullSafeEquals(username, getUsername()) &&_				ObjectUtils.nullSafeEquals(password, getPassword())) {_			return getConnection()__		}_		else {_			throw new SQLException("SingleConnectionDataSource does not support custom username and password")__		}_	};specifying,a,custom,username,and,password,doesn,t,make,sense,with,a,single,connection,returns,the,single,connection,if,given,the,same,username,and,password,throws,a,sqlexception,else;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,if,object,utils,null,safe,equals,username,get,username,object,utils,null,safe,equals,password,get,password,return,get,connection,else,throw,new,sqlexception,single,connection,data,source,does,not,support,custom,username,and,password
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1328020251;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or <code>null</code> if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,code,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1356735495;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1357119239;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1367508310;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1368482696;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1385412762;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> protected Boolean getAutoCommitValue();1487178248;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1356735495;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1368482696;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1385412762;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1487178248;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1495868221;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1496837955;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1498780456;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1530174524;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> @Override 	public boolean shouldClose(Connection con);1532091916;This is a single Connection: Do not close it when returning to the "pool".;@Override_	public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;override,public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1328020251;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1356735495;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1357119239;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1367508310;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1368482696;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1385412762;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1487178248;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1495868221;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1496837955;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1498780456;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1530174524;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> protected Connection getCloseSuppressingConnectionProxy(Connection target);1532091916;Wrap the given Connection with a proxy that delegates every method call to it_but suppresses close calls._@param target the original Connection to wrap_@return the wrapped Connection;protected Connection getCloseSuppressingConnectionProxy(Connection target) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new CloseSuppressingInvocationHandler(target))__	};wrap,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,suppresses,close,calls,param,target,the,original,connection,to,wrap,return,the,wrapped,connection;protected,connection,get,close,suppressing,connection,proxy,connection,target,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,close,suppressing,invocation,handler,target
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1328020251;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1356735495;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1357119239;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1367508310;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1368482696;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1385412762;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1487178248;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1495868221;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1496837955;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1498780456;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1530174524;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose);1532091916;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, String username, String password, boolean suppressClose) {_		super(url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,string,username,string,password,boolean,suppress,close,super,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1328020251;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses <code>close()</code> calls (to allow for normal <code>close()</code>_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,code,calls,to,allow,for,normal,code,close,code,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1356735495;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1357119239;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1367508310;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1368482696;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1385412762;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1487178248;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1495868221;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1496837955;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1498780456;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1530174524;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> public SingleConnectionDataSource(Connection target, boolean suppressClose);1532091916;Create a new SingleConnectionDataSource with a given Connection._@param target underlying target Connection_@param suppressClose if the Connection should be wrapped with a Connection that_suppresses {@code close()} calls (to allow for normal {@code close()}_usage in applications that expect a pooled Connection but do not know our_SmartDataSource interface);public SingleConnectionDataSource(Connection target, boolean suppressClose) {_		Assert.notNull(target, "Connection must not be null")__		this.target = target__		this.suppressClose = suppressClose__		this.connection = (suppressClose ? getCloseSuppressingConnectionProxy(target) : target)__	};create,a,new,single,connection,data,source,with,a,given,connection,param,target,underlying,target,connection,param,suppress,close,if,the,connection,should,be,wrapped,with,a,connection,that,suppresses,code,close,calls,to,allow,for,normal,code,close,usage,in,applications,that,expect,a,pooled,connection,but,do,not,know,our,smart,data,source,interface;public,single,connection,data,source,connection,target,boolean,suppress,close,assert,not,null,target,connection,must,not,be,null,this,target,target,this,suppress,close,suppress,close,this,connection,suppress,close,get,close,suppressing,connection,proxy,target,target
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1328020251;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1356735495;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1357119239;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1367508310;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1368482696;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1385412762;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1487178248;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1495868221;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1496837955;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1498780456;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1530174524;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> protected void prepareConnection(Connection con) throws SQLException;1532091916;Prepare the given Connection before it is exposed._<p>The default implementation applies the auto-commit flag, if necessary._Can be overridden in subclasses._@param con the Connection to prepare_@see #setAutoCommit;protected void prepareConnection(Connection con) throws SQLException {_		Boolean autoCommit = getAutoCommitValue()__		if (autoCommit != null && con.getAutoCommit() != autoCommit) {_			con.setAutoCommit(autoCommit)__		}_	};prepare,the,given,connection,before,it,is,exposed,p,the,default,implementation,applies,the,auto,commit,flag,if,necessary,can,be,overridden,in,subclasses,param,con,the,connection,to,prepare,see,set,auto,commit;protected,void,prepare,connection,connection,con,throws,sqlexception,boolean,auto,commit,get,auto,commit,value,if,auto,commit,null,con,get,auto,commit,auto,commit,con,set,auto,commit,auto,commit
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1328020251;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1356735495;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1357119239;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1367508310;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1368482696;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1385412762;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1487178248;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1495868221;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1496837955;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1498780456;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1530174524;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource(String url, boolean suppressClose);1532091916;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@see java.sql.DriverManager#getConnection(String, String, String);public SingleConnectionDataSource(String url, boolean suppressClose) {_		super(url)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,see,java,sql,driver,manager,get,connection,string,string,string;public,single,connection,data,source,string,url,boolean,suppress,close,super,url,this,suppress,close,suppress,close
SingleConnectionDataSource -> private void closeConnection();1328020251;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1356735495;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1357119239;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1367508310;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1368482696;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1385412762;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1487178248;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1495868221;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1496837955;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1498780456;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1530174524;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.warn("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,warn,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> private void closeConnection();1532091916;Close the underlying shared Connection.;private void closeConnection() {_		if (this.target != null) {_			try {_				this.target.close()__			}_			catch (Throwable ex) {_				logger.info("Could not close shared JDBC Connection", ex)__			}_		}_	};close,the,underlying,shared,connection;private,void,close,connection,if,this,target,null,try,this,target,close,catch,throwable,ex,logger,info,could,not,close,shared,jdbc,connection,ex
SingleConnectionDataSource -> @Nullable 	protected Boolean getAutoCommitValue();1495868221;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;@Nullable_	protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;nullable,protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Nullable 	protected Boolean getAutoCommitValue();1496837955;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;@Nullable_	protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;nullable,protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Nullable 	protected Boolean getAutoCommitValue();1498780456;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;@Nullable_	protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;nullable,protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Nullable 	protected Boolean getAutoCommitValue();1530174524;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;@Nullable_	protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;nullable,protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Nullable 	protected Boolean getAutoCommitValue();1532091916;Return whether the returned Connection's "autoCommit" setting should be overridden._@return the "autoCommit" value, or {@code null} if none to be applied;@Nullable_	protected Boolean getAutoCommitValue() {_		return this.autoCommit__	};return,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden,return,the,auto,commit,value,or,code,null,if,none,to,be,applied;nullable,protected,boolean,get,auto,commit,value,return,this,auto,commit
SingleConnectionDataSource -> @Deprecated 	public SingleConnectionDataSource( 			String driverClassName, String url, String username, String password, boolean suppressClose);1328020251;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param driverClassName the JDBC driver class name_@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@deprecated since Spring 2.5. Driver parameter usage is generally not recommended_for a SingleConnectionDataSource. If you insist on using driver parameters_directly, set up the Driver class manually before invoking this DataSource._@see java.sql.DriverManager#getConnection(String, String, String);@Deprecated_	public SingleConnectionDataSource(_			String driverClassName, String url, String username, String password, boolean suppressClose) {__		super(driverClassName, url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,driver,class,name,the,jdbc,driver,class,name,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,deprecated,since,spring,2,5,driver,parameter,usage,is,generally,not,recommended,for,a,single,connection,data,source,if,you,insist,on,using,driver,parameters,directly,set,up,the,driver,class,manually,before,invoking,this,data,source,see,java,sql,driver,manager,get,connection,string,string,string;deprecated,public,single,connection,data,source,string,driver,class,name,string,url,string,username,string,password,boolean,suppress,close,super,driver,class,name,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> @Deprecated 	public SingleConnectionDataSource( 			String driverClassName, String url, String username, String password, boolean suppressClose);1356735495;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param driverClassName the JDBC driver class name_@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@deprecated since Spring 2.5. Driver parameter usage is generally not recommended_for a SingleConnectionDataSource. If you insist on using driver parameters_directly, set up the Driver class manually before invoking this DataSource._@see java.sql.DriverManager#getConnection(String, String, String);@Deprecated_	public SingleConnectionDataSource(_			String driverClassName, String url, String username, String password, boolean suppressClose) {__		super(driverClassName, url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,driver,class,name,the,jdbc,driver,class,name,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,deprecated,since,spring,2,5,driver,parameter,usage,is,generally,not,recommended,for,a,single,connection,data,source,if,you,insist,on,using,driver,parameters,directly,set,up,the,driver,class,manually,before,invoking,this,data,source,see,java,sql,driver,manager,get,connection,string,string,string;deprecated,public,single,connection,data,source,string,driver,class,name,string,url,string,username,string,password,boolean,suppress,close,super,driver,class,name,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> @Deprecated 	public SingleConnectionDataSource( 			String driverClassName, String url, String username, String password, boolean suppressClose);1357119239;Create a new SingleConnectionDataSource with the given standard_DriverManager parameters._@param driverClassName the JDBC driver class name_@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@param suppressClose if the returned Connection should be a_close-suppressing proxy or the physical Connection_@deprecated since Spring 2.5. Driver parameter usage is generally not recommended_for a SingleConnectionDataSource. If you insist on using driver parameters_directly, set up the Driver class manually before invoking this DataSource._@see java.sql.DriverManager#getConnection(String, String, String);@Deprecated_	public SingleConnectionDataSource(_			String driverClassName, String url, String username, String password, boolean suppressClose) {__		super(driverClassName, url, username, password)__		this.suppressClose = suppressClose__	};create,a,new,single,connection,data,source,with,the,given,standard,driver,manager,parameters,param,driver,class,name,the,jdbc,driver,class,name,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,param,suppress,close,if,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection,deprecated,since,spring,2,5,driver,parameter,usage,is,generally,not,recommended,for,a,single,connection,data,source,if,you,insist,on,using,driver,parameters,directly,set,up,the,driver,class,manually,before,invoking,this,data,source,see,java,sql,driver,manager,get,connection,string,string,string;deprecated,public,single,connection,data,source,string,driver,class,name,string,url,string,username,string,password,boolean,suppress,close,super,driver,class,name,url,username,password,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1328020251;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1356735495;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1357119239;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1367508310;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1368482696;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1385412762;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1487178248;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1495868221;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1496837955;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1498780456;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1530174524;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public void setSuppressClose(boolean suppressClose);1532091916;Set whether the returned Connection should be a close-suppressing proxy_or the physical Connection.;public void setSuppressClose(boolean suppressClose) {_		this.suppressClose = suppressClose__	};set,whether,the,returned,connection,should,be,a,close,suppressing,proxy,or,the,physical,connection;public,void,set,suppress,close,boolean,suppress,close,this,suppress,close,suppress,close
SingleConnectionDataSource -> public SingleConnectionDataSource();1328020251;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1356735495;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1357119239;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1367508310;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1368482696;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1385412762;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1487178248;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1495868221;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1496837955;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1498780456;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1530174524;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public SingleConnectionDataSource();1532091916;Constructor for bean-style configuration.;public SingleConnectionDataSource() {_	};constructor,for,bean,style,configuration;public,single,connection,data,source
SingleConnectionDataSource -> public void initConnection() throws SQLException;1328020251;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1356735495;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1357119239;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1367508310;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1368482696;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1385412762;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1487178248;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1495868221;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1496837955;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1498780456;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1530174524;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isInfoEnabled()) {_				logger.info("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,info,enabled,logger,info,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public void initConnection() throws SQLException;1532091916;Initialize the underlying Connection via the DriverManager.;public void initConnection() throws SQLException {_		if (getUrl() == null) {_			throw new IllegalStateException("'url' property is required for lazily initializing a Connection")__		}_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = getConnectionFromDriver(getUsername(), getPassword())__			prepareConnection(this.target)__			if (logger.isDebugEnabled()) {_				logger.debug("Established shared JDBC Connection: " + this.target)__			}_			this.connection = (isSuppressClose() ? getCloseSuppressingConnectionProxy(this.target) : this.target)__		}_	};initialize,the,underlying,connection,via,the,driver,manager;public,void,init,connection,throws,sqlexception,if,get,url,null,throw,new,illegal,state,exception,url,property,is,required,for,lazily,initializing,a,connection,synchronized,this,connection,monitor,close,connection,this,target,get,connection,from,driver,get,username,get,password,prepare,connection,this,target,if,logger,is,debug,enabled,logger,debug,established,shared,jdbc,connection,this,target,this,connection,is,suppress,close,get,close,suppressing,connection,proxy,this,target,this,target
SingleConnectionDataSource -> public boolean shouldClose(Connection con);1328020251;This is a single Connection: Do not close it when returning to the "pool".;public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> public boolean shouldClose(Connection con);1357119239;This is a single Connection: Do not close it when returning to the "pool".;public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> public boolean shouldClose(Connection con);1367508310;This is a single Connection: Do not close it when returning to the "pool".;public boolean shouldClose(Connection con) {_		synchronized (this.connectionMonitor) {_			return (con != this.connection && con != this.target)__		}_	};this,is,a,single,connection,do,not,close,it,when,returning,to,the,pool;public,boolean,should,close,connection,con,synchronized,this,connection,monitor,return,con,this,connection,con,this,target
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1328020251;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1356735495;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1357119239;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1367508310;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1368482696;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1385412762;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1487178248;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1495868221;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1496837955;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1498780456;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1530174524;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void setAutoCommit(boolean autoCommit);1532091916;Set whether the returned Connection's "autoCommit" setting should be overridden.;public void setAutoCommit(boolean autoCommit) {_		this.autoCommit = (autoCommit)__	};set,whether,the,returned,connection,s,auto,commit,setting,should,be,overridden;public,void,set,auto,commit,boolean,auto,commit,this,auto,commit,auto,commit
SingleConnectionDataSource -> public void destroy();1328020251;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> public void destroy();1357119239;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> public void destroy();1367508310;Close the underlying Connection._The provider of this DataSource needs to care for proper shutdown._<p>As this bean implements DisposableBean, a bean factory will_automatically invoke this on destruction of its cached singletons.;public void destroy() {_		synchronized (this.connectionMonitor) {_			closeConnection()__		}_	};close,the,underlying,connection,the,provider,of,this,data,source,needs,to,care,for,proper,shutdown,p,as,this,bean,implements,disposable,bean,a,bean,factory,will,automatically,invoke,this,on,destruction,of,its,cached,singletons;public,void,destroy,synchronized,this,connection,monitor,close,connection
SingleConnectionDataSource -> public void resetConnection();1328020251;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1356735495;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1357119239;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1367508310;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1368482696;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1385412762;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1487178248;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1495868221;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1496837955;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1498780456;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1530174524;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
SingleConnectionDataSource -> public void resetConnection();1532091916;Reset the underlying shared Connection, to be reinitialized on next access.;public void resetConnection() {_		synchronized (this.connectionMonitor) {_			closeConnection()__			this.target = null__			this.connection = null__		}_	};reset,the,underlying,shared,connection,to,be,reinitialized,on,next,access;public,void,reset,connection,synchronized,this,connection,monitor,close,connection,this,target,null,this,connection,null
