commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Set the JDBC driver class name. This driver will get initialized  * on startup, registering itself with the JDK's DriverManager.  * <p><b>NOTE: DriverManagerDataSource is primarily intended for accessing  * <i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,  * consider using {@link SimpleDriverDataSource} instead. Alternatively, consider  * initializing the JDBC driver yourself before instantiating this DataSource.  * The "driverClassName" property is mainly preserved for backwards compatibility,  * as well as for migrating between Commons DBCP and this DataSource.  * @see java.sql.DriverManager#registerDriver(java.sql.Driver)  * @see SimpleDriverDataSource  */ ;/**  * Set the JDBC driver class name. This driver will get initialized  * on startup, registering itself with the JDK's DriverManager.  * <p><b>NOTE: DriverManagerDataSource is primarily intended for accessing  * <i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,  * consider using {@link SimpleDriverDataSource} instead. Alternatively, consider  * initializing the JDBC driver yourself before instantiating this DataSource.  * The "driverClassName" property is mainly preserved for backwards compatibility,  * as well as for migrating between Commons DBCP and this DataSource.  * @see java.sql.DriverManager#registerDriver(java.sql.Driver)  * @see SimpleDriverDataSource  */ public void setDriverClassName(String driverClassName) {     Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty").     String driverClassNameToUse = driverClassName.trim().     try {         Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader()).     } catch (ClassNotFoundException ex) {         throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex).     }     if (logger.isDebugEnabled()) {         logger.debug("Loaded JDBC driver: " + driverClassNameToUse).     } }
false;protected;1;9;;@Override protected Connection getConnectionFromDriver(Properties props) throws SQLException {     String url = getUrl().     Assert.state(url != null, "'url' not set").     if (logger.isDebugEnabled()) {         logger.debug("Creating new JDBC DriverManager Connection to [" + url + "]").     }     return getConnectionFromDriverManager(url, props). }
true;protected;2;3;/**  * Getting a Connection using the nasty static from DriverManager is extracted  * into a protected method to allow for easy unit testing.  * @see java.sql.DriverManager#getConnection(String, java.util.Properties)  */ ;/**  * Getting a Connection using the nasty static from DriverManager is extracted  * into a protected method to allow for easy unit testing.  * @see java.sql.DriverManager#getConnection(String, java.util.Properties)  */ protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {     return DriverManager.getConnection(url, props). }
