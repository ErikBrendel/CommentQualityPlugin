# id;timestamp;commentText;codeText;commentWords;codeWords
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1328020251;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1356735495;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1367508310;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1426267150;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1476521730;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1496837955;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1530174524;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, String username, String password);1532091916;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String, String, String);public DriverManagerDataSource(String url, String username, String password) {_		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string,string,string;public,driver,manager,data,source,string,url,string,username,string,password,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource();1328020251;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1356735495;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1367508310;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1426267150;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1476521730;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1496837955;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1530174524;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource();1532091916;Constructor for bean-style configuration.;public DriverManagerDataSource() {_	};constructor,for,bean,style,configuration;public,driver,manager,data,source
DriverManagerDataSource -> public DriverManagerDataSource(String url);1328020251;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1356735495;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1367508310;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1426267150;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1476521730;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1496837955;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1530174524;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public DriverManagerDataSource(String url);1532091916;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url) {_		setUrl(url)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,set,url,url
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1328020251;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1356735495;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1367508310;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1426267150;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1476521730;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1496837955;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1530174524;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,info,enabled,logger,info,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> public void setDriverClassName(String driverClassName);1532091916;Set the JDBC driver class name. This driver will get initialized_on startup, registering itself with the JDK's DriverManager._<p><b>NOTE: DriverManagerDataSource is primarily intended for accessing_<i>pre-registered</i> JDBC drivers.</b> If you need to register a new driver,_consider using {@link SimpleDriverDataSource} instead. Alternatively, consider_initializing the JDBC driver yourself before instantiating this DataSource._The "driverClassName" property is mainly preserved for backwards compatibility,_as well as for migrating between Commons DBCP and this DataSource._@see java.sql.DriverManager#registerDriver(java.sql.Driver)_@see SimpleDriverDataSource;public void setDriverClassName(String driverClassName) {_		Assert.hasText(driverClassName, "Property 'driverClassName' must not be empty")__		String driverClassNameToUse = driverClassName.trim()__		try {_			Class.forName(driverClassNameToUse, true, ClassUtils.getDefaultClassLoader())__		}_		catch (ClassNotFoundException ex) {_			throw new IllegalStateException("Could not load JDBC driver class [" + driverClassNameToUse + "]", ex)__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Loaded JDBC driver: " + driverClassNameToUse)__		}_	};set,the,jdbc,driver,class,name,this,driver,will,get,initialized,on,startup,registering,itself,with,the,jdk,s,driver,manager,p,b,note,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,b,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead,alternatively,consider,initializing,the,jdbc,driver,yourself,before,instantiating,this,data,source,the,driver,class,name,property,is,mainly,preserved,for,backwards,compatibility,as,well,as,for,migrating,between,commons,dbcp,and,this,data,source,see,java,sql,driver,manager,register,driver,java,sql,driver,see,simple,driver,data,source;public,void,set,driver,class,name,string,driver,class,name,assert,has,text,driver,class,name,property,driver,class,name,must,not,be,empty,string,driver,class,name,to,use,driver,class,name,trim,try,class,for,name,driver,class,name,to,use,true,class,utils,get,default,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,could,not,load,jdbc,driver,class,driver,class,name,to,use,ex,if,logger,is,debug,enabled,logger,debug,loaded,jdbc,driver,driver,class,name,to,use
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1328020251;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1356735495;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1367508310;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1426267150;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1476521730;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1496837955;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1530174524;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException;1532091916;Getting a Connection using the nasty static from DriverManager is extracted_into a protected method to allow for easy unit testing._@see java.sql.DriverManager#getConnection(String, java.util.Properties);protected Connection getConnectionFromDriverManager(String url, Properties props) throws SQLException {_		return DriverManager.getConnection(url, props)__	};getting,a,connection,using,the,nasty,static,from,driver,manager,is,extracted,into,a,protected,method,to,allow,for,easy,unit,testing,see,java,sql,driver,manager,get,connection,string,java,util,properties;protected,connection,get,connection,from,driver,manager,string,url,properties,props,throws,sqlexception,return,driver,manager,get,connection,url,props
DriverManagerDataSource -> @Deprecated 	public DriverManagerDataSource(String driverClassName, String url, String username, String password);1328020251;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param driverClassName the JDBC driver class name_@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@deprecated since Spring 2.5. DriverManagerDataSource is primarily_intended for accessing <i>pre-registered</i> JDBC drivers._If you need to register a new driver, consider using_{@link SimpleDriverDataSource} instead.;@Deprecated_	public DriverManagerDataSource(String driverClassName, String url, String username, String password) {_		setDriverClassName(driverClassName)__		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,driver,class,name,the,jdbc,driver,class,name,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,deprecated,since,spring,2,5,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead;deprecated,public,driver,manager,data,source,string,driver,class,name,string,url,string,username,string,password,set,driver,class,name,driver,class,name,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> @Deprecated 	public DriverManagerDataSource(String driverClassName, String url, String username, String password);1356735495;Create a new DriverManagerDataSource with the given standard_DriverManager parameters._@param driverClassName the JDBC driver class name_@param url the JDBC URL to use for accessing the DriverManager_@param username the JDBC username to use for accessing the DriverManager_@param password the JDBC password to use for accessing the DriverManager_@deprecated since Spring 2.5. DriverManagerDataSource is primarily_intended for accessing <i>pre-registered</i> JDBC drivers._If you need to register a new driver, consider using_{@link SimpleDriverDataSource} instead.;@Deprecated_	public DriverManagerDataSource(String driverClassName, String url, String username, String password) {_		setDriverClassName(driverClassName)__		setUrl(url)__		setUsername(username)__		setPassword(password)__	};create,a,new,driver,manager,data,source,with,the,given,standard,driver,manager,parameters,param,driver,class,name,the,jdbc,driver,class,name,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,username,the,jdbc,username,to,use,for,accessing,the,driver,manager,param,password,the,jdbc,password,to,use,for,accessing,the,driver,manager,deprecated,since,spring,2,5,driver,manager,data,source,is,primarily,intended,for,accessing,i,pre,registered,i,jdbc,drivers,if,you,need,to,register,a,new,driver,consider,using,link,simple,driver,data,source,instead;deprecated,public,driver,manager,data,source,string,driver,class,name,string,url,string,username,string,password,set,driver,class,name,driver,class,name,set,url,url,set,username,username,set,password,password
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1328020251;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1356735495;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1367508310;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1426267150;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1476521730;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1496837955;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1530174524;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps the JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,the,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
DriverManagerDataSource -> public DriverManagerDataSource(String url, Properties conProps);1532091916;Create a new DriverManagerDataSource with the given JDBC URL,_not specifying a username or password for JDBC access._@param url the JDBC URL to use for accessing the DriverManager_@param conProps the JDBC connection properties_@see java.sql.DriverManager#getConnection(String);public DriverManagerDataSource(String url, Properties conProps) {_		setUrl(url)__		setConnectionProperties(conProps)__	};create,a,new,driver,manager,data,source,with,the,given,jdbc,url,not,specifying,a,username,or,password,for,jdbc,access,param,url,the,jdbc,url,to,use,for,accessing,the,driver,manager,param,con,props,the,jdbc,connection,properties,see,java,sql,driver,manager,get,connection,string;public,driver,manager,data,source,string,url,properties,con,props,set,url,url,set,connection,properties,con,props
