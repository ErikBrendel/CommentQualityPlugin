commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the target DataSource that this DataSource should delegate to.  */ ;/**  * Set the target DataSource that this DataSource should delegate to.  */ public void setTargetDataSource(@Nullable DataSource targetDataSource) {     this.targetDataSource = targetDataSource. }
true;public;0;4;/**  * Return the target DataSource that this DataSource should delegate to.  */ ;/**  * Return the target DataSource that this DataSource should delegate to.  */ @Nullable public DataSource getTargetDataSource() {     return this.targetDataSource. }
true;protected;0;5;/**  * Obtain the target {@code DataSource} for actual use (never {@code null}).  * @since 5.0  */ ;/**  * Obtain the target {@code DataSource} for actual use (never {@code null}).  * @since 5.0  */ protected DataSource obtainTargetDataSource() {     DataSource dataSource = getTargetDataSource().     Assert.state(dataSource != null, "No 'targetDataSource' set").     return dataSource. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (getTargetDataSource() == null) {         throw new IllegalArgumentException("Property 'targetDataSource' is required").     } }
false;public;0;4;;@Override public Connection getConnection() throws SQLException {     return obtainTargetDataSource().getConnection(). }
false;public;2;4;;@Override public Connection getConnection(String username, String password) throws SQLException {     return obtainTargetDataSource().getConnection(username, password). }
false;public;0;4;;@Override public PrintWriter getLogWriter() throws SQLException {     return obtainTargetDataSource().getLogWriter(). }
false;public;1;4;;@Override public void setLogWriter(PrintWriter out) throws SQLException {     obtainTargetDataSource().setLogWriter(out). }
false;public;0;4;;@Override public int getLoginTimeout() throws SQLException {     return obtainTargetDataSource().getLoginTimeout(). }
false;public;1;4;;@Override public void setLoginTimeout(int seconds) throws SQLException {     obtainTargetDataSource().setLoginTimeout(seconds). }
false;public;1;8;;// --------------------------------------------------------------------- // Implementation of JDBC 4.0's Wrapper interface // --------------------------------------------------------------------- @Override @SuppressWarnings("unchecked") public <T> T unwrap(Class<T> iface) throws SQLException {     if (iface.isInstance(this)) {         return (T) this.     }     return obtainTargetDataSource().unwrap(iface). }
false;public;1;4;;@Override public boolean isWrapperFor(Class<?> iface) throws SQLException {     return (iface.isInstance(this) || obtainTargetDataSource().isWrapperFor(iface)). }
false;public;0;4;;// --------------------------------------------------------------------- // Implementation of JDBC 4.1's getParentLogger method // --------------------------------------------------------------------- @Override public Logger getParentLogger() {     return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME). }
