# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1328020251;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1356735495;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1357119239;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1368482696;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1467730834;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1486720494;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> public void registerTypeName(String paramName, String typeName);1502974979;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param typeName the type name of the parameter;public void registerTypeName(String paramName, String typeName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.typeNames.put(paramName, typeName)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,type,name,the,type,name,of,the,parameter;public,void,register,type,name,string,param,name,string,type,name,assert,not,null,param,name,parameter,name,must,not,be,null,this,type,names,put,param,name,type,name
AbstractSqlParameterSource -> @Override 	public String getTypeName(String paramName);1356735495;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or {@code null} if not registered;@Override_	public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,if,not,registered;override,public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> @Override 	public String getTypeName(String paramName);1368482696;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or {@code null} if not registered;@Override_	public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,if,not,registered;override,public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> @Override 	public String getTypeName(String paramName);1467730834;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or {@code null} if not registered;@Override_	public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,if,not,registered;override,public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> @Override 	public String getTypeName(String paramName);1486720494;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or {@code null} if not registered;@Override_	public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,if,not,registered;override,public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> public String getTypeName(String paramName);1328020251;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or <code>null</code> if not registered;public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,code,if,not,registered;public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> public String getTypeName(String paramName);1357119239;Return the type name for the given parameter, if registered._@param paramName the name of the parameter_@return the type name of the parameter,_or {@code null} if not registered;public String getTypeName(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.typeNames.get(paramName)__	};return,the,type,name,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,type,name,of,the,parameter,or,code,null,if,not,registered;public,string,get,type,name,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,type,names,get,param,name
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1328020251;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1356735495;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1357119239;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1368482696;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1467730834;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1486720494;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> public void registerSqlType(String paramName, int sqlType);1502974979;Register a SQL type for the given parameter._@param paramName the name of the parameter_@param sqlType the SQL type of the parameter;public void registerSqlType(String paramName, int sqlType) {_		Assert.notNull(paramName, "Parameter name must not be null")__		this.sqlTypes.put(paramName, sqlType)__	};register,a,sql,type,for,the,given,parameter,param,param,name,the,name,of,the,parameter,param,sql,type,the,sql,type,of,the,parameter;public,void,register,sql,type,string,param,name,int,sql,type,assert,not,null,param,name,parameter,name,must,not,be,null,this,sql,types,put,param,name,sql,type
AbstractSqlParameterSource -> @Override 	public int getSqlType(String paramName);1356735495;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;@Override_	public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		Integer sqlType = this.sqlTypes.get(paramName)__		if (sqlType != null) {_			return sqlType__		}_		return TYPE_UNKNOWN__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;override,public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,integer,sql,type,this,sql,types,get,param,name,if,sql,type,null,return,sql,type,return
AbstractSqlParameterSource -> @Override 	public int getSqlType(String paramName);1368482696;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;@Override_	public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		Integer sqlType = this.sqlTypes.get(paramName)__		if (sqlType != null) {_			return sqlType__		}_		return TYPE_UNKNOWN__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;override,public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,integer,sql,type,this,sql,types,get,param,name,if,sql,type,null,return,sql,type,return
AbstractSqlParameterSource -> @Override 	public int getSqlType(String paramName);1467730834;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;@Override_	public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		Integer sqlType = this.sqlTypes.get(paramName)__		if (sqlType != null) {_			return sqlType__		}_		return TYPE_UNKNOWN__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;override,public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,integer,sql,type,this,sql,types,get,param,name,if,sql,type,null,return,sql,type,return
AbstractSqlParameterSource -> @Override 	public int getSqlType(String paramName);1486720494;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;@Override_	public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN)__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;override,public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,sql,types,get,or,default,param,name
AbstractSqlParameterSource -> @Override 	public int getSqlType(String paramName);1502974979;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;@Override_	public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		return this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN)__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;override,public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,return,this,sql,types,get,or,default,param,name
AbstractSqlParameterSource -> public int getSqlType(String paramName);1328020251;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or <code>TYPE_UNKNOWN</code> if not registered;public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		Integer sqlType = this.sqlTypes.get(paramName)__		if (sqlType != null) {_			return sqlType__		}_		return TYPE_UNKNOWN__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,code,if,not,registered;public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,integer,sql,type,this,sql,types,get,param,name,if,sql,type,null,return,sql,type,return
AbstractSqlParameterSource -> public int getSqlType(String paramName);1357119239;Return the SQL type for the given parameter, if registered._@param paramName the name of the parameter_@return the SQL type of the parameter,_or {@code TYPE_UNKNOWN} if not registered;public int getSqlType(String paramName) {_		Assert.notNull(paramName, "Parameter name must not be null")__		Integer sqlType = this.sqlTypes.get(paramName)__		if (sqlType != null) {_			return sqlType__		}_		return TYPE_UNKNOWN__	};return,the,sql,type,for,the,given,parameter,if,registered,param,param,name,the,name,of,the,parameter,return,the,sql,type,of,the,parameter,or,code,if,not,registered;public,int,get,sql,type,string,param,name,assert,not,null,param,name,parameter,name,must,not,be,null,integer,sql,type,this,sql,types,get,param,name,if,sql,type,null,return,sql,type,return
