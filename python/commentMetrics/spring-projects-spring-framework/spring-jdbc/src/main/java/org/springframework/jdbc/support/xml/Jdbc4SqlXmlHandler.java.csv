commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;// ------------------------------------------------------------------------- // Convenience methods for accessing XML content // ------------------------------------------------------------------------- @Override @Nullable public String getXmlAsString(ResultSet rs, String columnName) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnName).     return (xmlObject != null ? xmlObject.getString() : null). }
false;public;2;6;;@Override @Nullable public String getXmlAsString(ResultSet rs, int columnIndex) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnIndex).     return (xmlObject != null ? xmlObject.getString() : null). }
false;public;2;6;;@Override @Nullable public InputStream getXmlAsBinaryStream(ResultSet rs, String columnName) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnName).     return (xmlObject != null ? xmlObject.getBinaryStream() : null). }
false;public;2;6;;@Override @Nullable public InputStream getXmlAsBinaryStream(ResultSet rs, int columnIndex) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnIndex).     return (xmlObject != null ? xmlObject.getBinaryStream() : null). }
false;public;2;6;;@Override @Nullable public Reader getXmlAsCharacterStream(ResultSet rs, String columnName) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnName).     return (xmlObject != null ? xmlObject.getCharacterStream() : null). }
false;public;2;6;;@Override @Nullable public Reader getXmlAsCharacterStream(ResultSet rs, int columnIndex) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnIndex).     return (xmlObject != null ? xmlObject.getCharacterStream() : null). }
false;public;3;11;;@Override @Nullable public Source getXmlAsSource(ResultSet rs, String columnName, @Nullable Class<? extends Source> sourceClass) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnName).     if (xmlObject == null) {         return null.     }     return (sourceClass != null ? xmlObject.getSource(sourceClass) : xmlObject.getSource(DOMSource.class)). }
false;public;3;11;;@Override @Nullable public Source getXmlAsSource(ResultSet rs, int columnIndex, @Nullable Class<? extends Source> sourceClass) throws SQLException {     SQLXML xmlObject = rs.getSQLXML(columnIndex).     if (xmlObject == null) {         return null.     }     return (sourceClass != null ? xmlObject.getSource(sourceClass) : xmlObject.getSource(DOMSource.class)). }
false;protected;1;4;;@Override protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {     xmlObject.setString(value). }
false;public;1;9;;// ------------------------------------------------------------------------- // Convenience methods for building XML content // ------------------------------------------------------------------------- @Override public SqlXmlValue newSqlXmlValue(final String value) {     return new AbstractJdbc4SqlXmlValue() {          @Override         protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {             xmlObject.setString(value).         }     }. }
false;protected;1;4;;@Override protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {     provider.provideXml(xmlObject.setBinaryStream()). }
false;public;1;9;;@Override public SqlXmlValue newSqlXmlValue(final XmlBinaryStreamProvider provider) {     return new AbstractJdbc4SqlXmlValue() {          @Override         protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {             provider.provideXml(xmlObject.setBinaryStream()).         }     }. }
false;protected;1;4;;@Override protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {     provider.provideXml(xmlObject.setCharacterStream()). }
false;public;1;9;;@Override public SqlXmlValue newSqlXmlValue(final XmlCharacterStreamProvider provider) {     return new AbstractJdbc4SqlXmlValue() {          @Override         protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {             provider.provideXml(xmlObject.setCharacterStream()).         }     }. }
false;protected;1;4;;@Override protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {     provider.provideXml(xmlObject.setResult(resultClass)). }
false;public;2;9;;@Override public SqlXmlValue newSqlXmlValue(final Class<? extends Result> resultClass, final XmlResultProvider provider) {     return new AbstractJdbc4SqlXmlValue() {          @Override         protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {             provider.provideXml(xmlObject.setResult(resultClass)).         }     }. }
false;protected;1;4;;@Override protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {     xmlObject.setResult(DOMResult.class).setNode(document). }
false;public;1;9;;@Override public SqlXmlValue newSqlXmlValue(final Document document) {     return new AbstractJdbc4SqlXmlValue() {          @Override         protected void provideXml(SQLXML xmlObject) throws SQLException, IOException {             xmlObject.setResult(DOMResult.class).setNode(document).         }     }. }
false;public;2;11;;@Override public void setValue(PreparedStatement ps, int paramIndex) throws SQLException {     this.xmlObject = ps.getConnection().createSQLXML().     try {         provideXml(this.xmlObject).     } catch (IOException ex) {         throw new DataAccessResourceFailureException("Failure encountered while providing XML", ex).     }     ps.setSQLXML(paramIndex, this.xmlObject). }
false;public;0;11;;@Override public void cleanup() {     if (this.xmlObject != null) {         try {             this.xmlObject.free().         } catch (SQLException ex) {             throw new DataAccessResourceFailureException("Could not free SQLXML object", ex).         }     } }
false;protected,abstract;1;1;;protected abstract void provideXml(SQLXML xmlObject) throws SQLException, IOException.
