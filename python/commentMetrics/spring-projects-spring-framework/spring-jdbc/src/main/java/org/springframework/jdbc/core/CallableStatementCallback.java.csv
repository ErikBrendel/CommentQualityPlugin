commented;modifiers;parameterAmount;loc;comment;code
true;;1;2;/**  * Gets called by {@code JdbcTemplate.execute} with an active JDBC  * CallableStatement. Does not need to care about closing the Statement  * or the Connection, or about handling transactions: this will all be  * handled by Spring's JdbcTemplate.  *  * <p><b>NOTE:</b> Any ResultSets opened should be closed in finally blocks  * within the callback implementation. Spring will close the Statement  * object after the callback returned, but this does not necessarily imply  * that the ResultSet resources will be closed: the Statement objects might  * get pooled by the connection pool, with {@code close} calls only  * returning the object to the pool but not physically closing the resources.  *  * <p>If called without a thread-bound JDBC transaction (initiated by  * DataSourceTransactionManager), the code will simply get executed on the  * JDBC connection with its transactional semantics. If JdbcTemplate is  * configured to use a JTA-aware DataSource, the JDBC connection and thus  * the callback code will be transactional if a JTA transaction is active.  *  * <p>Allows for returning a result object created within the callback, i.e.  * a domain object or a collection of domain objects. A thrown RuntimeException  * is treated as application exception: it gets propagated to the caller of  * the template.  *  * @param cs active JDBC CallableStatement  * @return a result object, or {@code null} if none  * @throws SQLException if thrown by a JDBC method, to be auto-converted  * into a DataAccessException by a SQLExceptionTranslator  * @throws DataAccessException in case of custom exceptions  */ ;/**  * Gets called by {@code JdbcTemplate.execute} with an active JDBC  * CallableStatement. Does not need to care about closing the Statement  * or the Connection, or about handling transactions: this will all be  * handled by Spring's JdbcTemplate.  *  * <p><b>NOTE:</b> Any ResultSets opened should be closed in finally blocks  * within the callback implementation. Spring will close the Statement  * object after the callback returned, but this does not necessarily imply  * that the ResultSet resources will be closed: the Statement objects might  * get pooled by the connection pool, with {@code close} calls only  * returning the object to the pool but not physically closing the resources.  *  * <p>If called without a thread-bound JDBC transaction (initiated by  * DataSourceTransactionManager), the code will simply get executed on the  * JDBC connection with its transactional semantics. If JdbcTemplate is  * configured to use a JTA-aware DataSource, the JDBC connection and thus  * the callback code will be transactional if a JTA transaction is active.  *  * <p>Allows for returning a result object created within the callback, i.e.  * a domain object or a collection of domain objects. A thrown RuntimeException  * is treated as application exception: it gets propagated to the caller of  * the template.  *  * @param cs active JDBC CallableStatement  * @return a result object, or {@code null} if none  * @throws SQLException if thrown by a JDBC method, to be auto-converted  * into a DataAccessException by a SQLExceptionTranslator  * @throws DataAccessException in case of custom exceptions  */ @Nullable T doInCallableStatement(CallableStatement cs) throws SQLException, DataAccessException.
