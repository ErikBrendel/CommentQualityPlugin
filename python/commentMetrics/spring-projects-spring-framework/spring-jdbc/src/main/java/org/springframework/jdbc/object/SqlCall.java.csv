commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether this call is for a function.  */ ;/**  * Set whether this call is for a function.  */ public void setFunction(boolean function) {     this.function = function. }
true;public;0;3;/**  * Return whether this call is for a function.  */ ;/**  * Return whether this call is for a function.  */ public boolean isFunction() {     return this.function. }
true;public;1;3;/**  * Set whether the SQL can be used as is.  */ ;/**  * Set whether the SQL can be used as is.  */ public void setSqlReadyForUse(boolean sqlReadyForUse) {     this.sqlReadyForUse = sqlReadyForUse. }
true;public;0;3;/**  * Return whether the SQL can be used as is.  */ ;/**  * Return whether the SQL can be used as is.  */ public boolean isSqlReadyForUse() {     return this.sqlReadyForUse. }
true;protected,final;0;40;/**  * Overridden method to configure the CallableStatementCreatorFactory  * based on our declared parameters.  * @see RdbmsOperation#compileInternal()  */ ;/**  * Overridden method to configure the CallableStatementCreatorFactory  * based on our declared parameters.  * @see RdbmsOperation#compileInternal()  */ @Override protected final void compileInternal() {     if (isSqlReadyForUse()) {         this.callString = resolveSql().     } else {         StringBuilder callString = new StringBuilder(32).         List<SqlParameter> parameters = getDeclaredParameters().         int parameterCount = 0.         if (isFunction()) {             callString.append("{? = call ").append(resolveSql()).append('(').             parameterCount = -1.         } else {             callString.append("{call ").append(resolveSql()).append('(').         }         for (SqlParameter parameter : parameters) {             if (!parameter.isResultsParameter()) {                 if (parameterCount > 0) {                     callString.append(", ").                 }                 if (parameterCount >= 0) {                     callString.append('?').                 }                 parameterCount++.             }         }         callString.append(")}").         this.callString = callString.toString().     }     if (logger.isDebugEnabled()) {         logger.debug("Compiled stored procedure. Call string is [" + this.callString + "]").     }     this.callableStatementFactory = new CallableStatementCreatorFactory(this.callString, getDeclaredParameters()).     this.callableStatementFactory.setResultSetType(getResultSetType()).     this.callableStatementFactory.setUpdatableResults(isUpdatableResults()).     onCompileInternal(). }
true;protected;0;2;/**  * Hook method that subclasses may override to react to compilation.  * This implementation does nothing.  */ ;/**  * Hook method that subclasses may override to react to compilation.  * This implementation does nothing.  */ protected void onCompileInternal() { }
true;public;0;4;/**  * Get the call string.  */ ;/**  * Get the call string.  */ @Nullable public String getCallString() {     return this.callString. }
true;protected;1;4;/**  * Return a CallableStatementCreator to perform an operation  * with this parameters.  * @param inParams parameters. May be {@code null}.  */ ;/**  * Return a CallableStatementCreator to perform an operation  * with this parameters.  * @param inParams parameters. May be {@code null}.  */ protected CallableStatementCreator newCallableStatementCreator(@Nullable Map<String, ?> inParams) {     Assert.state(this.callableStatementFactory != null, "No CallableStatementFactory available").     return this.callableStatementFactory.newCallableStatementCreator(inParams). }
true;protected;1;4;/**  * Return a CallableStatementCreator to perform an operation  * with the parameters returned from this ParameterMapper.  * @param inParamMapper parametermapper. May not be {@code null}.  */ ;/**  * Return a CallableStatementCreator to perform an operation  * with the parameters returned from this ParameterMapper.  * @param inParamMapper parametermapper. May not be {@code null}.  */ protected CallableStatementCreator newCallableStatementCreator(ParameterMapper inParamMapper) {     Assert.state(this.callableStatementFactory != null, "No CallableStatementFactory available").     return this.callableStatementFactory.newCallableStatementCreator(inParamMapper). }
