# id;timestamp;commentText;codeText;commentWords;codeWords
ParameterMapper -> Map<String, ?> createMap(Connection con) throws SQLException_;1328020251;Create a Map of input parameters, keyed by name._@param con JDBC connection. This is useful (and the purpose of this interface)_if we need to do something RDBMS-specific with a proprietary Connection_implementation class. This class conceals such proprietary details. However,_it is best to avoid using such proprietary RDBMS features if possible._@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@return Map of input parameters, keyed by name (never <code>null</code>);Map<String, ?> createMap(Connection con) throws SQLException_;create,a,map,of,input,parameters,keyed,by,name,param,con,jdbc,connection,this,is,useful,and,the,purpose,of,this,interface,if,we,need,to,do,something,rdbms,specific,with,a,proprietary,connection,implementation,class,this,class,conceals,such,proprietary,details,however,it,is,best,to,avoid,using,such,proprietary,rdbms,features,if,possible,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,return,map,of,input,parameters,keyed,by,name,never,code,null,code;map,string,create,map,connection,con,throws,sqlexception
ParameterMapper -> Map<String, ?> createMap(Connection con) throws SQLException_;1356735495;Create a Map of input parameters, keyed by name._@param con JDBC connection. This is useful (and the purpose of this interface)_if we need to do something RDBMS-specific with a proprietary Connection_implementation class. This class conceals such proprietary details. However,_it is best to avoid using such proprietary RDBMS features if possible._@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@return Map of input parameters, keyed by name (never {@code null});Map<String, ?> createMap(Connection con) throws SQLException_;create,a,map,of,input,parameters,keyed,by,name,param,con,jdbc,connection,this,is,useful,and,the,purpose,of,this,interface,if,we,need,to,do,something,rdbms,specific,with,a,proprietary,connection,implementation,class,this,class,conceals,such,proprietary,details,however,it,is,best,to,avoid,using,such,proprietary,rdbms,features,if,possible,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,return,map,of,input,parameters,keyed,by,name,never,code,null;map,string,create,map,connection,con,throws,sqlexception
ParameterMapper -> Map<String, ?> createMap(Connection con) throws SQLException_;1467808333;Create a Map of input parameters, keyed by name._@param con JDBC connection. This is useful (and the purpose of this interface)_if we need to do something RDBMS-specific with a proprietary Connection_implementation class. This class conceals such proprietary details. However,_it is best to avoid using such proprietary RDBMS features if possible._@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@return Map of input parameters, keyed by name (never {@code null});Map<String, ?> createMap(Connection con) throws SQLException_;create,a,map,of,input,parameters,keyed,by,name,param,con,jdbc,connection,this,is,useful,and,the,purpose,of,this,interface,if,we,need,to,do,something,rdbms,specific,with,a,proprietary,connection,implementation,class,this,class,conceals,such,proprietary,details,however,it,is,best,to,avoid,using,such,proprietary,rdbms,features,if,possible,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,return,map,of,input,parameters,keyed,by,name,never,code,null;map,string,create,map,connection,con,throws,sqlexception
ParameterMapper -> Map<String, ?> createMap(Connection con) throws SQLException_;1502974979;Create a Map of input parameters, keyed by name._@param con JDBC connection. This is useful (and the purpose of this interface)_if we need to do something RDBMS-specific with a proprietary Connection_implementation class. This class conceals such proprietary details. However,_it is best to avoid using such proprietary RDBMS features if possible._@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@return Map of input parameters, keyed by name (never {@code null});Map<String, ?> createMap(Connection con) throws SQLException_;create,a,map,of,input,parameters,keyed,by,name,param,con,jdbc,connection,this,is,useful,and,the,purpose,of,this,interface,if,we,need,to,do,something,rdbms,specific,with,a,proprietary,connection,implementation,class,this,class,conceals,such,proprietary,details,however,it,is,best,to,avoid,using,such,proprietary,rdbms,features,if,possible,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,return,map,of,input,parameters,keyed,by,name,never,code,null;map,string,create,map,connection,con,throws,sqlexception
ParameterMapper -> Map<String, ?> createMap(Connection con) throws SQLException_;1530174524;Create a Map of input parameters, keyed by name._@param con a JDBC connection. This is useful (and the purpose of this interface)_if we need to do something RDBMS-specific with a proprietary Connection_implementation class. This class conceals such proprietary details. However,_it is best to avoid using such proprietary RDBMS features if possible._@return a Map of input parameters, keyed by name (never {@code null})_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException);Map<String, ?> createMap(Connection con) throws SQLException_;create,a,map,of,input,parameters,keyed,by,name,param,con,a,jdbc,connection,this,is,useful,and,the,purpose,of,this,interface,if,we,need,to,do,something,rdbms,specific,with,a,proprietary,connection,implementation,class,this,class,conceals,such,proprietary,details,however,it,is,best,to,avoid,using,such,proprietary,rdbms,features,if,possible,return,a,map,of,input,parameters,keyed,by,name,never,code,null,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception;map,string,create,map,connection,con,throws,sqlexception
