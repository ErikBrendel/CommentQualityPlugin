commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Initialize using the database meta-data provided.  * @param databaseMetaData used to retrieve database specific information  * @throws SQLException in case of initialization failure  */ ;/**  * Initialize using the database meta-data provided.  * @param databaseMetaData used to retrieve database specific information  * @throws SQLException in case of initialization failure  */ void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQLException.
true;;4;2;/**  * Initialize using provided database meta-data, table and column information.  * This initialization can be turned off by specifying that column meta-data should not be used.  * @param databaseMetaData used to retrieve database specific information  * @param catalogName name of catalog to use (or {@code null} if none)  * @param schemaName name of schema name to use (or {@code null} if none)  * @param tableName name of the table  * @throws SQLException in case of initialization failure  */ ;/**  * Initialize using provided database meta-data, table and column information.  * This initialization can be turned off by specifying that column meta-data should not be used.  * @param databaseMetaData used to retrieve database specific information  * @param catalogName name of catalog to use (or {@code null} if none)  * @param schemaName name of schema name to use (or {@code null} if none)  * @param tableName name of the table  * @throws SQLException in case of initialization failure  */ void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) throws SQLException.
true;;1;2;/**  * Get the table name formatted based on meta-data information.  * This could include altering the case.  */ ;/**  * Get the table name formatted based on meta-data information.  * This could include altering the case.  */ @Nullable String tableNameToUse(@Nullable String tableName).
true;;1;2;/**  * Get the catalog name formatted based on meta-data information.  * This could include altering the case.  */ ;/**  * Get the catalog name formatted based on meta-data information.  * This could include altering the case.  */ @Nullable String catalogNameToUse(@Nullable String catalogName).
true;;1;2;/**  * Get the schema name formatted based on meta-data information.  * This could include altering the case.  */ ;/**  * Get the schema name formatted based on meta-data information.  * This could include altering the case.  */ @Nullable String schemaNameToUse(@Nullable String schemaName).
true;;1;2;/**  * Provide any modification of the catalog name passed in to match the meta-data currently used.  * The returned value will be used for meta-data lookups.  * This could include altering the case used or providing a base catalog if none is provided.  */ ;/**  * Provide any modification of the catalog name passed in to match the meta-data currently used.  * The returned value will be used for meta-data lookups.  * This could include altering the case used or providing a base catalog if none is provided.  */ @Nullable String metaDataCatalogNameToUse(@Nullable String catalogName).
true;;1;2;/**  * Provide any modification of the schema name passed in to match the meta-data currently used.  * The returned value will be used for meta-data lookups.  * This could include altering the case used or providing a base schema if none is provided.  */ ;/**  * Provide any modification of the schema name passed in to match the meta-data currently used.  * The returned value will be used for meta-data lookups.  * This could include altering the case used or providing a base schema if none is provided.  */ @Nullable String metaDataSchemaNameToUse(@Nullable String schemaName).
true;;0;1;/**  * Are we using the meta-data for the table columns?  */ ;/**  * Are we using the meta-data for the table columns?  */ boolean isTableColumnMetaDataUsed().
true;;0;1;/**  * Does this database support the JDBC 3.0 feature of retrieving generated keys:  * {@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?  */ ;/**  * Does this database support the JDBC 3.0 feature of retrieving generated keys:  * {@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?  */ boolean isGetGeneratedKeysSupported().
true;;0;1;/**  * Does this database support a simple query to retrieve the generated key when  * the JDBC 3.0 feature of retrieving generated keys is not supported?  * @see #isGetGeneratedKeysSupported()  */ ;/**  * Does this database support a simple query to retrieve the generated key when  * the JDBC 3.0 feature of retrieving generated keys is not supported?  * @see #isGetGeneratedKeysSupported()  */ boolean isGetGeneratedKeysSimulated().
true;;2;2;/**  * Get the simple query to retrieve a generated key.  */ ;/**  * Get the simple query to retrieve a generated key.  */ @Nullable String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName).
true;;0;1;/**  * Does this database support a column name String array for retrieving generated keys:  * {@link java.sql.Connection#createStruct(String, Object[])}?  */ ;/**  * Does this database support a column name String array for retrieving generated keys:  * {@link java.sql.Connection#createStruct(String, Object[])}?  */ boolean isGeneratedKeysColumnNameArraySupported().
true;;0;1;/**  * Get the table parameter meta-data that is currently used.  * @return a List of {@link TableParameterMetaData}  */ ;/**  * Get the table parameter meta-data that is currently used.  * @return a List of {@link TableParameterMetaData}  */ List<TableParameterMetaData> getTableParameterMetaData().
