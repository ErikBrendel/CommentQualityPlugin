# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractJdbcInsert -> public final synchronized void compile() throws InvalidDataAccessApiUsageException;1520528267;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public final synchronized void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,final,synchronized,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public final synchronized void compile() throws InvalidDataAccessApiUsageException;1521457491;Compile this JdbcInsert using provided parameters and meta-data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public final synchronized void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,final,synchronized,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public final synchronized void compile() throws InvalidDataAccessApiUsageException;1530174524;Compile this JdbcInsert using provided parameters and meta-data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public final synchronized void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,final,synchronized,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public final synchronized void compile() throws InvalidDataAccessApiUsageException;1532981251;Compile this JdbcInsert using provided parameters and meta-data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public final synchronized void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,final,synchronized,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1496837955;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1500448076;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1500495740;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1500502496;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1519295386;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1520528267;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1521457491;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1530174524;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getCatalogName();1532981251;Get the name of the catalog for this insert.;@Nullable_	public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;nullable,public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> protected void onCompileInternal();1328020251;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1356735495;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1357119239;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1362408075;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1368482696;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1385412762;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1385423968;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1407511029;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1407789123;Hook method that subclasses may override to react to compilation._This implementation does nothing.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,this,implementation,does,nothing;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1416833949;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1446038912;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1467667241;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1467730834;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1487178248;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1496837955;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1500448076;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1500495740;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1500502496;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1519295386;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1520528267;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1521457491;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1530174524;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> protected void onCompileInternal();1532981251;Hook method that subclasses may override to react to compilation._<p>This implementation is empty.;protected void onCompileInternal() {_	};hook,method,that,subclasses,may,override,to,react,to,compilation,p,this,implementation,is,empty;protected,void,on,compile,internal
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1328020251;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1356735495;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1357119239;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1362408075;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1368482696;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1385412762;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1385423968;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1407511029;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1407789123;Create the PreparedStatement to be used for insert that have generated keys__@param con the connection used_@return PreparedStatement to use_@throws SQLException;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s)")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,the,prepared,statement,to,be,used,for,insert,that,have,generated,keys,param,con,the,connection,used,return,prepared,statement,to,use,throws,sqlexception;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1416833949;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1446038912;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1467667241;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1467730834;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1487178248;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1496837955;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1500448076;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1500495740;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1500502496;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1519295386;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1520528267;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1521457491;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1530174524;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException;1532981251;Create a PreparedStatement to be used for an insert operation with generated keys._@param con the Connection to use_@return the PreparedStatement;private PreparedStatement prepareStatementForGeneratedKeys(Connection con) throws SQLException {_		if (getGeneratedKeyNames().length < 1) {_			throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_					"Using the generated keys features requires specifying the name(s) of the generated column(s).")__		}_		PreparedStatement ps__		if (this.tableMetaDataContext.isGeneratedKeysColumnNameArraySupported()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with array of column names.")__			}_			ps = con.prepareStatement(getInsertString(), getGeneratedKeyNames())__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.")__			}_			ps = con.prepareStatement(getInsertString(), Statement.RETURN_GENERATED_KEYS)__		}_		return ps__	};create,a,prepared,statement,to,be,used,for,an,insert,operation,with,generated,keys,param,con,the,connection,to,use,return,the,prepared,statement;private,prepared,statement,prepare,statement,for,generated,keys,connection,con,throws,sqlexception,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,prepared,statement,ps,if,this,table,meta,data,context,is,generated,keys,column,name,array,supported,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,array,of,column,names,ps,con,prepare,statement,get,insert,string,get,generated,key,names,else,if,logger,is,debug,enabled,logger,debug,using,generated,keys,support,with,statement,ps,con,prepare,statement,get,insert,string,statement,return,ps
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1416833949;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1446038912;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1467667241;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1467730834;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1487178248;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1496837955;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1500448076;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1500495740;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1500502496;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1519295386;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(_						getInsertString() + " " + keyQuery, values.toArray(), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1520528267;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys can't be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(_						getInsertString() + " " + keyQuery, values.toArray(), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1521457491;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimpleQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys must not be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(_						getInsertString() + " " + keyQuery, values.toArray(), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simple,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,must,not,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1530174524;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimpleQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys must not be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(_						getInsertString() + " " + keyQuery, values.toArray(), Long.class)__				Map<String, Object> keys = new HashMap<>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(1)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simple,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,must,not,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,long,class,map,string,object,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values);1532981251;Delegate method to execute the insert, generating any number of keys.;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()___		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					con -> {_						PreparedStatement ps = prepareStatementForGeneratedKeys(con)__						setParameterValues(ps, values, getInsertTypes())__						return ps__					},_					keyHolder)__		}__		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}__			Assert.state(getTableName() != null, "No table name set")__			final String keyQuery = this.tableMetaDataContext.getSimpleQueryForGetGeneratedKey(_					getTableName(), getGeneratedKeyNames()[0])__			Assert.state(keyQuery != null, "Query for simulating get generated keys must not be null")___			_			_			__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(_						getInsertString() + " " + keyQuery, values.toArray(), Long.class)__				Map<String, Object> keys = new HashMap<>(2)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute((ConnectionCallback<Object>) con -> {_					_					PreparedStatement ps = null__					try {_						ps = con.prepareStatement(getInsertString())__						setParameterValues(ps, values, getInsertTypes())__						ps.executeUpdate()__					}_					finally {_						JdbcUtils.closeStatement(ps)__					}_					_					Statement keyStmt = null__					ResultSet rs = null__					Map<String, Object> keys = new HashMap<>(2)__					try {_						keyStmt = con.createStatement()__						rs = keyStmt.executeQuery(keyQuery)__						if (rs.next()) {_							long key = rs.getLong(1)__							keys.put(getGeneratedKeyNames()[0], key)__							keyHolder.getKeyList().add(keys)__						}_					}_					finally {_						JdbcUtils.closeResultSet(rs)__						JdbcUtils.closeStatement(keyStmt)__					}_					return null__				})__			}_		}__		return keyHolder__	};delegate,method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,con,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,assert,state,get,table,name,null,no,table,name,set,final,string,key,query,this,table,meta,data,context,get,simple,query,for,get,generated,key,get,table,name,get,generated,key,names,0,assert,state,key,query,null,query,for,simulating,get,generated,keys,must,not,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,long,class,map,string,object,keys,new,hash,map,2,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,connection,callback,object,con,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,2,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder
AbstractJdbcInsert -> public String getSchemaName();1328020251;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1356735495;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1357119239;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1362408075;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1368482696;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1385412762;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1385423968;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1407511029;Get the name of the schema for this insert;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1407789123;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1416833949;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1446038912;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1467667241;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1467730834;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public String getSchemaName();1487178248;Get the name of the schema for this insert.;public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1328020251;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1356735495;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1357119239;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1362408075;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1368482696;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1385412762;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1385423968;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1407511029;Specify whether the default for including synonyms should be changed.  The default is false.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1407789123;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1416833949;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1446038912;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1467667241;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1467730834;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1487178248;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1496837955;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1500448076;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1500495740;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1500502496;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1519295386;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1520528267;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1521457491;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1530174524;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setOverrideIncludeSynonymsDefault(boolean override);1532981251;Specify whether the default for including synonyms should be changed._The default is {@code false}.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.tableMetaDataContext.setOverrideIncludeSynonymsDefault(override)__	};specify,whether,the,default,for,including,synonyms,should,be,changed,the,default,is,code,false;public,void,set,override,include,synonyms,default,boolean,override,this,table,meta,data,context,set,override,include,synonyms,default,override
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1500448076;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1500495740;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1500502496;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1519295386;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1520528267;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1521457491;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1530174524;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(@Nullable String tableName);1532981251;Set the name of the table for this insert.;public void setTableName(@Nullable String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,nullable,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1328020251;Method that provides execution of the insert using the passed in {@link SqlParameterSource}__@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1356735495;Method that provides execution of the insert using the passed in {@link SqlParameterSource}__@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1357119239;Method that provides execution of the insert using the passed in {@link SqlParameterSource}__@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1362408075;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1368482696;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1385412762;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1385423968;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1407511029;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1407789123;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_@param parameterSource parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1416833949;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1446038912;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1467667241;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1467730834;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1487178248;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1496837955;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1500448076;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1500495740;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1500502496;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1519295386;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1520528267;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1521457491;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1530174524;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(SqlParameterSource parameterSource);1532981251;Delegate method that executes the insert using the passed-in {@link SqlParameterSource}._@param parameterSource parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,link,sql,parameter,source,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,internal,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1362408075;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List<Object>[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,object,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1368482696;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List<Object>[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,object,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1416833949;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1446038912;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1467667241;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1467730834;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1487178248;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1496837955;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1500448076;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1500495740;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1500502496;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1519295386;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1520528267;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1521457491;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1530174524;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<List<Object>> batchValues);1532981251;Delegate method to execute the batch insert.;private int[] executeBatchInternal(final List<List<Object>> batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						setParameterValues(ps, batchValues.get(i), getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.size()__					}_				})__	};delegate,method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,size,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,set,parameter,values,ps,batch,values,get,i,get,insert,types,override,public,int,get,batch,size,return,batch,values,size
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1416833949;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1446038912;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1467667241;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1467730834;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1487178248;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1496837955;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1500448076;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1500495740;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1500502496;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1519295386;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1520528267;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1521457491;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1530174524;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<?> values);1532981251;Delegate method to execute the insert.;private int executeInsertInternal(List<?> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};delegate,method,to,execute,the,insert;private,int,execute,insert,internal,list,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1328020251;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1356735495;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1357119239;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1362408075;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1368482696;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1385412762;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1385423968;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1407511029;Set the name of the schema for this insert;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1407789123;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1416833949;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1446038912;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1467667241;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1467730834;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1487178248;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(String schemaName);1496837955;Set the name of the schema for this insert.;public void setSchemaName(String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes) 			throws SQLException;1416833949;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes) 			throws SQLException;1446038912;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes) 			throws SQLException;1467667241;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes) 			throws SQLException;1467730834;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes) 			throws SQLException;1487178248;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1328020251;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1356735495;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1357119239;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1362408075;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1368482696;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1385412762;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1385423968;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1407511029;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1407789123;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1416833949;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1446038912;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1467667241;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1467730834;Set the {@link NativeJdbcExtractor} to use to retrieve the native connection if necessary;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.tableMetaDataContext.setNativeJdbcExtractor(nativeJdbcExtractor)__	};set,the,link,native,jdbc,extractor,to,use,to,retrieve,the,native,connection,if,necessary;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,table,meta,data,context,set,native,jdbc,extractor,native,jdbc,extractor
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1362408075;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1368482696;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1385412762;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1385423968;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1407511029;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1407789123;Get the {@link JdbcTemplate} that is configured to be used.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1416833949;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1446038912;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1467667241;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1467730834;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1487178248;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1496837955;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1500448076;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1500495740;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1500502496;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1519295386;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1520528267;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1521457491;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1530174524;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public JdbcTemplate getJdbcTemplate();1532981251;Get the configured {@link JdbcTemplate}.;public JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,configured,link,jdbc,template;public,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1328020251;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1356735495;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1357119239;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1362408075;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1368482696;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1385412762;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1385423968;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1407511029;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1407789123;Constructor for sublasses to delegate to for setting the JdbcTemplate.;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,for,sublasses,to,delegate,to,for,setting,the,jdbc,template;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1416833949;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1446038912;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1467667241;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1467730834;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__		setNativeJdbcExtractor(jdbcTemplate.getNativeJdbcExtractor())__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template,set,native,jdbc,extractor,jdbc,template,get,native,jdbc,extractor
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1487178248;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1496837955;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1500448076;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1500495740;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1500502496;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1519295386;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1520528267;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1521457491;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1530174524;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate);1532981251;Constructor to be used when initializing using a {@link JdbcTemplate}._@param jdbcTemplate the JdbcTemplate to use;protected AbstractJdbcInsert(JdbcTemplate jdbcTemplate) {_		Assert.notNull(jdbcTemplate, "JdbcTemplate must not be null")__		this.jdbcTemplate = jdbcTemplate__	};constructor,to,be,used,when,initializing,using,a,link,jdbc,template,param,jdbc,template,the,jdbc,template,to,use;protected,abstract,jdbc,insert,jdbc,template,jdbc,template,assert,not,null,jdbc,template,jdbc,template,must,not,be,null,this,jdbc,template,jdbc,template
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1328020251;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {_		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1356735495;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {_		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1357119239;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {_		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1362408075;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1368482696;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1385412762;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1385423968;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1407511029;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes) 			throws SQLException;1407789123;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<Object> values, int[] columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,object,values,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1416833949;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1446038912;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1467667241;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1467730834;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1487178248;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1496837955;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1500448076;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1500495740;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1500502496;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1519295386;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1520528267;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1521457491;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource}s._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,s,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1530174524;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource SqlParameterSources}._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,sql,parameter,sources,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource... batch);1532981251;Delegate method that executes a batch insert using the passed-in {@link SqlParameterSource SqlParameterSources}._@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (SqlParameterSource parameterSource : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(parameterSource))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,link,sql,parameter,source,sql,parameter,sources,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,sql,parameter,source,parameter,source,batch,batch,values,add,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1328020251;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1356735495;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1357119239;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1362408075;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1368482696;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1385412762;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String[] generatedKeyNames);1385423968;Set the names of any generated keys;public void setGeneratedKeyNames(String[] generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public String getInsertString();1328020251;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1356735495;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1357119239;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1362408075;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1368482696;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1385412762;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1385423968;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1407511029;Get the insert string to be used;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1407789123;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1416833949;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1446038912;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1467667241;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1467730834;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1487178248;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1496837955;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1500448076;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1500502496;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1519295386;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1520528267;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1521457491;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1530174524;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> public String getInsertString();1532981251;Get the insert string to be used.;public String getInsertString() {_		return this.insertString__	};get,the,insert,string,to,be,used;public,string,get,insert,string,return,this,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1416833949;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1446038912;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1467667241;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1467730834;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1487178248;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1496837955;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1500448076;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1500495740;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1500502496;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1519295386;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1520528267;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1521457491;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1530174524;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<?> values);1532981251;Delegate method to execute the insert, generating a single key.;private Number executeInsertAndReturnKeyInternal(final List<?> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};delegate,method,to,execute,the,insert,generating,a,single,key;private,number,execute,insert,and,return,key,internal,final,list,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1328020251;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1356735495;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1357119239;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1362408075;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1368482696;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1385412762;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1385423968;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1407511029;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1407789123;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning all generated keys__@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1416833949;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1446038912;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1467667241;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1467730834;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1487178248;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1496837955;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1500448076;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1500495740;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1500502496;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1519295386;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1520528267;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1521457491;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1530174524;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource);1532981251;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning all generated keys._@param parameterSource parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,all,generated,keys,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1416833949;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1446038912;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1467667241;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1467730834;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1487178248;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1496837955;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1500448076;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1500495740;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1500502496;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1519295386;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1520528267;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1521457491;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1530174524;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args a Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args);1532981251;Method that provides execution of the insert using the passed-in_Map of parameters and returning all generated keys._@param args a Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> public int[] getInsertTypes();1328020251;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1356735495;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1357119239;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1362408075;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1368482696;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1385412762;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1385423968;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1407511029;Get the array of {@link java.sql.Types} to be used for insert;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1407789123;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1416833949;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1446038912;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1467667241;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1467730834;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1487178248;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1496837955;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1500448076;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1500502496;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1519295386;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1520528267;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1521457491;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1530174524;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> public int[] getInsertTypes();1532981251;Get the array of {@link java.sql.Types} to be used for insert.;public int[] getInsertTypes() {_		return this.insertTypes__	};get,the,array,of,link,java,sql,types,to,be,used,for,insert;public,int,get,insert,types,return,this,insert,types
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1328020251;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1356735495;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1357119239;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1362408075;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1368482696;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1385412762;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1385423968;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1407511029;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args);1407789123;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,object,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1467667241;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1467730834;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1487178248;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1496837955;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1500448076;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1500495740;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1500502496;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1519295386;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1520528267;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1521457491;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1530174524;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, ?>... batch);1532981251;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1328020251;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1356735495;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1357119239;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1362408075;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1368482696;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1385412762;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1385423968;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1407511029;Set the names of the columns to be used;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1407789123;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1416833949;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1446038912;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1467667241;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1467730834;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1487178248;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1496837955;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1500448076;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1500495740;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1500502496;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1519295386;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1520528267;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1521457491;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1530174524;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> public void setColumnNames(List<String> columnNames);1532981251;Set the names of the columns to be used.;public void setColumnNames(List<String> columnNames) {_		checkIfConfigurationModificationIsAllowed()__		this.declaredColumns.clear()__		this.declaredColumns.addAll(columnNames)__	};set,the,names,of,the,columns,to,be,used;public,void,set,column,names,list,string,column,names,check,if,configuration,modification,is,allowed,this,declared,columns,clear,this,declared,columns,add,all,column,names
AbstractJdbcInsert -> protected void checkCompiled();1328020251;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by <code>validateParameters</code>.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters,code;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1356735495;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1357119239;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1362408075;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1368482696;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1385412762;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1385423968;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1407511029;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1407789123;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1416833949;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1446038912;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1467667241;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1467730834;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1487178248;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1496837955;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1500448076;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1500495740;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1500502496;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1519295386;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1520528267;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1521457491;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1530174524;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected void checkCompiled();1532981251;Check whether this operation has been compiled already__lazily compile it if not already compiled._<p>Automatically called by {@code validateParameters}.;protected void checkCompiled() {_		if (!isCompiled()) {_			logger.debug("JdbcInsert not compiled before execution - invoking compile")__			compile()__		}_	};check,whether,this,operation,has,been,compiled,already,lazily,compile,it,if,not,already,compiled,p,automatically,called,by,code,validate,parameters;protected,void,check,compiled,if,is,compiled,logger,debug,jdbc,insert,not,compiled,before,execution,invoking,compile,compile
AbstractJdbcInsert -> protected int[] doExecuteBatch(Map<String, Object>[] batch);1328020251;Method that provides execution of a batch insert using the passed in Maps of parameters__@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(Map<String, Object>[] batch);1356735495;Method that provides execution of a batch insert using the passed in Maps of parameters__@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(Map<String, Object>[] batch);1357119239;Method that provides execution of a batch insert using the passed in Maps of parameters__@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1328020251;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException("Unable to retrieve the generated key for the insert: " +_					getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1356735495;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException("Unable to retrieve the generated key for the insert: " +_					getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1357119239;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException("Unable to retrieve the generated key for the insert: " +_					getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1362408075;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1368482696;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1385412762;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1385423968;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1407511029;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> private Number executeInsertAndReturnKeyInternal(final List<Object> values);1407789123;Method to execute the insert generating single key;private Number executeInsertAndReturnKeyInternal(final List<Object> values) {_		KeyHolder kh = executeInsertAndReturnKeyHolderInternal(values)__		if (kh != null && kh.getKey() != null) {_			return kh.getKey()__		}_		else {_			throw new DataIntegrityViolationException(_					"Unable to retrieve the generated key for the insert: " + getInsertString())__		}_	};method,to,execute,the,insert,generating,single,key;private,number,execute,insert,and,return,key,internal,final,list,object,values,key,holder,kh,execute,insert,and,return,key,holder,internal,values,if,kh,null,kh,get,key,null,return,kh,get,key,else,throw,new,data,integrity,violation,exception,unable,to,retrieve,the,generated,key,for,the,insert,get,insert,string
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1328020251;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1356735495;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1357119239;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1362408075;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1368482696;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1385412762;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1385423968;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1407511029;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, Object> args);1407789123;Method that provides execution of the insert using the passed in Map of parameters_and returning a generated key__@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1328020251;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1356735495;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1357119239;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1362408075;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1368482696;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1385412762;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1385423968;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1407511029;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args);1407789123;Method that provides execution of the insert using the passed in Map of parameters_and returning all generated keys__@param args Map with parameter names and values to be used in insert_@return the KeyHolder containing keys generated by the insert;protected KeyHolder doExecuteAndReturnKeyHolder(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyHolderInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,all,generated,keys,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,holder,containing,keys,generated,by,the,insert;protected,key,holder,do,execute,and,return,key,holder,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,holder,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1416833949;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1446038912;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1467667241;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1467730834;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1487178248;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1496837955;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1500448076;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1500495740;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1500502496;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1519295386;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1520528267;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1521457491;Delegate method that executes the insert using the passed-in Map of parameters._@param args Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1530174524;Delegate method that executes the insert using the passed-in Map of parameters._@param args a Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, ?> args);1532981251;Delegate method that executes the insert using the passed-in Map of parameters._@param args a Map with parameter names and values to be used in insert_@return the number of rows affected;protected int doExecute(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};delegate,method,that,executes,the,insert,using,the,passed,in,map,of,parameters,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,number,of,rows,affected;protected,int,do,execute,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1416833949;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1446038912;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1467667241;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1467730834;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1487178248;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1496837955;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1500448076;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1500495740;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1500502496;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1519295386;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1520528267;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1521457491;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param args the parameter values provided in a Map_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,args,the,parameter,values,provided,in,a,map,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1530174524;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param args the parameter values provided in a Map_@return a Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,args,the,parameter,values,provided,in,a,map,return,a,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args);1532981251;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param args the parameter values provided in a Map_@return a Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> args) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(args)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,args,the,parameter,values,provided,in,a,map,return,a,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,map,string,args,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,args
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1328020251;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			jdbcTemplate.update(_					new PreparedStatementCreator() {_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					tableMetaDataContext.getTableName(),_					getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = jdbcTemplate.queryForLong(_						getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]))__				HashMap keys = new HashMap(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				jdbcTemplate.execute(new ConnectionCallback() {_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						} finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						HashMap keys = new HashMap(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						} finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,jdbc,template,update,new,prepared,statement,creator,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,table,meta,data,context,get,simulation,query,for,get,generated,key,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,jdbc,template,query,for,long,get,insert,string,key,query,values,to,array,new,object,values,size,hash,map,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,jdbc,template,execute,new,connection,callback,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,hash,map,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1356735495;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			jdbcTemplate.update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					tableMetaDataContext.getTableName(),_					getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = jdbcTemplate.queryForLong(_						getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]))__				HashMap keys = new HashMap(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				jdbcTemplate.execute(new ConnectionCallback() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						} finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						HashMap keys = new HashMap(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						} finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,table,meta,data,context,get,simulation,query,for,get,generated,key,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,jdbc,template,query,for,long,get,insert,string,key,query,values,to,array,new,object,values,size,hash,map,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,jdbc,template,execute,new,connection,callback,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,hash,map,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1357119239;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			jdbcTemplate.update(_					new PreparedStatementCreator() {_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					tableMetaDataContext.getTableName(),_					getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = jdbcTemplate.queryForLong(_						getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]))__				HashMap keys = new HashMap(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				jdbcTemplate.execute(new ConnectionCallback() {_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						} finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						HashMap keys = new HashMap(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						} finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,jdbc,template,update,new,prepared,statement,creator,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,table,meta,data,context,get,simulation,query,for,get,generated,key,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,jdbc,template,query,for,long,get,insert,string,key,query,values,to,array,new,object,values,size,hash,map,keys,new,hash,map,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,jdbc,template,execute,new,connection,callback,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,hash,map,keys,new,hash,map,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1362408075;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1368482696;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1385412762;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specificed. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retreiving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specificed,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retreiving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1385423968;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1407511029;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values);1407789123;Method to execute the insert generating any number of keys;private KeyHolder executeInsertAndReturnKeyHolderInternal(final List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values)__		}_		final KeyHolder keyHolder = new GeneratedKeyHolder()__		if (this.tableMetaDataContext.isGetGeneratedKeysSupported()) {_			getJdbcTemplate().update(_					new PreparedStatementCreator() {_						@Override_						public PreparedStatement createPreparedStatement(Connection con) throws SQLException {_							PreparedStatement ps = prepareStatementForGeneratedKeys(con)__							setParameterValues(ps, values, getInsertTypes())__							return ps__						}_					},_					keyHolder)__		}_		else {_			if (!this.tableMetaDataContext.isGetGeneratedKeysSimulated()) {_				throw new InvalidDataAccessResourceUsageException(_						"The getGeneratedKeys feature is not supported by this database")__			}_			if (getGeneratedKeyNames().length < 1) {_				throw new InvalidDataAccessApiUsageException("Generated Key Name(s) not specified. " +_						"Using the generated keys features requires specifying the name(s) of the generated column(s)")__			}_			if (getGeneratedKeyNames().length > 1) {_				throw new InvalidDataAccessApiUsageException(_						"Current database only supports retrieving the key for a single column. There are " +_						getGeneratedKeyNames().length  + " columns specified: " + Arrays.asList(getGeneratedKeyNames()))__			}_			_			_			_			final String keyQuery = this.tableMetaDataContext.getSimulationQueryForGetGeneratedKey(_					this.tableMetaDataContext.getTableName(), getGeneratedKeyNames()[0])__			Assert.notNull(keyQuery, "Query for simulating get generated keys can't be null")__			if (keyQuery.toUpperCase().startsWith("RETURNING")) {_				Long key = getJdbcTemplate().queryForObject(getInsertString() + " " + keyQuery,_						values.toArray(new Object[values.size()]), Long.class)__				Map<String, Object> keys = new HashMap<String, Object>(1)__				keys.put(getGeneratedKeyNames()[0], key)__				keyHolder.getKeyList().add(keys)__			}_			else {_				getJdbcTemplate().execute(new ConnectionCallback<Object>() {_					@Override_					public Object doInConnection(Connection con) throws SQLException, DataAccessException {_						_						PreparedStatement ps = null__						try {_							ps = con.prepareStatement(getInsertString())__							setParameterValues(ps, values, getInsertTypes())__							ps.executeUpdate()__						}_						finally {_							JdbcUtils.closeStatement(ps)__						}_						_						Statement keyStmt = null__						ResultSet rs = null__						Map<String, Object> keys = new HashMap<String, Object>(1)__						try {_							keyStmt = con.createStatement()__							rs = keyStmt.executeQuery(keyQuery)__							if (rs.next()) {_								long key = rs.getLong(1)__								keys.put(getGeneratedKeyNames()[0], key)__								keyHolder.getKeyList().add(keys)__							}_						}_						finally {_							JdbcUtils.closeResultSet(rs)__							JdbcUtils.closeStatement(keyStmt)__						}_						return null__					}_				})__			}_			return keyHolder__		}_		return keyHolder__	};method,to,execute,the,insert,generating,any,number,of,keys;private,key,holder,execute,insert,and,return,key,holder,internal,final,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,call,get,insert,string,with,values,final,key,holder,key,holder,new,generated,key,holder,if,this,table,meta,data,context,is,get,generated,keys,supported,get,jdbc,template,update,new,prepared,statement,creator,override,public,prepared,statement,create,prepared,statement,connection,con,throws,sqlexception,prepared,statement,ps,prepare,statement,for,generated,keys,con,set,parameter,values,ps,values,get,insert,types,return,ps,key,holder,else,if,this,table,meta,data,context,is,get,generated,keys,simulated,throw,new,invalid,data,access,resource,usage,exception,the,get,generated,keys,feature,is,not,supported,by,this,database,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,generated,key,name,s,not,specified,using,the,generated,keys,features,requires,specifying,the,name,s,of,the,generated,column,s,if,get,generated,key,names,length,1,throw,new,invalid,data,access,api,usage,exception,current,database,only,supports,retrieving,the,key,for,a,single,column,there,are,get,generated,key,names,length,columns,specified,arrays,as,list,get,generated,key,names,final,string,key,query,this,table,meta,data,context,get,simulation,query,for,get,generated,key,this,table,meta,data,context,get,table,name,get,generated,key,names,0,assert,not,null,key,query,query,for,simulating,get,generated,keys,can,t,be,null,if,key,query,to,upper,case,starts,with,returning,long,key,get,jdbc,template,query,for,object,get,insert,string,key,query,values,to,array,new,object,values,size,long,class,map,string,object,keys,new,hash,map,string,object,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,else,get,jdbc,template,execute,new,connection,callback,object,override,public,object,do,in,connection,connection,con,throws,sqlexception,data,access,exception,prepared,statement,ps,null,try,ps,con,prepare,statement,get,insert,string,set,parameter,values,ps,values,get,insert,types,ps,execute,update,finally,jdbc,utils,close,statement,ps,statement,key,stmt,null,result,set,rs,null,map,string,object,keys,new,hash,map,string,object,1,try,key,stmt,con,create,statement,rs,key,stmt,execute,query,key,query,if,rs,next,long,key,rs,get,long,1,keys,put,get,generated,key,names,0,key,key,holder,get,key,list,add,keys,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,key,stmt,return,null,return,key,holder,return,key,holder
AbstractJdbcInsert -> public List<String> getColumnNames();1328020251;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1356735495;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1357119239;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1362408075;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1368482696;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1385412762;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1385423968;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1407511029;Get the names of the columns used;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1407789123;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1416833949;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1446038912;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1467667241;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1467730834;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1487178248;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1496837955;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1500448076;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1500495740;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1500502496;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1519295386;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1520528267;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1521457491;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1530174524;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> public List<String> getColumnNames();1532981251;Get the names of the columns used.;public List<String> getColumnNames() {_		return Collections.unmodifiableList(this.declaredColumns)__	};get,the,names,of,the,columns,used;public,list,string,get,column,names,return,collections,unmodifiable,list,this,declared,columns
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1328020251;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1356735495;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1357119239;Match the provided in parameter values with regitered parameters and parameters defined via metedata_processing.__@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metedata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1362408075;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1368482696;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1385412762;Match the provided in parameter values with regitered parameters and parameters defined_via metadata processing._@param parameterSource the parameter vakues provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,regitered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,vakues,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1385423968;Match the provided in parameter values with registered parameters and parameters defined_via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1407511029;Match the provided in parameter values with registered parameters and parameters defined_via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1407789123;Match the provided in parameter values with registered parameters and parameters defined_via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1416833949;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1446038912;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1467667241;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1467730834;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1487178248;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1496837955;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1500448076;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1500495740;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1500502496;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1519295386;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1520528267;Match the provided in parameter values with registered parameters and parameters_defined via metadata processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,metadata,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1521457491;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1530174524;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return a Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,a,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1532981251;Match the provided in parameter values with registered parameters and parameters_defined via meta-data processing._@param parameterSource the parameter values provided as a {@link SqlParameterSource}_@return a Map with parameter names and values;protected List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		return this.tableMetaDataContext.matchInParameterValuesWithInsertColumns(parameterSource)__	};match,the,provided,in,parameter,values,with,registered,parameters,and,parameters,defined,via,meta,data,processing,param,parameter,source,the,parameter,values,provided,as,a,link,sql,parameter,source,return,a,map,with,parameter,names,and,values;protected,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,return,this,table,meta,data,context,match,in,parameter,values,with,insert,columns,parameter,source
AbstractJdbcInsert -> public String getTableName();1328020251;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1356735495;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1357119239;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1362408075;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1368482696;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1385412762;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1385423968;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1407511029;Get the name of the table for this insert;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1407789123;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1416833949;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1446038912;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1467667241;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1467730834;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public String getTableName();1487178248;Get the name of the table for this insert.;public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1328020251;Method to check whether we are allowd to make any configuration changes at this time.  If the class has been_compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException("Configuration can't be altered once the class has been compiled or used.")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1356735495;Method to check whether we are allowd to make any configuration changes at this time.  If the class has been_compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException("Configuration can't be altered once the class has been compiled or used.")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1357119239;Method to check whether we are allowd to make any configuration changes at this time.  If the class has been_compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException("Configuration can't be altered once the class has been compiled or used.")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1362408075;Method to check whether we are allowd to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1368482696;Method to check whether we are allowd to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1385412762;Method to check whether we are allowd to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowd,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1385423968;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1407511029;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1407789123;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1416833949;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1446038912;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1467667241;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1467730834;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1487178248;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1496837955;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1500448076;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1500495740;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1500502496;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1519295386;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1520528267;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration can't be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,can,t,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1521457491;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration cannot be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,cannot,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1530174524;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration cannot be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,cannot,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> protected void checkIfConfigurationModificationIsAllowed();1532981251;Method to check whether we are allowed to make any configuration changes at this time._If the class has been compiled, then no further changes to the configuration are allowed.;protected void checkIfConfigurationModificationIsAllowed() {_		if (isCompiled()) {_			throw new InvalidDataAccessApiUsageException(_					"Configuration cannot be altered once the class has been compiled or used")__		}_	};method,to,check,whether,we,are,allowed,to,make,any,configuration,changes,at,this,time,if,the,class,has,been,compiled,then,no,further,changes,to,the,configuration,are,allowed;protected,void,check,if,configuration,modification,is,allowed,if,is,compiled,throw,new,invalid,data,access,api,usage,exception,configuration,cannot,be,altered,once,the,class,has,been,compiled,or,used
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1500448076;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1500495740;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1500502496;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1519295386;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1520528267;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1521457491;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1530174524;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(@Nullable String catalogName);1532981251;Set the name of the catalog for this insert.;public void setCatalogName(@Nullable String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,nullable,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> protected JdbcTemplate getJdbcTemplate();1328020251;Get the {@link JdbcTemplate} that is configured to be used;protected JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;protected,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> protected JdbcTemplate getJdbcTemplate();1356735495;Get the {@link JdbcTemplate} that is configured to be used;protected JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;protected,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> protected JdbcTemplate getJdbcTemplate();1357119239;Get the {@link JdbcTemplate} that is configured to be used;protected JdbcTemplate getJdbcTemplate() {_		return this.jdbcTemplate__	};get,the,link,jdbc,template,that,is,configured,to,be,used;protected,jdbc,template,get,jdbc,template,return,this,jdbc,template
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1407511029;Set the names of any generated keys;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1407789123;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1416833949;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1446038912;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1467667241;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1467730834;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1487178248;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1496837955;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1500448076;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1500495740;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1500502496;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1519295386;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1520528267;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1521457491;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1530174524;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> public void setGeneratedKeyNames(String... generatedKeyNames);1532981251;Set the names of any generated keys.;public void setGeneratedKeyNames(String... generatedKeyNames) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = generatedKeyNames__	};set,the,names,of,any,generated,keys;public,void,set,generated,key,names,string,generated,key,names,check,if,configuration,modification,is,allowed,this,generated,key,names,generated,key,names
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource[] batch);1328020251;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}__@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource[] batch);1356735495;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}__@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(SqlParameterSource[] batch);1357119239;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}__@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1385412762;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1385423968;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1407511029;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1407789123;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1328020251;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1356735495;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1357119239;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1362408075;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1368482696;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1385412762;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1385423968;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1407511029;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1407789123;Constructor for sublasses to delegate to for setting the DataSource.;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,for,sublasses,to,delegate,to,for,setting,the,data,source;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1416833949;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1446038912;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1467667241;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1467730834;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1487178248;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1496837955;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1500448076;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1500495740;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1500502496;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1519295386;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1520528267;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1521457491;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1530174524;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> protected AbstractJdbcInsert(DataSource dataSource);1532981251;Constructor to be used when initializing using a {@link DataSource}._@param dataSource the DataSource to be used;protected AbstractJdbcInsert(DataSource dataSource) {_		this.jdbcTemplate = new JdbcTemplate(dataSource)__	};constructor,to,be,used,when,initializing,using,a,link,data,source,param,data,source,the,data,source,to,be,used;protected,abstract,jdbc,insert,data,source,data,source,this,jdbc,template,new,jdbc,template,data,source
AbstractJdbcInsert -> public void setTableName(String tableName);1328020251;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1356735495;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1357119239;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1362408075;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1368482696;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1385412762;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1385423968;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1407511029;Set the name of the table for this insert;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1407789123;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1416833949;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1446038912;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1467667241;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1467730834;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1487178248;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> public void setTableName(String tableName);1496837955;Set the name of the table for this insert.;public void setTableName(String tableName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setTableName(tableName)__	};set,the,name,of,the,table,for,this,insert;public,void,set,table,name,string,table,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,table,name,table,name
AbstractJdbcInsert -> protected void compileInternal();1328020251;Method to perform the actual compilation.  Subclasses can override this template method to perform_their own compilation.  Invoked after this base class's compilation is complete.;protected void compileInternal() {__		tableMetaDataContext.processMetaData(getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())___		insertString = tableMetaDataContext.createInsertString(getGeneratedKeyNames())___		insertTypes = tableMetaDataContext.createInsertTypes()___		if (logger.isDebugEnabled()) {_			logger.debug("Compiled JdbcInsert. Insert string is [" + getInsertString() + "]")__		}__		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,insert,string,table,meta,data,context,create,insert,string,get,generated,key,names,insert,types,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,jdbc,insert,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1356735495;Method to perform the actual compilation.  Subclasses can override this template method to perform_their own compilation.  Invoked after this base class's compilation is complete.;protected void compileInternal() {__		tableMetaDataContext.processMetaData(getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())___		insertString = tableMetaDataContext.createInsertString(getGeneratedKeyNames())___		insertTypes = tableMetaDataContext.createInsertTypes()___		if (logger.isDebugEnabled()) {_			logger.debug("Compiled JdbcInsert. Insert string is [" + getInsertString() + "]")__		}__		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,insert,string,table,meta,data,context,create,insert,string,get,generated,key,names,insert,types,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,jdbc,insert,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1357119239;Method to perform the actual compilation.  Subclasses can override this template method to perform_their own compilation.  Invoked after this base class's compilation is complete.;protected void compileInternal() {__		tableMetaDataContext.processMetaData(getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())___		insertString = tableMetaDataContext.createInsertString(getGeneratedKeyNames())___		insertTypes = tableMetaDataContext.createInsertTypes()___		if (logger.isDebugEnabled()) {_			logger.debug("Compiled JdbcInsert. Insert string is [" + getInsertString() + "]")__		}__		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,insert,string,table,meta,data,context,create,insert,string,get,generated,key,names,insert,types,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,jdbc,insert,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1362408075;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1368482696;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1385412762;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1385423968;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1407511029;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1407789123;Method to perform the actual compilation. Subclasses can override this template method_to perform  their own compilation. Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};method,to,perform,the,actual,compilation,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1416833949;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1446038912;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1467667241;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1467730834;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1487178248;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		this.tableMetaDataContext.processMetaData(_				getJdbcTemplate().getDataSource(), getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,this,table,meta,data,context,process,meta,data,get,jdbc,template,get,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1496837955;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1500448076;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + getInsertString() + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,get,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1500495740;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1500502496;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1519295386;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1520528267;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1521457491;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1530174524;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected void compileInternal();1532981251;Delegate method to perform the actual compilation._<p>Subclasses can override this template method to perform  their own compilation._Invoked after this base class's compilation is complete.;protected void compileInternal() {_		DataSource dataSource = getJdbcTemplate().getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		this.tableMetaDataContext.processMetaData(dataSource, getColumnNames(), getGeneratedKeyNames())__		this.insertString = this.tableMetaDataContext.createInsertString(getGeneratedKeyNames())__		this.insertTypes = this.tableMetaDataContext.createInsertTypes()__		if (logger.isDebugEnabled()) {_			logger.debug("Compiled insert object: insert string is [" + this.insertString + "]")__		}_		onCompileInternal()__	};delegate,method,to,perform,the,actual,compilation,p,subclasses,can,override,this,template,method,to,perform,their,own,compilation,invoked,after,this,base,class,s,compilation,is,complete;protected,void,compile,internal,data,source,data,source,get,jdbc,template,get,data,source,assert,state,data,source,null,no,data,source,set,this,table,meta,data,context,process,meta,data,data,source,get,column,names,get,generated,key,names,this,insert,string,this,table,meta,data,context,create,insert,string,get,generated,key,names,this,insert,types,this,table,meta,data,context,create,insert,types,if,logger,is,debug,enabled,logger,debug,compiled,insert,object,insert,string,is,this,insert,string,on,compile,internal
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1328020251;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1356735495;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1357119239;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1362408075;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1368482696;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1385412762;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1385423968;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1407511029;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1407789123;Method that provides execution of the insert using the passed in {@link SqlParameterSource}_and returning a generated key__@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1416833949;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1446038912;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1467667241;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1467730834;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1487178248;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1496837955;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1500448076;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1500495740;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1500502496;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1519295386;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1520528267;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1521457491;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1530174524;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource);1532981251;Method that provides execution of the insert using the passed-in_{@link SqlParameterSource} and returning a generated key._@param parameterSource parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(SqlParameterSource parameterSource) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,link,sql,parameter,source,and,returning,a,generated,key,param,parameter,source,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,sql,parameter,source,parameter,source,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1328020251;Method to execute the batch insert;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		int[] updateCounts = jdbcTemplate.batchUpdate(_				getInsertString(),_				new BatchPreparedStatementSetter() {__					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}__					public int getBatchSize() {_						return batchValues.length__					}_				})__		return updateCounts__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,int,update,counts,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,public,int,get,batch,size,return,batch,values,length,return,update,counts
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1356735495;Method to execute the batch insert;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		int[] updateCounts = jdbcTemplate.batchUpdate(_				getInsertString(),_				new BatchPreparedStatementSetter() {__					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}__					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__		return updateCounts__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,int,update,counts,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length,return,update,counts
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1357119239;Method to execute the batch insert;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		int[] updateCounts = jdbcTemplate.batchUpdate(_				getInsertString(),_				new BatchPreparedStatementSetter() {__					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}__					public int getBatchSize() {_						return batchValues.length__					}_				})__		return updateCounts__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,int,update,counts,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,public,int,get,batch,size,return,batch,values,length,return,update,counts
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1362408075;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1368482696;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1385412762;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1385423968;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1407511029;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> private int[] executeBatchInternal(final List<Object>[] batchValues);1407789123;Method to execute the batch insert.;private int[] executeBatchInternal(final List<Object>[] batchValues) {_		if (logger.isDebugEnabled()) {_			logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.length)__		}_		return getJdbcTemplate().batchUpdate(getInsertString(),_				new BatchPreparedStatementSetter() {_					@Override_					public void setValues(PreparedStatement ps, int i) throws SQLException {_						List<Object> values = batchValues[i]__						setParameterValues(ps, values, getInsertTypes())__					}_					@Override_					public int getBatchSize() {_						return batchValues.length__					}_				})__	};method,to,execute,the,batch,insert;private,int,execute,batch,internal,final,list,object,batch,values,if,logger,is,debug,enabled,logger,debug,executing,statement,get,insert,string,with,batch,of,size,batch,values,length,return,get,jdbc,template,batch,update,get,insert,string,new,batch,prepared,statement,setter,override,public,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,list,object,values,batch,values,i,set,parameter,values,ps,values,get,insert,types,override,public,int,get,batch,size,return,batch,values,length
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1385412762;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1385423968;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1407511029;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings({ "unchecked", "rawtypes" }) 	protected int[] doExecuteBatch(SqlParameterSource[] batch);1407789123;Method that provides execution of a batch insert using the passed in array of {@link SqlParameterSource}_@param batch array of SqlParameterSource with parameter names and values to be used in insert_@return array of number of rows affected;@SuppressWarnings({ "unchecked", "rawtypes" })_	protected int[] doExecuteBatch(SqlParameterSource[] batch) {_		checkCompiled()__		List[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (SqlParameterSource parameterSource : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(parameterSource)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,array,of,link,sql,parameter,source,param,batch,array,of,sql,parameter,source,with,parameter,names,and,values,to,be,used,in,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,rawtypes,protected,int,do,execute,batch,sql,parameter,source,batch,check,compiled,list,batch,values,new,array,list,batch,length,int,i,0,for,sql,parameter,source,parameter,source,batch,list,object,values,match,in,parameter,values,with,insert,columns,parameter,source,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(Map<String, ?>... batch);1416833949;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> protected int[] doExecuteBatch(Map<String, ?>... batch);1446038912;Delegate method that executes a batch insert using the passed-in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;protected int[] doExecuteBatch(Map<String, ?>... batch) {_		checkCompiled()__		List<List<Object>> batchValues = new ArrayList<List<Object>>(batch.length)__		for (Map<String, ?> args : batch) {_			batchValues.add(matchInParameterValuesWithInsertColumns(args))__		}_		return executeBatchInternal(batchValues)__	};delegate,method,that,executes,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;protected,int,do,execute,batch,map,string,batch,check,compiled,list,list,object,batch,values,new,array,list,list,object,batch,length,for,map,string,args,batch,batch,values,add,match,in,parameter,values,with,insert,columns,args,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1328020251;Method to execute the insert;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		int updateCount = jdbcTemplate.update(getInsertString(), values.toArray(), getInsertTypes())__		return updateCount__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,int,update,count,jdbc,template,update,get,insert,string,values,to,array,get,insert,types,return,update,count
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1356735495;Method to execute the insert;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		int updateCount = jdbcTemplate.update(getInsertString(), values.toArray(), getInsertTypes())__		return updateCount__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,int,update,count,jdbc,template,update,get,insert,string,values,to,array,get,insert,types,return,update,count
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1357119239;Method to execute the insert;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		int updateCount = jdbcTemplate.update(getInsertString(), values.toArray(), getInsertTypes())__		return updateCount__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,int,update,count,jdbc,template,update,get,insert,string,values,to,array,get,insert,types,return,update,count
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1362408075;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1368482696;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1385412762;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1385423968;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1407511029;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> private int executeInsertInternal(List<Object> values);1407789123;Method to execute the insert.;private int executeInsertInternal(List<Object> values) {_		if (logger.isDebugEnabled()) {_			logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values)__		}_		return getJdbcTemplate().update(getInsertString(), values.toArray(), getInsertTypes())__	};method,to,execute,the,insert;private,int,execute,insert,internal,list,object,values,if,logger,is,debug,enabled,logger,debug,the,following,parameters,are,used,for,insert,get,insert,string,with,values,return,get,jdbc,template,update,get,insert,string,values,to,array,get,insert,types
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1416833949;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1446038912;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1467667241;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1467730834;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1487178248;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1496837955;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1500448076;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1500495740;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1500502496;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1519295386;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1520528267;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1521457491;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1530174524;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args a Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> protected Number doExecuteAndReturnKey(Map<String, ?> args);1532981251;Method that provides execution of the insert using the passed-in_Map of parameters and returning a generated key._@param args a Map with parameter names and values to be used in insert_@return the key generated by the insert;protected Number doExecuteAndReturnKey(Map<String, ?> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertAndReturnKeyInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,and,returning,a,generated,key,param,args,a,map,with,parameter,names,and,values,to,be,used,in,insert,return,the,key,generated,by,the,insert;protected,number,do,execute,and,return,key,map,string,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,and,return,key,internal,values
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1496837955;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1500448076;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1500495740;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1500502496;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1519295386;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1520528267;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1521457491;Internal implementation for setting parameter values_@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1530174524;Internal implementation for setting parameter values._@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes) 			throws SQLException;1532981251;Internal implementation for setting parameter values._@param preparedStatement the PreparedStatement_@param values the values to be set;private void setParameterValues(PreparedStatement preparedStatement, List<?> values, @Nullable int... columnTypes)_			throws SQLException {__		int colIndex = 0__		for (Object value : values) {_			colIndex++__			if (columnTypes == null || colIndex > columnTypes.length) {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, SqlTypeValue.TYPE_UNKNOWN, value)__			}_			else {_				StatementCreatorUtils.setParameterValue(preparedStatement, colIndex, columnTypes[colIndex - 1], value)__			}_		}_	};internal,implementation,for,setting,parameter,values,param,prepared,statement,the,prepared,statement,param,values,the,values,to,be,set;private,void,set,parameter,values,prepared,statement,prepared,statement,list,values,nullable,int,column,types,throws,sqlexception,int,col,index,0,for,object,value,values,col,index,if,column,types,null,col,index,column,types,length,statement,creator,utils,set,parameter,value,prepared,statement,col,index,sql,type,value,value,else,statement,creator,utils,set,parameter,value,prepared,statement,col,index,column,types,col,index,1,value
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1328020251;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1356735495;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1357119239;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1362408075;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1368482696;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1385412762;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1385423968;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1407511029;Specify whether the parameter metadata for the call should be used.  The default is true.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1407789123;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1416833949;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1446038912;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1467667241;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1467730834;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1487178248;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1496837955;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1500448076;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1500495740;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1500502496;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1519295386;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1520528267;Specify whether the parameter metadata for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,metadata,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1521457491;Specify whether the parameter meta-data for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,meta,data,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1530174524;Specify whether the parameter meta-data for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,meta,data,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1532981251;Specify whether the parameter meta-data for the call should be used._The default is {@code true}.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.tableMetaDataContext.setAccessTableColumnMetaData(accessTableColumnMetaData)__	};specify,whether,the,parameter,meta,data,for,the,call,should,be,used,the,default,is,code,true;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,table,meta,data,context,set,access,table,column,meta,data,access,table,column,meta,data
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1500448076;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1500495740;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1500502496;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1519295386;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1520528267;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1521457491;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1530174524;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setSchemaName(@Nullable String schemaName);1532981251;Set the name of the schema for this insert.;public void setSchemaName(@Nullable String schemaName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setSchemaName(schemaName)__	};set,the,name,of,the,schema,for,this,insert;public,void,set,schema,name,nullable,string,schema,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,schema,name,schema,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1328020251;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1356735495;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1357119239;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1362408075;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1368482696;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1385412762;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1385423968;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1407511029;Specify the name of a single generated key column;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1407789123;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1416833949;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1446038912;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1467667241;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1467730834;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1487178248;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1496837955;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1500448076;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1500495740;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1500502496;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1519295386;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1520528267;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1521457491;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1530174524;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> public void setGeneratedKeyName(String generatedKeyName);1532981251;Specify the name of a single generated key column.;public void setGeneratedKeyName(String generatedKeyName) {_		checkIfConfigurationModificationIsAllowed()__		this.generatedKeyNames = new String[] {generatedKeyName}__	};specify,the,name,of,a,single,generated,key,column;public,void,set,generated,key,name,string,generated,key,name,check,if,configuration,modification,is,allowed,this,generated,key,names,new,string,generated,key,name
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1328020251;Method that provides execution of the insert using the passed in Map of parameters__@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1356735495;Method that provides execution of the insert using the passed in Map of parameters__@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1357119239;Method that provides execution of the insert using the passed in Map of parameters__@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1362408075;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1368482696;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1385412762;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1385423968;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1407511029;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> protected int doExecute(Map<String, Object> args);1407789123;Method that provides execution of the insert using the passed in Map of parameters_@param args Map with parameter names and values to be used in insert_@return number of rows affected;protected int doExecute(Map<String, Object> args) {_		checkCompiled()__		List<Object> values = matchInParameterValuesWithInsertColumns(args)__		return executeInsertInternal(values)__	};method,that,provides,execution,of,the,insert,using,the,passed,in,map,of,parameters,param,args,map,with,parameter,names,and,values,to,be,used,in,insert,return,number,of,rows,affected;protected,int,do,execute,map,string,object,args,check,compiled,list,object,values,match,in,parameter,values,with,insert,columns,args,return,execute,insert,internal,values
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1328020251;Compile this JdbcInsert using provided parameters and meta data plus other settings.  This_finalizes the configuration for this object and subsequent attempts to compile are ignored._This will be implicitly called the first time an un-compiled insert is executed._@throws org.springframework.dao.InvalidDataAccessApiUsageException if the object hasn't_been correctly initialized, for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}__			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}__			compileInternal()__			this.compiled = true___			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,org,springframework,dao,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1356735495;Compile this JdbcInsert using provided parameters and meta data plus other settings.  This_finalizes the configuration for this object and subsequent attempts to compile are ignored._This will be implicitly called the first time an un-compiled insert is executed._@throws org.springframework.dao.InvalidDataAccessApiUsageException if the object hasn't_been correctly initialized, for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}__			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}__			compileInternal()__			this.compiled = true___			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,org,springframework,dao,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1357119239;Compile this JdbcInsert using provided parameters and meta data plus other settings.  This_finalizes the configuration for this object and subsequent attempts to compile are ignored._This will be implicitly called the first time an un-compiled insert is executed._@throws org.springframework.dao.InvalidDataAccessApiUsageException if the object hasn't_been correctly initialized, for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}__			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}__			compileInternal()__			this.compiled = true___			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,org,springframework,dao,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1362408075;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1368482696;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1385412762;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1385423968;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1407511029;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1407789123;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1416833949;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1446038912;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1467667241;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1467730834;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1487178248;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1496837955;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1500448076;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1500495740;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1500502496;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public synchronized final void compile() throws InvalidDataAccessApiUsageException;1519295386;Compile this JdbcInsert using provided parameters and meta data plus other settings._This finalizes the configuration for this object and subsequent attempts to compile are_ignored. This will be implicitly called the first time an un-compiled insert is executed._@throws InvalidDataAccessApiUsageException if the object hasn't been correctly initialized,_for example if no DataSource has been provided;public synchronized final void compile() throws InvalidDataAccessApiUsageException {_		if (!isCompiled()) {_			if (getTableName() == null) {_				throw new InvalidDataAccessApiUsageException("Table name is required")__			}_			try {_				this.jdbcTemplate.afterPropertiesSet()__			}_			catch (IllegalArgumentException ex) {_				throw new InvalidDataAccessApiUsageException(ex.getMessage())__			}_			compileInternal()__			this.compiled = true__			if (logger.isDebugEnabled()) {_				logger.debug("JdbcInsert for table [" + getTableName() + "] compiled")__			}_		}_	};compile,this,jdbc,insert,using,provided,parameters,and,meta,data,plus,other,settings,this,finalizes,the,configuration,for,this,object,and,subsequent,attempts,to,compile,are,ignored,this,will,be,implicitly,called,the,first,time,an,un,compiled,insert,is,executed,throws,invalid,data,access,api,usage,exception,if,the,object,hasn,t,been,correctly,initialized,for,example,if,no,data,source,has,been,provided;public,synchronized,final,void,compile,throws,invalid,data,access,api,usage,exception,if,is,compiled,if,get,table,name,null,throw,new,invalid,data,access,api,usage,exception,table,name,is,required,try,this,jdbc,template,after,properties,set,catch,illegal,argument,exception,ex,throw,new,invalid,data,access,api,usage,exception,ex,get,message,compile,internal,this,compiled,true,if,logger,is,debug,enabled,logger,debug,jdbc,insert,for,table,get,table,name,compiled
AbstractJdbcInsert -> public String getCatalogName();1328020251;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1356735495;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1357119239;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1362408075;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1368482696;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1385412762;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1385423968;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1407511029;Get the name of the catalog for this insert;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1407789123;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1416833949;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1446038912;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1467667241;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1467730834;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> public String getCatalogName();1487178248;Get the name of the catalog for this insert.;public String getCatalogName() {_		return this.tableMetaDataContext.getCatalogName()__	};get,the,name,of,the,catalog,for,this,insert;public,string,get,catalog,name,return,this,table,meta,data,context,get,catalog,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1496837955;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1500448076;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1500495740;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1500502496;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1519295386;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1520528267;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1521457491;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1530174524;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> @Nullable 	public String getSchemaName();1532981251;Get the name of the schema for this insert.;@Nullable_	public String getSchemaName() {_		return this.tableMetaDataContext.getSchemaName()__	};get,the,name,of,the,schema,for,this,insert;nullable,public,string,get,schema,name,return,this,table,meta,data,context,get,schema,name
AbstractJdbcInsert -> public boolean isCompiled();1328020251;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1356735495;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1357119239;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1362408075;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1368482696;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1385412762;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1385423968;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1407511029;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1407789123;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1416833949;Is this operation "compiled"?_@return whether this operation is compiled, and ready to use.;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1446038912;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1467667241;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1467730834;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1487178248;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1496837955;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1500448076;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1500495740;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1500502496;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1519295386;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1520528267;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1521457491;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1530174524;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public boolean isCompiled();1532981251;Is this operation "compiled"?_@return whether this operation is compiled and ready to use;public boolean isCompiled() {_		return this.compiled__	};is,this,operation,compiled,return,whether,this,operation,is,compiled,and,ready,to,use;public,boolean,is,compiled,return,this,compiled
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1328020251;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1356735495;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1357119239;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1362408075;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1368482696;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1385412762;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1385423968;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1407511029;Get the names of any generated keys;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1407789123;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1416833949;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1446038912;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1467667241;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1467730834;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1487178248;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1496837955;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1500448076;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1500495740;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1500502496;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1519295386;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1520528267;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1521457491;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1530174524;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> public String[] getGeneratedKeyNames();1532981251;Get the names of any generated keys.;public String[] getGeneratedKeyNames() {_		return this.generatedKeyNames__	};get,the,names,of,any,generated,keys;public,string,get,generated,key,names,return,this,generated,key,names
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1362408075;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List<Object>[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,object,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @SuppressWarnings("unchecked") 	protected int[] doExecuteBatch(Map<String, Object>[] batch);1368482696;Method that provides execution of a batch insert using the passed in Maps of parameters._@param batch array of Maps with parameter names and values to be used in batch insert_@return array of number of rows affected;@SuppressWarnings("unchecked")_	protected int[] doExecuteBatch(Map<String, Object>[] batch) {_		checkCompiled()__		List<Object>[] batchValues = new ArrayList[batch.length]__		int i = 0__		for (Map<String, Object> args : batch) {_			List<Object> values = matchInParameterValuesWithInsertColumns(args)__			batchValues[i++] = values__		}_		return executeBatchInternal(batchValues)__	};method,that,provides,execution,of,a,batch,insert,using,the,passed,in,maps,of,parameters,param,batch,array,of,maps,with,parameter,names,and,values,to,be,used,in,batch,insert,return,array,of,number,of,rows,affected;suppress,warnings,unchecked,protected,int,do,execute,batch,map,string,object,batch,check,compiled,list,object,batch,values,new,array,list,batch,length,int,i,0,for,map,string,object,args,batch,list,object,values,match,in,parameter,values,with,insert,columns,args,batch,values,i,values,return,execute,batch,internal,batch,values
AbstractJdbcInsert -> @Nullable 	public String getTableName();1496837955;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1500448076;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1500495740;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1500502496;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1519295386;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1520528267;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1521457491;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1530174524;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> @Nullable 	public String getTableName();1532981251;Get the name of the table for this insert.;@Nullable_	public String getTableName() {_		return this.tableMetaDataContext.getTableName()__	};get,the,name,of,the,table,for,this,insert;nullable,public,string,get,table,name,return,this,table,meta,data,context,get,table,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1328020251;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1356735495;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1357119239;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1362408075;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1368482696;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1385412762;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1385423968;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1407511029;Set the name of the catalog for this insert;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1407789123;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1416833949;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1446038912;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1467667241;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1467730834;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1487178248;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
AbstractJdbcInsert -> public void setCatalogName(String catalogName);1496837955;Set the name of the catalog for this insert.;public void setCatalogName(String catalogName) {_		checkIfConfigurationModificationIsAllowed()__		this.tableMetaDataContext.setCatalogName(catalogName)__	};set,the,name,of,the,catalog,for,this,insert;public,void,set,catalog,name,string,catalog,name,check,if,configuration,modification,is,allowed,this,table,meta,data,context,set,catalog,name,catalog,name
