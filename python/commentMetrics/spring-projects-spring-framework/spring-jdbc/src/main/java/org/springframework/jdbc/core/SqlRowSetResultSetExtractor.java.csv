commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public SqlRowSet extractData(ResultSet rs) throws SQLException {     return createSqlRowSet(rs). }
true;protected;1;5;/**  * Create a {@link SqlRowSet} that wraps the given {@link ResultSet},  * representing its data in a disconnected fashion.  * <p>This implementation creates a Spring {@link ResultSetWrappingSqlRowSet}  * instance that wraps a standard JDBC {@link CachedRowSet} instance.  * Can be overridden to use a different implementation.  * @param rs the original ResultSet (connected)  * @return the disconnected SqlRowSet  * @throws SQLException if thrown by JDBC methods  * @see #newCachedRowSet()  * @see org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet  */ ;/**  * Create a {@link SqlRowSet} that wraps the given {@link ResultSet},  * representing its data in a disconnected fashion.  * <p>This implementation creates a Spring {@link ResultSetWrappingSqlRowSet}  * instance that wraps a standard JDBC {@link CachedRowSet} instance.  * Can be overridden to use a different implementation.  * @param rs the original ResultSet (connected)  * @return the disconnected SqlRowSet  * @throws SQLException if thrown by JDBC methods  * @see #newCachedRowSet()  * @see org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet  */ protected SqlRowSet createSqlRowSet(ResultSet rs) throws SQLException {     CachedRowSet rowSet = newCachedRowSet().     rowSet.populate(rs).     return new ResultSetWrappingSqlRowSet(rowSet). }
true;protected;0;3;/**  * Create a new {@link CachedRowSet} instance, to be populated by  * the {@code createSqlRowSet} implementation.  * <p>The default implementation uses JDBC 4.1's {@link RowSetFactory}.  * @return a new CachedRowSet instance  * @throws SQLException if thrown by JDBC methods  * @see #createSqlRowSet  * @see RowSetProvider#newFactory()  * @see RowSetFactory#createCachedRowSet()  */ ;/**  * Create a new {@link CachedRowSet} instance, to be populated by  * the {@code createSqlRowSet} implementation.  * <p>The default implementation uses JDBC 4.1's {@link RowSetFactory}.  * @return a new CachedRowSet instance  * @throws SQLException if thrown by JDBC methods  * @see #createSqlRowSet  * @see RowSetProvider#newFactory()  * @see RowSetFactory#createCachedRowSet()  */ protected CachedRowSet newCachedRowSet() throws SQLException {     return rowSetFactory.createCachedRowSet(). }
