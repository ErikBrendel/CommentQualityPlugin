commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader). }
false;public;0;4;;@Override public Class<? extends Resource[]> getObjectType() {     return Resource[].class. }
false;protected;0;18;;@Override protected Resource[] createInstance() throws Exception {     List<Resource> scripts = new ArrayList<>().     for (String location : this.locations) {         List<Resource> resources = new ArrayList<>(Arrays.asList(this.resourcePatternResolver.getResources(location))).         resources.sort((r1, r2) -> {             try {                 return r1.getURL().toString().compareTo(r2.getURL().toString()).             } catch (IOException ex) {                 return 0.             }         }).         scripts.addAll(resources).     }     return scripts.toArray(new Resource[0]). }
