# id;timestamp;commentText;codeText;commentWords;codeWords
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1328020251;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1340131687;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1346789400;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1347120993;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1356735495;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1357119239;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1362408075;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1368482696;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1391170675;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1391171635;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1395143680;Factory method that returns the embedded database instance.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,embedded,database,instance;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1395183391;Factory method that returns the {@link EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,link,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1403611325;Factory method that returns the {@link EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,link,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1404220471;Factory method that returns the {@link EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,link,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1426893719;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1440013447;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1440015731;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1495868221;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1496837955;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1498780456;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1530174524;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> public EmbeddedDatabase getDatabase();1532091916;Factory method that returns the {@linkplain EmbeddedDatabase embedded database}_instance, which is also a {@link DataSource}.;public EmbeddedDatabase getDatabase() {_		if (this.dataSource == null) {_			initDatabase()__		}_		return new EmbeddedDataSourceProxy(this.dataSource)__	};factory,method,that,returns,the,linkplain,embedded,database,embedded,database,instance,which,is,also,a,link,data,source;public,embedded,database,get,database,if,this,data,source,null,init,database,return,new,embedded,data,source,proxy,this,data,source
EmbeddedDatabaseFactory -> @Nullable 	protected final DataSource getDataSource();1495868221;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;@Nullable_	protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;nullable,protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> @Nullable 	protected final DataSource getDataSource();1496837955;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;@Nullable_	protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;nullable,protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> @Nullable 	protected final DataSource getDataSource();1498780456;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;@Nullable_	protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;nullable,protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> @Nullable 	protected final DataSource getDataSource();1530174524;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;@Nullable_	protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;nullable,protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> @Nullable 	protected final DataSource getDataSource();1532091916;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;@Nullable_	protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;nullable,protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1328020251;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1340131687;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1346789400;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1347120993;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1356735495;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1357119239;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1362408075;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1368482696;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1391170675;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1391171635;Set the name of the database. Defaults to "testdb"._@param databaseName name of the test database;public void setDatabaseName(String databaseName) {_		Assert.notNull(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,defaults,to,testdb,param,database,name,name,of,the,test,database;public,void,set,database,name,string,database,name,assert,not,null,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1395143680;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._@param databaseName name of the embedded database;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,param,database,name,name,of,the,embedded,database;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1395183391;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._@param databaseName name of the embedded database;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,param,database,name,name,of,the,embedded,database;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1403611325;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._@param databaseName name of the embedded database;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,param,database,name,name,of,the,embedded,database;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1404220471;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._@param databaseName name of the embedded database;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,param,database,name,name,of,the,embedded,database;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1426893719;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1440013447;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1440015731;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1495868221;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1496837955;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1498780456;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1530174524;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabaseName(String databaseName);1532091916;Set the name of the database._<p>Defaults to {@value #DEFAULT_DATABASE_NAME}._<p>Will be overridden if the {@code generateUniqueDatabaseName} flag_has been set to {@code true}._@param databaseName name of the embedded database_@see #setGenerateUniqueDatabaseName;public void setDatabaseName(String databaseName) {_		Assert.hasText(databaseName, "Database name is required")__		this.databaseName = databaseName__	};set,the,name,of,the,database,p,defaults,to,value,p,will,be,overridden,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,param,database,name,name,of,the,embedded,database,see,set,generate,unique,database,name;public,void,set,database,name,string,database,name,assert,has,text,database,name,database,name,is,required,this,database,name,database,name
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1328020251;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1340131687;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1346789400;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1347120993;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1356735495;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1357119239;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1362408075;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1368482696;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1391170675;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1391171635;Set the strategy that will be used to populate the embedded database. Defaults to null._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,populate,the,embedded,database,defaults,to,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1395143680;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}._@see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabasePopulator;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null,see,org,springframework,jdbc,datasource,init,data,source,initializer,set,database,populator;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1395183391;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1403611325;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1404220471;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1426893719;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1440013447;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1440015731;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1495868221;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1496837955;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1498780456;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1530174524;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setDatabasePopulator(DatabasePopulator populator);1532091916;Set the strategy that will be used to initialize or populate the embedded_database._<p>Defaults to {@code null}.;public void setDatabasePopulator(DatabasePopulator populator) {_		this.databasePopulator = populator__	};set,the,strategy,that,will,be,used,to,initialize,or,populate,the,embedded,database,p,defaults,to,code,null;public,void,set,database,populator,database,populator,populator,this,database,populator,populator
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1426893719;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1440013447;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1440015731;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1495868221;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1496837955;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1498780456;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@see #setDatabaseName_@since 4.2;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,see,set,database,name,since,4,2;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1530174524;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@since 4.2_@see #setDatabaseName;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,since,4,2,see,set,database,name;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName);1532091916;Set the {@code generateUniqueDatabaseName} flag to enable or disable_generation of a pseudo-random unique ID to be used as the database name._<p>Setting this flag to {@code true} overrides any explicit name set_via {@link #setDatabaseName}._@since 4.2_@see #setDatabaseName;public void setGenerateUniqueDatabaseName(boolean generateUniqueDatabaseName) {_		this.generateUniqueDatabaseName = generateUniqueDatabaseName__	};set,the,code,generate,unique,database,name,flag,to,enable,or,disable,generation,of,a,pseudo,random,unique,id,to,be,used,as,the,database,name,p,setting,this,flag,to,code,true,overrides,any,explicit,name,set,via,link,set,database,name,since,4,2,see,set,database,name;public,void,set,generate,unique,database,name,boolean,generate,unique,database,name,this,generate,unique,database,name,generate,unique,database,name
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1328020251;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1340131687;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1346789400;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1347120993;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1356735495;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1357119239;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1362408075;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1368482696;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1391170675;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1391171635;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1395143680;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1395183391;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1403611325;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1404220471;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1426893719;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1440013447;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1440015731;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1495868221;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1496837955;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1498780456;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1530174524;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer);1532091916;Set the strategy that will be used to configure the embedded database instance._<p>Call this when you wish to use an embedded database type not already supported.;public void setDatabaseConfigurer(EmbeddedDatabaseConfigurer configurer) {_		this.databaseConfigurer = configurer__	};set,the,strategy,that,will,be,used,to,configure,the,embedded,database,instance,p,call,this,when,you,wish,to,use,an,embedded,database,type,not,already,supported;public,void,set,database,configurer,embedded,database,configurer,configurer,this,database,configurer,configurer
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1328020251;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1340131687;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1346789400;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1347120993;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1356735495;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1357119239;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1362408075;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1368482696;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1391170675;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1391171635;Set the factory to use to create the DataSource instance that connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1395143680;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1395183391;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1403611325;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1404220471;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1426893719;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1440013447;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1440015731;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1495868221;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1496837955;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1498780456;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1530174524;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> public void setDataSourceFactory(DataSourceFactory dataSourceFactory);1532091916;Set the factory to use to create the {@link DataSource} instance that_connects to the embedded database._<p>Defaults to {@link SimpleDriverDataSourceFactory}.;public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {_		Assert.notNull(dataSourceFactory, "DataSourceFactory is required")__		this.dataSourceFactory = dataSourceFactory__	};set,the,factory,to,use,to,create,the,link,data,source,instance,that,connects,to,the,embedded,database,p,defaults,to,link,simple,driver,data,source,factory;public,void,set,data,source,factory,data,source,factory,data,source,factory,assert,not,null,data,source,factory,data,source,factory,is,required,this,data,source,factory,data,source,factory
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1328020251;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1340131687;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1346789400;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1347120993;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1356735495;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1357119239;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1362408075;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1368482696;Hook to shutdown the embedded database. Subclasses may call to force shutdown._After calling, {@link #getDataSource()} returns null. Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,after,calling,link,get,data,source,returns,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1391170675;Hook to shutdown the embedded database. Subclasses may call to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1391171635;Hook to shutdown the embedded database. Subclasses may call to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1395143680;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1395183391;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1403611325;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1404220471;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1426893719;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1440013447;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1440015731;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {__			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}__			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1495868221;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {__			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}__			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1496837955;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}_			this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1498780456;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}_			if (this.databaseConfigurer != null) {_				this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			}_			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,if,this,database,configurer,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1530174524;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}_			if (this.databaseConfigurer != null) {_				this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			}_			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,if,this,database,configurer,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> protected void shutdownDatabase();1532091916;Hook to shutdown the embedded database. Subclasses may call this method_to force shutdown._<p>After calling, {@link #getDataSource()} returns {@code null}._<p>Does nothing if no embedded database has been initialized.;protected void shutdownDatabase() {_		if (this.dataSource != null) {_			if (logger.isInfoEnabled()) {_				if (this.dataSource instanceof SimpleDriverDataSource) {_					logger.info(String.format("Shutting down embedded database: url='%s'",_						((SimpleDriverDataSource) this.dataSource).getUrl()))__				}_				else {_					logger.info(String.format("Shutting down embedded database '%s'", this.databaseName))__				}_			}_			if (this.databaseConfigurer != null) {_				this.databaseConfigurer.shutdown(this.dataSource, this.databaseName)__			}_			this.dataSource = null__		}_	};hook,to,shutdown,the,embedded,database,subclasses,may,call,this,method,to,force,shutdown,p,after,calling,link,get,data,source,returns,code,null,p,does,nothing,if,no,embedded,database,has,been,initialized;protected,void,shutdown,database,if,this,data,source,null,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,logger,info,string,format,shutting,down,embedded,database,url,s,simple,driver,data,source,this,data,source,get,url,else,logger,info,string,format,shutting,down,embedded,database,s,this,database,name,if,this,database,configurer,null,this,database,configurer,shutdown,this,data,source,this,database,name,this,data,source,null
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1328020251;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1340131687;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1346789400;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1347120993;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1356735495;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1357119239;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1362408075;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1368482696;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1391170675;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1391171635;Set the type of embedded database to use. Call this when you wish to configure_one of the pre-supported types. Defaults to HSQL._@param type the test database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,defaults,to,hsql,param,type,the,test,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1395143680;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1395183391;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1403611325;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1404220471;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1426893719;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1440013447;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1440015731;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1495868221;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1496837955;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1498780456;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1530174524;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> public void setDatabaseType(EmbeddedDatabaseType type);1532091916;Set the type of embedded database to use._<p>Call this when you wish to configure one of the pre-supported types._<p>Defaults to HSQL._@param type the database type;public void setDatabaseType(EmbeddedDatabaseType type) {_		this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(type)__	};set,the,type,of,embedded,database,to,use,p,call,this,when,you,wish,to,configure,one,of,the,pre,supported,types,p,defaults,to,hsql,param,type,the,database,type;public,void,set,database,type,embedded,database,type,type,this,database,configurer,embedded,database,configurer,factory,get,configurer,type
EmbeddedDatabaseFactory -> protected void initDatabase();1328020251;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1340131687;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1346789400;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1347120993;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1356735495;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1357119239;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1362408075;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1368482696;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1391170675;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1391171635;Hook to initialize the embedded database. Subclasses may call to force initialization. After calling this method,_{@link #getDataSource()} returns the DataSource providing connectivity to the db.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,to,force,initialization,after,calling,this,method,link,get,data,source,returns,the,data,source,providing,connectivity,to,the,db;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1395143680;Hook to initialize the embedded database. Subclasses may call this method_to force initialization._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,this,method,to,force,initialization,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1395183391;Hook to initialize the embedded database. Subclasses may call this method_to force initialization._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,this,method,to,force,initialization,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1403611325;Hook to initialize the embedded database. Subclasses may call this method_to force initialization._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,this,method,to,force,initialization,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1404220471;Hook to initialize the embedded database. Subclasses may call this method_to force initialization._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,subclasses,may,call,this,method,to,force,initialization,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1426893719;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1440013447;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (logger.isInfoEnabled()) {_			logger.info("Creating embedded database '" + this.databaseName + "'")__		}_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,logger,is,info,enabled,logger,info,creating,embedded,database,this,database,name,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1440015731;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_					simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1495868221;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_					simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1496837955;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_					simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1498780456;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_					simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1530174524;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_					simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected void initDatabase();1532091916;Hook to initialize the embedded database._<p>If the {@code generateUniqueDatabaseName} flag has been set to {@code true},_the current value of the {@linkplain #setDatabaseName database name} will_be overridden with an auto-generated name._<p>Subclasses may call this method to force initialization_ however,_this method should only be invoked once._<p>After calling this method, {@link #getDataSource()} returns the_{@link DataSource} providing connectivity to the database.;protected void initDatabase() {_		if (this.generateUniqueDatabaseName) {_			setDatabaseName(UUID.randomUUID().toString())__		}__		_		if (this.databaseConfigurer == null) {_			this.databaseConfigurer = EmbeddedDatabaseConfigurerFactory.getConfigurer(EmbeddedDatabaseType.HSQL)__		}_		this.databaseConfigurer.configureConnectionProperties(_				this.dataSourceFactory.getConnectionProperties(), this.databaseName)__		this.dataSource = this.dataSourceFactory.getDataSource()___		if (logger.isInfoEnabled()) {_			if (this.dataSource instanceof SimpleDriverDataSource) {_				SimpleDriverDataSource simpleDriverDataSource = (SimpleDriverDataSource) this.dataSource__				logger.info(String.format("Starting embedded database: url='%s', username='%s'",_						simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()))__			}_			else {_				logger.info(String.format("Starting embedded database '%s'", this.databaseName))__			}_		}__		_		if (this.databasePopulator != null) {_			try {_				DatabasePopulatorUtils.execute(this.databasePopulator, this.dataSource)__			}_			catch (RuntimeException ex) {_				_				shutdownDatabase()__				throw ex__			}_		}_	};hook,to,initialize,the,embedded,database,p,if,the,code,generate,unique,database,name,flag,has,been,set,to,code,true,the,current,value,of,the,linkplain,set,database,name,database,name,will,be,overridden,with,an,auto,generated,name,p,subclasses,may,call,this,method,to,force,initialization,however,this,method,should,only,be,invoked,once,p,after,calling,this,method,link,get,data,source,returns,the,link,data,source,providing,connectivity,to,the,database;protected,void,init,database,if,this,generate,unique,database,name,set,database,name,uuid,random,uuid,to,string,if,this,database,configurer,null,this,database,configurer,embedded,database,configurer,factory,get,configurer,embedded,database,type,hsql,this,database,configurer,configure,connection,properties,this,data,source,factory,get,connection,properties,this,database,name,this,data,source,this,data,source,factory,get,data,source,if,logger,is,info,enabled,if,this,data,source,instanceof,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,simple,driver,data,source,this,data,source,logger,info,string,format,starting,embedded,database,url,s,username,s,simple,driver,data,source,get,url,simple,driver,data,source,get,username,else,logger,info,string,format,starting,embedded,database,s,this,database,name,if,this,database,populator,null,try,database,populator,utils,execute,this,database,populator,this,data,source,catch,runtime,exception,ex,shutdown,database,throw,ex
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1328020251;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns <code>null</code> if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,code,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1340131687;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns <code>null</code> if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,code,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1346789400;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns <code>null</code> if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,code,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1347120993;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns <code>null</code> if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,code,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1356735495;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1357119239;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1362408075;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1368482696;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1391170675;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1391171635;Hook that gets the DataSource that provides the connectivity to the embedded database._<p>Returns {@code null} if the DataSource has not been initialized or the database_has been shut down. Subclasses may call to access the DataSource instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,data,source,has,not,been,initialized,or,the,database,has,been,shut,down,subclasses,may,call,to,access,the,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1395143680;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1395183391;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1403611325;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1404220471;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1426893719;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1440013447;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
EmbeddedDatabaseFactory -> protected final DataSource getDataSource();1440015731;Hook that gets the {@link DataSource} that provides the connectivity to the_embedded database._<p>Returns {@code null} if the {@code DataSource} has not been initialized_or if the database has been shut down. Subclasses may call this method to_access the {@code DataSource} instance directly.;protected final DataSource getDataSource() {_		return this.dataSource__	};hook,that,gets,the,link,data,source,that,provides,the,connectivity,to,the,embedded,database,p,returns,code,null,if,the,code,data,source,has,not,been,initialized,or,if,the,database,has,been,shut,down,subclasses,may,call,this,method,to,access,the,code,data,source,instance,directly;protected,final,data,source,get,data,source,return,this,data,source
