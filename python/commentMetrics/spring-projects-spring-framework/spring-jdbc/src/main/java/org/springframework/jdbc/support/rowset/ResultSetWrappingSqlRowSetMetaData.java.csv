commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public String getCatalogName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getCatalogName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getColumnClassName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnClassName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;0;9;;@Override public int getColumnCount() throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnCount().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;0;10;;@Override public String[] getColumnNames() throws InvalidResultSetAccessException {     if (this.columnNames == null) {         this.columnNames = new String[getColumnCount()].         for (int i = 0. i < getColumnCount(). i++) {             this.columnNames[i] = getColumnName(i + 1).         }     }     return this.columnNames. }
false;public;1;9;;@Override public int getColumnDisplaySize(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnDisplaySize(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getColumnLabel(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnLabel(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getColumnName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public int getColumnType(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnType(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getColumnTypeName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getColumnTypeName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public int getPrecision(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getPrecision(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public int getScale(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getScale(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getSchemaName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getSchemaName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public String getTableName(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.getTableName(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public boolean isCaseSensitive(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.isCaseSensitive(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public boolean isCurrency(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.isCurrency(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
false;public;1;9;;@Override public boolean isSigned(int column) throws InvalidResultSetAccessException {     try {         return this.resultSetMetaData.isSigned(column).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
