# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName);1328020251;Convenience constructor._@param dataSource the DataSource to use_@param incrementerName the name of the sequence/table to use;public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName) {_		super(dataSource, incrementerName)__	};convenience,constructor,param,data,source,the,data,source,to,use,param,incrementer,name,the,name,of,the,sequence,table,to,use;public,abstract,sequence,max,value,incrementer,data,source,data,source,string,incrementer,name,super,data,source,incrementer,name
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName);1356735495;Convenience constructor._@param dataSource the DataSource to use_@param incrementerName the name of the sequence/table to use;public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName) {_		super(dataSource, incrementerName)__	};convenience,constructor,param,data,source,the,data,source,to,use,param,incrementer,name,the,name,of,the,sequence,table,to,use;public,abstract,sequence,max,value,incrementer,data,source,data,source,string,incrementer,name,super,data,source,incrementer,name
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName);1413848647;Convenience constructor._@param dataSource the DataSource to use_@param incrementerName the name of the sequence/table to use;public AbstractSequenceMaxValueIncrementer(DataSource dataSource, String incrementerName) {_		super(dataSource, incrementerName)__	};convenience,constructor,param,data,source,the,data,source,to,use,param,incrementer,name,the,name,of,the,sequence,table,to,use;public,abstract,sequence,max,value,incrementer,data,source,data,source,string,incrementer,name,super,data,source,incrementer,name
AbstractSequenceMaxValueIncrementer -> protected abstract String getSequenceQuery()_;1328020251;Return the database-specific query to use for retrieving a sequence value._<p>The provided SQL is supposed to result in a single row with a single_column that allows for extracting a <code>long</code> value.;protected abstract String getSequenceQuery()_;return,the,database,specific,query,to,use,for,retrieving,a,sequence,value,p,the,provided,sql,is,supposed,to,result,in,a,single,row,with,a,single,column,that,allows,for,extracting,a,code,long,code,value;protected,abstract,string,get,sequence,query
AbstractSequenceMaxValueIncrementer -> protected abstract String getSequenceQuery()_;1356735495;Return the database-specific query to use for retrieving a sequence value._<p>The provided SQL is supposed to result in a single row with a single_column that allows for extracting a {@code long} value.;protected abstract String getSequenceQuery()_;return,the,database,specific,query,to,use,for,retrieving,a,sequence,value,p,the,provided,sql,is,supposed,to,result,in,a,single,row,with,a,single,column,that,allows,for,extracting,a,code,long,value;protected,abstract,string,get,sequence,query
AbstractSequenceMaxValueIncrementer -> protected abstract String getSequenceQuery()_;1413848647;Return the database-specific query to use for retrieving a sequence value._<p>The provided SQL is supposed to result in a single row with a single_column that allows for extracting a {@code long} value.;protected abstract String getSequenceQuery()_;return,the,database,specific,query,to,use,for,retrieving,a,sequence,value,p,the,provided,sql,is,supposed,to,result,in,a,single,row,with,a,single,column,that,allows,for,extracting,a,code,long,value;protected,abstract,string,get,sequence,query
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer();1328020251;Default constructor for bean property style usage._@see #setDataSource_@see #setIncrementerName;public AbstractSequenceMaxValueIncrementer() {_	};default,constructor,for,bean,property,style,usage,see,set,data,source,see,set,incrementer,name;public,abstract,sequence,max,value,incrementer
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer();1356735495;Default constructor for bean property style usage._@see #setDataSource_@see #setIncrementerName;public AbstractSequenceMaxValueIncrementer() {_	};default,constructor,for,bean,property,style,usage,see,set,data,source,see,set,incrementer,name;public,abstract,sequence,max,value,incrementer
AbstractSequenceMaxValueIncrementer -> public AbstractSequenceMaxValueIncrementer();1413848647;Default constructor for bean property style usage._@see #setDataSource_@see #setIncrementerName;public AbstractSequenceMaxValueIncrementer() {_	};default,constructor,for,bean,property,style,usage,see,set,data,source,see,set,incrementer,name;public,abstract,sequence,max,value,incrementer
AbstractSequenceMaxValueIncrementer -> @Override 	protected long getNextKey() throws DataAccessException;1328020251;Executes the SQL as specified by {@link #getSequenceQuery()}.;@Override_	protected long getNextKey() throws DataAccessException {_		Connection con = DataSourceUtils.getConnection(getDataSource())__		Statement stmt = null__		ResultSet rs = null__		try {_			stmt = con.createStatement()__			DataSourceUtils.applyTransactionTimeout(stmt, getDataSource())__			rs = stmt.executeQuery(getSequenceQuery())__			if (rs.next()) {_				return rs.getLong(1)__			}_			else {_				throw new DataAccessResourceFailureException("Sequence query did not return a result")__			}_		}_		catch (SQLException ex) {_			throw new DataAccessResourceFailureException("Could not obtain sequence value", ex)__		}_		finally {_			JdbcUtils.closeResultSet(rs)__			JdbcUtils.closeStatement(stmt)__			DataSourceUtils.releaseConnection(con, getDataSource())__		}_	};executes,the,sql,as,specified,by,link,get,sequence,query;override,protected,long,get,next,key,throws,data,access,exception,connection,con,data,source,utils,get,connection,get,data,source,statement,stmt,null,result,set,rs,null,try,stmt,con,create,statement,data,source,utils,apply,transaction,timeout,stmt,get,data,source,rs,stmt,execute,query,get,sequence,query,if,rs,next,return,rs,get,long,1,else,throw,new,data,access,resource,failure,exception,sequence,query,did,not,return,a,result,catch,sqlexception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,sequence,value,ex,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,stmt,data,source,utils,release,connection,con,get,data,source
AbstractSequenceMaxValueIncrementer -> @Override 	protected long getNextKey() throws DataAccessException;1356735495;Executes the SQL as specified by {@link #getSequenceQuery()}.;@Override_	protected long getNextKey() throws DataAccessException {_		Connection con = DataSourceUtils.getConnection(getDataSource())__		Statement stmt = null__		ResultSet rs = null__		try {_			stmt = con.createStatement()__			DataSourceUtils.applyTransactionTimeout(stmt, getDataSource())__			rs = stmt.executeQuery(getSequenceQuery())__			if (rs.next()) {_				return rs.getLong(1)__			}_			else {_				throw new DataAccessResourceFailureException("Sequence query did not return a result")__			}_		}_		catch (SQLException ex) {_			throw new DataAccessResourceFailureException("Could not obtain sequence value", ex)__		}_		finally {_			JdbcUtils.closeResultSet(rs)__			JdbcUtils.closeStatement(stmt)__			DataSourceUtils.releaseConnection(con, getDataSource())__		}_	};executes,the,sql,as,specified,by,link,get,sequence,query;override,protected,long,get,next,key,throws,data,access,exception,connection,con,data,source,utils,get,connection,get,data,source,statement,stmt,null,result,set,rs,null,try,stmt,con,create,statement,data,source,utils,apply,transaction,timeout,stmt,get,data,source,rs,stmt,execute,query,get,sequence,query,if,rs,next,return,rs,get,long,1,else,throw,new,data,access,resource,failure,exception,sequence,query,did,not,return,a,result,catch,sqlexception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,sequence,value,ex,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,stmt,data,source,utils,release,connection,con,get,data,source
AbstractSequenceMaxValueIncrementer -> @Override 	protected long getNextKey() throws DataAccessException;1413848647;Executes the SQL as specified by {@link #getSequenceQuery()}.;@Override_	protected long getNextKey() throws DataAccessException {_		Connection con = DataSourceUtils.getConnection(getDataSource())__		Statement stmt = null__		ResultSet rs = null__		try {_			stmt = con.createStatement()__			DataSourceUtils.applyTransactionTimeout(stmt, getDataSource())__			rs = stmt.executeQuery(getSequenceQuery())__			if (rs.next()) {_				return rs.getLong(1)__			}_			else {_				throw new DataAccessResourceFailureException("Sequence query did not return a result")__			}_		}_		catch (SQLException ex) {_			throw new DataAccessResourceFailureException("Could not obtain sequence value", ex)__		}_		finally {_			JdbcUtils.closeResultSet(rs)__			JdbcUtils.closeStatement(stmt)__			DataSourceUtils.releaseConnection(con, getDataSource())__		}_	};executes,the,sql,as,specified,by,link,get,sequence,query;override,protected,long,get,next,key,throws,data,access,exception,connection,con,data,source,utils,get,connection,get,data,source,statement,stmt,null,result,set,rs,null,try,stmt,con,create,statement,data,source,utils,apply,transaction,timeout,stmt,get,data,source,rs,stmt,execute,query,get,sequence,query,if,rs,next,return,rs,get,long,1,else,throw,new,data,access,resource,failure,exception,sequence,query,did,not,return,a,result,catch,sqlexception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,sequence,value,ex,finally,jdbc,utils,close,result,set,rs,jdbc,utils,close,statement,stmt,data,source,utils,release,connection,con,get,data,source
