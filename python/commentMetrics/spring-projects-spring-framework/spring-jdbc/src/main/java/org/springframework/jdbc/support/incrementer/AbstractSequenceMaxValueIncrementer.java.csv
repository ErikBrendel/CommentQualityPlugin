commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;25;/**  * Executes the SQL as specified by {@link #getSequenceQuery()}.  */ ;/**  * Executes the SQL as specified by {@link #getSequenceQuery()}.  */ @Override protected long getNextKey() throws DataAccessException {     Connection con = DataSourceUtils.getConnection(getDataSource()).     Statement stmt = null.     ResultSet rs = null.     try {         stmt = con.createStatement().         DataSourceUtils.applyTransactionTimeout(stmt, getDataSource()).         rs = stmt.executeQuery(getSequenceQuery()).         if (rs.next()) {             return rs.getLong(1).         } else {             throw new DataAccessResourceFailureException("Sequence query did not return a result").         }     } catch (SQLException ex) {         throw new DataAccessResourceFailureException("Could not obtain sequence value", ex).     } finally {         JdbcUtils.closeResultSet(rs).         JdbcUtils.closeStatement(stmt).         DataSourceUtils.releaseConnection(con, getDataSource()).     } }
true;protected,abstract;0;1;/**  * Return the database-specific query to use for retrieving a sequence value.  * <p>The provided SQL is supposed to result in a single row with a single  * column that allows for extracting a {@code long} value.  */ ;/**  * Return the database-specific query to use for retrieving a sequence value.  * <p>The provided SQL is supposed to result in a single row with a single  * column that allows for extracting a {@code long} value.  */ protected abstract String getSequenceQuery().
