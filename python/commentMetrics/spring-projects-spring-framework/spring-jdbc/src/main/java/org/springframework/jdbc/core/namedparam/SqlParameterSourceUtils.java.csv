# id;timestamp;commentText;codeText;commentWords;codeWords
SqlParameterSourceUtils -> @Nullable 	public static Object getTypedValue(SqlParameterSource source, String parameterName);1496837955;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;@Nullable_	public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;nullable,public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> @Nullable 	public static Object getTypedValue(SqlParameterSource source, String parameterName);1511122644;Create a wrapped value if parameter has type information, plain object if not._@param source the source of parameter values and type information_@param parameterName the name of the parameter_@return the value object;@Nullable_	public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,parameter,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;nullable,public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> @Nullable 	public static Object getTypedValue(SqlParameterSource source, String parameterName);1515532786;Create a wrapped value if parameter has type information, plain object if not._@param source the source of parameter values and type information_@param parameterName the name of the parameter_@return the value object;@Nullable_	public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,parameter,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;nullable,public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> @Nullable 	public static Object getTypedValue(SqlParameterSource source, String parameterName);1516617801;Create a wrapped value if parameter has type information, plain object if not._@param source the source of parameter values and type information_@param parameterName the name of the parameter_@return the value object;@Nullable_	public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,parameter,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;nullable,public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Collection<?> candidates);1511122644;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates collection of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@since 5.0.2_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]));@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Collection<?> candidates) {_		SqlParameterSource[] batch = new SqlParameterSource[candidates.size()]__		int i = 0__		for (Object candidate : candidates) {_			batch[i] = (candidate instanceof Map ? new MapSqlParameterSource((Map<String, ?>) candidate) :_					new BeanPropertySqlParameterSource(candidate))__			i++__		}_		return batch__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,collection,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,since,5,0,2,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,collection,candidates,sql,parameter,source,batch,new,sql,parameter,source,candidates,size,int,i,0,for,object,candidate,candidates,batch,i,candidate,instanceof,map,new,map,sql,parameter,source,map,string,candidate,new,bean,property,sql,parameter,source,candidate,i,return,batch
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Collection<?> candidates);1515532786;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates collection of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@since 5.0.2_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]));@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Collection<?> candidates) {_		SqlParameterSource[] batch = new SqlParameterSource[candidates.size()]__		int i = 0__		for (Object candidate : candidates) {_			batch[i] = (candidate instanceof Map ? new MapSqlParameterSource((Map<String, ?>) candidate) :_					new BeanPropertySqlParameterSource(candidate))__			i++__		}_		return batch__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,collection,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,since,5,0,2,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,collection,candidates,sql,parameter,source,batch,new,sql,parameter,source,candidates,size,int,i,0,for,object,candidate,candidates,batch,i,candidate,instanceof,map,new,map,sql,parameter,source,map,string,candidate,new,bean,property,sql,parameter,source,candidate,i,return,batch
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Collection<?> candidates);1516617801;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates collection of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@since 5.0.2_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]);@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Collection<?> candidates) {_		SqlParameterSource[] batch = new SqlParameterSource[candidates.size()]__		int i = 0__		for (Object candidate : candidates) {_			batch[i] = (candidate instanceof Map ? new MapSqlParameterSource((Map<String, ?>) candidate) :_					new BeanPropertySqlParameterSource(candidate))__			i++__		}_		return batch__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,collection,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,since,5,0,2,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,collection,candidates,sql,parameter,source,batch,new,sql,parameter,source,candidates,size,int,i,0,for,object,candidate,candidates,batch,i,candidate,instanceof,map,new,map,sql,parameter,source,map,string,candidate,new,bean,property,sql,parameter,source,candidate,i,return,batch
SqlParameterSourceUtils -> public static Object getTypedValue(SqlParameterSource source, String parameterName);1328020251;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> public static Object getTypedValue(SqlParameterSource source, String parameterName);1356735495;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> public static Object getTypedValue(SqlParameterSource source, String parameterName);1385412762;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> public static Object getTypedValue(SqlParameterSource source, String parameterName);1413848647;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> public static Object getTypedValue(SqlParameterSource source, String parameterName);1467730834;Create a wrapped value if parameter has type information, plain object if not._@param source the source of paramer values and type information_@param parameterName the name of the parameter_@return the value object;public static Object getTypedValue(SqlParameterSource source, String parameterName) {_		int sqlType = source.getSqlType(parameterName)__		if (sqlType != SqlParameterSource.TYPE_UNKNOWN) {_			if (source.getTypeName(parameterName) != null) {_				return new SqlParameterValue(sqlType, source.getTypeName(parameterName), source.getValue(parameterName))__			}_			else {_				return new SqlParameterValue(sqlType, source.getValue(parameterName))__			}_		}_		else {_			return source.getValue(parameterName)__		}_	};create,a,wrapped,value,if,parameter,has,type,information,plain,object,if,not,param,source,the,source,of,paramer,values,and,type,information,param,parameter,name,the,name,of,the,parameter,return,the,value,object;public,static,object,get,typed,value,sql,parameter,source,source,string,parameter,name,int,sql,type,source,get,sql,type,parameter,name,if,sql,type,sql,parameter,source,if,source,get,type,name,parameter,name,null,return,new,sql,parameter,value,sql,type,source,get,type,name,parameter,name,source,get,value,parameter,name,else,return,new,sql,parameter,value,sql,type,source,get,value,parameter,name,else,return,source,get,value,parameter,name
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1385412762;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map<String, ?> valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,string,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,string,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1413848647;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map<String, ?> valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,string,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,string,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1467730834;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map<String, ?> valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,string,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,string,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1496837955;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map<String, ?> valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,string,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,string,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1511122644;Create an array of {@link MapSqlParameterSource} objects populated with data from_the values passed in. This will define what is included in a batch operation._@param valueMaps array of {@link Map} instances containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, Map[]);public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		SqlParameterSource[] batch = new SqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			batch[i] = new MapSqlParameterSource(valueMaps[i])__		}_		return batch__	};create,an,array,of,link,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,link,map,instances,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,map;public,static,sql,parameter,source,create,batch,map,string,value,maps,sql,parameter,source,batch,new,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,batch,i,new,map,sql,parameter,source,value,maps,i,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1515532786;Create an array of {@link MapSqlParameterSource} objects populated with data from_the values passed in. This will define what is included in a batch operation._@param valueMaps array of {@link Map} instances containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, Map[]);public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		SqlParameterSource[] batch = new SqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			batch[i] = new MapSqlParameterSource(valueMaps[i])__		}_		return batch__	};create,an,array,of,link,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,link,map,instances,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,map;public,static,sql,parameter,source,create,batch,map,string,value,maps,sql,parameter,source,batch,new,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,batch,i,new,map,sql,parameter,source,value,maps,i,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps);1516617801;Create an array of {@link MapSqlParameterSource} objects populated with data from_the values passed in. This will define what is included in a batch operation._@param valueMaps array of {@link Map} instances containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, Map[]);public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {_		SqlParameterSource[] batch = new SqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			batch[i] = new MapSqlParameterSource(valueMaps[i])__		}_		return batch__	};create,an,array,of,link,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,link,map,instances,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,map;public,static,sql,parameter,source,create,batch,map,string,value,maps,sql,parameter,source,batch,new,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,batch,i,new,map,sql,parameter,source,value,maps,i,return,batch
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1385412762;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<String, String>()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (int i = 0_ i < propertyNames.length_ i++) {_				String name = propertyNames[i]__				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,string,string,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,int,i,0,i,property,names,length,i,string,name,property,names,i,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1413848647;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<String, String>()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (int i = 0_ i < propertyNames.length_ i++) {_				String name = propertyNames[i]__				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,string,string,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,int,i,0,i,property,names,length,i,string,name,property,names,i,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1467730834;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<>()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (int i = 0_ i < propertyNames.length_ i++) {_				String name = propertyNames[i]__				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,int,i,0,i,property,names,length,i,string,name,property,names,i,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1496837955;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<>()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (String name : propertyNames) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,string,name,property,names,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1511122644;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of parameter names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<>()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource) parameterSource).getReadablePropertyNames()__			for (String name : propertyNames) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,parameter,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,string,name,property,names,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1515532786;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of parameter names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<>()__		String[] paramNames = parameterSource.getParameterNames()__		if (paramNames != null) {_			for (String name : paramNames) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,parameter,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,string,param,names,parameter,source,get,parameter,names,if,param,names,null,for,string,name,param,names,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1516617801;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of parameter names_@return the Map that can be used for case insensitive matching of parameter names;public static Map<String, String> extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map<String, String> caseInsensitiveParameterNames = new HashMap<>()__		String[] paramNames = parameterSource.getParameterNames()__		if (paramNames != null) {_			for (String name : paramNames) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,parameter,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,string,string,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,new,hash,map,string,param,names,parameter,source,get,parameter,names,if,param,names,null,for,string,name,param,names,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map[] valueMaps);1328020251;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Map[] valueMaps);1356735495;Create an array of MapSqlParameterSource objects populated with data from the_values passed in. This will define what is included in a batch operation._@param valueMaps array of Maps containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Map[] valueMaps) {_		MapSqlParameterSource[] batch = new MapSqlParameterSource[valueMaps.length]__		for (int i = 0_ i < valueMaps.length_ i++) {_			Map valueMap = valueMaps[i]__			batch[i] = new MapSqlParameterSource(valueMap)__		}_		return batch__	};create,an,array,of,map,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,value,maps,array,of,maps,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,map,value,maps,map,sql,parameter,source,batch,new,map,sql,parameter,source,value,maps,length,for,int,i,0,i,value,maps,length,i,map,value,map,value,maps,i,batch,i,new,map,sql,parameter,source,value,map,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1328020251;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1356735495;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1385412762;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1413848647;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1467730834;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> public static SqlParameterSource[] createBatch(Object[] beans);1496837955;Create an array of BeanPropertySqlParameterSource objects populated with data_from the values passed in. This will define what is included in a batch operation._@param beans object array of beans containing the values to be used_@return an array of SqlParameterSource;public static SqlParameterSource[] createBatch(Object[] beans) {_		BeanPropertySqlParameterSource[] batch = new BeanPropertySqlParameterSource[beans.length]__		for (int i = 0_ i < beans.length_ i++) {_			Object bean = beans[i]__			batch[i] = new BeanPropertySqlParameterSource(bean)__		}_		return batch__	};create,an,array,of,bean,property,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,this,will,define,what,is,included,in,a,batch,operation,param,beans,object,array,of,beans,containing,the,values,to,be,used,return,an,array,of,sql,parameter,source;public,static,sql,parameter,source,create,batch,object,beans,bean,property,sql,parameter,source,batch,new,bean,property,sql,parameter,source,beans,length,for,int,i,0,i,beans,length,i,object,bean,beans,i,batch,i,new,bean,property,sql,parameter,source,bean,return,batch
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Object... candidates);1511122644;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates object array of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]));@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Object... candidates) {_		return createBatch(Arrays.asList(candidates))__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,object,array,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,object,candidates,return,create,batch,arrays,as,list,candidates
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Object... candidates);1515532786;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates object array of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]));@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Object... candidates) {_		return createBatch(Arrays.asList(candidates))__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,object,array,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,object,candidates,return,create,batch,arrays,as,list,candidates
SqlParameterSourceUtils -> @SuppressWarnings("unchecked") 	public static SqlParameterSource[] createBatch(Object... candidates);1516617801;Create an array of {@link SqlParameterSource} objects populated with data_from the values passed in (either a {@link Map} or a bean object)._This will define what is included in a batch operation._@param candidates object array of objects containing the values to be used_@return an array of {@link SqlParameterSource}_@see MapSqlParameterSource_@see BeanPropertySqlParameterSource_@see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[]);@SuppressWarnings("unchecked")_	public static SqlParameterSource[] createBatch(Object... candidates) {_		return createBatch(Arrays.asList(candidates))__	};create,an,array,of,link,sql,parameter,source,objects,populated,with,data,from,the,values,passed,in,either,a,link,map,or,a,bean,object,this,will,define,what,is,included,in,a,batch,operation,param,candidates,object,array,of,objects,containing,the,values,to,be,used,return,an,array,of,link,sql,parameter,source,see,map,sql,parameter,source,see,bean,property,sql,parameter,source,see,named,parameter,jdbc,template,batch,update,string,sql,parameter,source;suppress,warnings,unchecked,public,static,sql,parameter,source,create,batch,object,candidates,return,create,batch,arrays,as,list,candidates
SqlParameterSourceUtils -> public static Map extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1328020251;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map caseInsensitiveParameterNames = new HashMap()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (int i = 0_ i < propertyNames.length_ i++) {_				String name = propertyNames[i]__				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,case,insensitive,parameter,names,new,hash,map,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,int,i,0,i,property,names,length,i,string,name,property,names,i,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
SqlParameterSourceUtils -> public static Map extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource);1356735495;Create a Map of case insensitive parameter names together with the original name._@param parameterSource the source of paramer names_@return the Map that can be used for case insensitive matching of parameter names;public static Map extractCaseInsensitiveParameterNames(SqlParameterSource parameterSource) {_		Map caseInsensitiveParameterNames = new HashMap()__		if (parameterSource instanceof BeanPropertySqlParameterSource) {_			String[] propertyNames = ((BeanPropertySqlParameterSource)parameterSource).getReadablePropertyNames()__			for (int i = 0_ i < propertyNames.length_ i++) {_				String name = propertyNames[i]__				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		else if (parameterSource instanceof MapSqlParameterSource) {_			for (String name : ((MapSqlParameterSource) parameterSource).getValues().keySet()) {_				caseInsensitiveParameterNames.put(name.toLowerCase(), name)__			}_		}_		return caseInsensitiveParameterNames__	};create,a,map,of,case,insensitive,parameter,names,together,with,the,original,name,param,parameter,source,the,source,of,paramer,names,return,the,map,that,can,be,used,for,case,insensitive,matching,of,parameter,names;public,static,map,extract,case,insensitive,parameter,names,sql,parameter,source,parameter,source,map,case,insensitive,parameter,names,new,hash,map,if,parameter,source,instanceof,bean,property,sql,parameter,source,string,property,names,bean,property,sql,parameter,source,parameter,source,get,readable,property,names,for,int,i,0,i,property,names,length,i,string,name,property,names,i,case,insensitive,parameter,names,put,name,to,lower,case,name,else,if,parameter,source,instanceof,map,sql,parameter,source,for,string,name,map,sql,parameter,source,parameter,source,get,values,key,set,case,insensitive,parameter,names,put,name,to,lower,case,name,return,case,insensitive,parameter,names
