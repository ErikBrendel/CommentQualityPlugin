# id;timestamp;commentText;codeText;commentWords;codeWords
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1328020251;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1356735495;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1357119239;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1368482696;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1385412762;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1467730834;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1498780456;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1502974979;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1515532786;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> @Override 	public int getSqlType(String paramName);1518810557;Derives a default SQL type from the corresponding property type._@see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType;@Override_	public int getSqlType(String paramName) {_		int sqlType = super.getSqlType(paramName)__		if (sqlType != TYPE_UNKNOWN) {_			return sqlType__		}_		Class<?> propType = this.beanWrapper.getPropertyType(paramName)__		return StatementCreatorUtils.javaTypeToSqlParameterType(propType)__	};derives,a,default,sql,type,from,the,corresponding,property,type,see,org,springframework,jdbc,core,statement,creator,utils,java,type,to,sql,parameter,type;override,public,int,get,sql,type,string,param,name,int,sql,type,super,get,sql,type,param,name,if,sql,type,return,sql,type,class,prop,type,this,bean,wrapper,get,property,type,param,name,return,statement,creator,utils,java,type,to,sql,parameter,type,prop,type
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1328020251;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1356735495;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1357119239;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1368482696;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1385412762;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1467730834;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1498780456;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1502974979;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1515532786;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public BeanPropertySqlParameterSource(Object object);1518810557;Create a new BeanPropertySqlParameterSource for the given bean._@param object the bean instance to wrap;public BeanPropertySqlParameterSource(Object object) {_		this.beanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(object)__	};create,a,new,bean,property,sql,parameter,source,for,the,given,bean,param,object,the,bean,instance,to,wrap;public,bean,property,sql,parameter,source,object,object,this,bean,wrapper,property,accessor,factory,for,bean,property,access,object
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1328020251;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<String>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,string,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1356735495;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<String>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,string,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1357119239;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<String>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,string,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1368482696;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<String>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,string,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1385412762;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<String>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,string,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1467730834;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1498780456;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1502974979;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1515532786;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = names.toArray(new String[names.size()])__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,names,to,array,new,string,names,size,return,this,property,names
BeanPropertySqlParameterSource -> public String[] getReadablePropertyNames();1518810557;Provide access to the property names of the wrapped bean._Uses support provided in the {@link PropertyAccessor} interface._@return an array containing all the known property names;public String[] getReadablePropertyNames() {_		if (this.propertyNames == null) {_			List<String> names = new ArrayList<>()__			PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors()__			for (PropertyDescriptor pd : props) {_				if (this.beanWrapper.isReadableProperty(pd.getName())) {_					names.add(pd.getName())__				}_			}_			this.propertyNames = StringUtils.toStringArray(names)__		}_		return this.propertyNames__	};provide,access,to,the,property,names,of,the,wrapped,bean,uses,support,provided,in,the,link,property,accessor,interface,return,an,array,containing,all,the,known,property,names;public,string,get,readable,property,names,if,this,property,names,null,list,string,names,new,array,list,property,descriptor,props,this,bean,wrapper,get,property,descriptors,for,property,descriptor,pd,props,if,this,bean,wrapper,is,readable,property,pd,get,name,names,add,pd,get,name,this,property,names,string,utils,to,string,array,names,return,this,property,names
