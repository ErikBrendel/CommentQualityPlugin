commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean hasValue(String paramName) {     return this.beanWrapper.isReadableProperty(paramName). }
false;public;1;10;;@Override @Nullable public Object getValue(String paramName) throws IllegalArgumentException {     try {         return this.beanWrapper.getPropertyValue(paramName).     } catch (NotReadablePropertyException ex) {         throw new IllegalArgumentException(ex.getMessage()).     } }
true;public;1;9;/**  * Derives a default SQL type from the corresponding property type.  * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType  */ ;/**  * Derives a default SQL type from the corresponding property type.  * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType  */ @Override public int getSqlType(String paramName) {     int sqlType = super.getSqlType(paramName).     if (sqlType != TYPE_UNKNOWN) {         return sqlType.     }     Class<?> propType = this.beanWrapper.getPropertyType(paramName).     return StatementCreatorUtils.javaTypeToSqlParameterType(propType). }
false;public;0;5;;@Override @Nullable public String[] getParameterNames() {     return getReadablePropertyNames(). }
true;public;0;13;/**  * Provide access to the property names of the wrapped bean.  * Uses support provided in the {@link PropertyAccessor} interface.  * @return an array containing all the known property names  */ ;/**  * Provide access to the property names of the wrapped bean.  * Uses support provided in the {@link PropertyAccessor} interface.  * @return an array containing all the known property names  */ public String[] getReadablePropertyNames() {     if (this.propertyNames == null) {         List<String> names = new ArrayList<>().         PropertyDescriptor[] props = this.beanWrapper.getPropertyDescriptors().         for (PropertyDescriptor pd : props) {             if (this.beanWrapper.isReadableProperty(pd.getName())) {                 names.add(pd.getName()).             }         }         this.propertyNames = StringUtils.toStringArray(names).     }     return this.propertyNames. }
