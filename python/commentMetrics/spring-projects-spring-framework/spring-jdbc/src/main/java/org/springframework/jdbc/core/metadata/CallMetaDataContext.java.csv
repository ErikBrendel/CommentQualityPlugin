# id;timestamp;commentText;codeText;commentWords;codeWords
CallMetaDataContext -> public boolean isReturnValueRequired();1328020251;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1380064689;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1385412762;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1416833949;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1431676443;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1446470853;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1467730834;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1496837955;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1498780456;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1500448076;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1500457438;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1515532822;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1516393837;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1518167526;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1520529117;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1520540747;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1521457455;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1522103912;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1522231598;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1532091916;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1532978875;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isReturnValueRequired();1542613849;Check whether a return value is required.;public boolean isReturnValueRequired() {_		return this.returnValueRequired__	};check,whether,a,return,value,is,required;public,boolean,is,return,value,required,return,this,return,value,required
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1328020251;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1380064689;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1385412762;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1416833949;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1431676443;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1446470853;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1467730834;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1496837955;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1498780456;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1500448076;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1500457438;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1515532822;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1516393837;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1518167526;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1520529117;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1520540747;Check whether call parameter metadata should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,metadata,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1521457455;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1522103912;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1522231598;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1532091916;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1532978875;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public boolean isAccessCallParameterMetaData();1542613849;Check whether call parameter meta-data should be accessed.;public boolean isAccessCallParameterMetaData() {_		return this.accessCallParameterMetaData__	};check,whether,call,parameter,meta,data,should,be,accessed;public,boolean,is,access,call,parameter,meta,data,return,this,access,call,parameter,meta,data
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1328020251;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1380064689;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1385412762;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1416833949;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1431676443;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1446470853;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1467730834;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1496837955;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1498780456;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1500448076;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1500457438;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1515532822;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1516393837;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1518167526;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1520529117;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1520540747;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1521457455;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1522103912;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1522231598;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1532091916;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1532978875;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> public void setReturnValueRequired(boolean returnValueRequired);1542613849;Specify whether a return value is required.;public void setReturnValueRequired(boolean returnValueRequired) {_		this.returnValueRequired = returnValueRequired__	};specify,whether,a,return,value,is,required;public,void,set,return,value,required,boolean,return,value,required,this,return,value,required,return,value,required
CallMetaDataContext -> @Nullable 	public String getProcedureName();1496837955;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1498780456;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1500448076;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1500457438;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1515532822;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1516393837;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1518167526;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1520529117;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1520540747;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1521457455;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1522103912;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1522231598;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1532091916;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1532978875;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> @Nullable 	public String getProcedureName();1542613849;Get the name of the procedure.;@Nullable_	public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;nullable,public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1328020251;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1380064689;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1385412762;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1416833949;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1431676443;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1446470853;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1467730834;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1496837955;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1498780456;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1500448076;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1500457438;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1515532822;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1516393837;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1518167526;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1520529117;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1520540747;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1521457455;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1522103912;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1522231598;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1532091916;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1532978875;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public void setOutParameterNames(List<String> outParameterNames);1542613849;Specify the names of the out parameters.;public void setOutParameterNames(List<String> outParameterNames) {_		this.outParameterNames = outParameterNames__	};specify,the,names,of,the,out,parameters;public,void,set,out,parameter,names,list,string,out,parameter,names,this,out,parameter,names,out,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1328020251;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1380064689;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1385412762;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1416833949;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1431676443;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1446470853;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1467730834;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1496837955;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1498780456;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1500448076;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1500457438;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1515532822;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1516393837;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1518167526;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1520529117;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1520540747;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1521457455;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1522103912;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1522231598;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1532091916;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1532978875;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public Set<String> getLimitedInParameterNames();1542613849;Get a limited set of in parameters to be used.;public Set<String> getLimitedInParameterNames() {_		return this.limitedInParameterNames__	};get,a,limited,set,of,in,parameters,to,be,used;public,set,string,get,limited,in,parameter,names,return,this,limited,in,parameter,names
CallMetaDataContext -> public String createCallString();1328020251;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(this.getProcedureName())__		if (this.isFunction() || this.isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += "?"__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,this,get,procedure,name,if,this,is,function,this,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1380064689;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(this.getProcedureName())__		if (this.isFunction() || this.isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += "?"__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,this,get,procedure,name,if,this,is,function,this,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1385412762;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(this.getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(this.getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(this.getProcedureName())__		if (this.isFunction() || this.isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += "?"__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,this,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,this,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,this,get,procedure,name,if,this,is,function,this,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1416833949;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += "?"__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1431676443;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1446470853;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1467730834;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1496837955;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}_		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1498780456;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1500448076;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1500457438;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1515532822;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1516393837;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1518167526;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1520529117;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		String callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = "{? = call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__			parameterCount = -1__		}_		else {_			callString = "{call " +_					(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "") +_					(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "") +_					procedureNameToUse + "("__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString += ", "__				}_				if (parameterCount >= 0) {_					callString += createParameterBinding(parameter)__				}_				parameterCount++__			}_		}_		callString += ")}"___		return callString__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,parameter,count,1,else,call,string,call,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,string,utils,has,length,schema,name,to,use,schema,name,to,use,procedure,name,to,use,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,if,parameter,count,0,call,string,create,parameter,binding,parameter,parameter,count,call,string,return,call,string
CallMetaDataContext -> public String createCallString();1520540747;Build the call string based on configuration and metadata information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!(parameter.isResultsParameter())) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,metadata,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1521457455;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1522103912;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1522231598;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1532091916;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1532978875;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String createCallString();1542613849;Build the call string based on configuration and meta-data information._@return the call string to be used;public String createCallString() {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		StringBuilder callString__		int parameterCount = 0__		String catalogNameToUse__		String schemaNameToUse___		_		_		if (this.metaDataProvider.isSupportsSchemasInProcedureCalls() &&_				!this.metaDataProvider.isSupportsCatalogsInProcedureCalls()) {_			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}_		else {_			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName())__			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName())__		}__		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName())__		if (isFunction() || isReturnValueRequired()) {_			callString = new StringBuilder().append("{? = call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__			parameterCount = -1__		}_		else {_			callString = new StringBuilder().append("{call ")._					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")._					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")._					append(procedureNameToUse).append("(")__		}__		for (SqlParameter parameter : this.callParameters) {_			if (!parameter.isResultsParameter()) {_				if (parameterCount > 0) {_					callString.append(", ")__				}_				if (parameterCount >= 0) {_					callString.append(createParameterBinding(parameter))__				}_				parameterCount++__			}_		}_		callString.append(")}")___		return callString.toString()__	};build,the,call,string,based,on,configuration,and,meta,data,information,return,the,call,string,to,be,used;public,string,create,call,string,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,string,builder,call,string,int,parameter,count,0,string,catalog,name,to,use,string,schema,name,to,use,if,this,meta,data,provider,is,supports,schemas,in,procedure,calls,this,meta,data,provider,is,supports,catalogs,in,procedure,calls,schema,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,catalog,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,else,catalog,name,to,use,this,meta,data,provider,catalog,name,to,use,get,catalog,name,schema,name,to,use,this,meta,data,provider,schema,name,to,use,get,schema,name,string,procedure,name,to,use,this,meta,data,provider,procedure,name,to,use,get,procedure,name,if,is,function,is,return,value,required,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,parameter,count,1,else,call,string,new,string,builder,append,call,append,string,utils,has,length,catalog,name,to,use,catalog,name,to,use,append,string,utils,has,length,schema,name,to,use,schema,name,to,use,append,procedure,name,to,use,append,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,results,parameter,if,parameter,count,0,call,string,append,if,parameter,count,0,call,string,append,create,parameter,binding,parameter,parameter,count,call,string,append,return,call,string,to,string
CallMetaDataContext -> public String getScalarOutParameterName();1328020251;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1380064689;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1385412762;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1416833949;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1431676443;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1446470853;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public String getScalarOutParameterName();1467730834;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1328020251;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1380064689;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1385412762;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1416833949;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1431676443;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1446470853;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1467730834;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1496837955;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1498780456;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1500448076;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1500457438;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1515532822;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1516393837;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1518167526;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1520529117;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1520540747;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1521457455;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1522103912;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1522231598;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1532091916;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1532978875;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public void setFunctionReturnName(String functionReturnName);1542613849;Specify the name used for the return value of the function.;public void setFunctionReturnName(String functionReturnName) {_		this.actualFunctionReturnName = functionReturnName__	};specify,the,name,used,for,the,return,value,of,the,function;public,void,set,function,return,name,string,function,return,name,this,actual,function,return,name,function,return,name
CallMetaDataContext -> public String getCatalogName();1328020251;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1380064689;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1385412762;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1416833949;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1431676443;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1446470853;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public String getCatalogName();1467730834;Get the name of the catalog.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1496837955;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1498780456;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1500448076;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1500457438;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1515532822;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1516393837;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (this.outParameterNames.size() > 0 ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,size,0,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1518167526;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1520529117;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1520540747;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1521457455;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1522103912;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1522231598;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.warn("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,warn,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1532091916;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.info("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,info,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1532978875;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.info("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,info,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> @Nullable 	public String getScalarOutParameterName();1542613849;Get the name of the single out parameter for this call._If there are multiple parameters, the name of the first one will be returned.;@Nullable_	public String getScalarOutParameterName() {_		if (isFunction()) {_			return getFunctionReturnName()__		}_		else {_			if (this.outParameterNames.size() > 1) {_				logger.info("Accessing single output value when procedure has more than one output parameter")__			}_			return (!this.outParameterNames.isEmpty() ? this.outParameterNames.get(0) : null)__		}_	};get,the,name,of,the,single,out,parameter,for,this,call,if,there,are,multiple,parameters,the,name,of,the,first,one,will,be,returned;nullable,public,string,get,scalar,out,parameter,name,if,is,function,return,get,function,return,name,else,if,this,out,parameter,names,size,1,logger,info,accessing,single,output,value,when,procedure,has,more,than,one,output,parameter,return,this,out,parameter,names,is,empty,this,out,parameter,names,get,0,null
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1328020251;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1380064689;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1385412762;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1416833949;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1431676443;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1446470853;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1467730834;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1496837955;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1498780456;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1500448076;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1500457438;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1515532822;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1516393837;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1518167526;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1520529117;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1520540747;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1521457455;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1522103912;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1522231598;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1532091916;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1532978875;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setLimitedInParameterNames(Set<String> limitedInParameterNames);1542613849;Specify a limited set of in parameters to be used.;public void setLimitedInParameterNames(Set<String> limitedInParameterNames) {_		this.limitedInParameterNames = limitedInParameterNames__	};specify,a,limited,set,of,in,parameters,to,be,used;public,void,set,limited,in,parameter,names,set,string,limited,in,parameter,names,this,limited,in,parameter,names,limited,in,parameter,names
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1500448076;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1500457438;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1515532822;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1516393837;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1518167526;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1520529117;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1520540747;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1521457455;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1522103912;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1522231598;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1532091916;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1532978875;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(@Nullable String procedureName);1542613849;Specify the name of the procedure.;public void setProcedureName(@Nullable String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,nullable,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1328020251;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1380064689;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1385412762;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1416833949;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1431676443;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1446470853;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1467730834;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1496837955;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(String schemaName);1498780456;Secify the name of the schema.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper rowMapper);1328020251;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper rowMapper);1380064689;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1328020251;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParameters = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParameters = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParameterNames = new ArrayList<String>()__		List<String> metaDataParameterNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParameterNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter parameter : parameters) {_			if (parameter.isResultsParameter()) {_				declaredReturnParameters.add(parameter)__			}_			else {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameter.getName()).toLowerCase()__				declaredParameters.put(parameterNameToMatch, parameter)__				if (parameter instanceof SqlOutParameter) {_					outParameterNames.add(parameter.getName())__					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + parameter.getName() + "' for function return value")__							}_							setFunctionReturnName(parameter.getName())__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParameterNames)___		List<SqlParameter> workParameters = new ArrayList<SqlParameter>()__		workParameters.addAll(declaredReturnParameters)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParameters.addAll(declaredParameters.values())__			return workParameters__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParameterName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParameterName).toLowerCase(), limitedParameterName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String parNameToCheck = null__			if (meta.getParameterName() != null) {_				parNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String parNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParameters.containsKey(parNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter parameter__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					parameter = declaredParameters.get(getFunctionReturnName())__					if (parameter == null && getOutParameterNames().size() > 0) {_						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (parameter == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"")__					}_					else {_						setFunctionReturnName(parameter.getName())__					}_				}_				else {_					parameter = declaredParameters.get(parNameToCheck)__				}_				if (parameter != null) {_					workParameters.add(parameter)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for: " +_								(parNameToUse == null ? getFunctionReturnName() : parNameToUse))__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for: " + meta.getParameterName())__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								parNameToUse : getFunctionReturnName())__						workParameters.add(new SqlOutParameter(returnNameToUse, meta.getSqlType()))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParameterNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for: " + returnNameToUse)__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParameters.add(this.metaDataProvider.createDefaultOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for: " + parNameToUse)__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParameters.add(this.metaDataProvider.createDefaultInOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for: " + parNameToUse)__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(parNameToUse.toLowerCase())) {_							workParameters.add(this.metaDataProvider.createDefaultInParameter(parNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for: " + parNameToUse)__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for: " + parNameToUse)__							}_						}_					}_				}_			}_		}__		return workParameters__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,parameters,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,parameters,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,parameter,names,new,array,list,string,list,string,meta,data,parameter,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,parameter,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,parameter,parameters,if,parameter,is,results,parameter,declared,return,parameters,add,parameter,else,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,get,name,to,lower,case,declared,parameters,put,parameter,name,to,match,parameter,if,parameter,instanceof,sql,out,parameter,out,parameter,names,add,parameter,get,name,if,is,function,meta,data,parameter,names,contains,parameter,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,parameter,get,name,for,function,return,value,set,function,return,name,parameter,get,name,return,declared,true,set,out,parameter,names,out,parameter,names,list,sql,parameter,work,parameters,new,array,list,sql,parameter,work,parameters,add,all,declared,return,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,parameters,add,all,declared,parameters,values,return,work,parameters,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,parameter,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,parameter,name,to,lower,case,limited,parameter,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,par,name,to,check,null,if,meta,get,parameter,name,null,par,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,par,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,parameters,contains,key,par,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,parameter,if,meta,get,parameter,type,database,meta,data,procedure,column,return,parameter,declared,parameters,get,get,function,return,name,if,parameter,null,get,out,parameter,names,size,0,parameter,declared,parameters,get,get,out,parameter,names,get,0,to,lower,case,if,parameter,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,parameter,get,name,else,parameter,declared,parameters,get,par,name,to,check,if,parameter,null,work,parameters,add,parameter,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,par,name,to,use,null,get,function,return,name,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,par,name,to,use,get,function,return,name,work,parameters,add,new,sql,out,parameter,return,name,to,use,meta,get,sql,type,if,is,function,set,function,return,name,return,name,to,use,out,parameter,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,parameters,add,this,meta,data,provider,create,default,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,parameters,add,this,meta,data,provider,create,default,in,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,par,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,par,name,to,use,to,lower,case,work,parameters,add,this,meta,data,provider,create,default,in,parameter,par,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,par,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,par,name,to,use,return,work,parameters
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1380064689;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParameters = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParameters = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParameterNames = new ArrayList<String>()__		List<String> metaDataParameterNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParameterNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter parameter : parameters) {_			if (parameter.isResultsParameter()) {_				declaredReturnParameters.add(parameter)__			}_			else {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameter.getName()).toLowerCase()__				declaredParameters.put(parameterNameToMatch, parameter)__				if (parameter instanceof SqlOutParameter) {_					outParameterNames.add(parameter.getName())__					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + parameter.getName() + "' for function return value")__							}_							setFunctionReturnName(parameter.getName())__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParameterNames)___		List<SqlParameter> workParameters = new ArrayList<SqlParameter>()__		workParameters.addAll(declaredReturnParameters)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParameters.addAll(declaredParameters.values())__			return workParameters__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParameterName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParameterName).toLowerCase(), limitedParameterName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String parNameToCheck = null__			if (meta.getParameterName() != null) {_				parNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String parNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParameters.containsKey(parNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter parameter__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					parameter = declaredParameters.get(getFunctionReturnName())__					if (parameter == null && getOutParameterNames().size() > 0) {_						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (parameter == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"")__					}_					else {_						setFunctionReturnName(parameter.getName())__					}_				}_				else {_					parameter = declaredParameters.get(parNameToCheck)__				}_				if (parameter != null) {_					workParameters.add(parameter)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for: " +_								(parNameToUse == null ? getFunctionReturnName() : parNameToUse))__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for: " + meta.getParameterName())__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								parNameToUse : getFunctionReturnName())__						workParameters.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParameterNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for: " + returnNameToUse)__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParameters.add(this.metaDataProvider.createDefaultOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for: " + parNameToUse)__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParameters.add(this.metaDataProvider.createDefaultInOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for: " + parNameToUse)__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(parNameToUse.toLowerCase())) {_							workParameters.add(this.metaDataProvider.createDefaultInParameter(parNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for: " + parNameToUse)__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for: " + parNameToUse)__							}_						}_					}_				}_			}_		}__		return workParameters__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,parameters,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,parameters,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,parameter,names,new,array,list,string,list,string,meta,data,parameter,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,parameter,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,parameter,parameters,if,parameter,is,results,parameter,declared,return,parameters,add,parameter,else,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,get,name,to,lower,case,declared,parameters,put,parameter,name,to,match,parameter,if,parameter,instanceof,sql,out,parameter,out,parameter,names,add,parameter,get,name,if,is,function,meta,data,parameter,names,contains,parameter,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,parameter,get,name,for,function,return,value,set,function,return,name,parameter,get,name,return,declared,true,set,out,parameter,names,out,parameter,names,list,sql,parameter,work,parameters,new,array,list,sql,parameter,work,parameters,add,all,declared,return,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,parameters,add,all,declared,parameters,values,return,work,parameters,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,parameter,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,parameter,name,to,lower,case,limited,parameter,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,par,name,to,check,null,if,meta,get,parameter,name,null,par,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,par,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,parameters,contains,key,par,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,parameter,if,meta,get,parameter,type,database,meta,data,procedure,column,return,parameter,declared,parameters,get,get,function,return,name,if,parameter,null,get,out,parameter,names,size,0,parameter,declared,parameters,get,get,out,parameter,names,get,0,to,lower,case,if,parameter,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,parameter,get,name,else,parameter,declared,parameters,get,par,name,to,check,if,parameter,null,work,parameters,add,parameter,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,par,name,to,use,null,get,function,return,name,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,par,name,to,use,get,function,return,name,work,parameters,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,parameter,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,parameters,add,this,meta,data,provider,create,default,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,parameters,add,this,meta,data,provider,create,default,in,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,par,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,par,name,to,use,to,lower,case,work,parameters,add,this,meta,data,provider,create,default,in,parameter,par,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,par,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,par,name,to,use,return,work,parameters
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1385412762;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParameters = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParameters = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParameterNames = new ArrayList<String>()__		List<String> metaDataParameterNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParameterNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter parameter : parameters) {_			if (parameter.isResultsParameter()) {_				declaredReturnParameters.add(parameter)__			}_			else {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameter.getName()).toLowerCase()__				declaredParameters.put(parameterNameToMatch, parameter)__				if (parameter instanceof SqlOutParameter) {_					outParameterNames.add(parameter.getName())__					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + parameter.getName() + "' for function return value")__							}_							setFunctionReturnName(parameter.getName())__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParameterNames)___		List<SqlParameter> workParameters = new ArrayList<SqlParameter>()__		workParameters.addAll(declaredReturnParameters)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParameters.addAll(declaredParameters.values())__			return workParameters__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParameterName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParameterName).toLowerCase(), limitedParameterName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String parNameToCheck = null__			if (meta.getParameterName() != null) {_				parNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String parNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParameters.containsKey(parNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter parameter__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					parameter = declaredParameters.get(getFunctionReturnName())__					if (parameter == null && getOutParameterNames().size() > 0) {_						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (parameter == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"")__					}_					else {_						setFunctionReturnName(parameter.getName())__					}_				}_				else {_					parameter = declaredParameters.get(parNameToCheck)__				}_				if (parameter != null) {_					workParameters.add(parameter)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for: " +_								(parNameToUse == null ? getFunctionReturnName() : parNameToUse))__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for: " + meta.getParameterName())__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								parNameToUse : getFunctionReturnName())__						workParameters.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParameterNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for: " + returnNameToUse)__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParameters.add(this.metaDataProvider.createDefaultOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for: " + parNameToUse)__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParameters.add(this.metaDataProvider.createDefaultInOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for: " + parNameToUse)__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(parNameToUse.toLowerCase())) {_							workParameters.add(this.metaDataProvider.createDefaultInParameter(parNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for: " + parNameToUse)__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for: " + parNameToUse)__							}_						}_					}_				}_			}_		}__		return workParameters__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,parameters,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,parameters,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,parameter,names,new,array,list,string,list,string,meta,data,parameter,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,parameter,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,parameter,parameters,if,parameter,is,results,parameter,declared,return,parameters,add,parameter,else,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,get,name,to,lower,case,declared,parameters,put,parameter,name,to,match,parameter,if,parameter,instanceof,sql,out,parameter,out,parameter,names,add,parameter,get,name,if,is,function,meta,data,parameter,names,contains,parameter,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,parameter,get,name,for,function,return,value,set,function,return,name,parameter,get,name,return,declared,true,set,out,parameter,names,out,parameter,names,list,sql,parameter,work,parameters,new,array,list,sql,parameter,work,parameters,add,all,declared,return,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,parameters,add,all,declared,parameters,values,return,work,parameters,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,parameter,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,parameter,name,to,lower,case,limited,parameter,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,par,name,to,check,null,if,meta,get,parameter,name,null,par,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,par,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,parameters,contains,key,par,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,parameter,if,meta,get,parameter,type,database,meta,data,procedure,column,return,parameter,declared,parameters,get,get,function,return,name,if,parameter,null,get,out,parameter,names,size,0,parameter,declared,parameters,get,get,out,parameter,names,get,0,to,lower,case,if,parameter,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,parameter,get,name,else,parameter,declared,parameters,get,par,name,to,check,if,parameter,null,work,parameters,add,parameter,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,par,name,to,use,null,get,function,return,name,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,par,name,to,use,get,function,return,name,work,parameters,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,parameter,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,parameters,add,this,meta,data,provider,create,default,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,parameters,add,this,meta,data,provider,create,default,in,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,par,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,par,name,to,use,to,lower,case,work,parameters,add,this,meta,data,provider,create,default,in,parameter,par,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,par,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,par,name,to,use,return,work,parameters
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1416833949;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParameters = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParameters = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParameterNames = new ArrayList<String>()__		List<String> metaDataParameterNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParameterNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter parameter : parameters) {_			if (parameter.isResultsParameter()) {_				declaredReturnParameters.add(parameter)__			}_			else {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameter.getName()).toLowerCase()__				declaredParameters.put(parameterNameToMatch, parameter)__				if (parameter instanceof SqlOutParameter) {_					outParameterNames.add(parameter.getName())__					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + parameter.getName() + "' for function return value")__							}_							setFunctionReturnName(parameter.getName())__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParameterNames)___		List<SqlParameter> workParameters = new ArrayList<SqlParameter>()__		workParameters.addAll(declaredReturnParameters)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParameters.addAll(declaredParameters.values())__			return workParameters__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParameterName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParameterName).toLowerCase(), limitedParameterName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String parNameToCheck = null__			if (meta.getParameterName() != null) {_				parNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String parNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParameters.containsKey(parNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter parameter__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					parameter = declaredParameters.get(getFunctionReturnName())__					if (parameter == null && getOutParameterNames().size() > 0) {_						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (parameter == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"")__					}_					else {_						setFunctionReturnName(parameter.getName())__					}_				}_				else {_					parameter = declaredParameters.get(parNameToCheck)__				}_				if (parameter != null) {_					workParameters.add(parameter)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for: " +_								(parNameToUse == null ? getFunctionReturnName() : parNameToUse))__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for: " + meta.getParameterName())__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								parNameToUse : getFunctionReturnName())__						workParameters.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParameterNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for: " + returnNameToUse)__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParameters.add(this.metaDataProvider.createDefaultOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for: " + parNameToUse)__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParameters.add(this.metaDataProvider.createDefaultInOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for: " + parNameToUse)__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(parNameToUse.toLowerCase())) {_							workParameters.add(this.metaDataProvider.createDefaultInParameter(parNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for: " + parNameToUse)__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for: " + parNameToUse)__							}_						}_					}_				}_			}_		}__		return workParameters__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,parameters,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,parameters,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,parameter,names,new,array,list,string,list,string,meta,data,parameter,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,parameter,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,parameter,parameters,if,parameter,is,results,parameter,declared,return,parameters,add,parameter,else,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,get,name,to,lower,case,declared,parameters,put,parameter,name,to,match,parameter,if,parameter,instanceof,sql,out,parameter,out,parameter,names,add,parameter,get,name,if,is,function,meta,data,parameter,names,contains,parameter,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,parameter,get,name,for,function,return,value,set,function,return,name,parameter,get,name,return,declared,true,set,out,parameter,names,out,parameter,names,list,sql,parameter,work,parameters,new,array,list,sql,parameter,work,parameters,add,all,declared,return,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,parameters,add,all,declared,parameters,values,return,work,parameters,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,parameter,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,parameter,name,to,lower,case,limited,parameter,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,par,name,to,check,null,if,meta,get,parameter,name,null,par,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,par,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,parameters,contains,key,par,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,parameter,if,meta,get,parameter,type,database,meta,data,procedure,column,return,parameter,declared,parameters,get,get,function,return,name,if,parameter,null,get,out,parameter,names,size,0,parameter,declared,parameters,get,get,out,parameter,names,get,0,to,lower,case,if,parameter,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,parameter,get,name,else,parameter,declared,parameters,get,par,name,to,check,if,parameter,null,work,parameters,add,parameter,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,par,name,to,use,null,get,function,return,name,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,par,name,to,use,get,function,return,name,work,parameters,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,parameter,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,parameters,add,this,meta,data,provider,create,default,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,parameters,add,this,meta,data,provider,create,default,in,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,par,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,par,name,to,use,to,lower,case,work,parameters,add,this,meta,data,provider,create,default,in,parameter,par,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,par,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,par,name,to,use,return,work,parameters
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1431676443;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParameters = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParameters = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParameterNames = new ArrayList<String>()__		List<String> metaDataParameterNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParameterNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter parameter : parameters) {_			if (parameter.isResultsParameter()) {_				declaredReturnParameters.add(parameter)__			}_			else {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameter.getName()).toLowerCase()__				declaredParameters.put(parameterNameToMatch, parameter)__				if (parameter instanceof SqlOutParameter) {_					outParameterNames.add(parameter.getName())__					if (isFunction() && !metaDataParameterNames.contains(parameterNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + parameter.getName() + "' for function return value")__							}_							setFunctionReturnName(parameter.getName())__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParameterNames)___		List<SqlParameter> workParameters = new ArrayList<SqlParameter>()__		workParameters.addAll(declaredReturnParameters)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParameters.addAll(declaredParameters.values())__			return workParameters__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParameterName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParameterName).toLowerCase(), limitedParameterName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String parNameToCheck = null__			if (meta.getParameterName() != null) {_				parNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String parNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParameters.containsKey(parNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter parameter__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					parameter = declaredParameters.get(getFunctionReturnName())__					if (parameter == null && getOutParameterNames().size() > 0) {_						parameter = declaredParameters.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (parameter == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name \"" + getFunctionReturnName() +"\"")__					}_					else {_						setFunctionReturnName(parameter.getName())__					}_				}_				else {_					parameter = declaredParameters.get(parNameToCheck)__				}_				if (parameter != null) {_					workParameters.add(parameter)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for: " +_								(parNameToUse == null ? getFunctionReturnName() : parNameToUse))__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for: " + meta.getParameterName())__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								parNameToUse : getFunctionReturnName())__						workParameters.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParameterNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for: " + returnNameToUse)__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParameters.add(this.metaDataProvider.createDefaultOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for: " + parNameToUse)__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParameters.add(this.metaDataProvider.createDefaultInOutParameter(parNameToUse, meta))__						outParameterNames.add(parNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for: " + parNameToUse)__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(parNameToUse.toLowerCase())) {_							workParameters.add(this.metaDataProvider.createDefaultInParameter(parNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for: " + parNameToUse)__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for: " + parNameToUse)__							}_						}_					}_				}_			}_		}__		return workParameters__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,parameters,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,parameters,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,parameter,names,new,array,list,string,list,string,meta,data,parameter,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,parameter,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,parameter,parameters,if,parameter,is,results,parameter,declared,return,parameters,add,parameter,else,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,get,name,to,lower,case,declared,parameters,put,parameter,name,to,match,parameter,if,parameter,instanceof,sql,out,parameter,out,parameter,names,add,parameter,get,name,if,is,function,meta,data,parameter,names,contains,parameter,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,parameter,get,name,for,function,return,value,set,function,return,name,parameter,get,name,return,declared,true,set,out,parameter,names,out,parameter,names,list,sql,parameter,work,parameters,new,array,list,sql,parameter,work,parameters,add,all,declared,return,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,parameters,add,all,declared,parameters,values,return,work,parameters,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,parameter,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,parameter,name,to,lower,case,limited,parameter,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,par,name,to,check,null,if,meta,get,parameter,name,null,par,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,par,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,parameters,contains,key,par,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,parameter,if,meta,get,parameter,type,database,meta,data,procedure,column,return,parameter,declared,parameters,get,get,function,return,name,if,parameter,null,get,out,parameter,names,size,0,parameter,declared,parameters,get,get,out,parameter,names,get,0,to,lower,case,if,parameter,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,parameter,get,name,else,parameter,declared,parameters,get,par,name,to,check,if,parameter,null,work,parameters,add,parameter,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,par,name,to,use,null,get,function,return,name,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,par,name,to,use,get,function,return,name,work,parameters,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,parameter,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,parameters,add,this,meta,data,provider,create,default,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,par,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,parameters,add,this,meta,data,provider,create,default,in,out,parameter,par,name,to,use,meta,out,parameter,names,add,par,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,par,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,par,name,to,use,to,lower,case,work,parameters,add,this,meta,data,provider,create,default,in,parameter,par,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,par,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,par,name,to,use,return,work,parameters
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1446470853;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<String>()__		List<String> metaDataParamNames = new ArrayList<String>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<SqlParameter>()__		workParams.addAll(declaredReturnParams)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String paramNameToCheck = null__			if (meta.getParameterName() != null) {_				paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else {_						setFunctionReturnName(param.getName())__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + meta.getParameterName() + "'")__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								paramNameToUse : getFunctionReturnName())__						workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) {_							workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,params,new,array,list,sql,parameter,final,map,string,sql,parameter,declared,params,new,linked,hash,map,string,sql,parameter,boolean,return,declared,false,list,string,out,param,names,new,array,list,string,list,string,meta,data,param,names,new,array,list,string,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,this,meta,data,provider,parameter,name,to,use,param,name,to,lower,case,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,sql,parameter,work,params,add,all,declared,return,params,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,string,string,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,param,name,to,lower,case,limited,param,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,param,name,to,check,null,if,meta,get,parameter,name,null,param,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,param,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,param,get,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,param,name,to,use,get,function,return,name,work,params,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,this,meta,data,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,this,meta,data,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,param,name,to,use,to,lower,case,work,params,add,this,meta,data,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1467730834;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(meta.getParameterName().toLowerCase())__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String paramNameToCheck = null__			if (meta.getParameterName() != null) {_				paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()__			}_			String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else {_						setFunctionReturnName(param.getName())__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() &&_							this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + meta.getParameterName() + "'")__						}_					}_					else {_						String returnNameToUse =(StringUtils.hasLength(meta.getParameterName()) ?_								paramNameToUse : getFunctionReturnName())__						workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) {_							workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,meta,get,parameter,name,to,lower,case,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,this,meta,data,provider,parameter,name,to,use,param,name,to,lower,case,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,this,meta,data,provider,parameter,name,to,use,limited,param,name,to,lower,case,limited,param,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,param,name,to,check,null,if,meta,get,parameter,name,null,param,name,to,check,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,to,lower,case,string,param,name,to,use,this,meta,data,provider,parameter,name,to,use,meta,get,parameter,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,set,function,return,name,param,get,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,this,meta,data,provider,by,pass,return,parameter,meta,get,parameter,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,meta,get,parameter,name,else,string,return,name,to,use,string,utils,has,length,meta,get,parameter,name,param,name,to,use,get,function,return,name,work,params,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,this,meta,data,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,this,meta,data,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,param,name,to,use,to,lower,case,work,params,add,this,meta,data,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1496837955;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					lowerCase(this.metaDataProvider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__			}_			String paramNameToUse = this.metaDataProvider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							this.metaDataProvider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,this,meta,data,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,string,param,name,to,use,this,meta,data,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,this,meta,data,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,this,meta,data,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,this,meta,data,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,this,meta,data,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1498780456;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					lowerCase(this.metaDataProvider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__			}_			String paramNameToUse = this.metaDataProvider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							this.metaDataProvider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,this,meta,data,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,string,param,name,to,use,this,meta,data,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,this,meta,data,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,this,meta,data,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,this,meta,data,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,this,meta,data,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1500448076;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(_					lowerCase(this.metaDataProvider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(this.metaDataProvider.parameterNameToUse(paramName))__			}_			String paramNameToUse = this.metaDataProvider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							this.metaDataProvider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,this,meta,data,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,this,meta,data,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,this,meta,data,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,this,meta,data,provider,parameter,name,to,use,param,name,string,param,name,to,use,this,meta,data,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,this,meta,data,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,this,meta,data,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,this,meta,data,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,this,meta,data,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,this,meta,data,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1500457438;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1515532822;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1516393837;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && getOutParameterNames().size() > 0) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,size,0,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1518167526;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) {_						if (!returnDeclared) {_							if (logger.isDebugEnabled()) {_								logger.debug("Using declared out parameter '" + paramName +_										"' for function return value")__							}_							setFunctionReturnName(paramName)__							returnDeclared = true__						}_					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)___		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,if,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1520529117;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1520540747;Reconcile the provided parameters with available metadata and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) ||_					(meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) {_				SqlParameter param__				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) {_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing metadata return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,metadata,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,get,parameter,type,database,meta,data,procedure,column,return,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,get,parameter,type,database,meta,data,procedure,column,return,return,declared,sql,parameter,param,if,meta,get,parameter,type,database,meta,data,procedure,column,return,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,get,parameter,type,database,meta,data,procedure,column,return,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,metadata,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,metadata,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,metadata,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1521457455;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1522103912;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1522231598;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1532091916;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>()__		workParams.addAll(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,work,params,add,all,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1532978875;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters);1542613849;Reconcile the provided parameters with available meta-data and add new ones where appropriate.;protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()___		final List<SqlParameter> declaredReturnParams = new ArrayList<>()__		final Map<String, SqlParameter> declaredParams = new LinkedHashMap<>()__		boolean returnDeclared = false__		List<String> outParamNames = new ArrayList<>()__		List<String> metaDataParamNames = new ArrayList<>()___		_		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			if (!meta.isReturnParameter()) {_				metaDataParamNames.add(lowerCase(meta.getParameterName()))__			}_		}__		_		for (SqlParameter param : parameters) {_			if (param.isResultsParameter()) {_				declaredReturnParams.add(param)__			}_			else {_				String paramName = param.getName()__				if (paramName == null) {_					throw new IllegalArgumentException("Anonymous parameters not supported for calls - " +_							"please specify a name for the parameter of SQL type " + param.getSqlType())__				}_				String paramNameToMatch = lowerCase(provider.parameterNameToUse(paramName))__				declaredParams.put(paramNameToMatch, param)__				if (param instanceof SqlOutParameter) {_					outParamNames.add(paramName)__					if (isFunction() && !metaDataParamNames.contains(paramNameToMatch) && !returnDeclared) {_						if (logger.isDebugEnabled()) {_							logger.debug("Using declared out parameter '" + paramName +_									"' for function return value")__						}_						setFunctionReturnName(paramName)__						returnDeclared = true__					}_				}_			}_		}_		setOutParameterNames(outParamNames)___		List<SqlParameter> workParams = new ArrayList<>(declaredReturnParams)__		if (!provider.isProcedureColumnMetaDataUsed()) {_			workParams.addAll(declaredParams.values())__			return workParams__		}__		Map<String, String> limitedInParamNamesMap = new HashMap<>(this.limitedInParameterNames.size())__		for (String limitedParamName : this.limitedInParameterNames) {_			limitedInParamNamesMap.put(lowerCase(provider.parameterNameToUse(limitedParamName)), limitedParamName)__		}__		for (CallParameterMetaData meta : provider.getCallParameterMetaData()) {_			String paramName = meta.getParameterName()__			String paramNameToCheck = null__			if (paramName != null) {_				paramNameToCheck = lowerCase(provider.parameterNameToUse(paramName))__			}_			String paramNameToUse = provider.parameterNameToUse(paramName)__			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {_				SqlParameter param__				if (meta.isReturnParameter()) {_					param = declaredParams.get(getFunctionReturnName())__					if (param == null && !getOutParameterNames().isEmpty()) {_						param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())__					}_					if (param == null) {_						throw new InvalidDataAccessApiUsageException(_								"Unable to locate declared parameter for function return value - " +_								" add a SqlOutParameter with name '" + getFunctionReturnName() + "'")__					}_					else if (paramName != null) {_						setFunctionReturnName(paramName)__					}_				}_				else {_					param = declaredParams.get(paramNameToCheck)__				}_				if (param != null) {_					workParams.add(param)__					if (logger.isDebugEnabled()) {_						logger.debug("Using declared parameter for '" +_								(paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")__					}_				}_			}_			else {_				if (meta.isReturnParameter()) {_					_					if (!isFunction() && !isReturnValueRequired() && paramName != null &&_							provider.byPassReturnParameter(paramName)) {_						if (logger.isDebugEnabled()) {_							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'")__						}_					}_					else {_						String returnNameToUse =_								(StringUtils.hasLength(paramNameToUse) ? paramNameToUse : getFunctionReturnName())__						workParams.add(provider.createDefaultOutParameter(returnNameToUse, meta))__						if (isFunction()) {_							setFunctionReturnName(returnNameToUse)__							outParamNames.add(returnNameToUse)__						}_						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'")__						}_					}_				}_				else {_					if (paramNameToUse == null) {_						paramNameToUse = ""__					}_					if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) {_						workParams.add(provider.createDefaultOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'")__						}_					}_					else if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) {_						workParams.add(provider.createDefaultInOutParameter(paramNameToUse, meta))__						outParamNames.add(paramNameToUse)__						if (logger.isDebugEnabled()) {_							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'")__						}_					}_					else {_						_						if (this.limitedInParameterNames.isEmpty() ||_								limitedInParamNamesMap.containsKey(lowerCase(paramNameToUse))) {_							workParams.add(provider.createDefaultInParameter(paramNameToUse, meta))__							if (logger.isDebugEnabled()) {_								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() +_										" skipped parameter for '" + paramNameToUse + "'")__							}_						}_					}_				}_			}_		}__		return workParams__	};reconcile,the,provided,parameters,with,available,meta,data,and,add,new,ones,where,appropriate;protected,list,sql,parameter,reconcile,parameters,list,sql,parameter,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,final,list,sql,parameter,declared,return,params,new,array,list,final,map,string,sql,parameter,declared,params,new,linked,hash,map,boolean,return,declared,false,list,string,out,param,names,new,array,list,list,string,meta,data,param,names,new,array,list,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,if,meta,is,return,parameter,meta,data,param,names,add,lower,case,meta,get,parameter,name,for,sql,parameter,param,parameters,if,param,is,results,parameter,declared,return,params,add,param,else,string,param,name,param,get,name,if,param,name,null,throw,new,illegal,argument,exception,anonymous,parameters,not,supported,for,calls,please,specify,a,name,for,the,parameter,of,sql,type,param,get,sql,type,string,param,name,to,match,lower,case,provider,parameter,name,to,use,param,name,declared,params,put,param,name,to,match,param,if,param,instanceof,sql,out,parameter,out,param,names,add,param,name,if,is,function,meta,data,param,names,contains,param,name,to,match,return,declared,if,logger,is,debug,enabled,logger,debug,using,declared,out,parameter,param,name,for,function,return,value,set,function,return,name,param,name,return,declared,true,set,out,parameter,names,out,param,names,list,sql,parameter,work,params,new,array,list,declared,return,params,if,provider,is,procedure,column,meta,data,used,work,params,add,all,declared,params,values,return,work,params,map,string,string,limited,in,param,names,map,new,hash,map,this,limited,in,parameter,names,size,for,string,limited,param,name,this,limited,in,parameter,names,limited,in,param,names,map,put,lower,case,provider,parameter,name,to,use,limited,param,name,limited,param,name,for,call,parameter,meta,data,meta,provider,get,call,parameter,meta,data,string,param,name,meta,get,parameter,name,string,param,name,to,check,null,if,param,name,null,param,name,to,check,lower,case,provider,parameter,name,to,use,param,name,string,param,name,to,use,provider,parameter,name,to,use,param,name,if,declared,params,contains,key,param,name,to,check,meta,is,return,parameter,return,declared,sql,parameter,param,if,meta,is,return,parameter,param,declared,params,get,get,function,return,name,if,param,null,get,out,parameter,names,is,empty,param,declared,params,get,get,out,parameter,names,get,0,to,lower,case,if,param,null,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,declared,parameter,for,function,return,value,add,a,sql,out,parameter,with,name,get,function,return,name,else,if,param,name,null,set,function,return,name,param,name,else,param,declared,params,get,param,name,to,check,if,param,null,work,params,add,param,if,logger,is,debug,enabled,logger,debug,using,declared,parameter,for,param,name,to,use,null,param,name,to,use,get,function,return,name,else,if,meta,is,return,parameter,if,is,function,is,return,value,required,param,name,null,provider,by,pass,return,parameter,param,name,if,logger,is,debug,enabled,logger,debug,bypassing,meta,data,return,parameter,for,param,name,else,string,return,name,to,use,string,utils,has,length,param,name,to,use,param,name,to,use,get,function,return,name,work,params,add,provider,create,default,out,parameter,return,name,to,use,meta,if,is,function,set,function,return,name,return,name,to,use,out,param,names,add,return,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,return,parameter,for,return,name,to,use,else,if,param,name,to,use,null,param,name,to,use,if,meta,get,parameter,type,database,meta,data,procedure,column,out,work,params,add,provider,create,default,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,out,parameter,for,param,name,to,use,else,if,meta,get,parameter,type,database,meta,data,procedure,column,in,out,work,params,add,provider,create,default,in,out,parameter,param,name,to,use,meta,out,param,names,add,param,name,to,use,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,out,parameter,for,param,name,to,use,else,if,this,limited,in,parameter,names,is,empty,limited,in,param,names,map,contains,key,lower,case,param,name,to,use,work,params,add,provider,create,default,in,parameter,param,name,to,use,meta,if,logger,is,debug,enabled,logger,debug,added,meta,data,in,parameter,for,param,name,to,use,else,if,logger,is,debug,enabled,logger,debug,limited,set,of,parameters,limited,in,param,names,map,key,set,skipped,parameter,for,param,name,to,use,return,work,params
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1431676443;Specify whether parameters should be bound by name.;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1446470853;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1467730834;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1496837955;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1498780456;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1500448076;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1500457438;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1515532822;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1516393837;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1518167526;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1520529117;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1520540747;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1521457455;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1522103912;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1522231598;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1532091916;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1532978875;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setNamedBinding(boolean namedBinding);1542613849;Specify whether parameters should be bound by name._@since 4.2;public void setNamedBinding(boolean namedBinding) {_		this.namedBinding = namedBinding__	};specify,whether,parameters,should,be,bound,by,name,since,4,2;public,void,set,named,binding,boolean,named,binding,this,named,binding,named,binding
CallMetaDataContext -> public void setCatalogName(String catalogName);1328020251;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1380064689;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1385412762;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1416833949;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1431676443;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1446470853;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1467730834;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1496837955;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(String catalogName);1498780456;Specify the name of the catalog.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setFunction(boolean function);1328020251;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1380064689;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1385412762;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1416833949;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1431676443;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1446470853;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1467730834;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1496837955;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1498780456;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1500448076;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1500457438;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1515532822;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1516393837;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1518167526;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1520529117;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1520540747;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1521457455;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1522103912;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1522231598;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1532091916;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1532978875;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> public void setFunction(boolean function);1542613849;Specify whether this call is a function call.;public void setFunction(boolean function) {_		this.function = function__	};specify,whether,this,call,is,a,function,call;public,void,set,function,boolean,function,this,function,function
CallMetaDataContext -> @Nullable 	public String getSchemaName();1496837955;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1498780456;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1500448076;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1500457438;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1515532822;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1516393837;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1518167526;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1520529117;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1520540747;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1521457455;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1522103912;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1522231598;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1532091916;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1532978875;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getSchemaName();1542613849;Get the name of the schema.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;nullable,public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1496837955;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1498780456;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1500448076;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1500457438;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1515532822;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1516393837;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1518167526;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1520529117;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1520540747;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1521457455;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1522103912;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1522231598;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1532091916;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1532978875;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> @Nullable 	public String getCatalogName();1542613849;Get the name of the catalog.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog;nullable,public,string,get,catalog,name,return,this,catalog,name
CallMetaDataContext -> public boolean isFunction();1328020251;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1380064689;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1385412762;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1416833949;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1431676443;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1446470853;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1467730834;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1496837955;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1498780456;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1500448076;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1500457438;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1515532822;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1516393837;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1518167526;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1520529117;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1520540747;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1521457455;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1522103912;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1522231598;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1532091916;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1532978875;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public boolean isFunction();1542613849;Check whether this call is a function call.;public boolean isFunction() {_		return this.function__	};check,whether,this,call,is,a,function,call;public,boolean,is,function,return,this,function
CallMetaDataContext -> public String getSchemaName();1328020251;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1380064689;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1385412762;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1416833949;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1431676443;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1446470853;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> public String getSchemaName();1467730834;Get the name of the schema.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema;public,string,get,schema,name,return,this,schema,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1431676443;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		} else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1446470853;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1467730834;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1496837955;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1498780456;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1500448076;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1500457438;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		if (isNamedBinding()) {_			return parameter.getName() + " => ?"__		}_		else {_			return "?"__		}_	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,if,is,named,binding,return,parameter,get,name,else,return
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1515532822;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1516393837;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1518167526;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1520529117;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1520540747;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1521457455;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1522103912;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1522231598;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1532091916;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1532978875;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> protected String createParameterBinding(SqlParameter parameter);1542613849;Build the parameter binding fragment._@param parameter call parameter_@return parameter binding fragment_@since 4.2;protected String createParameterBinding(SqlParameter parameter) {_		return (isNamedBinding() ? parameter.getName() + " => ?" : "?")__	};build,the,parameter,binding,fragment,param,parameter,call,parameter,return,parameter,binding,fragment,since,4,2;protected,string,create,parameter,binding,sql,parameter,parameter,return,is,named,binding,parameter,get,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1500448076;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1500457438;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1515532822;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1516393837;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1518167526;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1520529117;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1520540747;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1521457455;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1522103912;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1522231598;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1532091916;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1532978875;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1542613849;Specify the name of the catalog.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};specify,the,name,of,the,catalog;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1328020251;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1380064689;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1385412762;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1416833949;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1431676443;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1446470853;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1467730834;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1496837955;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1498780456;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1500448076;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1500457438;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1515532822;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1516393837;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1518167526;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1520529117;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1520540747;Process the list of parameters provided, and if procedure column metadata is used,_the parameters will be matched against the metadata information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,metadata,is,used,the,parameters,will,be,matched,against,the,metadata,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1521457455;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1522103912;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1522231598;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1532091916;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1532978875;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void processParameters(List<SqlParameter> parameters);1542613849;Process the list of parameters provided, and if procedure column meta-data is used,_the parameters will be matched against the meta-data information and any missing_ones will be automatically included._@param parameters the list of parameters to use as a base;public void processParameters(List<SqlParameter> parameters) {_		this.callParameters = reconcileParameters(parameters)__	};process,the,list,of,parameters,provided,and,if,procedure,column,meta,data,is,used,the,parameters,will,be,matched,against,the,meta,data,information,and,any,missing,ones,will,be,automatically,included,param,parameters,the,list,of,parameters,to,use,as,a,base;public,void,process,parameters,list,sql,parameter,parameters,this,call,parameters,reconcile,parameters,parameters
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1328020251;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1380064689;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1385412762;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1416833949;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1431676443;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1446470853;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1467730834;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1496837955;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1498780456;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1500448076;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1500457438;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1515532822;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1516393837;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1518167526;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1520529117;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1520540747;Specify whether call parameter metadata should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,metadata,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1521457455;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1522103912;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1522231598;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1532091916;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1532978875;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData);1542613849;Specify whether call parameter meta-data should be accessed.;public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {_		this.accessCallParameterMetaData = accessCallParameterMetaData__	};specify,whether,call,parameter,meta,data,should,be,accessed;public,void,set,access,call,parameter,meta,data,boolean,access,call,parameter,meta,data,this,access,call,parameter,meta,data,access,call,parameter,meta,data
CallMetaDataContext -> public String getProcedureName();1328020251;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1380064689;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1385412762;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1416833949;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1431676443;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1446470853;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public String getProcedureName();1467730834;Get the name of the procedure.;public String getProcedureName() {_		return this.procedureName__	};get,the,name,of,the,procedure;public,string,get,procedure,name,return,this,procedure,name
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1328020251;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1380064689;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1385412762;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1416833949;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1431676443;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1446470853;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1467730834;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1496837955;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1498780456;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1500448076;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1500457438;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1515532822;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1516393837;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1518167526;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1520529117;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1520540747;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1521457455;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1522103912;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1522231598;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1532091916;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1532978875;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public List<SqlParameter> getCallParameters();1542613849;Get the List of SqlParameter objects to be used in call execution.;public List<SqlParameter> getCallParameters() {_		return this.callParameters__	};get,the,list,of,sql,parameter,objects,to,be,used,in,call,execution;public,list,sql,parameter,get,call,parameters,return,this,call,parameters
CallMetaDataContext -> public void setProcedureName(String procedureName);1328020251;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1380064689;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1385412762;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1416833949;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1431676443;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1446470853;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1467730834;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1496837955;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setProcedureName(String procedureName);1498780456;Specify the name of the procedure.;public void setProcedureName(String procedureName) {_		this.procedureName = procedureName__	};specify,the,name,of,the,procedure;public,void,set,procedure,name,string,procedure,name,this,procedure,name,procedure,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1500448076;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1500457438;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1515532822;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1516393837;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1518167526;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1520529117;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1520540747;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1521457455;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1522103912;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1522231598;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1532091916;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1532978875;Secify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};secify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1542613849;Specify the name of the schema.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};specify,the,name,of,the,schema;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
CallMetaDataContext -> public List<String> getOutParameterNames();1328020251;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1380064689;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1385412762;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1416833949;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1431676443;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1446470853;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1467730834;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1496837955;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1498780456;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1500448076;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1500457438;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1515532822;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1516393837;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1518167526;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1520529117;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1520540747;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1521457455;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1522103912;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1522231598;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1532091916;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1532978875;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public List<String> getOutParameterNames();1542613849;Get a list of the out parameter names.;public List<String> getOutParameterNames() {_		return this.outParameterNames__	};get,a,list,of,the,out,parameter,names;public,list,string,get,out,parameter,names,return,this,out,parameter,names
CallMetaDataContext -> public boolean isNamedBinding();1431676443;Check whether parameters should be bound by name.;public boolean isNamedBinding() {_		return namedBinding__	};check,whether,parameters,should,be,bound,by,name;public,boolean,is,named,binding,return,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1446470853;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1467730834;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1496837955;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1498780456;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1500448076;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1500457438;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1515532822;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1516393837;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1518167526;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1520529117;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1520540747;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1521457455;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1522103912;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1522231598;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1532091916;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1532978875;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public boolean isNamedBinding();1542613849;Check whether parameters should be bound by name._@since 4.2;public boolean isNamedBinding() {_		return this.namedBinding__	};check,whether,parameters,should,be,bound,by,name,since,4,2;public,boolean,is,named,binding,return,this,named,binding
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1328020251;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = (String) caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,string,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1380064689;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = (String) caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,string,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1385412762;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1416833949;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1431676443;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1446470853;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<String, Object>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,string,object,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1467730834;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1496837955;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1498780456;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1500448076;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")___		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1500457438;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName, SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_												"' within the parameter values provided: " + caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1515532822;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1516393837;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1518167526;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1520529117;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1520540747;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1521457455;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1522103912;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1522231598;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else {_										logger.warn("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1532091916;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else if (logger.isInfoEnabled()) {_										logger.info("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,if,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1532978875;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else if (logger.isInfoEnabled()) {_										logger.info("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,if,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource);1542613849;Match input parameter values with the parameters declared to be used in the call._@param parameterSource the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, Object> matchInParameterValuesWithCallParameters(SqlParameterSource parameterSource) {_		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)___		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		Map<String, Object> matchedParameters = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName = parameter.getName()__				String parameterNameToMatch = obtainMetaDataProvider().parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_				if (parameterName != null) {_					if (parameterSource.hasValue(parameterName)) {_						matchedParameters.put(parameterName,_								SqlParameterSourceUtils.getTypedValue(parameterSource, parameterName))__					}_					else {_						String lowerCaseName = parameterName.toLowerCase()__						if (parameterSource.hasValue(lowerCaseName)) {_							matchedParameters.put(parameterName,_									SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__						}_						else {_							String englishLowerCaseName = parameterName.toLowerCase(Locale.ENGLISH)__							if (parameterSource.hasValue(englishLowerCaseName)) {_								matchedParameters.put(parameterName,_										SqlParameterSourceUtils.getTypedValue(parameterSource, englishLowerCaseName))__							}_							else {_								String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(parameterName)__								if (parameterSource.hasValue(propertyName)) {_									matchedParameters.put(parameterName,_											SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__								}_								else {_									if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_										String sourceName = caseInsensitiveParameterNames.get(lowerCaseName)__										matchedParameters.put(parameterName,_												SqlParameterSourceUtils.getTypedValue(parameterSource, sourceName))__									}_									else if (logger.isInfoEnabled()) {_										logger.info("Unable to locate the corresponding parameter value for '" +_												parameterName + "' within the parameter values provided: " +_												caseInsensitiveParameterNames.values())__									}_								}_							}_						}_					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,parameter,source,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,object,match,in,parameter,values,with,call,parameters,sql,parameter,source,parameter,source,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,map,string,object,matched,parameters,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,obtain,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,if,parameter,name,null,if,parameter,source,has,value,parameter,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,parameter,name,else,string,lower,case,name,parameter,name,to,lower,case,if,parameter,source,has,value,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,english,lower,case,name,parameter,name,to,lower,case,locale,english,if,parameter,source,has,value,english,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,english,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,parameter,name,if,parameter,source,has,value,property,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,string,source,name,case,insensitive,parameter,names,get,lower,case,name,matched,parameters,put,parameter,name,sql,parameter,source,utils,get,typed,value,parameter,source,source,name,else,if,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,case,insensitive,parameter,names,values,if,logger,is,debug,enabled,logger,debug,matching,case,insensitive,parameter,names,values,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public String getFunctionReturnName();1328020251;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return this.actualFunctionReturnName != null ? this.actualFunctionReturnName : this.defaultFunctionReturnName__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,this,default,function,return,name
CallMetaDataContext -> public String getFunctionReturnName();1380064689;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return this.actualFunctionReturnName != null ? this.actualFunctionReturnName : this.defaultFunctionReturnName__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,this,default,function,return,name
CallMetaDataContext -> public String getFunctionReturnName();1385412762;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return this.actualFunctionReturnName != null ? this.actualFunctionReturnName : this.defaultFunctionReturnName__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,this,default,function,return,name
CallMetaDataContext -> public String getFunctionReturnName();1416833949;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1431676443;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1446470853;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1467730834;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1496837955;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1498780456;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1500448076;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1500457438;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1515532822;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1516393837;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1518167526;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1520529117;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1520540747;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1521457455;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1522103912;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1522231598;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1532091916;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1532978875;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public String getFunctionReturnName();1542613849;Get the name used for the return value of the function.;public String getFunctionReturnName() {_		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return")__	};get,the,name,used,for,the,return,value,of,the,function;public,string,get,function,return,name,return,this,actual,function,return,name,null,this,actual,function,return,name,return
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1385412762;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1416833949;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1431676443;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1446470853;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1467730834;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1496837955;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1498780456;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")__		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1500448076;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")__		if (this.metaDataProvider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (this.metaDataProvider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, this.metaDataProvider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,if,this,meta,data,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,this,meta,data,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,this,meta,data,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1500457438;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException("Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1515532822;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1516393837;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1518167526;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1520529117;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1520540747;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1521457455;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1522103912;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported.")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1522231598;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1532091916;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1532978875;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper);1542613849;Create a ReturnResultSetParameter/SqlOutParameter depending on the support provided_by the JDBC driver used for the database in use._@param parameterName the name of the parameter (also used as the name of the List returned in the output)_@param rowMapper a RowMapper implementation used to map the data returned in the result set_@return the appropriate SqlParameter;public SqlParameter createReturnResultSetParameter(String parameterName, RowMapper<?> rowMapper) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (provider.isReturnResultSetSupported()) {_			return new SqlReturnResultSet(parameterName, rowMapper)__		}_		else {_			if (provider.isRefCursorSupported()) {_				return new SqlOutParameter(parameterName, provider.getRefCursorSqlType(), rowMapper)__			}_			else {_				throw new InvalidDataAccessApiUsageException(_						"Return of a ResultSet from a stored procedure is not supported")__			}_		}_	};create,a,return,result,set,parameter,sql,out,parameter,depending,on,the,support,provided,by,the,jdbc,driver,used,for,the,database,in,use,param,parameter,name,the,name,of,the,parameter,also,used,as,the,name,of,the,list,returned,in,the,output,param,row,mapper,a,row,mapper,implementation,used,to,map,the,data,returned,in,the,result,set,return,the,appropriate,sql,parameter;public,sql,parameter,create,return,result,set,parameter,string,parameter,name,row,mapper,row,mapper,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,return,result,set,supported,return,new,sql,return,result,set,parameter,name,row,mapper,else,if,provider,is,ref,cursor,supported,return,new,sql,out,parameter,parameter,name,provider,get,ref,cursor,sql,type,row,mapper,else,throw,new,invalid,data,access,api,usage,exception,return,of,a,result,set,from,a,stored,procedure,is,not,supported
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1328020251;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1380064689;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1385412762;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1416833949;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1431676443;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1446470853;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1467730834;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1496837955;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1498780456;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1500448076;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1500457438;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1515532822;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1516393837;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1518167526;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1520529117;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1520540747;Initialize this class with metadata from the database._@param dataSource the DataSource used to retrieve metadata;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,metadata,from,the,database,param,data,source,the,data,source,used,to,retrieve,metadata;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1521457455;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1522103912;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1522231598;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1532091916;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1532978875;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public void initializeMetaData(DataSource dataSource);1542613849;Initialize this class with meta-data from the database._@param dataSource the DataSource used to retrieve meta-data;public void initializeMetaData(DataSource dataSource) {_		this.metaDataProvider = CallMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__	};initialize,this,class,with,meta,data,from,the,database,param,data,source,the,data,source,used,to,retrieve,meta,data;public,void,initialize,meta,data,data,source,data,source,this,meta,data,provider,call,meta,data,provider,factory,create,meta,data,provider,data,source,this
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1328020251;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1380064689;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1385412762;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1416833949;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1431676443;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1446470853;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<String, String>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<String, Object>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,string,string,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,string,object,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1467730834;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(parameterNameToMatch.toLowerCase())__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,parameter,name,to,match,to,lower,case,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1496837955;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}_		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}_		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}_		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}_		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1498780456;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")__		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1500448076;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		Assert.state(this.metaDataProvider != null, "No CallMetaDataProvider available")__		if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = this.metaDataProvider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,assert,state,this,meta,data,provider,null,no,call,meta,data,provider,available,if,this,meta,data,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,this,meta,data,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1500457438;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName +_								"\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1515532822;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1516393837;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1518167526;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1520529117;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1520540747;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1521457455;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		for (String parameterName : inParameters.keySet()) {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = inParameters.get(parameterName)__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue)value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, inParameters.get(parameterName))__			}_		}__		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,for,string,parameter,name,in,parameters,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,in,parameters,get,parameter,name,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,in,parameters,get,parameter,name,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1522103912;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		inParameters.forEach((parameterName, parameterValue) -> {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = parameterValue__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue) value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, parameterValue)__			}_		})___		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,in,parameters,for,each,parameter,name,parameter,value,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,parameter,value,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,parameter,value,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1522231598;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		inParameters.forEach((parameterName, parameterValue) -> {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = parameterValue__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue) value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, parameterValue)__			}_		})___		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName)) {_					logger.warn("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,in,parameters,for,each,parameter,name,parameter,value,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,parameter,value,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,parameter,value,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,warn,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1532091916;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		inParameters.forEach((parameterName, parameterValue) -> {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = parameterValue__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue) value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, parameterValue)__			}_		})___		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName) && logger.isInfoEnabled()) {_					logger.info("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,in,parameters,for,each,parameter,name,parameter,value,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,parameter,value,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,parameter,value,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1532978875;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		inParameters.forEach((parameterName, parameterValue) -> {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = parameterValue__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue) value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, parameterValue)__			}_		})___		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName) && logger.isInfoEnabled()) {_					logger.info("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,in,parameters,for,each,parameter,name,parameter,value,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,parameter,value,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,parameter,value,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
CallMetaDataContext -> public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters);1542613849;Match input parameter values with the parameters declared to be used in the call._@param inParameters the input values_@return a Map containing the matched parameter names with the value taken from the input;public Map<String, ?> matchInParameterValuesWithCallParameters(Map<String, ?> inParameters) {_		CallMetaDataProvider provider = obtainMetaDataProvider()__		if (!provider.isProcedureColumnMetaDataUsed()) {_			return inParameters__		}__		Map<String, String> callParameterNames = new HashMap<>(this.callParameters.size())__		for (SqlParameter parameter : this.callParameters) {_			if (parameter.isInputValueProvided()) {_				String parameterName =  parameter.getName()__				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				if (parameterNameToMatch != null) {_					callParameterNames.put(parameterNameToMatch.toLowerCase(), parameterName)__				}_			}_		}__		Map<String, Object> matchedParameters = new HashMap<>(inParameters.size())__		inParameters.forEach((parameterName, parameterValue) -> {_			String parameterNameToMatch = provider.parameterNameToUse(parameterName)__			String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__			if (callParameterName == null) {_				if (logger.isDebugEnabled()) {_					Object value = parameterValue__					if (value instanceof SqlParameterValue) {_						value = ((SqlParameterValue) value).getValue()__					}_					if (value != null) {_						logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" +_								parameterName + "\" in the parameters used: " + callParameterNames.keySet())__					}_				}_			}_			else {_				matchedParameters.put(callParameterName, parameterValue)__			}_		})___		if (matchedParameters.size() < callParameterNames.size()) {_			for (String parameterName : callParameterNames.keySet()) {_				String parameterNameToMatch = provider.parameterNameToUse(parameterName)__				String callParameterName = callParameterNames.get(lowerCase(parameterNameToMatch))__				if (!matchedParameters.containsKey(callParameterName) && logger.isInfoEnabled()) {_					logger.info("Unable to locate the corresponding parameter value for '" + parameterName +_							"' within the parameter values provided: " + inParameters.keySet())__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values())__			logger.debug("Found match for " + matchedParameters.keySet())__		}_		return matchedParameters__	};match,input,parameter,values,with,the,parameters,declared,to,be,used,in,the,call,param,in,parameters,the,input,values,return,a,map,containing,the,matched,parameter,names,with,the,value,taken,from,the,input;public,map,string,match,in,parameter,values,with,call,parameters,map,string,in,parameters,call,meta,data,provider,provider,obtain,meta,data,provider,if,provider,is,procedure,column,meta,data,used,return,in,parameters,map,string,string,call,parameter,names,new,hash,map,this,call,parameters,size,for,sql,parameter,parameter,this,call,parameters,if,parameter,is,input,value,provided,string,parameter,name,parameter,get,name,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,if,parameter,name,to,match,null,call,parameter,names,put,parameter,name,to,match,to,lower,case,parameter,name,map,string,object,matched,parameters,new,hash,map,in,parameters,size,in,parameters,for,each,parameter,name,parameter,value,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,call,parameter,name,null,if,logger,is,debug,enabled,object,value,parameter,value,if,value,instanceof,sql,parameter,value,value,sql,parameter,value,value,get,value,if,value,null,logger,debug,unable,to,locate,the,corresponding,in,or,in,out,parameter,for,parameter,name,in,the,parameters,used,call,parameter,names,key,set,else,matched,parameters,put,call,parameter,name,parameter,value,if,matched,parameters,size,call,parameter,names,size,for,string,parameter,name,call,parameter,names,key,set,string,parameter,name,to,match,provider,parameter,name,to,use,parameter,name,string,call,parameter,name,call,parameter,names,get,lower,case,parameter,name,to,match,if,matched,parameters,contains,key,call,parameter,name,logger,is,info,enabled,logger,info,unable,to,locate,the,corresponding,parameter,value,for,parameter,name,within,the,parameter,values,provided,in,parameters,key,set,if,logger,is,debug,enabled,logger,debug,matching,in,parameters,key,set,with,call,parameter,names,values,logger,debug,found,match,for,matched,parameters,key,set,return,matched,parameters
