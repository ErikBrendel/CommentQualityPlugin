commented;modifiers;parameterAmount;loc;comment;code
true;public,final;2;4;/**  * This implementation calls {@link #setValuesIfAvailable}  * and sets this instance's exhaustion flag accordingly.  */ ;/**  * This implementation calls {@link #setValuesIfAvailable}  * and sets this instance's exhaustion flag accordingly.  */ @Override public final void setValues(PreparedStatement ps, int i) throws SQLException {     this.exhausted = !setValuesIfAvailable(ps, i). }
true;public,final;1;4;/**  * This implementation return this instance's current exhaustion flag.  */ ;/**  * This implementation return this instance's current exhaustion flag.  */ @Override public final boolean isBatchExhausted(int i) {     return this.exhausted. }
true;public;0;4;/**  * This implementation returns {@code Integer.MAX_VALUE}.  * Can be overridden in subclasses to lower the maximum batch size.  */ ;/**  * This implementation returns {@code Integer.MAX_VALUE}.  * Can be overridden in subclasses to lower the maximum batch size.  */ @Override public int getBatchSize() {     return Integer.MAX_VALUE. }
true;protected,abstract;2;1;/**  * Check for available values and set them on the given PreparedStatement.  * If no values are available anymore, return {@code false}.  * @param ps the PreparedStatement we'll invoke setter methods on  * @param i index of the statement we're issuing in the batch, starting from 0  * @return whether there were values to apply (that is, whether the applied  * parameters should be added to the batch and this method should be called  * for a further iteration)  * @throws SQLException if a SQLException is encountered  * (i.e. there is no need to catch SQLException)  */ ;/**  * Check for available values and set them on the given PreparedStatement.  * If no values are available anymore, return {@code false}.  * @param ps the PreparedStatement we'll invoke setter methods on  * @param i index of the statement we're issuing in the batch, starting from 0  * @return whether there were values to apply (that is, whether the applied  * parameters should be added to the batch and this method should be called  * for a further iteration)  * @throws SQLException if a SQLException is encountered  * (i.e. there is no need to catch SQLException)  */ protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException.
