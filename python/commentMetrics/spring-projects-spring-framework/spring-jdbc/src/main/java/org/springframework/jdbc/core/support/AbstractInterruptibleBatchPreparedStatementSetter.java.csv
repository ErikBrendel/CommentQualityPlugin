# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public int getBatchSize();1356735495;This implementation returns {@code Integer.MAX_VALUE}._Can be overridden in subclasses to lower the maximum batch size.;@Override_	public int getBatchSize() {_		return Integer.MAX_VALUE__	};this,implementation,returns,code,integer,can,be,overridden,in,subclasses,to,lower,the,maximum,batch,size;override,public,int,get,batch,size,return,integer
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public int getBatchSize();1368482696;This implementation returns {@code Integer.MAX_VALUE}._Can be overridden in subclasses to lower the maximum batch size.;@Override_	public int getBatchSize() {_		return Integer.MAX_VALUE__	};this,implementation,returns,code,integer,can,be,overridden,in,subclasses,to,lower,the,maximum,batch,size;override,public,int,get,batch,size,return,integer
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public int getBatchSize();1530174524;This implementation returns {@code Integer.MAX_VALUE}._Can be overridden in subclasses to lower the maximum batch size.;@Override_	public int getBatchSize() {_		return Integer.MAX_VALUE__	};this,implementation,returns,code,integer,can,be,overridden,in,subclasses,to,lower,the,maximum,batch,size;override,public,int,get,batch,size,return,integer
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final void setValues(PreparedStatement ps, int i) throws SQLException;1356735495;This implementation calls {@link #setValuesIfAvailable}_and sets this instance's exhaustion flag accordingly.;@Override_	public final void setValues(PreparedStatement ps, int i) throws SQLException {_		this.exhausted = !setValuesIfAvailable(ps, i)__	};this,implementation,calls,link,set,values,if,available,and,sets,this,instance,s,exhaustion,flag,accordingly;override,public,final,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,this,exhausted,set,values,if,available,ps,i
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final void setValues(PreparedStatement ps, int i) throws SQLException;1368482696;This implementation calls {@link #setValuesIfAvailable}_and sets this instance's exhaustion flag accordingly.;@Override_	public final void setValues(PreparedStatement ps, int i) throws SQLException {_		this.exhausted = !setValuesIfAvailable(ps, i)__	};this,implementation,calls,link,set,values,if,available,and,sets,this,instance,s,exhaustion,flag,accordingly;override,public,final,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,this,exhausted,set,values,if,available,ps,i
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final void setValues(PreparedStatement ps, int i) throws SQLException;1530174524;This implementation calls {@link #setValuesIfAvailable}_and sets this instance's exhaustion flag accordingly.;@Override_	public final void setValues(PreparedStatement ps, int i) throws SQLException {_		this.exhausted = !setValuesIfAvailable(ps, i)__	};this,implementation,calls,link,set,values,if,available,and,sets,this,instance,s,exhaustion,flag,accordingly;override,public,final,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,this,exhausted,set,values,if,available,ps,i
AbstractInterruptibleBatchPreparedStatementSetter -> protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;1328020251;Check for available values and set them on the given PreparedStatement._If no values are available anymore, return <code>false</code>._@param ps PreparedStatement we'll invoke setter methods on_@param i index of the statement we're issuing in the batch, starting from 0_@return whether there were values to apply (that is, whether the applied_parameters should be added to the batch and this method should be called_for a further iteration)_@throws SQLException if a SQLException is encountered_(i.e. there is no need to catch SQLException);protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;check,for,available,values,and,set,them,on,the,given,prepared,statement,if,no,values,are,available,anymore,return,code,false,code,param,ps,prepared,statement,we,ll,invoke,setter,methods,on,param,i,index,of,the,statement,we,re,issuing,in,the,batch,starting,from,0,return,whether,there,were,values,to,apply,that,is,whether,the,applied,parameters,should,be,added,to,the,batch,and,this,method,should,be,called,for,a,further,iteration,throws,sqlexception,if,a,sqlexception,is,encountered,i,e,there,is,no,need,to,catch,sqlexception;protected,abstract,boolean,set,values,if,available,prepared,statement,ps,int,i,throws,sqlexception
AbstractInterruptibleBatchPreparedStatementSetter -> protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;1356735495;Check for available values and set them on the given PreparedStatement._If no values are available anymore, return {@code false}._@param ps PreparedStatement we'll invoke setter methods on_@param i index of the statement we're issuing in the batch, starting from 0_@return whether there were values to apply (that is, whether the applied_parameters should be added to the batch and this method should be called_for a further iteration)_@throws SQLException if a SQLException is encountered_(i.e. there is no need to catch SQLException);protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;check,for,available,values,and,set,them,on,the,given,prepared,statement,if,no,values,are,available,anymore,return,code,false,param,ps,prepared,statement,we,ll,invoke,setter,methods,on,param,i,index,of,the,statement,we,re,issuing,in,the,batch,starting,from,0,return,whether,there,were,values,to,apply,that,is,whether,the,applied,parameters,should,be,added,to,the,batch,and,this,method,should,be,called,for,a,further,iteration,throws,sqlexception,if,a,sqlexception,is,encountered,i,e,there,is,no,need,to,catch,sqlexception;protected,abstract,boolean,set,values,if,available,prepared,statement,ps,int,i,throws,sqlexception
AbstractInterruptibleBatchPreparedStatementSetter -> protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;1357119239;Check for available values and set them on the given PreparedStatement._If no values are available anymore, return {@code false}._@param ps PreparedStatement we'll invoke setter methods on_@param i index of the statement we're issuing in the batch, starting from 0_@return whether there were values to apply (that is, whether the applied_parameters should be added to the batch and this method should be called_for a further iteration)_@throws SQLException if a SQLException is encountered_(i.e. there is no need to catch SQLException);protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;check,for,available,values,and,set,them,on,the,given,prepared,statement,if,no,values,are,available,anymore,return,code,false,param,ps,prepared,statement,we,ll,invoke,setter,methods,on,param,i,index,of,the,statement,we,re,issuing,in,the,batch,starting,from,0,return,whether,there,were,values,to,apply,that,is,whether,the,applied,parameters,should,be,added,to,the,batch,and,this,method,should,be,called,for,a,further,iteration,throws,sqlexception,if,a,sqlexception,is,encountered,i,e,there,is,no,need,to,catch,sqlexception;protected,abstract,boolean,set,values,if,available,prepared,statement,ps,int,i,throws,sqlexception
AbstractInterruptibleBatchPreparedStatementSetter -> protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;1368482696;Check for available values and set them on the given PreparedStatement._If no values are available anymore, return {@code false}._@param ps PreparedStatement we'll invoke setter methods on_@param i index of the statement we're issuing in the batch, starting from 0_@return whether there were values to apply (that is, whether the applied_parameters should be added to the batch and this method should be called_for a further iteration)_@throws SQLException if a SQLException is encountered_(i.e. there is no need to catch SQLException);protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;check,for,available,values,and,set,them,on,the,given,prepared,statement,if,no,values,are,available,anymore,return,code,false,param,ps,prepared,statement,we,ll,invoke,setter,methods,on,param,i,index,of,the,statement,we,re,issuing,in,the,batch,starting,from,0,return,whether,there,were,values,to,apply,that,is,whether,the,applied,parameters,should,be,added,to,the,batch,and,this,method,should,be,called,for,a,further,iteration,throws,sqlexception,if,a,sqlexception,is,encountered,i,e,there,is,no,need,to,catch,sqlexception;protected,abstract,boolean,set,values,if,available,prepared,statement,ps,int,i,throws,sqlexception
AbstractInterruptibleBatchPreparedStatementSetter -> protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;1530174524;Check for available values and set them on the given PreparedStatement._If no values are available anymore, return {@code false}._@param ps the PreparedStatement we'll invoke setter methods on_@param i index of the statement we're issuing in the batch, starting from 0_@return whether there were values to apply (that is, whether the applied_parameters should be added to the batch and this method should be called_for a further iteration)_@throws SQLException if a SQLException is encountered_(i.e. there is no need to catch SQLException);protected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i) throws SQLException_;check,for,available,values,and,set,them,on,the,given,prepared,statement,if,no,values,are,available,anymore,return,code,false,param,ps,the,prepared,statement,we,ll,invoke,setter,methods,on,param,i,index,of,the,statement,we,re,issuing,in,the,batch,starting,from,0,return,whether,there,were,values,to,apply,that,is,whether,the,applied,parameters,should,be,added,to,the,batch,and,this,method,should,be,called,for,a,further,iteration,throws,sqlexception,if,a,sqlexception,is,encountered,i,e,there,is,no,need,to,catch,sqlexception;protected,abstract,boolean,set,values,if,available,prepared,statement,ps,int,i,throws,sqlexception
AbstractInterruptibleBatchPreparedStatementSetter -> public final boolean isBatchExhausted(int i);1328020251;This implementation return this instance's current exhaustion flag.;public final boolean isBatchExhausted(int i) {_		return this.exhausted__	};this,implementation,return,this,instance,s,current,exhaustion,flag;public,final,boolean,is,batch,exhausted,int,i,return,this,exhausted
AbstractInterruptibleBatchPreparedStatementSetter -> public final boolean isBatchExhausted(int i);1357119239;This implementation return this instance's current exhaustion flag.;public final boolean isBatchExhausted(int i) {_		return this.exhausted__	};this,implementation,return,this,instance,s,current,exhaustion,flag;public,final,boolean,is,batch,exhausted,int,i,return,this,exhausted
AbstractInterruptibleBatchPreparedStatementSetter -> public int getBatchSize();1328020251;This implementation returns <code>Integer.MAX_VALUE</code>._Can be overridden in subclasses to lower the maximum batch size.;public int getBatchSize() {_		return Integer.MAX_VALUE__	};this,implementation,returns,code,integer,code,can,be,overridden,in,subclasses,to,lower,the,maximum,batch,size;public,int,get,batch,size,return,integer
AbstractInterruptibleBatchPreparedStatementSetter -> public int getBatchSize();1357119239;This implementation returns {@code Integer.MAX_VALUE}._Can be overridden in subclasses to lower the maximum batch size.;public int getBatchSize() {_		return Integer.MAX_VALUE__	};this,implementation,returns,code,integer,can,be,overridden,in,subclasses,to,lower,the,maximum,batch,size;public,int,get,batch,size,return,integer
AbstractInterruptibleBatchPreparedStatementSetter -> public final void setValues(PreparedStatement ps, int i) throws SQLException;1328020251;This implementation calls {@link #setValuesIfAvailable}_and sets this instance's exhaustion flag accordingly.;public final void setValues(PreparedStatement ps, int i) throws SQLException {_		this.exhausted = !setValuesIfAvailable(ps, i)__	};this,implementation,calls,link,set,values,if,available,and,sets,this,instance,s,exhaustion,flag,accordingly;public,final,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,this,exhausted,set,values,if,available,ps,i
AbstractInterruptibleBatchPreparedStatementSetter -> public final void setValues(PreparedStatement ps, int i) throws SQLException;1357119239;This implementation calls {@link #setValuesIfAvailable}_and sets this instance's exhaustion flag accordingly.;public final void setValues(PreparedStatement ps, int i) throws SQLException {_		this.exhausted = !setValuesIfAvailable(ps, i)__	};this,implementation,calls,link,set,values,if,available,and,sets,this,instance,s,exhaustion,flag,accordingly;public,final,void,set,values,prepared,statement,ps,int,i,throws,sqlexception,this,exhausted,set,values,if,available,ps,i
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final boolean isBatchExhausted(int i);1356735495;This implementation return this instance's current exhaustion flag.;@Override_	public final boolean isBatchExhausted(int i) {_		return this.exhausted__	};this,implementation,return,this,instance,s,current,exhaustion,flag;override,public,final,boolean,is,batch,exhausted,int,i,return,this,exhausted
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final boolean isBatchExhausted(int i);1368482696;This implementation return this instance's current exhaustion flag.;@Override_	public final boolean isBatchExhausted(int i) {_		return this.exhausted__	};this,implementation,return,this,instance,s,current,exhaustion,flag;override,public,final,boolean,is,batch,exhausted,int,i,return,this,exhausted
AbstractInterruptibleBatchPreparedStatementSetter -> @Override 	public final boolean isBatchExhausted(int i);1530174524;This implementation return this instance's current exhaustion flag.;@Override_	public final boolean isBatchExhausted(int i) {_		return this.exhausted__	};this,implementation,return,this,instance,s,current,exhaustion,flag;override,public,final,boolean,is,batch,exhausted,int,i,return,this,exhausted
