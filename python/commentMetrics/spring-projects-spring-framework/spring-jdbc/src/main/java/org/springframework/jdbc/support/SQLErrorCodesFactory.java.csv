# id;timestamp;commentText;codeText;commentWords;codeWords
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1328020251;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1329142650;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}_		_		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1329393628;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}_		_		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1356735495;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1467730834;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1481552806;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1482265068;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1495868221;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1496837955;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1506097334;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1521457504;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.info("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isInfoEnabled()) {_				logger.info("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,warn,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,info,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,info,enabled,logger,info,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> protected SQLErrorCodesFactory();1532091916;Create a new instance of the {@link SQLErrorCodesFactory} class._<p>Not public to enforce Singleton design pattern. Would be private_except to allow testing via overriding the_{@link #loadResource(String)} method._<p><b>Do not subclass in application code.</b>_@see #loadResource(String);protected SQLErrorCodesFactory() {_		Map<String, SQLErrorCodes> errorCodes___		try {_			DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()__			lbf.setBeanClassLoader(getClass().getClassLoader())__			XmlBeanDefinitionReader bdr = new XmlBeanDefinitionReader(lbf)___			_			Resource resource = loadResource(SQL_ERROR_CODE_DEFAULT_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__			}_			else {_				logger.info("Default sql-error-codes.xml not found (should be included in spring-jdbc jar)")__			}__			_			resource = loadResource(SQL_ERROR_CODE_OVERRIDE_PATH)__			if (resource != null && resource.exists()) {_				bdr.loadBeanDefinitions(resource)__				logger.debug("Found custom sql-error-codes.xml file at the root of the classpath")__			}__			_			errorCodes = lbf.getBeansOfType(SQLErrorCodes.class, true, false)__			if (logger.isTraceEnabled()) {_				logger.trace("SQLErrorCodes loaded: " + errorCodes.keySet())__			}_		}_		catch (BeansException ex) {_			logger.warn("Error loading SQL error codes from config file", ex)__			errorCodes = Collections.emptyMap()__		}__		this.errorCodesMap = errorCodes__	};create,a,new,instance,of,the,link,sqlerror,codes,factory,class,p,not,public,to,enforce,singleton,design,pattern,would,be,private,except,to,allow,testing,via,overriding,the,link,load,resource,string,method,p,b,do,not,subclass,in,application,code,b,see,load,resource,string;protected,sqlerror,codes,factory,map,string,sqlerror,codes,error,codes,try,default,listable,bean,factory,lbf,new,default,listable,bean,factory,lbf,set,bean,class,loader,get,class,get,class,loader,xml,bean,definition,reader,bdr,new,xml,bean,definition,reader,lbf,resource,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,else,logger,info,default,sql,error,codes,xml,not,found,should,be,included,in,spring,jdbc,jar,resource,load,resource,if,resource,null,resource,exists,bdr,load,bean,definitions,resource,logger,debug,found,custom,sql,error,codes,xml,file,at,the,root,of,the,classpath,error,codes,lbf,get,beans,of,type,sqlerror,codes,class,true,false,if,logger,is,trace,enabled,logger,trace,sqlerror,codes,loaded,error,codes,key,set,catch,beans,exception,ex,logger,warn,error,loading,sql,error,codes,from,config,file,ex,error,codes,collections,empty,map,this,error,codes,map,error,codes
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1328020251;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1329142650;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1329393628;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1356735495;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1467730834;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1481552806;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1482265068;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1495868221;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1496837955;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1506097334;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1521457504;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> public static SQLErrorCodesFactory getInstance();1532091916;Return the singleton instance.;public static SQLErrorCodesFactory getInstance() {_		return instance__	};return,the,singleton,instance;public,static,sqlerror,codes,factory,get,instance,return,instance
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1481552806;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1482265068;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1495868221;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1496837955;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1506097334;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1521457504;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> private String identify(DataSource dataSource);1532091916;Build an identification String for the given {@link DataSource},_primarily for logging purposes._@param dataSource the {@code DataSource} to introspect_@return the identification String;private String identify(DataSource dataSource) {_		return dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode())__	};build,an,identification,string,for,the,given,link,data,source,primarily,for,logging,purposes,param,data,source,the,code,data,source,to,introspect,return,the,identification,string;private,string,identify,data,source,data,source,return,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1481552806;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1482265068;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1495868221;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1496837955;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1506097334;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1521457504;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName);1532091916;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param databaseName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object (never {@code null})_@see #unregisterDatabase(DataSource);public SQLErrorCodes registerDatabase(DataSource dataSource, String databaseName) {_		SQLErrorCodes sec = getErrorCodes(databaseName)__		if (logger.isDebugEnabled()) {_			logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) +_					"]: database product name is '" + databaseName + "'")__		}_		this.dataSourceCache.put(dataSource, sec)__		return sec__	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,database,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object,never,code,null,see,unregister,database,data,source;public,sqlerror,codes,register,database,data,source,data,source,string,database,name,sqlerror,codes,sec,get,error,codes,database,name,if,logger,is,debug,enabled,logger,debug,caching,sql,error,codes,for,data,source,identify,data,source,database,product,name,is,database,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> @Nullable 	protected Resource loadResource(String path);1495868221;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;@Nullable_	protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;nullable,protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> @Nullable 	protected Resource loadResource(String path);1496837955;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;@Nullable_	protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;nullable,protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> @Nullable 	protected Resource loadResource(String path);1506097334;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;@Nullable_	protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;nullable,protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> @Nullable 	protected Resource loadResource(String path);1521457504;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;@Nullable_	protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;nullable,protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> @Nullable 	protected Resource loadResource(String path);1532091916;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;@Nullable_	protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;nullable,protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1328020251;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or <code>null</code> if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,code,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1329142650;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or <code>null</code> if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,code,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1329393628;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or <code>null</code> if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,code,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1356735495;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1467730834;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1481552806;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> protected Resource loadResource(String path);1482265068;Load the given resource from the class path._<p><b>Not to be overridden by application developers, who should obtain_instances of this class from the static {@link #getInstance()} method.</b>_<p>Protected for testability._@param path resource path_ either a custom path or one of either_{@link #SQL_ERROR_CODE_DEFAULT_PATH} or_{@link #SQL_ERROR_CODE_OVERRIDE_PATH}._@return the resource, or {@code null} if the resource wasn't found_@see #getInstance;protected Resource loadResource(String path) {_		return new ClassPathResource(path, getClass().getClassLoader())__	};load,the,given,resource,from,the,class,path,p,b,not,to,be,overridden,by,application,developers,who,should,obtain,instances,of,this,class,from,the,static,link,get,instance,method,b,p,protected,for,testability,param,path,resource,path,either,a,custom,path,or,one,of,either,link,or,link,return,the,resource,or,code,null,if,the,resource,wasn,t,found,see,get,instance;protected,resource,load,resource,string,path,return,new,class,path,resource,path,get,class,get,class,loader
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName);1328020251;Associate the specified database name with the given {@link DataSource}._@param dataSource the <code>DataSource</code> identifying the database_@param dbName the corresponding database name as stated in the error codes_definition file (must not be <code>null</code>)_@return the corresponding <code>SQLErrorCodes</code> object;public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName) {_		synchronized (this.dataSourceCache) {_			SQLErrorCodes sec = getErrorCodes(dbName)__			this.dataSourceCache.put(dataSource, sec)__			return sec__		}_	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,code,identifying,the,database,param,db,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,code,return,the,corresponding,code,sqlerror,codes,code,object;public,sqlerror,codes,register,database,data,source,data,source,string,db,name,synchronized,this,data,source,cache,sqlerror,codes,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName);1329142650;Associate the specified database name with the given {@link DataSource}._@param dataSource the <code>DataSource</code> identifying the database_@param dbName the corresponding database name as stated in the error codes_definition file (must not be <code>null</code>)_@return the corresponding <code>SQLErrorCodes</code> object;public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName) {_		synchronized (this.dataSourceCache) {_			SQLErrorCodes sec = getErrorCodes(dbName)__			this.dataSourceCache.put(dataSource, sec)__			return sec__		}_	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,code,identifying,the,database,param,db,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,code,return,the,corresponding,code,sqlerror,codes,code,object;public,sqlerror,codes,register,database,data,source,data,source,string,db,name,synchronized,this,data,source,cache,sqlerror,codes,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName);1329393628;Associate the specified database name with the given {@link DataSource}._@param dataSource the <code>DataSource</code> identifying the database_@param dbName the corresponding database name as stated in the error codes_definition file (must not be <code>null</code>)_@return the corresponding <code>SQLErrorCodes</code> object;public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName) {_		synchronized (this.dataSourceCache) {_			SQLErrorCodes sec = getErrorCodes(dbName)__			this.dataSourceCache.put(dataSource, sec)__			return sec__		}_	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,code,identifying,the,database,param,db,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,code,return,the,corresponding,code,sqlerror,codes,code,object;public,sqlerror,codes,register,database,data,source,data,source,string,db,name,synchronized,this,data,source,cache,sqlerror,codes,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName);1356735495;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param dbName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object;public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName) {_		synchronized (this.dataSourceCache) {_			SQLErrorCodes sec = getErrorCodes(dbName)__			this.dataSourceCache.put(dataSource, sec)__			return sec__		}_	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,db,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object;public,sqlerror,codes,register,database,data,source,data,source,string,db,name,synchronized,this,data,source,cache,sqlerror,codes,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName);1467730834;Associate the specified database name with the given {@link DataSource}._@param dataSource the {@code DataSource} identifying the database_@param dbName the corresponding database name as stated in the error codes_definition file (must not be {@code null})_@return the corresponding {@code SQLErrorCodes} object;public SQLErrorCodes registerDatabase(DataSource dataSource, String dbName) {_		synchronized (this.dataSourceCache) {_			SQLErrorCodes sec = getErrorCodes(dbName)__			this.dataSourceCache.put(dataSource, sec)__			return sec__		}_	};associate,the,specified,database,name,with,the,given,link,data,source,param,data,source,the,code,data,source,identifying,the,database,param,db,name,the,corresponding,database,name,as,stated,in,the,error,codes,definition,file,must,not,be,code,null,return,the,corresponding,code,sqlerror,codes,object;public,sqlerror,codes,register,database,data,source,data,source,string,db,name,synchronized,this,data,source,cache,sqlerror,codes,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1481552806;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1482265068;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1495868221;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1496837955;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1506097334;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1521457504;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isWarnEnabled()) {_				logger.warn("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isInfoEnabled()) {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,warn,enabled,logger,warn,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,info,enabled,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes);1532091916;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String databaseName, SQLErrorCodes errorCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(databaseName)__		if (customTranslator != null) {_			if (errorCodes.getCustomSqlExceptionTranslator() != null && logger.isDebugEnabled()) {_				logger.debug("Overriding already defined custom translator '" +_						errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			else if (logger.isTraceEnabled()) {_				logger.trace("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'")__			}_			errorCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,database,name,sqlerror,codes,error,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,database,name,if,custom,translator,null,if,error,codes,get,custom,sql,exception,translator,null,logger,is,debug,enabled,logger,debug,overriding,already,defined,custom,translator,error,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,else,if,logger,is,trace,enabled,logger,trace,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,database,name,error,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String dbName);1328020251;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param dbName the database name (must not be <code>null</code>)_@return the <code>SQLErrorCodes</code> instance for the given database_@throws IllegalArgumentException if the supplied database name is <code>null</code>;public SQLErrorCodes getErrorCodes(String dbName) {_		Assert.notNull(dbName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(dbName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), dbName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + dbName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + dbName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,db,name,the,database,name,must,not,be,code,null,code,return,the,code,sqlerror,codes,code,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null,code;public,sqlerror,codes,get,error,codes,string,db,name,assert,not,null,db,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,db,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,db,name,sec,candidate,break,if,sec,null,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String dbName);1329142650;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param dbName the database name (must not be <code>null</code>)_@return the <code>SQLErrorCodes</code> instance for the given database_@throws IllegalArgumentException if the supplied database name is <code>null</code>;public SQLErrorCodes getErrorCodes(String dbName) {_		Assert.notNull(dbName, "Database product name must not be null")__		_		SQLErrorCodes sec = this.errorCodesMap.get(dbName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), dbName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkSqlExceptionTranslatorRegistry(dbName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + dbName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + dbName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,db,name,the,database,name,must,not,be,code,null,code,return,the,code,sqlerror,codes,code,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null,code;public,sqlerror,codes,get,error,codes,string,db,name,assert,not,null,db,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,db,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,db,name,sec,candidate,break,if,sec,null,check,sql,exception,translator,registry,db,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String dbName);1329393628;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param dbName the database name (must not be <code>null</code>)_@return the <code>SQLErrorCodes</code> instance for the given database_@throws IllegalArgumentException if the supplied database name is <code>null</code>;public SQLErrorCodes getErrorCodes(String dbName) {_		Assert.notNull(dbName, "Database product name must not be null")__		_		SQLErrorCodes sec = this.errorCodesMap.get(dbName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), dbName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(dbName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + dbName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + dbName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,db,name,the,database,name,must,not,be,code,null,code,return,the,code,sqlerror,codes,code,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null,code;public,sqlerror,codes,get,error,codes,string,db,name,assert,not,null,db,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,db,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,db,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,db,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String dbName);1356735495;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param dbName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String dbName) {_		Assert.notNull(dbName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(dbName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), dbName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(dbName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + dbName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + dbName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,db,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,db,name,assert,not,null,db,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,db,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,db,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,db,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String dbName);1467730834;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param dbName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String dbName) {_		Assert.notNull(dbName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(dbName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), dbName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(dbName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + dbName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + dbName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,db,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,db,name,assert,not,null,db,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,db,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,db,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,db,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,db,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1328020251;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no <code>SQLErrorCodes</code> were found._@param dataSource the <code>DataSource</code> identifying the database_@return the corresponding <code>SQLErrorCodes</code> object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + dataSource + "]")__		}__		synchronized (this.dataSourceCache) {_			_			SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__			if (sec != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("SQLErrorCodes found in cache for DataSource [" +_							dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) + "]")__				}_				return sec__			}_			_			try {_				String dbName = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__				if (dbName != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Database product name cached for DataSource [" +_								dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) +_								"]: name is '" + dbName + "'")__					}_					sec = getErrorCodes(dbName)__					this.dataSourceCache.put(dataSource, sec)__					return sec__				}_			}_			catch (MetaDataAccessException ex) {_				logger.warn("Error while extracting database product name - falling back to empty error codes", ex)__			}_		}__		_		return new SQLErrorCodes()__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,code,were,found,param,data,source,the,code,data,source,code,identifying,the,database,return,the,corresponding,code,sqlerror,codes,code,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,data,source,synchronized,this,data,source,cache,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,return,sec,try,string,db,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,db,name,null,if,logger,is,debug,enabled,logger,debug,database,product,name,cached,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,name,is,db,name,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,product,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1329142650;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no <code>SQLErrorCodes</code> were found._@param dataSource the <code>DataSource</code> identifying the database_@return the corresponding <code>SQLErrorCodes</code> object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + dataSource + "]")__		}__		synchronized (this.dataSourceCache) {_			_			SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__			if (sec != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("SQLErrorCodes found in cache for DataSource [" +_							dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) + "]")__				}_				return sec__			}_			_			try {_				String dbName = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__				if (dbName != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Database product name cached for DataSource [" +_								dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) +_								"]: name is '" + dbName + "'")__					}_					sec = getErrorCodes(dbName)__					this.dataSourceCache.put(dataSource, sec)__					return sec__				}_			}_			catch (MetaDataAccessException ex) {_				logger.warn("Error while extracting database product name - falling back to empty error codes", ex)__			}_		}__		_		return new SQLErrorCodes()__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,code,were,found,param,data,source,the,code,data,source,code,identifying,the,database,return,the,corresponding,code,sqlerror,codes,code,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,data,source,synchronized,this,data,source,cache,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,return,sec,try,string,db,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,db,name,null,if,logger,is,debug,enabled,logger,debug,database,product,name,cached,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,name,is,db,name,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,product,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1329393628;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no <code>SQLErrorCodes</code> were found._@param dataSource the <code>DataSource</code> identifying the database_@return the corresponding <code>SQLErrorCodes</code> object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + dataSource + "]")__		}__		synchronized (this.dataSourceCache) {_			_			SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__			if (sec != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("SQLErrorCodes found in cache for DataSource [" +_							dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) + "]")__				}_				return sec__			}_			_			try {_				String dbName = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__				if (dbName != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Database product name cached for DataSource [" +_								dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) +_								"]: name is '" + dbName + "'")__					}_					sec = getErrorCodes(dbName)__					this.dataSourceCache.put(dataSource, sec)__					return sec__				}_			}_			catch (MetaDataAccessException ex) {_				logger.warn("Error while extracting database product name - falling back to empty error codes", ex)__			}_		}__		_		return new SQLErrorCodes()__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,code,were,found,param,data,source,the,code,data,source,code,identifying,the,database,return,the,corresponding,code,sqlerror,codes,code,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,data,source,synchronized,this,data,source,cache,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,return,sec,try,string,db,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,db,name,null,if,logger,is,debug,enabled,logger,debug,database,product,name,cached,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,name,is,db,name,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,product,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1356735495;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + dataSource + "]")__		}__		synchronized (this.dataSourceCache) {_			_			SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__			if (sec != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("SQLErrorCodes found in cache for DataSource [" +_							dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) + "]")__				}_				return sec__			}_			_			try {_				String dbName = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__				if (dbName != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Database product name cached for DataSource [" +_								dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) +_								"]: name is '" + dbName + "'")__					}_					sec = getErrorCodes(dbName)__					this.dataSourceCache.put(dataSource, sec)__					return sec__				}_			}_			catch (MetaDataAccessException ex) {_				logger.warn("Error while extracting database product name - falling back to empty error codes", ex)__			}_		}__		_		return new SQLErrorCodes()__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,data,source,synchronized,this,data,source,cache,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,return,sec,try,string,db,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,db,name,null,if,logger,is,debug,enabled,logger,debug,database,product,name,cached,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,name,is,db,name,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,product,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1467730834;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + dataSource + "]")__		}__		synchronized (this.dataSourceCache) {_			_			SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__			if (sec != null) {_				if (logger.isDebugEnabled()) {_					logger.debug("SQLErrorCodes found in cache for DataSource [" +_							dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) + "]")__				}_				return sec__			}_			_			try {_				String dbName = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__				if (dbName != null) {_					if (logger.isDebugEnabled()) {_						logger.debug("Database product name cached for DataSource [" +_								dataSource.getClass().getName() + '@' + Integer.toHexString(dataSource.hashCode()) +_								"]: name is '" + dbName + "'")__					}_					sec = getErrorCodes(dbName)__					this.dataSourceCache.put(dataSource, sec)__					return sec__				}_			}_			catch (MetaDataAccessException ex) {_				logger.warn("Error while extracting database product name - falling back to empty error codes", ex)__			}_		}__		_		return new SQLErrorCodes()__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,data,source,synchronized,this,data,source,cache,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,return,sec,try,string,db,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,db,name,null,if,logger,is,debug,enabled,logger,debug,database,product,name,cached,for,data,source,data,source,get,class,get,name,integer,to,hex,string,data,source,hash,code,name,is,db,name,sec,get,error,codes,db,name,this,data,source,cache,put,data,source,sec,return,sec,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,product,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1481552806;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (name != null) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__						_						return new SQLErrorCodes()__					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,name,null,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1482265068;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (name != null) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__						_						return new SQLErrorCodes()__					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,name,null,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1495868221;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = (String) JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (name != null) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__						_						return new SQLErrorCodes()__					}_				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,string,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,name,null,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1496837955;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (name != null) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__					}_					_					return new SQLErrorCodes()__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,name,null,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1506097334;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (StringUtils.hasLength(name)) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__					}_					_					return new SQLErrorCodes()__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,string,utils,has,length,name,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1521457504;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (StringUtils.hasLength(name)) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__					}_					_					return new SQLErrorCodes()__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,string,utils,has,length,name,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(DataSource dataSource);1532091916;Return {@link SQLErrorCodes} for the given {@link DataSource},_evaluating "databaseProductName" from the_{@link java.sql.DatabaseMetaData}, or an empty error codes_instance if no {@code SQLErrorCodes} were found._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodes getErrorCodes(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		if (logger.isDebugEnabled()) {_			logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]")__		}__		_		SQLErrorCodes sec = this.dataSourceCache.get(dataSource)__		if (sec == null) {_			synchronized (this.dataSourceCache) {_				_				sec = this.dataSourceCache.get(dataSource)__				if (sec == null) {_					_					try {_						String name = JdbcUtils.extractDatabaseMetaData(dataSource, "getDatabaseProductName")__						if (StringUtils.hasLength(name)) {_							return registerDatabase(dataSource, name)__						}_					}_					catch (MetaDataAccessException ex) {_						logger.warn("Error while extracting database name - falling back to empty error codes", ex)__					}_					_					return new SQLErrorCodes()__				}_			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]")__		}__		return sec__	};return,link,sqlerror,codes,for,the,given,link,data,source,evaluating,database,product,name,from,the,link,java,sql,database,meta,data,or,an,empty,error,codes,instance,if,no,code,sqlerror,codes,were,found,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,codes,get,error,codes,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,if,logger,is,debug,enabled,logger,debug,looking,up,default,sqlerror,codes,for,data,source,identify,data,source,sqlerror,codes,sec,this,data,source,cache,get,data,source,if,sec,null,synchronized,this,data,source,cache,sec,this,data,source,cache,get,data,source,if,sec,null,try,string,name,jdbc,utils,extract,database,meta,data,data,source,get,database,product,name,if,string,utils,has,length,name,return,register,database,data,source,name,catch,meta,data,access,exception,ex,logger,warn,error,while,extracting,database,name,falling,back,to,empty,error,codes,ex,return,new,sqlerror,codes,if,logger,is,debug,enabled,logger,debug,sqlerror,codes,found,in,cache,for,data,source,identify,data,source,return,sec
SQLErrorCodesFactory -> @Nullable 	public SQLErrorCodes unregisterDatabase(DataSource dataSource);1495868221;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);@Nullable_	public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;nullable,public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> @Nullable 	public SQLErrorCodes unregisterDatabase(DataSource dataSource);1496837955;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);@Nullable_	public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;nullable,public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> @Nullable 	public SQLErrorCodes unregisterDatabase(DataSource dataSource);1506097334;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);@Nullable_	public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;nullable,public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> @Nullable 	public SQLErrorCodes unregisterDatabase(DataSource dataSource);1521457504;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);@Nullable_	public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;nullable,public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> @Nullable 	public SQLErrorCodes unregisterDatabase(DataSource dataSource);1532091916;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);@Nullable_	public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;nullable,public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> public SQLErrorCodes unregisterDatabase(DataSource dataSource);1481552806;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> public SQLErrorCodes unregisterDatabase(DataSource dataSource);1482265068;Clear the cache for the specified {@link DataSource}, if registered._@param dataSource the {@code DataSource} identifying the database_@return the corresponding {@code SQLErrorCodes} object that got removed,_or {@code null} if not registered_@since 4.3.5_@see #registerDatabase(DataSource, String);public SQLErrorCodes unregisterDatabase(DataSource dataSource) {_		return this.dataSourceCache.remove(dataSource)__	};clear,the,cache,for,the,specified,link,data,source,if,registered,param,data,source,the,code,data,source,identifying,the,database,return,the,corresponding,code,sqlerror,codes,object,that,got,removed,or,code,null,if,not,registered,since,4,3,5,see,register,database,data,source,string;public,sqlerror,codes,unregister,database,data,source,data,source,return,this,data,source,cache,remove,data,source
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1481552806;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1482265068;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1495868221;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1496837955;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1506097334;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database metadata lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,metadata,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1521457504;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database meta-data lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,meta,data,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> public SQLErrorCodes getErrorCodes(String databaseName);1532091916;Return the {@link SQLErrorCodes} instance for the given database._<p>No need for a database meta-data lookup._@param databaseName the database name (must not be {@code null})_@return the {@code SQLErrorCodes} instance for the given database_@throws IllegalArgumentException if the supplied database name is {@code null};public SQLErrorCodes getErrorCodes(String databaseName) {_		Assert.notNull(databaseName, "Database product name must not be null")___		SQLErrorCodes sec = this.errorCodesMap.get(databaseName)__		if (sec == null) {_			for (SQLErrorCodes candidate : this.errorCodesMap.values()) {_				if (PatternMatchUtils.simpleMatch(candidate.getDatabaseProductNames(), databaseName)) {_					sec = candidate__					break__				}_			}_		}_		if (sec != null) {_			checkCustomTranslatorRegistry(databaseName, sec)__			if (logger.isDebugEnabled()) {_				logger.debug("SQL error codes for '" + databaseName + "' found")__			}_			return sec__		}__		_		if (logger.isDebugEnabled()) {_			logger.debug("SQL error codes for '" + databaseName + "' not found")__		}_		return new SQLErrorCodes()__	};return,the,link,sqlerror,codes,instance,for,the,given,database,p,no,need,for,a,database,meta,data,lookup,param,database,name,the,database,name,must,not,be,code,null,return,the,code,sqlerror,codes,instance,for,the,given,database,throws,illegal,argument,exception,if,the,supplied,database,name,is,code,null;public,sqlerror,codes,get,error,codes,string,database,name,assert,not,null,database,name,database,product,name,must,not,be,null,sqlerror,codes,sec,this,error,codes,map,get,database,name,if,sec,null,for,sqlerror,codes,candidate,this,error,codes,map,values,if,pattern,match,utils,simple,match,candidate,get,database,product,names,database,name,sec,candidate,break,if,sec,null,check,custom,translator,registry,database,name,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,found,return,sec,if,logger,is,debug,enabled,logger,debug,sql,error,codes,for,database,name,not,found,return,new,sqlerror,codes
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes);1329393628;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(dbName)__		if (customTranslator != null) {_			if (dbCodes.getCustomSqlExceptionTranslator() != null) {_				logger.warn("Overriding already defined custom translator '" +_						dbCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			else {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			dbCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,db,name,sqlerror,codes,db,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,db,name,if,custom,translator,null,if,db,codes,get,custom,sql,exception,translator,null,logger,warn,overriding,already,defined,custom,translator,db,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,else,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,db,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes);1356735495;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(dbName)__		if (customTranslator != null) {_			if (dbCodes.getCustomSqlExceptionTranslator() != null) {_				logger.warn("Overriding already defined custom translator '" +_						dbCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			else {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			dbCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,db,name,sqlerror,codes,db,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,db,name,if,custom,translator,null,if,db,codes,get,custom,sql,exception,translator,null,logger,warn,overriding,already,defined,custom,translator,db,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,else,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,db,codes,set,custom,sql,exception,translator,custom,translator
SQLErrorCodesFactory -> private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes);1467730834;Check the {@link CustomSQLExceptionTranslatorRegistry} for any entries.;private void checkCustomTranslatorRegistry(String dbName, SQLErrorCodes dbCodes) {_		SQLExceptionTranslator customTranslator =_				CustomSQLExceptionTranslatorRegistry.getInstance().findTranslatorForDatabase(dbName)__		if (customTranslator != null) {_			if (dbCodes.getCustomSqlExceptionTranslator() != null) {_				logger.warn("Overriding already defined custom translator '" +_						dbCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() +_						" with '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			else {_				logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() +_						"' found in the CustomSQLExceptionTranslatorRegistry for database " + dbName)__			}_			dbCodes.setCustomSqlExceptionTranslator(customTranslator)__		}_	};check,the,link,custom,sqlexception,translator,registry,for,any,entries;private,void,check,custom,translator,registry,string,db,name,sqlerror,codes,db,codes,sqlexception,translator,custom,translator,custom,sqlexception,translator,registry,get,instance,find,translator,for,database,db,name,if,custom,translator,null,if,db,codes,get,custom,sql,exception,translator,null,logger,warn,overriding,already,defined,custom,translator,db,codes,get,custom,sql,exception,translator,get,class,get,simple,name,with,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,else,logger,info,using,custom,translator,custom,translator,get,class,get,simple,name,found,in,the,custom,sqlexception,translator,registry,for,database,db,name,db,codes,set,custom,sql,exception,translator,custom,translator
