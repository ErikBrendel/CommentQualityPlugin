# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcAccessor -> @Override 	public void afterPropertiesSet();1356735495;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1368482696;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1496837955;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1498780456;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1500448076;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1520529180;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1521457504;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> @Override 	public void afterPropertiesSet();1530174524;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;@Override_	public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;override,public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> public void setDatabaseProductName(String dbName);1328020251;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1356735495;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1357119239;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1368482696;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1496837955;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1498780456;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1500448076;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1520529180;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1521457504;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> public void setDatabaseProductName(String dbName);1530174524;Specify the database product name for the DataSource that this accessor uses._This allows to initialize a SQLErrorCodeSQLExceptionTranslator without_obtaining a Connection from the DataSource to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodeSQLExceptionTranslator#setDatabaseProductName_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName)__	};specify,the,database,product,name,for,the,data,source,that,this,accessor,uses,this,allows,to,initialize,a,sqlerror,code,sqlexception,translator,without,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,code,sqlexception,translator,set,database,product,name,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,exception,translator,new,sqlerror,code,sqlexception,translator,db,name
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1496837955;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1498780456;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1500448076;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1520529180;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1521457504;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> @Nullable 	public DataSource getDataSource();1530174524;Return the DataSource used by this template.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;nullable,public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> public void setDataSource(@Nullable DataSource dataSource);1500448076;Set the JDBC DataSource to obtain connections from.;public void setDataSource(@Nullable DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,nullable,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(@Nullable DataSource dataSource);1520529180;Set the JDBC DataSource to obtain connections from.;public void setDataSource(@Nullable DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,nullable,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(@Nullable DataSource dataSource);1521457504;Set the JDBC DataSource to obtain connections from.;public void setDataSource(@Nullable DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,nullable,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource to obtain connections from.;public void setDataSource(@Nullable DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,nullable,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1328020251;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1356735495;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1357119239;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1368482696;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1496837955;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public void setDataSource(DataSource dataSource);1498780456;Set the JDBC DataSource to obtain connections from.;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,jdbc,data,source,to,obtain,connections,from;public,void,set,data,source,data,source,data,source,this,data,source,data,source
JdbcAccessor -> public DataSource getDataSource();1328020251;Return the DataSource used by this template.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> public DataSource getDataSource();1356735495;Return the DataSource used by this template.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> public DataSource getDataSource();1357119239;Return the DataSource used by this template.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> public DataSource getDataSource();1368482696;Return the DataSource used by this template.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,data,source,used,by,this,template;public,data,source,get,data,source,return,this,data,source
JdbcAccessor -> public void afterPropertiesSet();1328020251;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> public void afterPropertiesSet();1357119239;Eagerly initialize the exception translator, if demanded,_creating a default one for the specified DataSource if none set.;public void afterPropertiesSet() {_		if (getDataSource() == null) {_			throw new IllegalArgumentException("Property 'dataSource' is required")__		}_		if (!isLazyInit()) {_			getExceptionTranslator()__		}_	};eagerly,initialize,the,exception,translator,if,demanded,creating,a,default,one,for,the,specified,data,source,if,none,set;public,void,after,properties,set,if,get,data,source,null,throw,new,illegal,argument,exception,property,data,source,is,required,if,is,lazy,init,get,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1328020251;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1356735495;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1357119239;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1368482696;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1496837955;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1498780456;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1500448076;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1520529180;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1521457504;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator);1530174524;Set the exception translator for this instance._<p>If no custom translator is provided, a default_{@link SQLErrorCodeSQLExceptionTranslator} is used_which examines the SQLException's vendor-specific error code._@see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator_@see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator;public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) {_		this.exceptionTranslator = exceptionTranslator__	};set,the,exception,translator,for,this,instance,p,if,no,custom,translator,is,provided,a,default,link,sqlerror,code,sqlexception,translator,is,used,which,examines,the,sqlexception,s,vendor,specific,error,code,see,org,springframework,jdbc,support,sqlerror,code,sqlexception,translator,see,org,springframework,jdbc,support,sqlstate,sqlexception,translator;public,void,set,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,exception,translator
JdbcAccessor -> public SQLExceptionTranslator getExceptionTranslator();1520529180;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public SQLExceptionTranslator getExceptionTranslator() {_		SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator__		if (exceptionTranslator != null) {_			return exceptionTranslator__		}_		synchronized (this) {_			exceptionTranslator = this.exceptionTranslator__			if (exceptionTranslator == null) {_				DataSource dataSource = getDataSource()__				if (dataSource != null) {_					exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__				}_				else {_					exceptionTranslator = new SQLStateSQLExceptionTranslator()__				}_				this.exceptionTranslator = exceptionTranslator__			}_			return exceptionTranslator__		}_	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,sqlexception,translator,get,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,if,exception,translator,null,return,exception,translator,synchronized,this,exception,translator,this,exception,translator,if,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,exception,translator,new,sqlstate,sqlexception,translator,this,exception,translator,exception,translator,return,exception,translator
JdbcAccessor -> public SQLExceptionTranslator getExceptionTranslator();1521457504;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public SQLExceptionTranslator getExceptionTranslator() {_		SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator__		if (exceptionTranslator != null) {_			return exceptionTranslator__		}_		synchronized (this) {_			exceptionTranslator = this.exceptionTranslator__			if (exceptionTranslator == null) {_				DataSource dataSource = getDataSource()__				if (dataSource != null) {_					exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__				}_				else {_					exceptionTranslator = new SQLStateSQLExceptionTranslator()__				}_				this.exceptionTranslator = exceptionTranslator__			}_			return exceptionTranslator__		}_	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,sqlexception,translator,get,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,if,exception,translator,null,return,exception,translator,synchronized,this,exception,translator,this,exception,translator,if,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,exception,translator,new,sqlstate,sqlexception,translator,this,exception,translator,exception,translator,return,exception,translator
JdbcAccessor -> public SQLExceptionTranslator getExceptionTranslator();1530174524;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public SQLExceptionTranslator getExceptionTranslator() {_		SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator__		if (exceptionTranslator != null) {_			return exceptionTranslator__		}_		synchronized (this) {_			exceptionTranslator = this.exceptionTranslator__			if (exceptionTranslator == null) {_				DataSource dataSource = getDataSource()__				if (dataSource != null) {_					exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__				}_				else {_					exceptionTranslator = new SQLStateSQLExceptionTranslator()__				}_				this.exceptionTranslator = exceptionTranslator__			}_			return exceptionTranslator__		}_	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,sqlexception,translator,get,exception,translator,sqlexception,translator,exception,translator,this,exception,translator,if,exception,translator,null,return,exception,translator,synchronized,this,exception,translator,this,exception,translator,if,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,exception,translator,new,sqlstate,sqlexception,translator,this,exception,translator,exception,translator,return,exception,translator
JdbcAccessor -> public boolean isLazyInit();1328020251;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1356735495;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1357119239;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1368482696;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1496837955;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1498780456;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1500448076;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1520529180;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1521457504;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public boolean isLazyInit();1530174524;Return whether to lazily initialize the SQLExceptionTranslator for this accessor._@see #getExceptionTranslator();public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,see,get,exception,translator;public,boolean,is,lazy,init,return,this,lazy,init
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1328020251;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1356735495;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1357119239;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1368482696;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1496837955;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1498780456;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public synchronized SQLExceptionTranslator getExceptionTranslator();1500448076;Return the exception translator for this instance._<p>Creates a default {@link SQLErrorCodeSQLExceptionTranslator}_for the specified DataSource if none set, or a_{@link SQLStateSQLExceptionTranslator} in case of no DataSource._@see #getDataSource();public synchronized SQLExceptionTranslator getExceptionTranslator() {_		if (this.exceptionTranslator == null) {_			DataSource dataSource = getDataSource()__			if (dataSource != null) {_				this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource)__			}_			else {_				this.exceptionTranslator = new SQLStateSQLExceptionTranslator()__			}_		}_		return this.exceptionTranslator__	};return,the,exception,translator,for,this,instance,p,creates,a,default,link,sqlerror,code,sqlexception,translator,for,the,specified,data,source,if,none,set,or,a,link,sqlstate,sqlexception,translator,in,case,of,no,data,source,see,get,data,source;public,synchronized,sqlexception,translator,get,exception,translator,if,this,exception,translator,null,data,source,data,source,get,data,source,if,data,source,null,this,exception,translator,new,sqlerror,code,sqlexception,translator,data,source,else,this,exception,translator,new,sqlstate,sqlexception,translator,return,this,exception,translator
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1328020251;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if <code>afterPropertiesSet()</code> is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,code,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1356735495;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1357119239;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1368482696;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1496837955;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1498780456;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1500448076;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1520529180;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1521457504;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> public void setLazyInit(boolean lazyInit);1530174524;Set whether to lazily initialize the SQLExceptionTranslator for this accessor,_on first encounter of a SQLException. Default is "true"_ can be switched to_"false" for initialization on startup._<p>Early initialization just applies if {@code afterPropertiesSet()} is called._@see #getExceptionTranslator()_@see #afterPropertiesSet();public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,to,lazily,initialize,the,sqlexception,translator,for,this,accessor,on,first,encounter,of,a,sqlexception,default,is,true,can,be,switched,to,false,for,initialization,on,startup,p,early,initialization,just,applies,if,code,after,properties,set,is,called,see,get,exception,translator,see,after,properties,set;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
JdbcAccessor -> protected DataSource obtainDataSource();1496837955;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
JdbcAccessor -> protected DataSource obtainDataSource();1498780456;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
JdbcAccessor -> protected DataSource obtainDataSource();1500448076;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
JdbcAccessor -> protected DataSource obtainDataSource();1520529180;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
JdbcAccessor -> protected DataSource obtainDataSource();1521457504;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
JdbcAccessor -> protected DataSource obtainDataSource();1530174524;Obtain the DataSource for actual use._@return the DataSource (never {@code null})_@throws IllegalStateException in case of no DataSource set_@since 5.0;protected DataSource obtainDataSource() {_		DataSource dataSource = getDataSource()__		Assert.state(dataSource != null, "No DataSource set")__		return dataSource__	};obtain,the,data,source,for,actual,use,return,the,data,source,never,code,null,throws,illegal,state,exception,in,case,of,no,data,source,set,since,5,0;protected,data,source,obtain,data,source,data,source,data,source,get,data,source,assert,state,data,source,null,no,data,source,set,return,data,source
