# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1328020251;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1356735495;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1357119239;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1362408075;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1368482696;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1385412762;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1476521730;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1487178248;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1495868221;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1496837955;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1498780456;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy();1530174524;Create a new TransactionAwareDataSourceProxy._@see #setTargetDataSource;public TransactionAwareDataSourceProxy() {_	};create,a,new,transaction,aware,data,source,proxy,see,set,target,data,source;public,transaction,aware,data,source,proxy
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1328020251;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1356735495;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1357119239;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1362408075;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1368482696;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1385412762;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1476521730;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1487178248;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1495868221;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1496837955;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1498780456;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections);1530174524;Specify whether to reobtain the target Connection for each operation_performed within a transaction._<p>The default is "false". Specify "true" to reobtain transactional_Connections for every call on the Connection proxy_ this is advisable_on JBoss if you hold on to a Connection handle across transaction boundaries._<p>The effect of this setting is similar to the_"hibernate.connection.release_mode" value "after_statement".;public void setReobtainTransactionalConnections(boolean reobtainTransactionalConnections) {_		this.reobtainTransactionalConnections = reobtainTransactionalConnections__	};specify,whether,to,reobtain,the,target,connection,for,each,operation,performed,within,a,transaction,p,the,default,is,false,specify,true,to,reobtain,transactional,connections,for,every,call,on,the,connection,proxy,this,is,advisable,on,jboss,if,you,hold,on,to,a,connection,handle,across,transaction,boundaries,p,the,effect,of,this,setting,is,similar,to,the,hibernate,connection,value;public,void,set,reobtain,transactional,connections,boolean,reobtain,transactional,connections,this,reobtain,transactional,connections,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1328020251;Wraps the given Connection with a proxy that delegates every method call to it_but delegates <code>close()</code> calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,code,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1356735495;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1357119239;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1362408075;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1368482696;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1385412762;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1476521730;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1487178248;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1495868221;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1496837955;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1498780456;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource);1530174524;Wraps the given Connection with a proxy that delegates every method call to it_but delegates {@code close()} calls to DataSourceUtils._@param targetDataSource the DataSource that the Connection came from_@return the wrapped Connection_@see java.sql.Connection#close()_@see DataSourceUtils#doReleaseConnection;protected Connection getTransactionAwareConnectionProxy(DataSource targetDataSource) {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new TransactionAwareInvocationHandler(targetDataSource))__	};wraps,the,given,connection,with,a,proxy,that,delegates,every,method,call,to,it,but,delegates,code,close,calls,to,data,source,utils,param,target,data,source,the,data,source,that,the,connection,came,from,return,the,wrapped,connection,see,java,sql,connection,close,see,data,source,utils,do,release,connection;protected,connection,get,transaction,aware,connection,proxy,data,source,target,data,source,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,transaction,aware,invocation,handler,target,data,source
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1328020251;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns <code>true</code> for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,code,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1356735495;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1357119239;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1362408075;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1368482696;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1385412762;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1476521730;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1487178248;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1495868221;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1496837955;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1498780456;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> protected boolean shouldObtainFixedConnection(DataSource targetDataSource);1530174524;Determine whether to obtain a fixed target Connection for the proxy_or to reobtain the target Connection for each operation._<p>The default implementation returns {@code true} for all_standard cases. This can be overridden through the_{@link #setReobtainTransactionalConnections "reobtainTransactionalConnections"}_flag, which enforces a non-fixed target Connection within an active transaction._Note that non-transactional access will always use a fixed Connection._@param targetDataSource the target DataSource;protected boolean shouldObtainFixedConnection(DataSource targetDataSource) {_		return (!TransactionSynchronizationManager.isSynchronizationActive() ||_				!this.reobtainTransactionalConnections)__	};determine,whether,to,obtain,a,fixed,target,connection,for,the,proxy,or,to,reobtain,the,target,connection,for,each,operation,p,the,default,implementation,returns,code,true,for,all,standard,cases,this,can,be,overridden,through,the,link,set,reobtain,transactional,connections,reobtain,transactional,connections,flag,which,enforces,a,non,fixed,target,connection,within,an,active,transaction,note,that,non,transactional,access,will,always,use,a,fixed,connection,param,target,data,source,the,target,data,source;protected,boolean,should,obtain,fixed,connection,data,source,target,data,source,return,transaction,synchronization,manager,is,synchronization,active,this,reobtain,transactional,connections
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1328020251;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1356735495;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1357119239;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1362408075;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1368482696;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1385412762;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1476521730;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1487178248;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1495868221;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1496837955;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1498780456;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> public TransactionAwareDataSourceProxy(DataSource targetDataSource);1530174524;Create a new TransactionAwareDataSourceProxy._@param targetDataSource the target DataSource;public TransactionAwareDataSourceProxy(DataSource targetDataSource) {_		super(targetDataSource)__	};create,a,new,transaction,aware,data,source,proxy,param,target,data,source,the,target,data,source;public,transaction,aware,data,source,proxy,data,source,target,data,source,super,target,data,source
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1328020251;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1356735495;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1357119239;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1362408075;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1368482696;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1385412762;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1476521730;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1487178248;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1495868221;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		DataSource ds = getTargetDataSource()__		Assert.state(ds != null, "'targetDataSource' is required")__		return getTransactionAwareConnectionProxy(ds)__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,data,source,ds,get,target,data,source,assert,state,ds,null,target,data,source,is,required,return,get,transaction,aware,connection,proxy,ds
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1496837955;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		return getTransactionAwareConnectionProxy(obtainTargetDataSource())__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,get,transaction,aware,connection,proxy,obtain,target,data,source
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1498780456;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		return getTransactionAwareConnectionProxy(obtainTargetDataSource())__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,get,transaction,aware,connection,proxy,obtain,target,data,source
TransactionAwareDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1530174524;Delegates to DataSourceUtils for automatically participating in Spring-managed_transactions. Throws the original SQLException, if any._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a transactional Connection if any, a new one else_@see DataSourceUtils#doGetConnection_@see ConnectionProxy#getTargetConnection;@Override_	public Connection getConnection() throws SQLException {_		return getTransactionAwareConnectionProxy(obtainTargetDataSource())__	};delegates,to,data,source,utils,for,automatically,participating,in,spring,managed,transactions,throws,the,original,sqlexception,if,any,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,transactional,connection,if,any,a,new,one,else,see,data,source,utils,do,get,connection,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,get,transaction,aware,connection,proxy,obtain,target,data,source
