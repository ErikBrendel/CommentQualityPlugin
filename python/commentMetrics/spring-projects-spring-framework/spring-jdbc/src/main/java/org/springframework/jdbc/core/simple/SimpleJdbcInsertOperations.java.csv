commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Specify the table name to be used for the insert.  * @param tableName the name of the stored table  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Specify the table name to be used for the insert.  * @param tableName the name of the stored table  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations withTableName(String tableName).
true;;1;1;/**  * Specify the schema name, if any, to be used for the insert.  * @param schemaName the name of the schema  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Specify the schema name, if any, to be used for the insert.  * @param schemaName the name of the schema  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations withSchemaName(String schemaName).
true;;1;1;/**  * Specify the catalog name, if any, to be used for the insert.  * @param catalogName the name of the catalog  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Specify the catalog name, if any, to be used for the insert.  * @param catalogName the name of the catalog  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations withCatalogName(String catalogName).
true;;1;1;/**  * Specify the column names that the insert statement should be limited to use.  * @param columnNames one or more column names  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Specify the column names that the insert statement should be limited to use.  * @param columnNames one or more column names  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations usingColumns(String... columnNames).
true;;1;1;/**  * Specify the names of any columns that have auto generated keys.  * @param columnNames one or more column names  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Specify the names of any columns that have auto generated keys.  * @param columnNames one or more column names  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations usingGeneratedKeyColumns(String... columnNames).
true;;0;1;/**  * Turn off any processing of column meta-data information obtained via JDBC.  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Turn off any processing of column meta-data information obtained via JDBC.  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations withoutTableColumnMetaDataAccess().
true;;0;1;/**  * Include synonyms for the column meta-data lookups via JDBC.  * <p>Note: This is only necessary to include for Oracle since other databases  * supporting synonyms seems to include the synonyms automatically.  * @return the instance of this SimpleJdbcInsert  */ ;/**  * Include synonyms for the column meta-data lookups via JDBC.  * <p>Note: This is only necessary to include for Oracle since other databases  * supporting synonyms seems to include the synonyms automatically.  * @return the instance of this SimpleJdbcInsert  */ SimpleJdbcInsertOperations includeSynonymsForTableColumnMetaData().
true;;1;1;/**  * Execute the insert using the values passed in.  * @param args a Map containing column names and corresponding value  * @return the number of rows affected as returned by the JDBC driver  */ ;/**  * Execute the insert using the values passed in.  * @param args a Map containing column names and corresponding value  * @return the number of rows affected as returned by the JDBC driver  */ int execute(Map<String, ?> args).
true;;1;1;/**  * Execute the insert using the values passed in.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the number of rows affected as returned by the JDBC driver  */ ;/**  * Execute the insert using the values passed in.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the number of rows affected as returned by the JDBC driver  */ int execute(SqlParameterSource parameterSource).
true;;1;1;/**  * Execute the insert using the values passed in and return the generated key.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param args a Map containing column names and corresponding value  * @return the generated key value  */ ;/**  * Execute the insert using the values passed in and return the generated key.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param args a Map containing column names and corresponding value  * @return the generated key value  */ Number executeAndReturnKey(Map<String, ?> args).
true;;1;1;/**  * Execute the insert using the values passed in and return the generated key.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the generated key value.  */ ;/**  * Execute the insert using the values passed in and return the generated key.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the generated key value.  */ Number executeAndReturnKey(SqlParameterSource parameterSource).
true;;1;1;/**  * Execute the insert using the values passed in and return the generated keys.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param args a Map containing column names and corresponding value  * @return the KeyHolder containing all generated keys  */ ;/**  * Execute the insert using the values passed in and return the generated keys.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param args a Map containing column names and corresponding value  * @return the KeyHolder containing all generated keys  */ KeyHolder executeAndReturnKeyHolder(Map<String, ?> args).
true;;1;1;/**  * Execute the insert using the values passed in and return the generated keys.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the KeyHolder containing all generated keys  */ ;/**  * Execute the insert using the values passed in and return the generated keys.  * <p>This requires that the name of the columns with auto generated keys have been specified.  * This method will always return a KeyHolder but the caller must verify that it actually  * contains the generated keys.  * @param parameterSource the SqlParameterSource containing values to use for insert  * @return the KeyHolder containing all generated keys  */ KeyHolder executeAndReturnKeyHolder(SqlParameterSource parameterSource).
true;;1;2;/**  * Execute a batch insert using the batch of values passed in.  * @param batch an array of Maps containing a batch of column names and corresponding value  * @return the array of number of rows affected as returned by the JDBC driver  */ ;/**  * Execute a batch insert using the batch of values passed in.  * @param batch an array of Maps containing a batch of column names and corresponding value  * @return the array of number of rows affected as returned by the JDBC driver  */ @SuppressWarnings("unchecked") int[] executeBatch(Map<String, ?>... batch).
true;;1;1;/**  * Execute a batch insert using the batch of values passed in.  * @param batch an array of SqlParameterSource containing values for the batch  * @return the array of number of rows affected as returned by the JDBC driver  */ ;/**  * Execute a batch insert using the batch of values passed in.  * @param batch an array of SqlParameterSource containing values for the batch  * @return the array of number of rows affected as returned by the JDBC driver  */ int[] executeBatch(SqlParameterSource... batch).
