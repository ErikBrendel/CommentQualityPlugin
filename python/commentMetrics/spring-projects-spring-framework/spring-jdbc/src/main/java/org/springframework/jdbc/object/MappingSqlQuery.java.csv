commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;4;7;/**  * This method is implemented to invoke the simpler mapRow  * template method, ignoring parameters.  * @see #mapRow(ResultSet, int)  */ ;/**  * This method is implemented to invoke the simpler mapRow  * template method, ignoring parameters.  * @see #mapRow(ResultSet, int)  */ @Override @Nullable protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) throws SQLException {     return mapRow(rs, rowNum). }
true;protected,abstract;2;2;/**  * Subclasses must implement this method to convert each row of the  * ResultSet into an object of the result type.  * <p>Subclasses of this class, as opposed to direct subclasses of  * MappingSqlQueryWithParameters, don't need to concern themselves  * with the parameters to the execute method of the query object.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @return an object of the result type  * @throws SQLException if there's an error extracting data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ ;/**  * Subclasses must implement this method to convert each row of the  * ResultSet into an object of the result type.  * <p>Subclasses of this class, as opposed to direct subclasses of  * MappingSqlQueryWithParameters, don't need to concern themselves  * with the parameters to the execute method of the query object.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @return an object of the result type  * @throws SQLException if there's an error extracting data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ @Nullable protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException.
