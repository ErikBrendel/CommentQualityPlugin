# id;timestamp;commentText;codeText;commentWords;codeWords
MappingSqlQuery -> @Override 	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) 			throws SQLException;1496242568;This method is implemented to invoke the simpler mapRow_template method, ignoring parameters._@see #mapRow(ResultSet, int);@Override_	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context)_			throws SQLException {__		return mapRow(rs, rowNum)__	};this,method,is,implemented,to,invoke,the,simpler,map,row,template,method,ignoring,parameters,see,map,row,result,set,int;override,protected,final,t,map,row,result,set,rs,int,row,num,nullable,object,parameters,nullable,map,context,throws,sqlexception,return,map,row,rs,row,num
MappingSqlQuery -> @Override 	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) 			throws SQLException;1496837955;This method is implemented to invoke the simpler mapRow_template method, ignoring parameters._@see #mapRow(ResultSet, int);@Override_	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context)_			throws SQLException {__		return mapRow(rs, rowNum)__	};this,method,is,implemented,to,invoke,the,simpler,map,row,template,method,ignoring,parameters,see,map,row,result,set,int;override,protected,final,t,map,row,result,set,rs,int,row,num,nullable,object,parameters,nullable,map,context,throws,sqlexception,return,map,row,rs,row,num
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1328020251;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to obtain connections_@param sql SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1385412762;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to obtain connections_@param sql SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1496242568;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to obtain connections_@param sql SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1496837955;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to obtain connections_@param sql SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1502974979;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to obtain connections_@param sql SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> public MappingSqlQuery(DataSource ds, String sql);1530174524;Convenient constructor with DataSource and SQL string._@param ds the DataSource to use to obtain connections_@param sql the SQL to run;public MappingSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,to,run;public,mapping,sql,query,data,source,ds,string,sql,super,ds,sql
MappingSqlQuery -> @Nullable 	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1496837955;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;@Nullable_	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;nullable,protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
MappingSqlQuery -> @Nullable 	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1502974979;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;@Nullable_	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;nullable,protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
MappingSqlQuery -> @Nullable 	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1530174524;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs the ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;@Nullable_	protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,the,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;nullable,protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
MappingSqlQuery -> public MappingSqlQuery();1328020251;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> public MappingSqlQuery();1385412762;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> public MappingSqlQuery();1496242568;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> public MappingSqlQuery();1496837955;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> public MappingSqlQuery();1502974979;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> public MappingSqlQuery();1530174524;Constructor that allows use as a JavaBean.;public MappingSqlQuery() {_	};constructor,that,allows,use,as,a,java,bean;public,mapping,sql,query
MappingSqlQuery -> @Override 	@Nullable 	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) 			throws SQLException;1502974979;This method is implemented to invoke the simpler mapRow_template method, ignoring parameters._@see #mapRow(ResultSet, int);@Override_	@Nullable_	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context)_			throws SQLException {__		return mapRow(rs, rowNum)__	};this,method,is,implemented,to,invoke,the,simpler,map,row,template,method,ignoring,parameters,see,map,row,result,set,int;override,nullable,protected,final,t,map,row,result,set,rs,int,row,num,nullable,object,parameters,nullable,map,context,throws,sqlexception,return,map,row,rs,row,num
MappingSqlQuery -> @Override 	@Nullable 	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) 			throws SQLException;1530174524;This method is implemented to invoke the simpler mapRow_template method, ignoring parameters._@see #mapRow(ResultSet, int);@Override_	@Nullable_	protected final T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context)_			throws SQLException {__		return mapRow(rs, rowNum)__	};this,method,is,implemented,to,invoke,the,simpler,map,row,template,method,ignoring,parameters,see,map,row,result,set,int;override,nullable,protected,final,t,map,row,result,set,rs,int,row,num,nullable,object,parameters,nullable,map,context,throws,sqlexception,return,map,row,rs,row,num
MappingSqlQuery -> protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1328020251;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
MappingSqlQuery -> protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1385412762;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
MappingSqlQuery -> protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;1496242568;Subclasses must implement this method to convert each row of the_ResultSet into an object of the result type._<p>Subclasses of this class, as opposed to direct subclasses of_MappingSqlQueryWithParameters, don't need to concern themselves_with the parameters to the execute method of the query object._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@return an object of the result type_@throws SQLException if there's an error extracting data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T mapRow(ResultSet rs, int rowNum) throws SQLException_;subclasses,must,implement,this,method,to,convert,each,row,of,the,result,set,into,an,object,of,the,result,type,p,subclasses,of,this,class,as,opposed,to,direct,subclasses,of,mapping,sql,query,with,parameters,don,t,need,to,concern,themselves,with,the,parameters,to,the,execute,method,of,the,query,object,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,extracting,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,map,row,result,set,rs,int,row,num,throws,sqlexception
