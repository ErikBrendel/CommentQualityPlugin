# id;timestamp;commentText;codeText;commentWords;codeWords
EmbeddedDatabaseConfigurerFactory -> public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException;1520339775;Return a configurer instance for the given embedded database type._@param type HSQL, H2 or Derby_@return the configurer instance_@throws IllegalStateException if the driver for the specified database type is not available;public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException {_		Assert.notNull(type, "EmbeddedDatabaseType is required")__		try {_			switch (type) {_				case HSQL:_					return HsqlEmbeddedDatabaseConfigurer.getInstance()__				case H2:_					return H2EmbeddedDatabaseConfigurer.getInstance()__				case DERBY:_					return DerbyEmbeddedDatabaseConfigurer.getInstance()__				default:_					throw new UnsupportedOperationException("Embedded database type [" + type + "] is not supported")__			}_		}_		catch (ClassNotFoundException | NoClassDefFoundError ex) {_			throw new IllegalStateException("Driver for test database type [" + type + "] is not available", ex)__		}_	};return,a,configurer,instance,for,the,given,embedded,database,type,param,type,hsql,h2,or,derby,return,the,configurer,instance,throws,illegal,state,exception,if,the,driver,for,the,specified,database,type,is,not,available;public,static,embedded,database,configurer,get,configurer,embedded,database,type,type,throws,illegal,state,exception,assert,not,null,type,embedded,database,type,is,required,try,switch,type,case,hsql,return,hsql,embedded,database,configurer,get,instance,case,h2,return,h2embedded,database,configurer,get,instance,case,derby,return,derby,embedded,database,configurer,get,instance,default,throw,new,unsupported,operation,exception,embedded,database,type,type,is,not,supported,catch,class,not,found,exception,no,class,def,found,error,ex,throw,new,illegal,state,exception,driver,for,test,database,type,type,is,not,available,ex
EmbeddedDatabaseConfigurerFactory -> public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException;1530174524;Return a configurer instance for the given embedded database type._@param type the embedded database type (HSQL, H2 or Derby)_@return the configurer instance_@throws IllegalStateException if the driver for the specified database type is not available;public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException {_		Assert.notNull(type, "EmbeddedDatabaseType is required")__		try {_			switch (type) {_				case HSQL:_					return HsqlEmbeddedDatabaseConfigurer.getInstance()__				case H2:_					return H2EmbeddedDatabaseConfigurer.getInstance()__				case DERBY:_					return DerbyEmbeddedDatabaseConfigurer.getInstance()__				default:_					throw new UnsupportedOperationException("Embedded database type [" + type + "] is not supported")__			}_		}_		catch (ClassNotFoundException | NoClassDefFoundError ex) {_			throw new IllegalStateException("Driver for test database type [" + type + "] is not available", ex)__		}_	};return,a,configurer,instance,for,the,given,embedded,database,type,param,type,the,embedded,database,type,hsql,h2,or,derby,return,the,configurer,instance,throws,illegal,state,exception,if,the,driver,for,the,specified,database,type,is,not,available;public,static,embedded,database,configurer,get,configurer,embedded,database,type,type,throws,illegal,state,exception,assert,not,null,type,embedded,database,type,is,required,try,switch,type,case,hsql,return,hsql,embedded,database,configurer,get,instance,case,h2,return,h2embedded,database,configurer,get,instance,case,derby,return,derby,embedded,database,configurer,get,instance,default,throw,new,unsupported,operation,exception,embedded,database,type,type,is,not,supported,catch,class,not,found,exception,no,class,def,found,error,ex,throw,new,illegal,state,exception,driver,for,test,database,type,type,is,not,available,ex
EmbeddedDatabaseConfigurerFactory -> public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException;1530174524;Return a configurer instance for the given embedded database type._@param type the embedded database type (HSQL, H2 or Derby)_@return the configurer instance_@throws IllegalStateException if the driver for the specified database type is not available;public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException {_		Assert.notNull(type, "EmbeddedDatabaseType is required")__		try {_			switch (type) {_				case HSQL:_					return HsqlEmbeddedDatabaseConfigurer.getInstance()__				case H2:_					return H2EmbeddedDatabaseConfigurer.getInstance()__				case DERBY:_					return DerbyEmbeddedDatabaseConfigurer.getInstance()__				default:_					throw new UnsupportedOperationException("Embedded database type [" + type + "] is not supported")__			}_		}_		catch (ClassNotFoundException | NoClassDefFoundError ex) {_			throw new IllegalStateException("Driver for test database type [" + type + "] is not available", ex)__		}_	};return,a,configurer,instance,for,the,given,embedded,database,type,param,type,the,embedded,database,type,hsql,h2,or,derby,return,the,configurer,instance,throws,illegal,state,exception,if,the,driver,for,the,specified,database,type,is,not,available;public,static,embedded,database,configurer,get,configurer,embedded,database,type,type,throws,illegal,state,exception,assert,not,null,type,embedded,database,type,is,required,try,switch,type,case,hsql,return,hsql,embedded,database,configurer,get,instance,case,h2,return,h2embedded,database,configurer,get,instance,case,derby,return,derby,embedded,database,configurer,get,instance,default,throw,new,unsupported,operation,exception,embedded,database,type,type,is,not,supported,catch,class,not,found,exception,no,class,def,found,error,ex,throw,new,illegal,state,exception,driver,for,test,database,type,type,is,not,available,ex
EmbeddedDatabaseConfigurerFactory -> public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException;1530405080;Return a configurer instance for the given embedded database type._@param type the embedded database type (HSQL, H2 or Derby)_@return the configurer instance_@throws IllegalStateException if the driver for the specified database type is not available;public static EmbeddedDatabaseConfigurer getConfigurer(EmbeddedDatabaseType type) throws IllegalStateException {_		Assert.notNull(type, "EmbeddedDatabaseType is required")__		try {_			switch (type) {_				case HSQL:_					return HsqlEmbeddedDatabaseConfigurer.getInstance()__				case H2:_					return H2EmbeddedDatabaseConfigurer.getInstance()__				case DERBY:_					return DerbyEmbeddedDatabaseConfigurer.getInstance()__				default:_					throw new UnsupportedOperationException("Embedded database type [" + type + "] is not supported")__			}_		}_		catch (ClassNotFoundException | NoClassDefFoundError ex) {_			throw new IllegalStateException("Driver for test database type [" + type + "] is not available", ex)__		}_	};return,a,configurer,instance,for,the,given,embedded,database,type,param,type,the,embedded,database,type,hsql,h2,or,derby,return,the,configurer,instance,throws,illegal,state,exception,if,the,driver,for,the,specified,database,type,is,not,available;public,static,embedded,database,configurer,get,configurer,embedded,database,type,type,throws,illegal,state,exception,assert,not,null,type,embedded,database,type,is,required,try,switch,type,case,hsql,return,hsql,embedded,database,configurer,get,instance,case,h2,return,h2embedded,database,configurer,get,instance,case,derby,return,derby,embedded,database,configurer,get,instance,default,throw,new,unsupported,operation,exception,embedded,database,type,type,is,not,supported,catch,class,not,found,exception,no,class,def,found,error,ex,throw,new,illegal,state,exception,driver,for,test,database,type,type,is,not,available,ex
