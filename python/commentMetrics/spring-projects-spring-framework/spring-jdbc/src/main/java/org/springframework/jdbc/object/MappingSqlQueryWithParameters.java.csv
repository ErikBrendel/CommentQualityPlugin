commented;modifiers;parameterAmount;loc;comment;code
true;protected;2;4;/**  * Implementation of protected abstract method. This invokes the subclass's  * implementation of the mapRow() method.  */ ;/**  * Implementation of protected abstract method. This invokes the subclass's  * implementation of the mapRow() method.  */ @Override protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {     return new RowMapperImpl(parameters, context). }
true;protected,abstract;4;3;/**  * Subclasses must implement this method to convert each row  * of the ResultSet into an object of the result type.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @param parameters to the query (passed to the execute() method).  * Subclasses are rarely interested in these.  * It can be {@code null} if there are no parameters.  * @param context passed to the execute() method.  * It can be {@code null} if no contextual information is need.  * @return an object of the result type  * @throws SQLException if there's an error extracting data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ ;/**  * Subclasses must implement this method to convert each row  * of the ResultSet into an object of the result type.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @param parameters to the query (passed to the execute() method).  * Subclasses are rarely interested in these.  * It can be {@code null} if there are no parameters.  * @param context passed to the execute() method.  * It can be {@code null} if no contextual information is need.  * @return an object of the result type  * @throws SQLException if there's an error extracting data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ @Nullable protected abstract T mapRow(ResultSet rs, int rowNum, @Nullable Object[] parameters, @Nullable Map<?, ?> context) throws SQLException.
false;public;2;5;;@Override @Nullable public T mapRow(ResultSet rs, int rowNum) throws SQLException {     return MappingSqlQueryWithParameters.this.mapRow(rs, rowNum, this.params, this.context). }
