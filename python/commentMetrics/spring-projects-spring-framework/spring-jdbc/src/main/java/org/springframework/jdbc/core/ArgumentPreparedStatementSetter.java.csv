commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void setValues(PreparedStatement ps) throws SQLException {     if (this.args != null) {         for (int i = 0. i < this.args.length. i++) {             Object arg = this.args[i].             doSetValue(ps, i + 1, arg).         }     } }
true;protected;3;9;/**  * Set the value for prepared statements specified parameter index using the passed in value.  * This method can be overridden by sub-classes if needed.  * @param ps the PreparedStatement  * @param parameterPosition index of the parameter position  * @param argValue the value to set  * @throws SQLException if thrown by PreparedStatement methods  */ ;/**  * Set the value for prepared statements specified parameter index using the passed in value.  * This method can be overridden by sub-classes if needed.  * @param ps the PreparedStatement  * @param parameterPosition index of the parameter position  * @param argValue the value to set  * @throws SQLException if thrown by PreparedStatement methods  */ protected void doSetValue(PreparedStatement ps, int parameterPosition, Object argValue) throws SQLException {     if (argValue instanceof SqlParameterValue) {         SqlParameterValue paramValue = (SqlParameterValue) argValue.         StatementCreatorUtils.setParameterValue(ps, parameterPosition, paramValue, paramValue.getValue()).     } else {         StatementCreatorUtils.setParameterValue(ps, parameterPosition, SqlTypeValue.TYPE_UNKNOWN, argValue).     } }
false;public;0;4;;@Override public void cleanupParameters() {     StatementCreatorUtils.cleanupParameters(this.args). }
