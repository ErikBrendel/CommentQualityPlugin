commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a script execution to be run in the bean destruction callback,  * cleaning up the database and leaving it in a known state for others.  * @param databaseCleaner the database script executor to run on destroy  * @see #setDatabasePopulator  * @see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabaseCleaner  */ ;/**  * Set a script execution to be run in the bean destruction callback,  * cleaning up the database and leaving it in a known state for others.  * @param databaseCleaner the database script executor to run on destroy  * @see #setDatabasePopulator  * @see org.springframework.jdbc.datasource.init.DataSourceInitializer#setDatabaseCleaner  */ public void setDatabaseCleaner(DatabasePopulator databaseCleaner) {     this.databaseCleaner = databaseCleaner. }
false;public;0;4;;@Override public void afterPropertiesSet() {     initDatabase(). }
false;public;0;5;;@Override @Nullable public DataSource getObject() {     return getDataSource(). }
false;public;0;4;;@Override public Class<? extends DataSource> getObjectType() {     return DataSource.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;7;;@Override public void destroy() {     if (this.databaseCleaner != null && getDataSource() != null) {         DatabasePopulatorUtils.execute(this.databaseCleaner, getDataSource()).     }     shutdownDatabase(). }
