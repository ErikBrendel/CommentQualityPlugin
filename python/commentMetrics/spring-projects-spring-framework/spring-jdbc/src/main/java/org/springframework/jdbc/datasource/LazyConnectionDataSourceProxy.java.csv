# id;timestamp;commentText;codeText;commentWords;codeWords
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1328020251;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1356735495;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1357119239;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1362408075;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1368482696;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1385412762;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1476521730;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1487178248;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1495868221;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1496837955;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1498780456;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1530174524;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1532091916;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1535712004;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolationName(String constantName);1537187216;Set the default transaction isolation level by the name of the corresponding_constant in {@link java.sql.Connection}, e.g. "TRANSACTION_SERIALIZABLE"._@param constantName name of the constant_@see #setDefaultTransactionIsolation_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE;public void setDefaultTransactionIsolationName(String constantName) {_		setDefaultTransactionIsolation(constants.asNumber(constantName).intValue())__	};set,the,default,transaction,isolation,level,by,the,name,of,the,corresponding,constant,in,link,java,sql,connection,e,g,param,constant,name,name,of,the,constant,see,set,default,transaction,isolation,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection;public,void,set,default,transaction,isolation,name,string,constant,name,set,default,transaction,isolation,constants,as,number,constant,name,int,value
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1328020251;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1356735495;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1357119239;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1362408075;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1368482696;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1385412762;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1476521730;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1487178248;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1495868221;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1496837955;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1498780456;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1530174524;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1532091916;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1535712004;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public void setDefaultTransactionIsolation(int defaultTransactionIsolation);1537187216;Set the default transaction isolation level to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>This property accepts the int constant value (e.g. 8) as defined in the_{@link java.sql.Connection} interface_ it is mainly intended for programmatic_use. Consider using the "defaultTransactionIsolationName" property for setting_the value by name (e.g. "TRANSACTION_SERIALIZABLE")._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see #setDefaultTransactionIsolationName_@see java.sql.Connection#setTransactionIsolation;public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {_		this.defaultTransactionIsolation = defaultTransactionIsolation__	};set,the,default,transaction,isolation,level,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,this,property,accepts,the,int,constant,value,e,g,8,as,defined,in,the,link,java,sql,connection,interface,it,is,mainly,intended,for,programmatic,use,consider,using,the,default,transaction,isolation,name,property,for,setting,the,value,by,name,e,g,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,set,default,transaction,isolation,name,see,java,sql,connection,set,transaction,isolation;public,void,set,default,transaction,isolation,int,default,transaction,isolation,this,default,transaction,isolation,default,transaction,isolation
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1328020251;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1356735495;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1357119239;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1362408075;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1368482696;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1385412762;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1476521730;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1487178248;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1495868221;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1496837955;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1498780456;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1530174524;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1532091916;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1535712004;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy(DataSource targetDataSource);1537187216;Create a new LazyConnectionDataSourceProxy._@param targetDataSource the target DataSource;public LazyConnectionDataSourceProxy(DataSource targetDataSource) {_		setTargetDataSource(targetDataSource)__		afterPropertiesSet()__	};create,a,new,lazy,connection,data,source,proxy,param,target,data,source,the,target,data,source;public,lazy,connection,data,source,proxy,data,source,target,data,source,set,target,data,source,target,data,source,after,properties,set
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1328020251;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1356735495;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1357119239;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1362408075;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1368482696;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1385412762;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1476521730;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1487178248;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1495868221;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1496837955;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1498780456;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1530174524;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1532091916;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1535712004;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> public void setDefaultAutoCommit(boolean defaultAutoCommit);1537187216;Set the default auto-commit mode to expose when no target Connection_has been fetched yet (-> actual JDBC Connection default not known yet)._<p>If not specified, the default gets determined by checking a target_Connection on startup. If that check fails, the default will be determined_lazily on first access of a Connection._@see java.sql.Connection#setAutoCommit;public void setDefaultAutoCommit(boolean defaultAutoCommit) {_		this.defaultAutoCommit = defaultAutoCommit__	};set,the,default,auto,commit,mode,to,expose,when,no,target,connection,has,been,fetched,yet,actual,jdbc,connection,default,not,known,yet,p,if,not,specified,the,default,gets,determined,by,checking,a,target,connection,on,startup,if,that,check,fails,the,default,will,be,determined,lazily,on,first,access,of,a,connection,see,java,sql,connection,set,auto,commit;public,void,set,default,auto,commit,boolean,default,auto,commit,this,default,auto,commit,default,auto,commit
LazyConnectionDataSourceProxy -> @Nullable 	protected Boolean defaultAutoCommit();1498780456;Expose the default auto-commit value.;@Nullable_	protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;nullable,protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> @Nullable 	protected Boolean defaultAutoCommit();1530174524;Expose the default auto-commit value.;@Nullable_	protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;nullable,protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> @Nullable 	protected Boolean defaultAutoCommit();1532091916;Expose the default auto-commit value.;@Nullable_	protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;nullable,protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> @Nullable 	protected Boolean defaultAutoCommit();1535712004;Expose the default auto-commit value.;@Nullable_	protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;nullable,protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> @Nullable 	protected Boolean defaultAutoCommit();1537187216;Expose the default auto-commit value.;@Nullable_	protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;nullable,protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1328020251;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1356735495;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1357119239;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1362408075;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1368482696;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1385412762;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1476521730;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1487178248;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1495868221;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1496837955;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1498780456;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1530174524;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1532091916;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1535712004;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> public LazyConnectionDataSourceProxy();1537187216;Create a new LazyConnectionDataSourceProxy._@see #setTargetDataSource;public LazyConnectionDataSourceProxy() {_	};create,a,new,lazy,connection,data,source,proxy,see,set,target,data,source;public,lazy,connection,data,source,proxy
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1328020251;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1356735495;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1357119239;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1362408075;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1368482696;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1385412762;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1476521730;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1487178248;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1495868221;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1496837955;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1498780456;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1530174524;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1532091916;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1535712004;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException;1537187216;Check the default connection properties (auto-commit, transaction isolation),_keeping them to be able to expose them correctly without fetching an actual_JDBC Connection from the target DataSource._<p>This will be invoked once on startup, but also for each retrieval of a_target Connection. If the check failed on startup (because the database was_down), we'll lazily retrieve those settings._@param con the Connection to use for checking_@throws SQLException if thrown by Connection methods;protected synchronized void checkDefaultConnectionProperties(Connection con) throws SQLException {_		if (this.defaultAutoCommit == null) {_			this.defaultAutoCommit = con.getAutoCommit()__		}_		if (this.defaultTransactionIsolation == null) {_			this.defaultTransactionIsolation = con.getTransactionIsolation()__		}_	};check,the,default,connection,properties,auto,commit,transaction,isolation,keeping,them,to,be,able,to,expose,them,correctly,without,fetching,an,actual,jdbc,connection,from,the,target,data,source,p,this,will,be,invoked,once,on,startup,but,also,for,each,retrieval,of,a,target,connection,if,the,check,failed,on,startup,because,the,database,was,down,we,ll,lazily,retrieve,those,settings,param,con,the,connection,to,use,for,checking,throws,sqlexception,if,thrown,by,connection,methods;protected,synchronized,void,check,default,connection,properties,connection,con,throws,sqlexception,if,this,default,auto,commit,null,this,default,auto,commit,con,get,auto,commit,if,this,default,transaction,isolation,null,this,default,transaction,isolation,con,get,transaction,isolation
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1328020251;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1356735495;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1357119239;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1362408075;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1368482696;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1385412762;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1476521730;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1487178248;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1495868221;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> protected Boolean defaultAutoCommit();1496837955;Expose the default auto-commit value.;protected Boolean defaultAutoCommit() {_		return this.defaultAutoCommit__	};expose,the,default,auto,commit,value;protected,boolean,default,auto,commit,return,this,default,auto,commit
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1328020251;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					this.target.setReadOnly(this.readOnly)__				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,this,target,set,read,only,this,read,only,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1356735495;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					this.target.setReadOnly(this.readOnly)__				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,this,target,set,read,only,this,read,only,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1357119239;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					this.target.setReadOnly(this.readOnly)__				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,this,target,set,read,only,this,read,only,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1362408075;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1368482696;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1385412762;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1476521730;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1487178248;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1495868221;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						getTargetDataSource().getConnection(this.username, this.password) :_						getTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(this.readOnly)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,get,target,data,source,get,connection,this,username,this,password,get,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,this,read,only,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1496837955;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1498780456;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1530174524;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1532091916;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1535712004;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isDebugEnabled()) {_					logger.debug("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,debug,enabled,logger,debug,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,debug,enabled,logger,debug,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private Connection getTargetConnection(Method operation) throws SQLException;1537187216;Return the target Connection, fetching it and initializing it if necessary.;private Connection getTargetConnection(Method operation) throws SQLException {_			if (this.target == null) {_				_				if (logger.isTraceEnabled()) {_					logger.trace("Connecting to database for operation '" + operation.getName() + "'")__				}__				_				this.target = (this.username != null) ?_						obtainTargetDataSource().getConnection(this.username, this.password) :_						obtainTargetDataSource().getConnection()___				_				checkDefaultConnectionProperties(this.target)___				_				if (this.readOnly) {_					try {_						this.target.setReadOnly(true)__					}_					catch (Exception ex) {_						_						logger.debug("Could not set JDBC Connection read-only", ex)__					}_				}_				if (this.transactionIsolation != null &&_						!this.transactionIsolation.equals(defaultTransactionIsolation())) {_					this.target.setTransactionIsolation(this.transactionIsolation)__				}_				if (this.autoCommit != null && this.autoCommit != this.target.getAutoCommit()) {_					this.target.setAutoCommit(this.autoCommit)__				}_			}__			else {_				_				if (logger.isTraceEnabled()) {_					logger.trace("Using existing database connection for operation '" + operation.getName() + "'")__				}_			}__			return this.target__		};return,the,target,connection,fetching,it,and,initializing,it,if,necessary;private,connection,get,target,connection,method,operation,throws,sqlexception,if,this,target,null,if,logger,is,trace,enabled,logger,trace,connecting,to,database,for,operation,operation,get,name,this,target,this,username,null,obtain,target,data,source,get,connection,this,username,this,password,obtain,target,data,source,get,connection,check,default,connection,properties,this,target,if,this,read,only,try,this,target,set,read,only,true,catch,exception,ex,logger,debug,could,not,set,jdbc,connection,read,only,ex,if,this,transaction,isolation,null,this,transaction,isolation,equals,default,transaction,isolation,this,target,set,transaction,isolation,this,transaction,isolation,if,this,auto,commit,null,this,auto,commit,this,target,get,auto,commit,this,target,set,auto,commit,this,auto,commit,else,if,logger,is,trace,enabled,logger,trace,using,existing,database,connection,for,operation,operation,get,name,return,this,target
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1328020251;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1356735495;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1357119239;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1362408075;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1368482696;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1385412762;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1476521730;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1487178248;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1495868221;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1496837955;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1498780456;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1530174524;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1532091916;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1535712004;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection() throws SQLException;1537187216;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection() throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler())__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1328020251;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1356735495;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1357119239;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1362408075;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1368482696;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1385412762;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1476521730;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1487178248;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1495868221;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1496837955;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1498780456;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1530174524;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1532091916;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1535712004;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1537187216;Return a Connection handle that lazily fetches an actual JDBC Connection_when asked for a Statement (or PreparedStatement or CallableStatement)._<p>The returned Connection handle implements the ConnectionProxy interface,_allowing to retrieve the underlying target Connection._@param username the per-Connection username_@param password the per-Connection password_@return a lazy Connection handle_@see ConnectionProxy#getTargetConnection();@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return (Connection) Proxy.newProxyInstance(_				ConnectionProxy.class.getClassLoader(),_				new Class<?>[] {ConnectionProxy.class},_				new LazyConnectionInvocationHandler(username, password))__	};return,a,connection,handle,that,lazily,fetches,an,actual,jdbc,connection,when,asked,for,a,statement,or,prepared,statement,or,callable,statement,p,the,returned,connection,handle,implements,the,connection,proxy,interface,allowing,to,retrieve,the,underlying,target,connection,param,username,the,per,connection,username,param,password,the,per,connection,password,return,a,lazy,connection,handle,see,connection,proxy,get,target,connection;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,connection,proxy,new,proxy,instance,connection,proxy,class,get,class,loader,new,class,connection,proxy,class,new,lazy,connection,invocation,handler,username,password
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1328020251;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1356735495;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1357119239;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1362408075;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1368482696;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1385412762;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1476521730;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1487178248;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1495868221;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> protected Integer defaultTransactionIsolation();1496837955;Expose the default transaction isolation value.;protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1328020251;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1356735495;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1357119239;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1362408075;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1368482696;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1385412762;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1476521730;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1487178248;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1495868221;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1496837955;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1498780456;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1530174524;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1532091916;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1535712004;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> LazyConnectionInvocationHandler -> private boolean hasTargetConnection();1537187216;Return whether the proxy currently holds a target Connection.;private boolean hasTargetConnection() {_			return (this.target != null)__		};return,whether,the,proxy,currently,holds,a,target,connection;private,boolean,has,target,connection,return,this,target,null
LazyConnectionDataSourceProxy -> @Nullable 	protected Integer defaultTransactionIsolation();1498780456;Expose the default transaction isolation value.;@Nullable_	protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;nullable,protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> @Nullable 	protected Integer defaultTransactionIsolation();1530174524;Expose the default transaction isolation value.;@Nullable_	protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;nullable,protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> @Nullable 	protected Integer defaultTransactionIsolation();1532091916;Expose the default transaction isolation value.;@Nullable_	protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;nullable,protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> @Nullable 	protected Integer defaultTransactionIsolation();1535712004;Expose the default transaction isolation value.;@Nullable_	protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;nullable,protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
LazyConnectionDataSourceProxy -> @Nullable 	protected Integer defaultTransactionIsolation();1537187216;Expose the default transaction isolation value.;@Nullable_	protected Integer defaultTransactionIsolation() {_		return this.defaultTransactionIsolation__	};expose,the,default,transaction,isolation,value;nullable,protected,integer,default,transaction,isolation,return,this,default,transaction,isolation
