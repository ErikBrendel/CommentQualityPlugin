commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the underlying ResultSet  * (usually a {@code javax.sql.rowset.CachedRowSet}).  * @see javax.sql.rowset.CachedRowSet  */ ;/**  * Return the underlying ResultSet  * (usually a {@code javax.sql.rowset.CachedRowSet}).  * @see javax.sql.rowset.CachedRowSet  */ public final ResultSet getResultSet() {     return this.resultSet. }
true;public,final;0;4;/**  * @see java.sql.ResultSetMetaData#getCatalogName(int)  */ ;/**  * @see java.sql.ResultSetMetaData#getCatalogName(int)  */ @Override public final SqlRowSetMetaData getMetaData() {     return this.rowSetMetaData. }
true;public;1;15;/**  * @see java.sql.ResultSet#findColumn(String)  */ ;/**  * @see java.sql.ResultSet#findColumn(String)  */ @Override public int findColumn(String columnLabel) throws InvalidResultSetAccessException {     Integer columnIndex = this.columnLabelMap.get(columnLabel).     if (columnIndex != null) {         return columnIndex.     } else {         try {             return this.resultSet.findColumn(columnLabel).         } catch (SQLException se) {             throw new InvalidResultSetAccessException(se).         }     } }
true;public;1;9;/**  * @see java.sql.ResultSet#getBigDecimal(int)  */ ;// RowSet methods for extracting data values /**  * @see java.sql.ResultSet#getBigDecimal(int)  */ @Override public BigDecimal getBigDecimal(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getBigDecimal(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getBigDecimal(String)  */ ;/**  * @see java.sql.ResultSet#getBigDecimal(String)  */ @Override public BigDecimal getBigDecimal(String columnLabel) throws InvalidResultSetAccessException {     return getBigDecimal(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getBoolean(int)  */ ;/**  * @see java.sql.ResultSet#getBoolean(int)  */ @Override public boolean getBoolean(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getBoolean(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getBoolean(String)  */ ;/**  * @see java.sql.ResultSet#getBoolean(String)  */ @Override public boolean getBoolean(String columnLabel) throws InvalidResultSetAccessException {     return getBoolean(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getByte(int)  */ ;/**  * @see java.sql.ResultSet#getByte(int)  */ @Override public byte getByte(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getByte(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getByte(String)  */ ;/**  * @see java.sql.ResultSet#getByte(String)  */ @Override public byte getByte(String columnLabel) throws InvalidResultSetAccessException {     return getByte(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getDate(int)  */ ;/**  * @see java.sql.ResultSet#getDate(int)  */ @Override public Date getDate(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getDate(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getDate(String)  */ ;/**  * @see java.sql.ResultSet#getDate(String)  */ @Override public Date getDate(String columnLabel) throws InvalidResultSetAccessException {     return getDate(findColumn(columnLabel)). }
true;public;2;9;/**  * @see java.sql.ResultSet#getDate(int, Calendar)  */ ;/**  * @see java.sql.ResultSet#getDate(int, Calendar)  */ @Override public Date getDate(int columnIndex, Calendar cal) throws InvalidResultSetAccessException {     try {         return this.resultSet.getDate(columnIndex, cal).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;2;4;/**  * @see java.sql.ResultSet#getDate(String, Calendar)  */ ;/**  * @see java.sql.ResultSet#getDate(String, Calendar)  */ @Override public Date getDate(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {     return getDate(findColumn(columnLabel), cal). }
true;public;1;9;/**  * @see java.sql.ResultSet#getDouble(int)  */ ;/**  * @see java.sql.ResultSet#getDouble(int)  */ @Override public double getDouble(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getDouble(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getDouble(String)  */ ;/**  * @see java.sql.ResultSet#getDouble(String)  */ @Override public double getDouble(String columnLabel) throws InvalidResultSetAccessException {     return getDouble(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getFloat(int)  */ ;/**  * @see java.sql.ResultSet#getFloat(int)  */ @Override public float getFloat(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getFloat(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getFloat(String)  */ ;/**  * @see java.sql.ResultSet#getFloat(String)  */ @Override public float getFloat(String columnLabel) throws InvalidResultSetAccessException {     return getFloat(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getInt(int)  */ ;/**  * @see java.sql.ResultSet#getInt(int)  */ @Override public int getInt(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getInt(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getInt(String)  */ ;/**  * @see java.sql.ResultSet#getInt(String)  */ @Override public int getInt(String columnLabel) throws InvalidResultSetAccessException {     return getInt(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getLong(int)  */ ;/**  * @see java.sql.ResultSet#getLong(int)  */ @Override public long getLong(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getLong(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getLong(String)  */ ;/**  * @see java.sql.ResultSet#getLong(String)  */ @Override public long getLong(String columnLabel) throws InvalidResultSetAccessException {     return getLong(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getNString(int)  */ ;/**  * @see java.sql.ResultSet#getNString(int)  */ @Override public String getNString(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getNString(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getNString(String)  */ ;/**  * @see java.sql.ResultSet#getNString(String)  */ @Override public String getNString(String columnLabel) throws InvalidResultSetAccessException {     return getNString(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getObject(int)  */ ;/**  * @see java.sql.ResultSet#getObject(int)  */ @Override public Object getObject(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getObject(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getObject(String)  */ ;/**  * @see java.sql.ResultSet#getObject(String)  */ @Override public Object getObject(String columnLabel) throws InvalidResultSetAccessException {     return getObject(findColumn(columnLabel)). }
true;public;2;9;/**  * @see java.sql.ResultSet#getObject(int, Map)  */ ;/**  * @see java.sql.ResultSet#getObject(int, Map)  */ @Override public Object getObject(int columnIndex, Map<String, Class<?>> map) throws InvalidResultSetAccessException {     try {         return this.resultSet.getObject(columnIndex, map).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;2;4;/**  * @see java.sql.ResultSet#getObject(String, Map)  */ ;/**  * @see java.sql.ResultSet#getObject(String, Map)  */ @Override public Object getObject(String columnLabel, Map<String, Class<?>> map) throws InvalidResultSetAccessException {     return getObject(findColumn(columnLabel), map). }
true;public;2;9;/**  * @see java.sql.ResultSet#getObject(int, Class)  */ ;/**  * @see java.sql.ResultSet#getObject(int, Class)  */ @Override public <T> T getObject(int columnIndex, Class<T> type) throws InvalidResultSetAccessException {     try {         return this.resultSet.getObject(columnIndex, type).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;2;4;/**  * @see java.sql.ResultSet#getObject(String, Class)  */ ;/**  * @see java.sql.ResultSet#getObject(String, Class)  */ @Override public <T> T getObject(String columnLabel, Class<T> type) throws InvalidResultSetAccessException {     return getObject(findColumn(columnLabel), type). }
true;public;1;9;/**  * @see java.sql.ResultSet#getShort(int)  */ ;/**  * @see java.sql.ResultSet#getShort(int)  */ @Override public short getShort(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getShort(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getShort(String)  */ ;/**  * @see java.sql.ResultSet#getShort(String)  */ @Override public short getShort(String columnLabel) throws InvalidResultSetAccessException {     return getShort(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getString(int)  */ ;/**  * @see java.sql.ResultSet#getString(int)  */ @Override public String getString(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getString(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getString(String)  */ ;/**  * @see java.sql.ResultSet#getString(String)  */ @Override public String getString(String columnLabel) throws InvalidResultSetAccessException {     return getString(findColumn(columnLabel)). }
true;public;1;9;/**  * @see java.sql.ResultSet#getTime(int)  */ ;/**  * @see java.sql.ResultSet#getTime(int)  */ @Override public Time getTime(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getTime(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getTime(String)  */ ;/**  * @see java.sql.ResultSet#getTime(String)  */ @Override public Time getTime(String columnLabel) throws InvalidResultSetAccessException {     return getTime(findColumn(columnLabel)). }
true;public;2;9;/**  * @see java.sql.ResultSet#getTime(int, Calendar)  */ ;/**  * @see java.sql.ResultSet#getTime(int, Calendar)  */ @Override public Time getTime(int columnIndex, Calendar cal) throws InvalidResultSetAccessException {     try {         return this.resultSet.getTime(columnIndex, cal).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;2;4;/**  * @see java.sql.ResultSet#getTime(String, Calendar)  */ ;/**  * @see java.sql.ResultSet#getTime(String, Calendar)  */ @Override public Time getTime(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {     return getTime(findColumn(columnLabel), cal). }
true;public;1;9;/**  * @see java.sql.ResultSet#getTimestamp(int)  */ ;/**  * @see java.sql.ResultSet#getTimestamp(int)  */ @Override public Timestamp getTimestamp(int columnIndex) throws InvalidResultSetAccessException {     try {         return this.resultSet.getTimestamp(columnIndex).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;4;/**  * @see java.sql.ResultSet#getTimestamp(String)  */ ;/**  * @see java.sql.ResultSet#getTimestamp(String)  */ @Override public Timestamp getTimestamp(String columnLabel) throws InvalidResultSetAccessException {     return getTimestamp(findColumn(columnLabel)). }
true;public;2;9;/**  * @see java.sql.ResultSet#getTimestamp(int, Calendar)  */ ;/**  * @see java.sql.ResultSet#getTimestamp(int, Calendar)  */ @Override public Timestamp getTimestamp(int columnIndex, Calendar cal) throws InvalidResultSetAccessException {     try {         return this.resultSet.getTimestamp(columnIndex, cal).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;2;4;/**  * @see java.sql.ResultSet#getTimestamp(String, Calendar)  */ ;/**  * @see java.sql.ResultSet#getTimestamp(String, Calendar)  */ @Override public Timestamp getTimestamp(String columnLabel, Calendar cal) throws InvalidResultSetAccessException {     return getTimestamp(findColumn(columnLabel), cal). }
true;public;1;9;/**  * @see java.sql.ResultSet#absolute(int)  */ ;// RowSet navigation methods /**  * @see java.sql.ResultSet#absolute(int)  */ @Override public boolean absolute(int row) throws InvalidResultSetAccessException {     try {         return this.resultSet.absolute(row).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#afterLast()  */ ;/**  * @see java.sql.ResultSet#afterLast()  */ @Override public void afterLast() throws InvalidResultSetAccessException {     try {         this.resultSet.afterLast().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#beforeFirst()  */ ;/**  * @see java.sql.ResultSet#beforeFirst()  */ @Override public void beforeFirst() throws InvalidResultSetAccessException {     try {         this.resultSet.beforeFirst().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#first()  */ ;/**  * @see java.sql.ResultSet#first()  */ @Override public boolean first() throws InvalidResultSetAccessException {     try {         return this.resultSet.first().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#getRow()  */ ;/**  * @see java.sql.ResultSet#getRow()  */ @Override public int getRow() throws InvalidResultSetAccessException {     try {         return this.resultSet.getRow().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#isAfterLast()  */ ;/**  * @see java.sql.ResultSet#isAfterLast()  */ @Override public boolean isAfterLast() throws InvalidResultSetAccessException {     try {         return this.resultSet.isAfterLast().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#isBeforeFirst()  */ ;/**  * @see java.sql.ResultSet#isBeforeFirst()  */ @Override public boolean isBeforeFirst() throws InvalidResultSetAccessException {     try {         return this.resultSet.isBeforeFirst().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#isFirst()  */ ;/**  * @see java.sql.ResultSet#isFirst()  */ @Override public boolean isFirst() throws InvalidResultSetAccessException {     try {         return this.resultSet.isFirst().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#isLast()  */ ;/**  * @see java.sql.ResultSet#isLast()  */ @Override public boolean isLast() throws InvalidResultSetAccessException {     try {         return this.resultSet.isLast().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#last()  */ ;/**  * @see java.sql.ResultSet#last()  */ @Override public boolean last() throws InvalidResultSetAccessException {     try {         return this.resultSet.last().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#next()  */ ;/**  * @see java.sql.ResultSet#next()  */ @Override public boolean next() throws InvalidResultSetAccessException {     try {         return this.resultSet.next().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#previous()  */ ;/**  * @see java.sql.ResultSet#previous()  */ @Override public boolean previous() throws InvalidResultSetAccessException {     try {         return this.resultSet.previous().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;1;9;/**  * @see java.sql.ResultSet#relative(int)  */ ;/**  * @see java.sql.ResultSet#relative(int)  */ @Override public boolean relative(int rows) throws InvalidResultSetAccessException {     try {         return this.resultSet.relative(rows).     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
true;public;0;9;/**  * @see java.sql.ResultSet#wasNull()  */ ;/**  * @see java.sql.ResultSet#wasNull()  */ @Override public boolean wasNull() throws InvalidResultSetAccessException {     try {         return this.resultSet.wasNull().     } catch (SQLException se) {         throw new InvalidResultSetAccessException(se).     } }
