# id;timestamp;commentText;codeText;commentWords;codeWords
BatchSqlUpdate -> public void reset();1328020251;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1356735495;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1357119239;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1368482696;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1460400578;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1467730834;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1496837955;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1518260959;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1530174524;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1531945062;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> public void reset();1533725446;Reset the statement parameter queue, the rows affected cache,_and the execution count.;public void reset() {_		this.parameterQueue.clear()__		this.rowsAffected.clear()__	};reset,the,statement,parameter,queue,the,rows,affected,cache,and,the,execution,count;public,void,reset,this,parameter,queue,clear,this,rows,affected,clear
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1328020251;Overridden version of <code>update</code> that adds the given statement_parameters to the queue rather than executing them immediately._All other <code>update</code> methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call <code>flush</code> to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call <code>flush</code> to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,code,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,code,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,code,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,code,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1356735495;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1357119239;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1368482696;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1460400578;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1467730834;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1496837955;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1518260959;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1530174524;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1531945062;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> @Override 	public int update(Object... params) throws DataAccessException;1533725446;Overridden version of {@code update} that adds the given statement_parameters to the queue rather than executing them immediately._All other {@code update} methods of the SqlUpdate base class go_through this method and will thus behave similarly._<p>You need to call {@code flush} to actually execute the batch._If the specified batch size is reached, an implicit flush will happen__you still need to finally call {@code flush} to flush all statements._@param params array of parameter objects_@return the number of rows affected by the update (always -1,_meaning "not applicable", as the statement is not actually_executed by this method)_@see #flush;@Override_	public int update(Object... params) throws DataAccessException {_		validateParameters(params)__		this.parameterQueue.add(params.clone())___		if (this.parameterQueue.size() == this.batchSize) {_			if (logger.isDebugEnabled()) {_				logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize)__			}_			flush()__		}__		return -1__	};overridden,version,of,code,update,that,adds,the,given,statement,parameters,to,the,queue,rather,than,executing,them,immediately,all,other,code,update,methods,of,the,sql,update,base,class,go,through,this,method,and,will,thus,behave,similarly,p,you,need,to,call,code,flush,to,actually,execute,the,batch,if,the,specified,batch,size,is,reached,an,implicit,flush,will,happen,you,still,need,to,finally,call,code,flush,to,flush,all,statements,param,params,array,of,parameter,objects,return,the,number,of,rows,affected,by,the,update,always,1,meaning,not,applicable,as,the,statement,is,not,actually,executed,by,this,method,see,flush;override,public,int,update,object,params,throws,data,access,exception,validate,parameters,params,this,parameter,queue,add,params,clone,if,this,parameter,queue,size,this,batch,size,if,logger,is,debug,enabled,logger,debug,triggering,auto,flush,because,queue,reached,batch,size,of,this,batch,size,flush,return,1
BatchSqlUpdate -> public BatchSqlUpdate();1328020251;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1356735495;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1357119239;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1368482696;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1460400578;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1467730834;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1496837955;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1518260959;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1530174524;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1531945062;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public BatchSqlUpdate();1533725446;Constructor to allow use as a JavaBean. DataSource and SQL_must be supplied before compilation and use._@see #setDataSource_@see #setSql;public BatchSqlUpdate() {_		super()__	};constructor,to,allow,use,as,a,java,bean,data,source,and,sql,must,be,supplied,before,compilation,and,use,see,set,data,source,see,set,sql;public,batch,sql,update,super
BatchSqlUpdate -> public int[] flush();1328020251;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}_		_		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					public int getBatchSize() {_						return parameterQueue.size()__					}_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,public,int,get,batch,size,return,parameter,queue,size,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1356735495;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1357119239;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					public int getBatchSize() {_						return parameterQueue.size()__					}_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,public,int,get,batch,size,return,parameter,queue,size,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1368482696;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1460400578;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1467730834;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				getSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,get,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1496837955;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				resolveSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,resolve,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1518260959;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				resolveSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,resolve,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1530174524;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				resolveSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,resolve,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1531945062;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				resolveSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,resolve,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public int[] flush();1533725446;Trigger any queued update operations to be added as a final batch._@return an array of the number of rows affected by each statement;public int[] flush() {_		if (this.parameterQueue.isEmpty()) {_			return new int[0]__		}__		int[] rowsAffected = getJdbcTemplate().batchUpdate(_				resolveSql(),_				new BatchPreparedStatementSetter() {_					@Override_					public int getBatchSize() {_						return parameterQueue.size()__					}_					@Override_					public void setValues(PreparedStatement ps, int index) throws SQLException {_						Object[] params = parameterQueue.removeFirst()__						newPreparedStatementSetter(params).setValues(ps)__					}_				})___		for (int rowCount : rowsAffected) {_			checkRowsAffected(rowCount)__			if (this.trackRowsAffected) {_				this.rowsAffected.add(rowCount)__			}_		}__		return rowsAffected__	};trigger,any,queued,update,operations,to,be,added,as,a,final,batch,return,an,array,of,the,number,of,rows,affected,by,each,statement;public,int,flush,if,this,parameter,queue,is,empty,return,new,int,0,int,rows,affected,get,jdbc,template,batch,update,resolve,sql,new,batch,prepared,statement,setter,override,public,int,get,batch,size,return,parameter,queue,size,override,public,void,set,values,prepared,statement,ps,int,index,throws,sqlexception,object,params,parameter,queue,remove,first,new,prepared,statement,setter,params,set,values,ps,for,int,row,count,rows,affected,check,rows,affected,row,count,if,this,track,rows,affected,this,rows,affected,add,row,count,return,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1328020251;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1356735495;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1357119239;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1368482696;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1460400578;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1467730834;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1496837955;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1518260959;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1530174524;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1531945062;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public void setTrackRowsAffected(boolean trackRowsAffected);1533725446;Set whether to track the rows affected by batch updates performed_by this operation object._<p>Default is "true". Turn this off to save the memory needed for_the list of row counts._@see #getRowsAffected();public void setTrackRowsAffected(boolean trackRowsAffected) {_		this.trackRowsAffected = trackRowsAffected__	};set,whether,to,track,the,rows,affected,by,batch,updates,performed,by,this,operation,object,p,default,is,true,turn,this,off,to,save,the,memory,needed,for,the,list,of,row,counts,see,get,rows,affected;public,void,set,track,rows,affected,boolean,track,rows,affected,this,track,rows,affected,track,rows,affected
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1328020251;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1356735495;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1357119239;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1368482696;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1460400578;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1467730834;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1496837955;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1518260959;Construct an update object with a given DataSource and SQL._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1530174524;Construct an update object with a given DataSource and SQL._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1531945062;Construct an update object with a given DataSource and SQL._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql);1533725446;Construct an update object with a given DataSource and SQL._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute;public BatchSqlUpdate(DataSource ds, String sql) {_		super(ds, sql)__	};construct,an,update,object,with,a,given,data,source,and,sql,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute;public,batch,sql,update,data,source,ds,string,sql,super,ds,sql
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1328020251;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_<code>java.sql.Types</code> class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,code,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1356735495;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1357119239;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1368482696;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1460400578;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1467730834;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1496837955;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1518260959;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1530174524;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1531945062;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize);1533725446;Construct an update object with a given DataSource, SQL,_anonymous parameters and specifying the maximum number of rows_that may be affected._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param batchSize the number of statements that will trigger_an automatic intermediate flush_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types, int batchSize) {_		super(ds, sql, types)__		setBatchSize(batchSize)__	};construct,an,update,object,with,a,given,data,source,sql,anonymous,parameters,and,specifying,the,maximum,number,of,rows,that,may,be,affected,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,batch,size,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,int,batch,size,super,ds,sql,types,set,batch,size,batch,size
BatchSqlUpdate -> public int getExecutionCount();1328020251;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1356735495;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1357119239;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1368482696;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1460400578;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1467730834;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1496837955;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1518260959;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1530174524;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1531945062;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public int getExecutionCount();1533725446;Return the number of already executed statements.;public int getExecutionCount() {_		return this.rowsAffected.size()__	};return,the,number,of,already,executed,statements;public,int,get,execution,count,return,this,rows,affected,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1328020251;Set the number of statements that will trigger an automatic intermediate_flush. <code>update</code> calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_<code>flush</code> call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,code,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,code,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1356735495;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1357119239;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1368482696;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1460400578;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1467730834;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1496837955;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1518260959;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1530174524;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1531945062;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public void setBatchSize(int batchSize);1533725446;Set the number of statements that will trigger an automatic intermediate_flush. {@code update} calls or the given statement parameters will_be queued until the batch size is met, at which point it will empty the_queue and execute the batch._<p>You can also flush already queued statements with an explicit_{@code flush} call. Note that you need to this after queueing_all parameters to guarantee that all statements have been flushed.;public void setBatchSize(int batchSize) {_		this.batchSize = batchSize__	};set,the,number,of,statements,that,will,trigger,an,automatic,intermediate,flush,code,update,calls,or,the,given,statement,parameters,will,be,queued,until,the,batch,size,is,met,at,which,point,it,will,empty,the,queue,and,execute,the,batch,p,you,can,also,flush,already,queued,statements,with,an,explicit,code,flush,call,note,that,you,need,to,this,after,queueing,all,parameters,to,guarantee,that,all,statements,have,been,flushed;public,void,set,batch,size,int,batch,size,this,batch,size,batch,size
BatchSqlUpdate -> public int getQueueCount();1328020251;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1356735495;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1357119239;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1368482696;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1460400578;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1467730834;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1496837955;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1518260959;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1530174524;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1531945062;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> public int getQueueCount();1533725446;Return the current number of statements or statement parameters_in the queue.;public int getQueueCount() {_		return this.parameterQueue.size()__	};return,the,current,number,of,statements,or,statement,parameters,in,the,queue;public,int,get,queue,count,return,this,parameter,queue,size
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1328020251;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1356735495;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1357119239;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1368482696;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1460400578;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1467730834;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1496837955;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1518260959;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1530174524;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1531945062;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> @Override 	protected boolean supportsLobParameters();1533725446;BatchSqlUpdate does not support BLOB or CLOB parameters.;@Override_	protected boolean supportsLobParameters() {_		return false__	};batch,sql,update,does,not,support,blob,or,clob,parameters;override,protected,boolean,supports,lob,parameters,return,false
BatchSqlUpdate -> public int[] getRowsAffected();1328020251;Return the number of affected rows for all already executed statements._Accumulates all of <code>flush</code>'s return values until_<code>reset</code> is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,code,s,return,values,until,code,reset,code,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1356735495;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1357119239;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1368482696;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1460400578;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1467730834;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1496837955;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1518260959;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1530174524;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1531945062;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public int[] getRowsAffected();1533725446;Return the number of affected rows for all already executed statements._Accumulates all of {@code flush}'s return values until_{@code reset} is invoked._@return an array of the number of rows affected by each statement_@see #reset;public int[] getRowsAffected() {_		int[] result = new int[this.rowsAffected.size()]__		int i = 0__		for (Iterator<Integer> it = this.rowsAffected.iterator()_ it.hasNext()_ i++) {_			result[i] = it.next()__		}_		return result__	};return,the,number,of,affected,rows,for,all,already,executed,statements,accumulates,all,of,code,flush,s,return,values,until,code,reset,is,invoked,return,an,array,of,the,number,of,rows,affected,by,each,statement,see,reset;public,int,get,rows,affected,int,result,new,int,this,rows,affected,size,int,i,0,for,iterator,integer,it,this,rows,affected,iterator,it,has,next,i,result,i,it,next,return,result
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1328020251;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_<code>java.sql.Types</code> class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,code,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1356735495;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1357119239;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1368482696;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1460400578;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1467730834;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1496837955;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1518260959;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds DataSource to use to obtain connections_@param sql SQL statement to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,data,source,to,use,to,obtain,connections,param,sql,sql,statement,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1530174524;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1531945062;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
BatchSqlUpdate -> public BatchSqlUpdate(DataSource ds, String sql, int[] types);1533725446;Construct an update object with a given DataSource, SQL_and anonymous parameters._@param ds the DataSource to use to obtain connections_@param sql the SQL statement to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public BatchSqlUpdate(DataSource ds, String sql, int[] types) {_		super(ds, sql, types)__	};construct,an,update,object,with,a,given,data,source,sql,and,anonymous,parameters,param,ds,the,data,source,to,use,to,obtain,connections,param,sql,the,sql,statement,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,batch,sql,update,data,source,ds,string,sql,int,types,super,ds,sql,types
