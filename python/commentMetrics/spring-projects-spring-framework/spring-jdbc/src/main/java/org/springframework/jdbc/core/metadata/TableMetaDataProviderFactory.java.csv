commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;40;/**  * Create a {@link TableMetaDataProvider} based on the database meta-data.  * @param dataSource used to retrieve meta-data  * @param context the class that holds configuration and meta-data  * @return instance of the TableMetaDataProvider implementation to be used  */ ;/**  * Create a {@link TableMetaDataProvider} based on the database meta-data.  * @param dataSource used to retrieve meta-data  * @param context the class that holds configuration and meta-data  * @return instance of the TableMetaDataProvider implementation to be used  */ public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {     try {         return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {             String databaseProductName = JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName()).             boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData().             TableMetaDataProvider provider.             if ("Oracle".equals(databaseProductName)) {                 provider = new OracleTableMetaDataProvider(databaseMetaData, context.isOverrideIncludeSynonymsDefault()).             } else if ("PostgreSQL".equals(databaseProductName)) {                 provider = new PostgresTableMetaDataProvider(databaseMetaData).             } else if ("Apache Derby".equals(databaseProductName)) {                 provider = new DerbyTableMetaDataProvider(databaseMetaData).             } else if ("HSQL Database Engine".equals(databaseProductName)) {                 provider = new HsqlTableMetaDataProvider(databaseMetaData).             } else {                 provider = new GenericTableMetaDataProvider(databaseMetaData).             }             if (logger.isDebugEnabled()) {                 logger.debug("Using " + provider.getClass().getSimpleName()).             }             provider.initializeWithMetaData(databaseMetaData).             if (accessTableColumnMetaData) {                 provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(), context.getSchemaName(), context.getTableName()).             }             return provider.         }).     } catch (MetaDataAccessException ex) {         throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex).     } }
