# id;timestamp;commentText;codeText;commentWords;codeWords
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1328020251;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1356735495;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1357119239;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1368482696;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1429214043;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1431375743;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		return createMetaDataProvider(dataSource, context, null)__	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,return,create,meta,data,provider,data,source,context,null
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1487178248;Create a TableMetaDataProvider based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						@Override_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1496837955;Create a TableMetaDataProvider based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			TableMetaDataProvider result = (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(databaseMetaData,_							context.isOverrideIncludeSynonymsDefault())__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_							context.getSchemaName(), context.getTableName())__				}_				return provider__			})__			Assert.state(result != null, "No TableMetaDataProvider")__			return result__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,table,meta,data,provider,result,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,assert,state,result,null,no,table,meta,data,provider,return,result,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1506097334;Create a TableMetaDataProvider based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			TableMetaDataProvider result = (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(databaseMetaData,_							context.isOverrideIncludeSynonymsDefault())__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_							context.getSchemaName(), context.getTableName())__				}_				return provider__			})__			return result__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,table,meta,data,provider,result,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,return,result,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1518615840;Create a TableMetaDataProvider based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider__				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(databaseMetaData,_							context.isOverrideIncludeSynonymsDefault())__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getTableName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1520339775;Create a TableMetaDataProvider based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider___				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(_							databaseMetaData, context.isOverrideIncludeSynonymsDefault())__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getTableName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1520438949;Create a {@link TableMetaDataProvider} based on the database metadata._@param dataSource used to retrieve metadata_@param context the class that holds configuration and metadata_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider___				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(_							databaseMetaData, context.isOverrideIncludeSynonymsDefault())__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getTableName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,link,table,meta,data,provider,based,on,the,database,metadata,param,data,source,used,to,retrieve,metadata,param,context,the,class,that,holds,configuration,and,metadata,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1521457504;Create a {@link TableMetaDataProvider} based on the database meta-data._@param dataSource used to retrieve meta-data_@param context the class that holds configuration and meta-data_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider___				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(_							databaseMetaData, context.isOverrideIncludeSynonymsDefault())__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getTableName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,table,meta,data,provider,based,on,the,database,meta,data,param,data,source,used,to,retrieve,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context);1530174524;Create a {@link TableMetaDataProvider} based on the database meta-data._@param dataSource used to retrieve meta-data_@param context the class that holds configuration and meta-data_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, TableMetaDataContext context) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {_				String databaseProductName =_						JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__				boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__				TableMetaDataProvider provider___				if ("Oracle".equals(databaseProductName)) {_					provider = new OracleTableMetaDataProvider(_							databaseMetaData, context.isOverrideIncludeSynonymsDefault())__				}_				else if ("PostgreSQL".equals(databaseProductName)) {_					provider = new PostgresTableMetaDataProvider(databaseMetaData)__				}_				else if ("Apache Derby".equals(databaseProductName)) {_					provider = new DerbyTableMetaDataProvider(databaseMetaData)__				}_				else if ("HSQL Database Engine".equals(databaseProductName)) {_					provider = new HsqlTableMetaDataProvider(databaseMetaData)__				}_				else {_					provider = new GenericTableMetaDataProvider(databaseMetaData)__				}__				if (logger.isDebugEnabled()) {_					logger.debug("Using " + provider.getClass().getSimpleName())__				}_				provider.initializeWithMetaData(databaseMetaData)__				if (accessTableColumnMetaData) {_					provider.initializeWithTableColumnMetaData(databaseMetaData,_							context.getCatalogName(), context.getSchemaName(), context.getTableName())__				}_				return provider__			})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database meta-data", ex)__		}_	};create,a,link,table,meta,data,provider,based,on,the,database,meta,data,param,data,source,used,to,retrieve,meta,data,param,context,the,class,that,holds,configuration,and,meta,data,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,table,meta,data,context,context,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,database,meta,data,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,meta,data,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1328020251;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1356735495;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						@Override_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1357119239;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1368482696;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						@Override_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1429214043;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						@Override_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
TableMetaDataProviderFactory -> public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource, 				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor);1431375743;Create a TableMetaDataProvider based on the database metedata_@param dataSource used to retrieve metedata_@param context the class that holds configuration and metedata_@param nativeJdbcExtractor the NativeJdbcExtractor to be used_@return instance of the TableMetaDataProvider implementation to be used;public static TableMetaDataProvider createMetaDataProvider(DataSource dataSource,_				final TableMetaDataContext context, final NativeJdbcExtractor nativeJdbcExtractor) {_		try {_			return (TableMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource,_					new DatabaseMetaDataCallback() {_						@Override_						public Object processMetaData(DatabaseMetaData databaseMetaData) throws SQLException {_							String databaseProductName =_									JdbcUtils.commonDatabaseName(databaseMetaData.getDatabaseProductName())__							boolean accessTableColumnMetaData = context.isAccessTableColumnMetaData()__							TableMetaDataProvider provider__							if ("Oracle".equals(databaseProductName)) {_								provider = new OracleTableMetaDataProvider(databaseMetaData,_										context.isOverrideIncludeSynonymsDefault())__							}_							else if ("HSQL Database Engine".equals(databaseProductName)) {_								provider = new HsqlTableMetaDataProvider(databaseMetaData)__							}_							else if ("PostgreSQL".equals(databaseProductName)) {_								provider = new PostgresTableMetaDataProvider(databaseMetaData)__							}_							else if ("Apache Derby".equals(databaseProductName)) {_								provider = new DerbyTableMetaDataProvider(databaseMetaData)__							}_							else {_								provider = new GenericTableMetaDataProvider(databaseMetaData)__							}_							if (nativeJdbcExtractor != null) {_								provider.setNativeJdbcExtractor(nativeJdbcExtractor)__							}_							if (logger.isDebugEnabled()) {_								logger.debug("Using " + provider.getClass().getSimpleName())__							}_							provider.initializeWithMetaData(databaseMetaData)__							if (accessTableColumnMetaData) {_								provider.initializeWithTableColumnMetaData(databaseMetaData, context.getCatalogName(),_										context.getSchemaName(), context.getTableName())__							}_							return provider__						}_					})__		}_		catch (MetaDataAccessException ex) {_			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex)__		}_	};create,a,table,meta,data,provider,based,on,the,database,metedata,param,data,source,used,to,retrieve,metedata,param,context,the,class,that,holds,configuration,and,metedata,param,native,jdbc,extractor,the,native,jdbc,extractor,to,be,used,return,instance,of,the,table,meta,data,provider,implementation,to,be,used;public,static,table,meta,data,provider,create,meta,data,provider,data,source,data,source,final,table,meta,data,context,context,final,native,jdbc,extractor,native,jdbc,extractor,try,return,table,meta,data,provider,jdbc,utils,extract,database,meta,data,data,source,new,database,meta,data,callback,override,public,object,process,meta,data,database,meta,data,database,meta,data,throws,sqlexception,string,database,product,name,jdbc,utils,common,database,name,database,meta,data,get,database,product,name,boolean,access,table,column,meta,data,context,is,access,table,column,meta,data,table,meta,data,provider,provider,if,oracle,equals,database,product,name,provider,new,oracle,table,meta,data,provider,database,meta,data,context,is,override,include,synonyms,default,else,if,hsql,database,engine,equals,database,product,name,provider,new,hsql,table,meta,data,provider,database,meta,data,else,if,postgre,sql,equals,database,product,name,provider,new,postgres,table,meta,data,provider,database,meta,data,else,if,apache,derby,equals,database,product,name,provider,new,derby,table,meta,data,provider,database,meta,data,else,provider,new,generic,table,meta,data,provider,database,meta,data,if,native,jdbc,extractor,null,provider,set,native,jdbc,extractor,native,jdbc,extractor,if,logger,is,debug,enabled,logger,debug,using,provider,get,class,get,simple,name,provider,initialize,with,meta,data,database,meta,data,if,access,table,column,meta,data,provider,initialize,with,table,column,meta,data,database,meta,data,context,get,catalog,name,context,get,schema,name,context,get,table,name,return,provider,catch,meta,data,access,exception,ex,throw,new,data,access,resource,failure,exception,error,retrieving,database,metadata,ex
